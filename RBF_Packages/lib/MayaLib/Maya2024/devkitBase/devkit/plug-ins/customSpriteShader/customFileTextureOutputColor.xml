<!--
===========================================================================
Copyright 2016 Autodesk, Inc. All rights reserved.

Use of this software is subject to the terms of the Autodesk license
agreement provided at the time of installation or download, or which
otherwise accompanies this software in either electronic or hard copy form.
===========================================================================
-->
<fragment  uiName="customFileTextureOutputColor" name="customFileTextureOutputColor" type="plumbing" class="ShadeFragment" version="1.0" feature_level="0" >
    <description>
        <![CDATA[Extract the outColor member from the mayaFileTextureOutput structure and convert it from sRGB to linear.]]>
    </description>
    <properties>
        <struct  name="input" struct_name="mayaFileTextureOutput" />
    </properties>
    <values>
    </values>
    <outputs>
        <float3  name="outColor" />
    </outputs>
    <implementation  >
    <implementation  render="OGSRenderer" language="Cg" lang_version="2.100000" >
        <function_name val="customFileTextureOutputColor" />
        <source>
            <![CDATA[
float3 customFileTextureOutputColor(mayaFileTextureOutput input)
{ 
    float4 outColor = float4( input.outColor, 0.0 );

    {
        float4 breakPnt = float4(0.03928571566939354, 0.03928571566939354, 0.03928571566939354, 1.);
        float4 slope = float4(0.07738015800714493, 0.07738015800714493, 0.07738015800714493, 1.);
        float4 scale = float4(0.9478672742843628, 0.9478672742843628, 0.9478672742843628, 0.9999989867210388);
        float4 offset = float4(0.05213269963860512, 0.05213269963860512, 0.05213269963860512, 9.999989742937032e-007);
        float4 gamma = float4(2.400000095367432, 2.400000095367432, 2.400000095367432, 1.000000953674316);
        float4 isAboveBreak = float4((outColor > breakPnt) ? float4(1., 1., 1., 1.) : float4(0., 0., 0., 0.));
        float4 linSeg = outColor * slope;
        float4 powSeg = pow( max( float4(0., 0., 0., 0.), scale * outColor + offset), gamma);
        outColor = isAboveBreak * powSeg + ( float4(1., 1., 1., 1.) - isAboveBreak ) * linSeg;
    }

    return outColor.rgb; 
} 
            ]]>
        </source>
    </implementation>
    <implementation  render="OGSRenderer" language="HLSL" lang_version="11.000000" >
        <function_name val="customFileTextureOutputColor" />
        <source>
            <![CDATA[
float3 customFileTextureOutputColor(mayaFileTextureOutput input) 
{ 
    float4 outColor = float4( input.outColor, 0.0f );

    {
        float4 breakPnt = float4(0.03928571566939354, 0.03928571566939354, 0.03928571566939354, 1.);
        float4 slope = float4(0.07738015800714493, 0.07738015800714493, 0.07738015800714493, 1.);
        float4 scale = float4(0.9478672742843628, 0.9478672742843628, 0.9478672742843628, 0.9999989867210388);
        float4 offset = float4(0.05213269963860512, 0.05213269963860512, 0.05213269963860512, 9.999989742937032e-007);
        float4 gamma = float4(2.400000095367432, 2.400000095367432, 2.400000095367432, 1.000000953674316);
        float4 isAboveBreak = float4((outColor > breakPnt) ? float4(1., 1., 1., 1.) : float4(0., 0., 0., 0.));
        float4 linSeg = outColor * slope;
        float4 powSeg = pow( max( float4(0., 0., 0., 0.), scale * outColor + offset), gamma);
        outColor = isAboveBreak * powSeg + ( float4(1., 1., 1., 1.) - isAboveBreak ) * linSeg;
    }
  
    return outColor.rgb; 
} 
            ]]>
        </source>
    </implementation>
    <implementation  render="OGSRenderer" language="GLSL" lang_version="3.000000" >
        <function_name val="customFileTextureOutputColor" />
        <source>
            <![CDATA[
vec3 customFileTextureOutputColor(mayaFileTextureOutput input_GLSL)
{
    vec4 outColor = vec4( input_GLSL.outColor, 0.0f );

    {
        vec4 breakPnt = vec4(0.03928571566939354, 0.03928571566939354, 0.03928571566939354, 1.);
        vec4 slope = vec4(0.07738015800714493, 0.07738015800714493, 0.07738015800714493, 1.);
        vec4 scale = vec4(0.9478672742843628, 0.9478672742843628, 0.9478672742843628, 0.9999989867210388);
        vec4 offset = vec4(0.05213269963860512, 0.05213269963860512, 0.05213269963860512, 9.999989742937032e-007);
        vec4 gamma = vec4(2.400000095367432, 2.400000095367432, 2.400000095367432, 1.000000953674316);
        vec4 isAboveBreak = vec4(greaterThan(outColor, breakPnt));
        vec4 linSeg = outColor * slope;
        vec4 powSeg = pow( max( vec4(0., 0., 0., 0.), scale * outColor + offset), gamma);
        outColor = isAboveBreak * powSeg + ( vec4(1., 1., 1., 1.) - isAboveBreak ) * linSeg;
    }

    return outColor.rgb;
} 
            ]]>
        </source>
    </implementation>
    </implementation>
</fragment>