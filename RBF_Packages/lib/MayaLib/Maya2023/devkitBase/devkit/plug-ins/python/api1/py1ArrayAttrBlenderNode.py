#-
# ==========================================================================
# Copyright (C) 2021 Autodesk, Inc. and/or its licensors.  All 
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related 
# material (collectively the "Data") in these files contain unpublished 
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
# licensors, which is protected by U.S. and Canadian federal copyright 
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right 
# to use, modify, and incorporate this Data into other products for 
# purposes authorized by the Autodesk software license agreement, 
# without fee.
#
# The copyright notices in the Software and this entire statement, 
# including the above license grant, this restriction and the 
# following disclaimer, must be included in all copies of the 
# Software, in whole or in part, and all derivative works of 
# the Software, unless such copies or derivative works are solely 
# in the form of machine-executable object code generated by a 
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
# AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
# TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

#
# Autodesk Script File
# MODIFY THIS AT YOUR OWN RISK
#
# Creation Date:   27 May 2021
#

"""
  DESCRIPTION:

  Implements the dependency graph node "spArrayAttrBlend".  

  This plug-in is an example of a user-defined dependency graph node.
  It takes 2 array inputs and it computes an array output
  where each output value is the average of the 2 corresponding inputs values. 
  A weight parameter controls how much of input A vs input B is taken into 
  account in the output computation
 
    // Create a spArrayAttrBlend connected to a cube translation
    createNode spArrayAttrBlend;
    polyCube;
 
 	connectAttr spArrayAttrBlend1.output[0] pCube1.tx;
 	connectAttr spArrayAttrBlend1.output[1] pCube1.ty;
 	connectAttr spArrayAttrBlend1.output[2] pCube1.tz;
 
    // Modify input parameters to affect the cube position
    setAttr spArrayAttrBlend1.weight 1; // Output is driven 100% by inputB
    setAttr spArrayAttrBlend1.inputB[1] 10; // will feed 10 to pCube1.ty
 
"""

import maya.OpenMaya as OpenMaya
import maya.OpenMayaMPx as OpenMayaMPx

kPluginNodeTypeName = "spArrayAttrBlend"
kPluginNodeId = OpenMaya.MTypeId(0x0008005A)


# Node definition
class spArrayAttrBlend(OpenMayaMPx.MPxNode):
	
	# Node Type Attributes
	aInputA = OpenMaya.MObject()
	aInputB = OpenMaya.MObject()
	aWeight = OpenMaya.MObject()
	aOutput = OpenMaya.MObject()


	def __init__(self):
		OpenMayaMPx.MPxNode.__init__(self)


	def getInputValue( data, attribute, logicalIndex ):
		"""
		Helper method that extract an element value from the datablock for a specified
		array attribute
		"""
		# This code was extracted from the compute method because it needs to be executed twice 
		# at each evaluation (once for each input)

		arrayDataHandle = data.inputArrayValue( attribute )
		try:
			arrayDataHandle.jumpToElement( logicalIndex )
			value = arrayDataHandle.inputValue().asFloat()
		except:			
			# Extracting Attribute default value
			# Code is compled because MFnNumericAttribute returns its result through a reference 
			# parameter which ends up being very complicated to handle in Python API1
			default_util = OpenMaya.MScriptUtil()
			default_util.createFromDouble(0.0)
			default_ptr = default_util.asFloatPtr()
			OpenMaya.MFnNumericAttribute( attribute ).getDefault( default_ptr )
			value = default_util.getFloat( default_ptr )

		return value
		
	
	def compute(self, plug, data):
		"""
		This callback gets invoked when Maya needs to retrieve the value of 
		a marked dirty plug
		"""

		# Check that the requested recompute is one of the output values
		if (plug == spArrayAttrBlend.aOutput ):
			if plug.isArray():
				# full attribute is rarely queried but by returning kUnknownParameter
				# we ensure Maya default implementation will trigger the evaluation of 
				# each element of the array plug
				return OpenMaya.kUnknownParameter
			else:
				# Computing the value of one array plug element
				logicalIndex = plug.logicalIndex()

				# Read the input values
				A = spArrayAttrBlend.getInputValue( data, spArrayAttrBlend.aInputA, logicalIndex )
				B = spArrayAttrBlend.getInputValue( data, spArrayAttrBlend.aInputB, logicalIndex )

				weight =  data.inputValue( spArrayAttrBlend.aWeight ).asFloat()

				blendedValue = A*(1.0-weight )+B*weight

				data.outputValue(plug).setFloat( blendedValue )
				data.setClean( plug )
				return None
		else:
			return OpenMaya.kUnknownParameter


	def setDependentsDirty( self, plug, plugArray ):
		# this method is optional. It currently handles the dependence of output on inputA and inputB
		# This approach differs from letting Maya doing the dirtying based on the MPxNode.attributeAffects
		# because it defines a plug element to plug element relationship. MPxNode.attributeAffects usage 
		# would cause a dirtying of all the output elements even for a single input element change
		if (plug == spArrayAttrBlend.aInputA ) or (plug == spArrayAttrBlend.aInputB ):
			if plug.isElement():
				logicalIndex = plug.logicalIndex()
				thisNode = self.thisMObject()
				outPlug = OpenMaya.MPlug( thisNode, spArrayAttrBlend.aOutput )
				outPlug.selectAncestorLogicalIndex( logicalIndex, spArrayAttrBlend.aOutput )
				plugArray.append(outPlug)


# creator
def createNodeInstance():
	""" Maya invokes this method everytime it needs to instanciate a spArrayAttrBlend node """
	return OpenMayaMPx.asMPxPtr( spArrayAttrBlend() )


# initializer
def initNodeTypeAttributes():
	"""
	This method is invoked when spArrayAttrBlend node type gets registered
	allowing the current plugin to register and setup attributes to the 
	new spArrayAttrBlend type
	"""

	# The MFnNumericAttribute will help in the creation of all the numerical 
	# input and output attributes
	nAttr = OpenMaya.MFnNumericAttribute()

	# Setup the input attributes
	spArrayAttrBlend.aInputA = nAttr.create("inputA", "ia", OpenMaya.MFnNumericData.kFloat, 0.2)
	nAttr.setStorable(True)
	nAttr.setArray( True )

	spArrayAttrBlend.aInputB = nAttr.create("inputB", "ib", OpenMaya.MFnNumericData.kFloat, 0.3)
	nAttr.setStorable(True)
	nAttr.setArray( True )

	spArrayAttrBlend.aWeight = nAttr.create("weight", "wt", OpenMaya.MFnNumericData.kFloat, 0.5)
	nAttr.setStorable(True)
	nAttr.setArray( False )

	# Setup the output attributes
	spArrayAttrBlend.aOutput = nAttr.create("output", "out", OpenMaya.MFnNumericData.kFloat, 0.0)
	nAttr.setStorable(False)
	nAttr.setWritable(False)
	nAttr.setArray( True )

	# Add the attributes to the node
	spArrayAttrBlend.addAttribute(spArrayAttrBlend.aInputA)
	spArrayAttrBlend.addAttribute(spArrayAttrBlend.aInputB)
	spArrayAttrBlend.addAttribute(spArrayAttrBlend.aWeight)
	spArrayAttrBlend.addAttribute(spArrayAttrBlend.aOutput)

	# Set the attribute dependencies
	spArrayAttrBlend.attributeAffects(spArrayAttrBlend.aWeight, spArrayAttrBlend.aOutput)

	# The following dependencies should not be declared because they are already handled 
	# by the optional setDependentsDirty method
	# spArrayAttrBlend.attributeAffects(spArrayAttrBlend.aInputA, spArrayAttrBlend.aOutput)
	# spArrayAttrBlend.attributeAffects(spArrayAttrBlend.aInputB, spArrayAttrBlend.aOutput)


def initializePlugin(mobject):
	""" This method is automatically invoked when the plugin is loaded """
	mplugin = OpenMayaMPx.MFnPlugin(mobject, "Autodesk", "1.0", "Any")
	try:
		mplugin.registerNode( kPluginNodeTypeName, kPluginNodeId, createNodeInstance, initNodeTypeAttributes )
	except:
		sys.stderr.write( "Failed to register node: %s" % kPluginNodeTypeName )
		raise


def uninitializePlugin(mobject):
	""" This method is automatically invoked when the plugin is unloaded """
	mplugin = OpenMayaMPx.MFnPlugin(mobject)
	try:
		mplugin.deregisterNode( kPluginNodeId )
	except:
		sys.stderr.write( "Failed to deregister node: %s" % kPluginNodeTypeName )
		raise

