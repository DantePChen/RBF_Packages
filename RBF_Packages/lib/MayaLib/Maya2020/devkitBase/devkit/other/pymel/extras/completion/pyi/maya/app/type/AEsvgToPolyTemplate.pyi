from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya.api.OpenMaya as nom
import maya.OpenMaya as om
from . import plugin as typePlugin
import maya
import PySide2.QtGui as QtGui
import maya.app.flux.core as fx
import maya.mel as mel
import time
import PySide2.QtCore as QtCore
import PySide2.QtSvg as QtSvg
import PySide2.QtWidgets as QtWidgets
import ntpath
import shiboken2 as shiboken
import PySide2.QtXml as QtXml
import maya.app.flux.ae.ui as faeui
import os
import PySide2.QtXml as qt


from maya.app.flux.ae.Template import *


from maya.app.flux.ui.core import pix
from PySide2.QtCore import Slot
from maya.app.flux.ae.Custom import Custom


if False:
    from typing import Dict, List, Tuple, Union, Optional

class MyCustom(Custom):
    def alignChanged(self, *args): ...
    def alignClicked(self, index): ...
    def animationTabChanged(self, visible): ...
    def backBevelEnabledChanged(self): ...
    def bevelStyleChanged(self): ...
    def buildUI(self, nodeName): ...
    def clearManipClicked(self): ...
    def clearVectorOffsetAttributes(self): ...
    def createCurveClicked(self): ...
    def createCustomWidgets(self): ...
    def createFalloffCurve(self, attr): ...
    def createLocalPivotBtn(self, axis): ...
    def deformableTypeChanged(self): ...
    def disableAllBevels(self): ...
    def editFalloffCurve(self, attr): ...
    def enableBevelClicked(self): ...
    def enableBevelStyle(self): ...
    def enableDisableBevels(self): ...
    def extrudeEnableChanged(self): ...
    def fixAnimLegacyConnections(self): ...
    def getAdjustNode(self): ...
    def getAnimationNode(self): ...
    def getExtrudeNode(self):
        """
        # Utilities
        """
        ...
    def getRemeshNode(self): ...
    def getShader(self, index): ...
    def getVectorOffsetAttributes(self):
        """
        #same as above, but this refreshes the sliders when you change selection in the AE
        """
        ...
    def isAnimConnLegacy(self): ...
    def isBevelEnabled(self): ...
    def manipVisibilityChanged(self, visible): ...
    def materialJoinClicked(self): ...
    def materialSplitClicked(self): ...
    def nodeChanged(self): ...
    def offsetFieldChanged(self, *args): ...
    def offsetFieldEditingFinished(self, *args): ...
    def pasteClicked(self): ...
    def pasteRadioClicked(self): ...
    def pathClicked(self): ...
    def pathEdited(self): ...
    def pathNamesChanged(self, *args): ...
    def pathRadioClicked(self): ...
    def pathSelectionChanged(self): ...
    def pivotLocationClicked(self, axis): ...
    def pivotLocationMenuClicked(self, cmd): ...
    def populatePaths(self): ...
    def refreshClicked(self): ...
    def setVectorOffset(*args, **kwargs): ...
    def setVectorOffsetAttributes(self):
        """
        #this sets the manipulation offsets (z position and extrusion scale)
        """
        ...
    def setupNavigationControls(self, navigations): ...
    def shellAnimOptionChanged(self, index): ...
    def shellAnimationClicked(self): ...
    def showLocalPivotMenu(self, axis, rpChecked, spChecked): ...
    def strRes(self, name): ...
    def stringResourceFunction(self, name): ...
    def svgModeChanged(self): ...
    def svg_catchPaste(self): ...
    def switchBackBevel(self): ...
    def switchFrontBevel(self): ...
    def updateAnimateEnabled(self): ...
    def updateBevelVisibility(self): ...
    def updateErrorIndicator(self): ...
    def updateInfoLabel(self): ...
    def updateMaterialSplitBtn(self): ...
    def updatePreviewPanel(self): ...
    def updateShellAnimOption(self): ...
    staticMetaObject : QtCore.QMetaObject


class MyEventFilterer(QtCore.QObject):
    def eventFilter(self, widget, event): ...
    staticMetaObject : QtCore.QMetaObject


class AEsvgToPolyTemplate(Template):
    def buildUI(self, nodeName): ...




def wrapInstance(*args, **kwargs): ...
def unwrapInstance(*args, **kwargs): ...
def getVectorShadingGroups(mesh, extrudeNode):
    """
    #given the group nodes, get the associated materials
    """
    ...
def getShaderFromObject(mesh):
    """
    #get the shader attribute attached to an object
    #this and the next function are VERY similar, but they go about their task in different ways - which only work in different situations.
    """
    ...
def getShaderFromArray(GrpMessageConections):
    """
    #given a list of nodes, find the shading engine, and it's material
    """
    ...
def splitTypeMaterials(extrudeNode, meshShape, typeNode, shaderType):
    """
    #assign materials to the type tool
    """
    ...
def joinTypeMaterials(meshShape, typeNode, shaderType): ...
def getShadingGroupsFromObject(mesh):
    """
    #get the shaders attached to an object
    """
    ...

