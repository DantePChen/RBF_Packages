from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtCore import QObject as _QObject


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class _Property(object):
    def __call__(*args, **kwargs):
        """
        x.__call__(...) <==> x(...)
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def getter(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def setter(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class VolatileBool(object):
    """
    VolatileBool objects contain a C++ volatile bool
    """
    
    
    
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __str__(self) -> str:
        """
        x.__str__() <==> str(x)
        """
        ...
    def get(*args, **kwargs):
        """
        B.get() -> Bool. Returns the value of the volatile boolean
        """
        ...
    def set(*args, **kwargs):
        """
        B.set(a) -> None. Sets the value of the volatile boolean
        """
        ...
    __new__ : builtin_function_or_method


class QQmlPropertyValueSource(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def setTarget(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlComponent(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def beginCreate(*args, **kwargs): ...
    def completeCreate(*args, **kwargs): ...
    def create(*args, **kwargs): ...
    def creationContext(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def errors(*args, **kwargs): ...
    def isError(*args, **kwargs): ...
    def isLoading(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isReady(*args, **kwargs): ...
    def loadUrl(*args, **kwargs): ...
    def progress(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def status(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    Asynchronous : CompilationMode
    
    CompilationMode : Type[CompilationMode]
    
    Error : Status
    
    Loading : Status
    
    Null : Status
    
    PreferSynchronous : CompilationMode
    
    Ready : Status
    
    Status : Type[Status]
    
    __new__ : builtin_function_or_method
    
    progressChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    statusChanged : PySide2.QtCore.Signal


class QQmlImageProviderBase(_Object):
    def flags(*args, **kwargs): ...
    def imageType(*args, **kwargs): ...
    Flag : Type[Flag]
    
    Flags : Type[Flags]
    
    ForceAsynchronousImageLoading : Flag
    
    Image : ImageType
    
    ImageResponse : ImageType
    
    ImageType : Type[ImageType]
    
    Invalid : ImageType
    
    Pixmap : ImageType
    
    Texture : ImageType
    
    __new__ : builtin_function_or_method


class QQmlExpression(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clearError(*args, **kwargs): ...
    def columnNumber(*args, **kwargs): ...
    def context(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def evaluate(*args, **kwargs): ...
    def expression(*args, **kwargs): ...
    def hasError(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    def notifyOnValueChanged(*args, **kwargs): ...
    def scopeObject(*args, **kwargs): ...
    def setExpression(*args, **kwargs): ...
    def setNotifyOnValueChanged(*args, **kwargs): ...
    def setSourceLocation(*args, **kwargs): ...
    def sourceFile(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    valueChanged : PySide2.QtCore.Signal


class QJSValueIterator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def hasNext(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class ListProperty(_Property):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...


class QQmlFileSelector(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def setExtraSelectors(*args, **kwargs): ...
    def setSelector(*args, **kwargs): ...
    @staticmethod
    def get(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQmlDebuggingEnabler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    @staticmethod
    def connectToLocalDebugger(*args, **kwargs): ...
    @staticmethod
    def startTcpDebugServer(*args, **kwargs): ...
    DoNotWaitForClient : StartMode
    
    StartMode : Type[StartMode]
    
    WaitForClient : StartMode
    
    __new__ : builtin_function_or_method


class QQmlListReference(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def append(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def canAppend(*args, **kwargs): ...
    def canAt(*args, **kwargs): ...
    def canClear(*args, **kwargs): ...
    def canCount(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def isManipulable(*args, **kwargs): ...
    def isReadable(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def listElementType(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlAbstractUrlInterceptor(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def intercept(*args, **kwargs): ...
    DataType : Type[DataType]
    
    JavaScriptFile : DataType
    
    QmlFile : DataType
    
    QmldirFile : DataType
    
    UrlString : DataType
    
    __new__ : builtin_function_or_method


class QQmlNetworkAccessManagerFactory(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def create(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QJSValue(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def call(*args, **kwargs): ...
    def callAsConstructor(*args, **kwargs): ...
    def callWithInstance(*args, **kwargs): ...
    def deleteProperty(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def equals(*args, **kwargs): ...
    def hasOwnProperty(*args, **kwargs): ...
    def hasProperty(*args, **kwargs): ...
    def isArray(*args, **kwargs): ...
    def isBool(*args, **kwargs): ...
    def isCallable(*args, **kwargs): ...
    def isDate(*args, **kwargs): ...
    def isError(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isNumber(*args, **kwargs): ...
    def isObject(*args, **kwargs): ...
    def isQObject(*args, **kwargs): ...
    def isRegExp(*args, **kwargs): ...
    def isString(*args, **kwargs): ...
    def isUndefined(*args, **kwargs): ...
    def isVariant(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def prototype(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    def setPrototype(*args, **kwargs): ...
    def strictlyEquals(*args, **kwargs): ...
    def toBool(*args, **kwargs): ...
    def toDateTime(*args, **kwargs): ...
    def toInt(*args, **kwargs): ...
    def toNumber(*args, **kwargs): ...
    def toQObject(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    def toUInt(*args, **kwargs): ...
    def toVariant(*args, **kwargs): ...
    NullValue : SpecialValue
    
    SpecialValue : Type[SpecialValue]
    
    UndefinedValue : SpecialValue
    
    __new__ : builtin_function_or_method


class QQmlIncubationController(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def engine(*args, **kwargs): ...
    def incubateFor(*args, **kwargs): ...
    def incubateWhile(*args, **kwargs): ...
    def incubatingObjectCount(*args, **kwargs): ...
    def incubatingObjectCountChanged(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlPropertyMap(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clear(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def keys(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def updateValue(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    valueChanged : PySide2.QtCore.Signal


class QQmlError(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def column(*args, **kwargs): ...
    def description(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def line(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def setColumn(*args, **kwargs): ...
    def setDescription(*args, **kwargs): ...
    def setLine(*args, **kwargs): ...
    def setObject(*args, **kwargs): ...
    def setUrl(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlFile(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def clear(*args, **kwargs): ...
    def connectDownloadProgress(*args, **kwargs): ...
    def connectFinished(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def dataByteArray(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def isError(*args, **kwargs): ...
    def isLoading(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isReady(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def status(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    @staticmethod
    def isLocalFile(*args, **kwargs): ...
    @staticmethod
    def isSynchronous(*args, **kwargs): ...
    @staticmethod
    def urlToLocalFileOrQrc(*args, **kwargs): ...
    Error : Status
    
    Loading : Status
    
    Null : Status
    
    Ready : Status
    
    Status : Type[Status]
    
    __new__ : builtin_function_or_method


class QQmlExtensionInterface(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def initializeEngine(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlScriptString(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def booleanLiteral(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isNullLiteral(*args, **kwargs): ...
    def isUndefinedLiteral(*args, **kwargs): ...
    def numberLiteral(*args, **kwargs): ...
    def stringLiteral(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlProperty(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(*args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def connectNotifySignal(*args, **kwargs): ...
    def hasNotifySignal(*args, **kwargs): ...
    def index(*args, **kwargs): ...
    def isDesignable(*args, **kwargs): ...
    def isProperty(*args, **kwargs): ...
    def isResettable(*args, **kwargs): ...
    def isSignalProperty(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def isWritable(*args, **kwargs): ...
    def method(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def needsNotifySignal(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def propertyType(*args, **kwargs): ...
    def propertyTypeCategory(*args, **kwargs): ...
    def propertyTypeName(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    @staticmethod
    def read(*args, **kwargs): ...
    @staticmethod
    def write(*args, **kwargs): ...
    Invalid : Type
    
    InvalidCategory : PropertyTypeCategory
    
    List : PropertyTypeCategory
    
    Normal : PropertyTypeCategory
    
    Object : PropertyTypeCategory
    
    Property : Type
    
    PropertyTypeCategory : Type[PropertyTypeCategory]
    
    SignalProperty : Type
    
    Type : Type[Type]
    
    __new__ : builtin_function_or_method


class QQmlContext(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def baseUrl(*args, **kwargs): ...
    def contextObject(*args, **kwargs): ...
    def contextProperty(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def nameForObject(*args, **kwargs): ...
    def parentContext(*args, **kwargs): ...
    def resolvedUrl(*args, **kwargs): ...
    def setBaseUrl(*args, **kwargs): ...
    def setContextObject(*args, **kwargs): ...
    def setContextProperty(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQmlIncubator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def clear(*args, **kwargs): ...
    def errors(*args, **kwargs): ...
    def forceCompletion(*args, **kwargs): ...
    def incubationMode(*args, **kwargs): ...
    def isError(*args, **kwargs): ...
    def isLoading(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isReady(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def setInitialState(*args, **kwargs): ...
    def status(*args, **kwargs): ...
    def statusChanged(*args, **kwargs): ...
    Asynchronous : IncubationMode
    
    AsynchronousIfNested : IncubationMode
    
    Error : Status
    
    IncubationMode : Type[IncubationMode]
    
    Loading : Status
    
    Null : Status
    
    Ready : Status
    
    Status : Type[Status]
    
    Synchronous : IncubationMode
    
    __new__ : builtin_function_or_method


class QQmlTypesExtensionInterface(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def registerTypes(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQmlParserStatus(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def classBegin(*args, **kwargs): ...
    def componentComplete(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QJSEngine(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def collectGarbage(*args, **kwargs): ...
    def evaluate(*args, **kwargs): ...
    def globalObject(*args, **kwargs): ...
    def installExtensions(*args, **kwargs): ...
    def installTranslatorFunctions(*args, **kwargs): ...
    def newArray(*args, **kwargs): ...
    def newObject(*args, **kwargs): ...
    def newQObject(*args, **kwargs): ...
    def toScriptValue(*args, **kwargs): ...
    AllExtensions : Extension
    
    ConsoleExtension : Extension
    
    Extension : Type[Extension]
    
    Extensions : Type[Extensions]
    
    GarbageCollectionExtension : Extension
    
    TranslationExtension : Extension
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQmlEngine(QJSEngine):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addImageProvider(*args, **kwargs): ...
    def addImportPath(*args, **kwargs): ...
    def addNamedBundle(*args, **kwargs): ...
    def addPluginPath(*args, **kwargs): ...
    def baseUrl(*args, **kwargs): ...
    def clearComponentCache(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def imageProvider(*args, **kwargs): ...
    def importPathList(*args, **kwargs): ...
    def importPlugin(*args, **kwargs): ...
    def incubationController(*args, **kwargs): ...
    def networkAccessManager(*args, **kwargs): ...
    def networkAccessManagerFactory(*args, **kwargs): ...
    def offlineStoragePath(*args, **kwargs): ...
    def outputWarningsToStandardError(*args, **kwargs): ...
    def pluginPathList(*args, **kwargs): ...
    def removeImageProvider(*args, **kwargs): ...
    def rootContext(*args, **kwargs): ...
    def setBaseUrl(*args, **kwargs): ...
    def setImportPathList(*args, **kwargs): ...
    def setIncubationController(*args, **kwargs): ...
    def setNetworkAccessManagerFactory(*args, **kwargs): ...
    def setOfflineStoragePath(*args, **kwargs): ...
    def setOutputWarningsToStandardError(*args, **kwargs): ...
    def setPluginPathList(*args, **kwargs): ...
    def setUrlInterceptor(*args, **kwargs): ...
    def trimComponentCache(*args, **kwargs): ...
    def urlInterceptor(*args, **kwargs): ...
    @staticmethod
    def contextForObject(*args, **kwargs): ...
    @staticmethod
    def objectOwnership(*args, **kwargs): ...
    @staticmethod
    def setContextForObject(*args, **kwargs): ...
    @staticmethod
    def setObjectOwnership(*args, **kwargs): ...
    CppOwnership : ObjectOwnership
    
    JavaScriptOwnership : ObjectOwnership
    
    ObjectOwnership : Type[ObjectOwnership]
    
    __new__ : builtin_function_or_method
    
    quit : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    warnings : PySide2.QtCore.Signal


class QQmlExtensionPlugin(_QObject, QQmlExtensionInterface):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def baseUrl(*args, **kwargs): ...
    def initializeEngine(*args, **kwargs): ...
    def registerTypes(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQmlApplicationEngine(QQmlEngine):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def load(*args, **kwargs): ...
    def loadData(*args, **kwargs): ...
    def rootObjects(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    objectCreated : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject




def qmlRegisterType(*args, **kwargs): ...


QML_HAS_ATTACHED_PROPERTIES : int

