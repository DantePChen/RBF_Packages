// ===========================================================================
// Copyright 2016 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================

// DESCRIPTION: Planar reflection - render.
//**************************************************************************/

// Intensity type: how the visibility of the reflection is computed:
// 0 = full intensity
// 1 = constant intensity
// 2 = intensity varies by view angle, similar to Fresnel reflectance
// 3 = intensity varies by distance from the reflection plane
// #define INTENSITY_TYPE 0

// Blur type: how the blurring of the reflection is computed:
// 0 = no blur
// 1 = constant blur
// 2 = blur varies by view angle, similar to Fresnel reflectance
// 3 = blur varies by distance from the reflection plane
// #define BLUR_TYPE 0

// Shortcut macros for certain state.
#define NONE     0
#define CONSTANT 1
#define VIEW     2
#define DISTANCE 3
#define USE_BLUR     (BLUR_TYPE >= VIEW)
#define USE_VIEW     (INTENSITY_TYPE == VIEW     || BLUR_TYPE == VIEW)
#define USE_DISTANCE (INTENSITY_TYPE == DISTANCE || BLUR_TYPE == DISTANCE)

// World transformation, needed for clipping.
uniform mat4 gWXf : World;

// World-view-projection transformation.
uniform highp mat4 gWVPXf : WorldViewProjection;

// The color of the reflection.
uniform vec3 gColor = { 1.0, 1.0, 1.0 };

// The saturation of the reflection.
uniform float gSaturation = 1.0;

// The intensity range.
uniform vec2 gIntensity = { 1.0, 0.0 };

// The blur amount range.
uniform vec2 gBlurAmount = { 0.0, 9.0 };

// Reflection map texture and sampler.
uniform texture2D gReflectionTex;
uniform sampler2D gReflectionSamp = sampler_state { texture = <gReflectionTex>; };

// Extra parameters when variable blur is needed.
#if USE_BLUR

// The three blurred reflection maps.
uniform texture2D gBlur1Tex;
uniform sampler2D gBlur1Samp = sampler_state { texture = <gBlur1Tex>; };
uniform texture2D gBlur2Tex;
uniform sampler2D gBlur2Samp = sampler_state { texture = <gBlur2Tex>; };
uniform texture2D gBlur3Tex;
uniform sampler2D gBlur3Samp = sampler_state { texture = <gBlur3Tex>; };

#endif

// Extra parameters when the distance map is needed.
#if USE_DISTANCE

// Distance map texture and sampler.
uniform texture2D gDistanceTex;
uniform sampler2D gDistanceSamp = sampler_state { texture = <gDistanceTex>; };

#endif

// Extra parameters for computing view-angle-based falloff (Fresnel reflectance).
#ifdef USE_VIEW

// World transformation, inverse transpose.
uniform mat4 gWITXf : WorldInverseTranspose;

// The position of the view in world space.
uniform vec3 gViewPosition : WorldCameraPosition;

#endif

// Depth priority, which shifts the model a bit forward in the z-buffer
uniform float gDepthPriority : DepthPriority = 0.0;

// Vertex shader input structure.
attribute VS_INPUT_Render
{
    vec3 Pos : POSITION;

#ifdef USE_VIEW
    vec3 Normal : NORMAL;
#endif
}

// Vertex shader output structure.
attribute VS_TO_PS_Render
{
    // The vertex position in clip space, for use by the pixel shader.
    vec4 HPos2 : TEXCOORD0;

#ifdef USE_VIEW
    // The vertex normal in world space.
    vec3 VSNormal : TEXCOORD1;

    // The view direction in world space, not normalized.
    vec3 View : TEXCOORD2;
#endif
}

attribute pixelOut {
    vec4 colorOut:COLOR0;
}

// Vertex shader.
GLSLShader VS_PlanarReflection_Render
{
    void main()
    {
        // Transform the vertex from object space to clip space.
        gl_Position = gWVPXf*vec4(Pos, 1.0);
        // modify the HPos a bit by biasing the Z a bit forward, based on depth priority
        gl_Position.z -= gl_Position.w*2.0*gDepthPriority;

        HPos2 = gl_Position;
		
		vec4 oHPw=gWXf*vec4(Pos, 1.0);

#ifdef USE_VIEW
        // Transform the vertex normal from object space to world space.
        VSNormal = (gWITXf*vec4(Normal,0.0)).xyz;

        // Compute the view direction, using the eye position and vertex position.  The eye
        // position is the translation vector of the inverse view transformation matrix.
        // NOTE: This is the direction from the vertex to the eye.
        View = gViewPosition - oHPw.xyz;
#endif
    }
}

// Pixel shader.
GLSLShader PS_PlanarReflection_Render
{
    // A linear step function, which returns a value in [0.0, 1.0] indicating the given value lies in
    // the given range.
    float linstep(float start, float end, float value)
    {
        return saturate((value - start) / (end - start));
    }

    // An approximation of Fresnel reflectance, where normal angles (high NdotV) give less reflectance
    // and grazing angles (low NdotV) give more reflectance.
    float reflectance(float NdotV)
    {
        return 1.0 - smoothstep(0.2, 0.7, NdotV);
    }

    void main()
    {
		// Divide the clip-space point by w to form the NDC-space point.
        vec3 Pndc = HPos2.xyz / HPos2.w;

        // Compute the texture coordinates for reflection map sampling based on the clip-space point.
        // They must be mapped from the range [-1.0, 1.0] to [0.0, 1.0].  Since this is used to sample
        // a reflection map rendered with a reflected camera, the v coordinate is not flipped, so that
        // v = 0.0 remains at the top.
        vec2 UV = vec2(Pndc.x, -Pndc.y) * 0.5 + 0.5;

        // Compute dot(N, V), if needed; it will be used below.
#if USE_VIEW
        float NdotV = dot(normalize(VSNormal), normalize(View));
#endif

        // Sample the distance map, if needed.  This is expected to be a normalized value [0.0, 1.0],
        // relative to the desired range of distances.
#if USE_DISTANCE
        float distance = texture2D(gDistanceSamp, UV).r;
#endif

        // Compute reflection intensity, optionally with Fresnel-style reflectance.
#if INTENSITY_TYPE == NONE
        float intensity = 1.0;
#elif INTENSITY_TYPE == CONSTANT
        float intensity = gIntensity.x;
#elif INTENSITY_TYPE == VIEW
        // Use the normal and view direction to compute the reflection intensity.
        float intensity = mix(gIntensity.y, gIntensity.x, reflectance(NdotV));
#elif INTENSITY_TYPE == DISTANCE
        // Interpolate between the start and end intensity based on the distance.
        float intensity = mix(gIntensity.x, gIntensity.y, distance);
#endif

        // Blur the reflection map if needed.  This is done by interpolating between a set of
        // pre-blurred versions of the reflection map.
#if USE_BLUR
        // Compute the desired blur amount based on the blur type.
#if BLUR_TYPE == VIEW
        // Use the normal and view direction to compute the reflection intensity.
        float blur = mix(gBlurAmount.y, gBlurAmount.x, reflectance(NdotV));
#elif BLUR_TYPE == DISTANCE
        // Interpolate between the start and end blur based on the distance.
        float blur = mix(gBlurAmount.x, gBlurAmount.y, distance);
#endif

        // Compute the index of the blur amount of the blurred reflection maps that is greater than
        // the *desired* blur amount.  This will be in the range (1, 3).  This index and index-1
        // represent the blur amounts and maps that will be interpolated to get the desired blur.

        // The blur amounts for each blurred reflection map, including 0.0 for the unblurred map.
        vec4 gBlurMapAmounts = vec4( 0.0, 2.0, 6.0, 12.0 );

        vec4 blurCompare = vec4(blur > gBlurMapAmounts.x, blur > gBlurMapAmounts.y, blur > gBlurMapAmounts.z, blur > gBlurMapAmounts.w);
        int index = int(clamp(floor(blurCompare.x + blurCompare.y + blurCompare.z + blurCompare.w), 1.0, 3.0));

        // Determine where the desired blur amount lies in the range between the blur map amounts
        // with the selected indices.
        float factor = linstep(gBlurMapAmounts[index-1], gBlurMapAmounts[index], blur);

        // Sample the two blur maps, and interpolate between them using the factor.
        // NOTE: The sampler references must be literals, hence the numerous sample calls.
        vec4 color1 = vec4(0.0,0.0,0.0,0.0), color2 = vec4(0.0,0.0,0.0,0.0);
        if ( index == 1 ) {
            color1 = texture2D(gReflectionSamp, UV);
            color2 = texture2D(gBlur1Samp, UV);
        } else if ( index == 2 ) {
            color1 = texture2D(gBlur1Samp, UV);
            color2 = texture2D(gBlur2Samp, UV);
        } else {
            color1 = texture2D(gBlur2Samp, UV);
            color2 = texture2D(gBlur3Samp, UV);
        }
        vec4 reflColor = mix(color1, color2, factor);
#else
        // Sample the reflection map directly (no interpolated blurring), including alpha.
        vec4 reflColor = texture2D(gReflectionSamp, UV);
#endif

        // Apply the tint color and saturation.  The gray value is computed with a standard color
        // sensitivity transform, and the saturation value is used to interpolate between that gray
        // and the full color.
        float gray = dot(reflColor.rgb, vec3(0.212671, 0.715160, 0.072169));
        vec3 resultColor = mix(vec3(gray,gray,gray), reflColor.rgb, gSaturation);

        // Combine the reflection map color with the specified color and computed intensity.
        colorOut = vec4(gColor * resultColor, reflColor.a * intensity);
    }
}

// Technique.
technique PlanarReflection_Render_Main
{
    pass p0
    {
        VertexShader (in VS_INPUT_Render, out VS_TO_PS_Render) = VS_PlanarReflection_Render;
        PixelShader (in VS_TO_PS_Render, out pixelOut) = PS_PlanarReflection_Render;
    }
}