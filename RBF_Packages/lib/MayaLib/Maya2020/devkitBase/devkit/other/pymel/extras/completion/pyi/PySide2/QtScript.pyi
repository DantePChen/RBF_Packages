from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtCore import QFactoryInterface as _QFactoryInterface
from PySide2.QtCore import QObject as _QObject


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QScriptValue(_Object):
    def __copy__(*args, **kwargs): ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __iter__(*args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def call(*args, **kwargs): ...
    def construct(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def equals(*args, **kwargs): ...
    def instanceOf(*args, **kwargs): ...
    def isArray(*args, **kwargs): ...
    def isBool(*args, **kwargs): ...
    def isBoolean(*args, **kwargs): ...
    def isDate(*args, **kwargs): ...
    def isError(*args, **kwargs): ...
    def isFunction(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isNumber(*args, **kwargs): ...
    def isObject(*args, **kwargs): ...
    def isQMetaObject(*args, **kwargs): ...
    def isQObject(*args, **kwargs): ...
    def isRegExp(*args, **kwargs): ...
    def isString(*args, **kwargs): ...
    def isUndefined(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def isVariant(*args, **kwargs): ...
    def lessThan(*args, **kwargs): ...
    def objectId(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def propertyFlags(*args, **kwargs): ...
    def prototype(*args, **kwargs): ...
    def scope(*args, **kwargs): ...
    def scriptClass(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    def setPrototype(*args, **kwargs): ...
    def setScope(*args, **kwargs): ...
    def setScriptClass(*args, **kwargs): ...
    def strictlyEquals(*args, **kwargs): ...
    def toBool(*args, **kwargs): ...
    def toBoolean(*args, **kwargs): ...
    def toDateTime(*args, **kwargs): ...
    def toInt32(*args, **kwargs): ...
    def toInteger(*args, **kwargs): ...
    def toNumber(*args, **kwargs): ...
    def toObject(*args, **kwargs): ...
    def toQMetaObject(*args, **kwargs): ...
    def toQObject(*args, **kwargs): ...
    def toRegExp(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    def toUInt16(*args, **kwargs): ...
    def toUInt32(*args, **kwargs): ...
    def toVariant(*args, **kwargs): ...
    KeepExistingFlags : PropertyFlag
    
    NullValue : SpecialValue
    
    PropertyFlag : Type[PropertyFlag]
    
    PropertyFlags : Type[PropertyFlags]
    
    PropertyGetter : PropertyFlag
    
    PropertySetter : PropertyFlag
    
    QObjectMember : PropertyFlag
    
    ReadOnly : PropertyFlag
    
    ResolveFlag : Type[ResolveFlag]
    
    ResolveFlags : Type[ResolveFlags]
    
    ResolveFull : ResolveFlag
    
    ResolveLocal : ResolveFlag
    
    ResolvePrototype : ResolveFlag
    
    ResolveScope : ResolveFlag
    
    SkipInEnumeration : PropertyFlag
    
    SpecialValue : Type[SpecialValue]
    
    UndefinedValue : SpecialValue
    
    Undeletable : PropertyFlag
    
    UserRange : PropertyFlag
    
    __new__ : builtin_function_or_method


class QScriptClassPropertyIterator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def flags(*args, **kwargs): ...
    def hasNext(*args, **kwargs): ...
    def hasPrevious(*args, **kwargs): ...
    def id(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def previous(*args, **kwargs): ...
    def toBack(*args, **kwargs): ...
    def toFront(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptable(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def argument(*args, **kwargs): ...
    def argumentCount(*args, **kwargs): ...
    def context(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def thisObject(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptString(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def isValid(*args, **kwargs): ...
    def toArrayIndex(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptProgram(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def fileName(*args, **kwargs): ...
    def firstLineNumber(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def sourceCode(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptEngine(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def abortEvaluation(*args, **kwargs): ...
    def agent(*args, **kwargs): ...
    def availableExtensions(*args, **kwargs): ...
    def canEvaluate(*args, **kwargs): ...
    def clearExceptions(*args, **kwargs): ...
    def collectGarbage(*args, **kwargs): ...
    def currentContext(*args, **kwargs): ...
    def defaultPrototype(*args, **kwargs): ...
    def evaluate(*args, **kwargs): ...
    def globalObject(*args, **kwargs): ...
    def hasUncaughtException(*args, **kwargs): ...
    def importExtension(*args, **kwargs): ...
    def importedExtensions(*args, **kwargs): ...
    def installTranslatorFunctions(*args, **kwargs): ...
    def isEvaluating(*args, **kwargs): ...
    def newActivationObject(*args, **kwargs): ...
    def newArray(*args, **kwargs): ...
    def newDate(*args, **kwargs): ...
    def newObject(*args, **kwargs): ...
    def newQMetaObject(*args, **kwargs): ...
    def newQObject(*args, **kwargs): ...
    def newRegExp(*args, **kwargs): ...
    def newVariant(*args, **kwargs): ...
    def nullValue(*args, **kwargs): ...
    def objectById(*args, **kwargs): ...
    def popContext(*args, **kwargs): ...
    def processEventsInterval(*args, **kwargs): ...
    def pushContext(*args, **kwargs): ...
    def reportAdditionalMemoryCost(*args, **kwargs): ...
    def setAgent(*args, **kwargs): ...
    def setDefaultPrototype(*args, **kwargs): ...
    def setGlobalObject(*args, **kwargs): ...
    def setProcessEventsInterval(*args, **kwargs): ...
    def toObject(*args, **kwargs): ...
    def toStringHandle(*args, **kwargs): ...
    def uncaughtException(*args, **kwargs): ...
    def uncaughtExceptionBacktrace(*args, **kwargs): ...
    def uncaughtExceptionLineNumber(*args, **kwargs): ...
    def undefinedValue(*args, **kwargs): ...
    AutoCreateDynamicProperties : QObjectWrapOption
    
    AutoOwnership : ValueOwnership
    
    ExcludeChildObjects : QObjectWrapOption
    
    ExcludeDeleteLater : QObjectWrapOption
    
    ExcludeSlots : QObjectWrapOption
    
    ExcludeSuperClassContents : QObjectWrapOption
    
    ExcludeSuperClassMethods : QObjectWrapOption
    
    ExcludeSuperClassProperties : QObjectWrapOption
    
    PreferExistingWrapperObject : QObjectWrapOption
    
    QObjectWrapOption : Type[QObjectWrapOption]
    
    QObjectWrapOptions : Type[QObjectWrapOptions]
    
    QtOwnership : ValueOwnership
    
    ScriptOwnership : ValueOwnership
    
    SkipMethodsInEnumeration : QObjectWrapOption
    
    ValueOwnership : Type[ValueOwnership]
    
    __new__ : builtin_function_or_method
    
    signalHandlerException : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QScriptExtensionInterface(_QFactoryInterface):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def initialize(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptContext(_Object):
    def activationObject(*args, **kwargs): ...
    def argument(*args, **kwargs): ...
    def argumentCount(*args, **kwargs): ...
    def argumentsObject(*args, **kwargs): ...
    def backtrace(*args, **kwargs): ...
    def callee(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def isCalledAsConstructor(*args, **kwargs): ...
    def parentContext(*args, **kwargs): ...
    def popScope(*args, **kwargs): ...
    def pushScope(*args, **kwargs): ...
    def returnValue(*args, **kwargs): ...
    def scopeChain(*args, **kwargs): ...
    def setActivationObject(*args, **kwargs): ...
    def setReturnValue(*args, **kwargs): ...
    def setThisObject(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def thisObject(*args, **kwargs): ...
    def throwError(*args, **kwargs): ...
    def throwValue(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    Error : Type[Error]
    
    ExceptionState : ExecutionState
    
    ExecutionState : Type[ExecutionState]
    
    NormalState : ExecutionState
    
    RangeError : Error
    
    ReferenceError : Error
    
    SyntaxError : Error
    
    TypeError : Error
    
    URIError : Error
    
    UnknownError : Error


class QScriptValueIterator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __iter__(*args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...
    def flags(*args, **kwargs): ...
    def hasNext(*args, **kwargs): ...
    def hasPrevious(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def next(*args, **kwargs):
        """
        x.next() -> the next value, or raise StopIteration
        """
        ...
    def previous(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def scriptName(*args, **kwargs): ...
    def setValue(*args, **kwargs): ...
    def toBack(*args, **kwargs): ...
    def toFront(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScriptContextInfo(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def columnNumber(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def functionEndLineNumber(*args, **kwargs): ...
    def functionMetaIndex(*args, **kwargs): ...
    def functionName(*args, **kwargs): ...
    def functionParameterNames(*args, **kwargs): ...
    def functionStartLineNumber(*args, **kwargs): ...
    def functionType(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    def scriptId(*args, **kwargs): ...
    FunctionType : Type[FunctionType]
    
    NativeFunction : FunctionType
    
    QtFunction : FunctionType
    
    QtPropertyFunction : FunctionType
    
    ScriptFunction : FunctionType
    
    __new__ : builtin_function_or_method


class QScriptClass(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def engine(*args, **kwargs): ...
    def extension(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def newIterator(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def propertyFlags(*args, **kwargs): ...
    def prototype(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    def supportsExtension(*args, **kwargs): ...
    Callable : Extension
    
    Extension : Type[Extension]
    
    HandlesReadAccess : QueryFlag
    
    HandlesWriteAccess : QueryFlag
    
    HasInstance : Extension
    
    QueryFlag : Type[QueryFlag]
    
    __new__ : builtin_function_or_method


class QScriptEngineAgent(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def contextPop(*args, **kwargs): ...
    def contextPush(*args, **kwargs): ...
    def engine(*args, **kwargs): ...
    def exceptionCatch(*args, **kwargs): ...
    def exceptionThrow(*args, **kwargs): ...
    def extension(*args, **kwargs): ...
    def functionEntry(*args, **kwargs): ...
    def functionExit(*args, **kwargs): ...
    def positionChange(*args, **kwargs): ...
    def scriptLoad(*args, **kwargs): ...
    def scriptUnload(*args, **kwargs): ...
    def supportsExtension(*args, **kwargs): ...
    DebuggerInvocationRequest : Extension
    
    Extension : Type[Extension]
    
    __new__ : builtin_function_or_method


class QScriptExtensionPlugin(_QObject, QScriptExtensionInterface):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def initialize(*args, **kwargs): ...
    def keys(*args, **kwargs): ...
    def setupPackage(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject



