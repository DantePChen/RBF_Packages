#-
# ==========================================================================
# Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All
# rights reserved.
#
# The coded instructions, statements, computer programs, and/or related
# material (collectively the "Data") in these files contain unpublished
# information proprietary to Autodesk, Inc. ("Autodesk") and/or its
# licensors, which is protected by U.S. and Canadian federal copyright
# law and by international treaties.
#
# The Data is provided for use exclusively by You. You have the right
# to use, modify, and incorporate this Data into other products for
# purposes authorized by the Autodesk software license agreement,
# without fee.
#
# The copyright notices in the Software and this entire statement,
# including the above license grant, this restriction and the
# following disclaimer, must be included in all copies of the
# Software, in whole or in part, and all derivative works of
# the Software, unless such copies or derivative works are solely
# in the form of machine-executable object code generated by a
# source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
# AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
# WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
# NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
# PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR
# TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS
# BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
# DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK
# AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY
# OR PROBABILITY OF SUCH DAMAGES.
#
# ==========================================================================
#+

#
# Creation Date:   4 October 2006
#
# Example Plugin: materialInfoCmd.py
#
# Demonstrates use of the MPxMaterialInformation class
# assignViewportFactories -mf "solidMaterialInfo" -tf "solidTextureInfo" -nt "dgs_material"
#

import math, sys

import maya.OpenMaya as OpenMaya
import maya.OpenMayaMPx as OpenMayaMPx

kMaterialName = "solidMaterialInfo"
kTextureName = "solidTextureInfo"

class SolidMaterialInfo(OpenMayaMPx.MPxMaterialInformation):
	def __init__(self, node):
		OpenMayaMPx.MPxMaterialInformation.__init__(self, node)


	def materialInfoIsDirty(self, plug):
		return True


	def connectAsTexture(self, plug):
		return False


	def textureDisconnected(self, plug):
		return False


	def computeMaterial(self, data):
		data.diffuse = OpenMaya.MColor(1.0, 0.0, 0.0)
		return True


class SolidTextureInfo(OpenMayaMPx.MPxBakeEngine):
	def __init__(self):
		print("text __init__")
		OpenMayaMPx.MPxBakeEngine.__init__(self)


	def bake(self, objectPath, cameraPath, samplePlug, bakeResult):
		print("bake()")
		pass

################################################################


def matCreator(node):
	print("matCreator()\n")
	return OpenMayaMPx.asMPxPtr(SolidMaterialInfo(node))


def textCreator():
	print("textCreator()\n")
	return OpenMayaMPx.asMPxPtr(SolidTextureInfo())


def initializePlugin(mobject):
	print("initializePlugin()\n")
	mplugin = OpenMayaMPx.MFnPlugin(mobject, "Autodesk", "1.0", "Any")
	try:
		mplugin.registerMaterialInfo(kMaterialName, matCreator)
	except:
		sys.stderr.write( "Failed to register material info: %s\n" % kMaterialName)
		raise

	try:
		mplugin.registerBakeEngine(kTextureName, textCreator)
	except:
		sys.stderr.write( "Failed to register material info: %s\n" % kTextureName)
		raise


def uninitializePlugin(mobject):
	print("uninitializePlugin()\n")
	mplugin = OpenMayaMPx.MFnPlugin(mobject)
	try:
		mplugin.unregisterMaterialInfo(kMaterialName)
	except:
		sys.stderr.write("Failed to unregister material info: %s\n" % kMaterialName)
		raise

	try:
		mplugin.unregisterBakeEngine(kTextureName)
	except:
		sys.stderr.write("Failed to unregister material info: %s\n" % kTextureName)
		raise
