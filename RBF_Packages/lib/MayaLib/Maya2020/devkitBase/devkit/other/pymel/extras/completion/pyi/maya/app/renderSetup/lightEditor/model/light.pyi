from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya.app.renderSetup.model.plug as plug
import maya.app.renderSetup.model.typeIDs as typeIDs
import maya.app.renderSetup.model.utils as utils
from . import update
from . import typeManager as typeMgr
import maya.api.OpenMaya as OpenMaya
from . import editor as editorModel
import maya.app.renderSetup.common.guard as guard
import maya.app.renderSetup.model.applyOverride as applyOverride
import maya.cmds as cmds
from . import item as itemModel


if False:
    from typing import Dict, List, Tuple, Union, Optional

class LightItem(itemModel.LightItemBase):
    """
    Light editor item for light sources
    """
    
    
    
    def __init__(self): ...
    def compute(self, mplug, dataBlock): ...
    def dispose(self, deleteLight): ...
    def getAttrName(self, index): ...
    def getAttrPlug(self, index): ...
    def getAttrValue(self, index): ...
    def getLightName(self, fullPath='False'): ...
    def getLightShape(self): ...
    def getLightTransform(self): ...
    def getLightTransformName(self, fullPath='False'): ...
    def getLightType(self): ...
    def isAbstractClass(self): ...
    def isAcceptableChild(self, model):
        """
        Check if the model could be a child
        """
        ...
    def isConnected(self, index): ...
    def registerCallbacks(self, lightShapeObj): ...
    def rename(self, newName): ...
    def setLightShape(self, lightShapeObj): ...
    def unregisterCallbacks(self): ...
    @classmethod
    def creator(cls): ...
    @staticmethod
    def initializer(): ...
    kTypeId : OpenMaya.MTypeId
    
    kTypeName : str
    
    light : OpenMaya.MObject



