from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import OpenMaya
import weakref
from . import OpenMayaRender
from . import _OpenMayaUI


from __builtin__ import object as _object
from __builtin__ import property as _swig_property


if False:
    from typing import Dict, List, Tuple, Union, Optional

class MMaterial(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def applyTexture(self, *args): ...
    def evaluateDiffuse(self, *args): ...
    def evaluateEmission(self, *args): ...
    def evaluateMaterial(self, *args): ...
    def evaluateShininess(self, *args): ...
    def evaluateSpecular(self, *args): ...
    def evaluateTexture(self, *args): ...
    def evaluateTextureTransformation(self, *args): ...
    def getDiffuse(self, *args): ...
    def getEmission(self, *args): ...
    def getHasTransparency(self, *args): ...
    def getHwShaderNode(self, *args): ...
    def getShininess(self, *args): ...
    def getSpecular(self, *args): ...
    def getTextureTransformation(self, *args): ...
    def materialIsTextured(self, *args): ...
    def setMaterial(self, *args): ...
    def shadingEngine(self, *args): ...
    def textureImage(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def defaultMaterial(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kAmbientColor : int
    
    kBumpMap : int
    
    kColor : int
    
    kCosinePower : int
    
    kDiffuse : int
    
    kEccentricity : int
    
    kHighlightSize : int
    
    kIncandescence : int
    
    kReflectedColor : int
    
    kReflectivity : int
    
    kRoughness : int
    
    kSpecularColor : int
    
    kSpecularRollOff : int
    
    kTransluscence : int
    
    kTransparency : int
    
    kWhiteness : int


class uIntPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class uCharPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MHWShaderSwatchGenerator(OpenMayaRender.MSwatchRenderBase):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def doIteration(self, *args): ...
    @staticmethod
    def createObj(*args, **kwargs): ...
    @staticmethod
    def getSwatchBackgroundColor(*args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class doublePtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MDrawRequestQueue(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def add(self, *args): ...
    def assign(self, *args): ...
    def isEmpty(self, *args): ...
    def remove(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MToolsInfo(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def isDirty(*args, **kwargs): ...
    @staticmethod
    def resetDirtyFlag(*args, **kwargs): ...
    @staticmethod
    def setDirtyFlag(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MTextureEditorDrawInfo(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def drawingFunction(self, *args): ...
    def setDrawingFunction(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kDrawEdgeForSelect : int
    
    kDrawEverything : int
    
    kDrawFacetForSelect : int
    
    kDrawFunctionFirst : int
    
    kDrawFunctionLast : int
    
    kDrawUVForSelect : int
    
    kDrawVertexForSelect : int
    
    kDrawWireframe : int


class charPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class shortPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPaintMessage(OpenMaya.MMessage):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def addVertexColorCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MGraphEditorInfo(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def getAnimCurveNodes(self, *args): ...
    def getViewportBounds(self, *args): ...
    def isNormalizedViewportMode(self, *args): ...
    def isStackedViewportMode(self, *args): ...
    def name(self, *args): ...
    def reset(self, *args): ...
    def setViewportBounds(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kAnimCurveAllKnown : int
    
    kAnimCurveHighlighted : int
    
    kAnimCurveOutlinerOnly : int
    
    kAnimCurveSelected : int


class MExternalDropData(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args, **kwargs): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def color(self, *args): ...
    def dataSize(self, *args): ...
    def formats(self, *args): ...
    def hasColor(self, *args): ...
    def hasFormat(self, *args): ...
    def hasHtml(self, *args): ...
    def hasImage(self, *args): ...
    def hasText(self, *args): ...
    def hasUrls(self, *args): ...
    def html(self, *args): ...
    def image(self, *args): ...
    def keyboardModifiers(self, *args): ...
    def mouseButtons(self, *args): ...
    def text(self, *args): ...
    def urls(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kAltModifier : int
    
    kControlModifier : int
    
    kLeftButton : int
    
    kMidButton : int
    
    kMiddleButton : int
    
    kNoModifier : int
    
    kRightButton : int
    
    kShiftModifier : int


class MExternalDropCallback(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def externalDropCallback(self, *args): ...
    @staticmethod
    def addCallback(*args, **kwargs): ...
    @staticmethod
    def removeCallback(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kMayaDefault : int
    
    kNoMayaDefaultAndAccept : int
    
    kNoMayaDefaultAndNoAccept : int


class MDrawRequest(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def color(self, *args): ...
    def component(self, *args): ...
    def displayCullOpposite(self, *args): ...
    def displayCulling(self, *args): ...
    def displayStatus(self, *args): ...
    def displayStyle(self, *args): ...
    def drawData(self, *args): ...
    def drawLast(self, *args): ...
    def isTransparent(self, *args): ...
    def material(self, *args): ...
    def matrix(self, *args): ...
    def multiPath(self, *args): ...
    def setColor(self, *args): ...
    def setComponent(self, *args): ...
    def setDisplayCullOpposite(self, *args): ...
    def setDisplayCulling(self, *args): ...
    def setDisplayStatus(self, *args): ...
    def setDisplayStyle(self, *args): ...
    def setDrawData(self, *args): ...
    def setDrawLast(self, *args): ...
    def setIsTransparent(self, *args): ...
    def setMaterial(self, *args): ...
    def setMatrix(self, *args): ...
    def setMultiPath(self, *args): ...
    def setToken(self, *args): ...
    def setView(self, *args): ...
    def token(self, *args): ...
    def view(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MUiMessage(OpenMaya.MMessage):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def add3dViewDestroyMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPostMultipleDrawPassMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPostRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPreMultipleDrawPassMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewPreRenderMsgCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRenderOverrideChangedCallback(*args, **kwargs): ...
    @staticmethod
    def add3dViewRendererChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addCameraChangedCallback(*args, **kwargs): ...
    @staticmethod
    def addUiDeletedCallback(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MQtUtil(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def addWidgetToMayaLayout(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def createCursor(*args, **kwargs): ...
    @staticmethod
    def createIcon(*args, **kwargs): ...
    @staticmethod
    def createPixmap(*args, **kwargs): ...
    @staticmethod
    def deregisterUIType(*args, **kwargs): ...
    @staticmethod
    def dpiScale(*args, **kwargs): ...
    @staticmethod
    def findControl(*args, **kwargs): ...
    @staticmethod
    def findLayout(*args, **kwargs): ...
    @staticmethod
    def findMenuItem(*args, **kwargs): ...
    @staticmethod
    def findWindow(*args, **kwargs): ...
    @staticmethod
    def fullName(*args, **kwargs): ...
    @staticmethod
    def getCurrentParent(*args, **kwargs): ...
    @staticmethod
    def getLayoutChildren(*args, **kwargs): ...
    @staticmethod
    def getParent(*args, **kwargs): ...
    @staticmethod
    def mainWindow(*args, **kwargs): ...
    @staticmethod
    def nativeWindow(*args, **kwargs): ...
    @staticmethod
    def registerUIType(*args, **kwargs): ...
    @staticmethod
    def resourceGLContext(*args, **kwargs): ...
    @staticmethod
    def toMString(*args, **kwargs): ...
    @staticmethod
    def toQString(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MDeviceChannel(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def axisIndex(self, *args): ...
    def childByIndex(self, *args): ...
    def hasChildren(self, *args): ...
    def longName(self, *args): ...
    def name(self, *args): ...
    def numChildren(self, *args): ...
    def parent(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MProgressWindow(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def advanceProgress(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def endProgress(*args, **kwargs): ...
    @staticmethod
    def isCancelled(*args, **kwargs): ...
    @staticmethod
    def isInterruptable(*args, **kwargs): ...
    @staticmethod
    def progress(*args, **kwargs): ...
    @staticmethod
    def progressMax(*args, **kwargs): ...
    @staticmethod
    def progressMin(*args, **kwargs): ...
    @staticmethod
    def progressStatus(*args, **kwargs): ...
    @staticmethod
    def reserve(*args, **kwargs): ...
    @staticmethod
    def setInterruptable(*args, **kwargs): ...
    @staticmethod
    def setProgress(*args, **kwargs): ...
    @staticmethod
    def setProgressMax(*args, **kwargs): ...
    @staticmethod
    def setProgressMin(*args, **kwargs): ...
    @staticmethod
    def setProgressRange(*args, **kwargs): ...
    @staticmethod
    def setProgressStatus(*args, **kwargs): ...
    @staticmethod
    def setTitle(*args, **kwargs): ...
    @staticmethod
    def startProgress(*args, **kwargs): ...
    @staticmethod
    def title(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MCursor(_object):
    def __del__(self): ...
    def __eq__(self, other: Any) -> bool: ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    crossHairCursor : MCursor
    
    defaultCursor : MCursor
    
    doubleCrossHairCursor : MCursor
    
    editCursor : MCursor
    
    handCursor : MCursor
    
    pencilCursor : MCursor


class MManipData(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def asBool(self, *args): ...
    def asDouble(self, *args): ...
    def asFloat(self, *args): ...
    def asLong(self, *args): ...
    def asMObject(self, *args): ...
    def asShort(self, *args): ...
    def asUnsigned(self, *args): ...
    def assign(self, *args): ...
    def isSimple(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class boolPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MEvent(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def getPosition(self, *args): ...
    def getWindowPosition(self, *args): ...
    def isModifierControl(self, *args): ...
    def isModifierKeyRelease(self, *args): ...
    def isModifierLeftMouseButton(self, *args): ...
    def isModifierMiddleMouseButton(self, *args): ...
    def isModifierNone(self, *args): ...
    def isModifierShift(self, *args): ...
    def modifiers(self, *args): ...
    def mouseButton(self, *args): ...
    def setModifiers(self, *args): ...
    def setPosition(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    controlKey : int
    
    kLeftMouse : int
    
    kMiddleMouse : int
    
    shiftKey : int


class MFeedbackLine(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def clear(*args, **kwargs): ...
    @staticmethod
    def setFormat(*args, **kwargs): ...
    @staticmethod
    def setShowFeedback(*args, **kwargs): ...
    @staticmethod
    def setTitle(*args, **kwargs): ...
    @staticmethod
    def setValue(*args, **kwargs): ...
    @staticmethod
    def showFeedback(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class floatPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MDrawInfo(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def canDrawComponent(self, *args): ...
    def completelyInside(self, *args): ...
    def displayStatus(self, *args): ...
    def displayStyle(self, *args): ...
    def getPrototype(self, *args): ...
    def inSelect(self, *args): ...
    def inUserInteraction(self, *args): ...
    def inclusiveMatrix(self, *args): ...
    def multiPath(self, *args): ...
    def objectDisplayStatus(self, *args): ...
    def pluginObjectDisplayStatus(self, *args): ...
    def projectionMatrix(self, *args): ...
    def setMultiPath(self, *args): ...
    def userChangingViewContext(self, *args): ...
    def view(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MFnManip3D(OpenMaya.MFnTransform):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def isOptimizePlaybackOn(self, *args): ...
    def isVisible(self, *args): ...
    def manipScale(self, *args): ...
    def rotateXYZValue(self, *args): ...
    def setManipScale(self, *args): ...
    def setOptimizePlayback(self, *args): ...
    def setVisible(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def deleteManipulator(*args, **kwargs): ...
    @staticmethod
    def drawPlaneHandles(*args, **kwargs): ...
    @staticmethod
    def globalSize(*args, **kwargs): ...
    @staticmethod
    def handleSize(*args, **kwargs): ...
    @staticmethod
    def lineSize(*args, **kwargs): ...
    @staticmethod
    def setDrawPlaneHandles(*args, **kwargs): ...
    @staticmethod
    def setGlobalSize(*args, **kwargs): ...
    @staticmethod
    def setHandleSize(*args, **kwargs): ...
    @staticmethod
    def setLineSize(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnToolContext(OpenMaya.MFnBase):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def name(self, *args): ...
    def title(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MDrawTraversal(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def enableFiltering(self, *args): ...
    def filterNode(self, *args): ...
    def filteringEnabled(self, *args): ...
    def frustumValid(self, *args): ...
    def itemHasStatus(self, *args): ...
    def itemPath(self, *args): ...
    def leafLevelCulling(self, *args): ...
    def numberOfItems(self, *args): ...
    def setFrustum(self, *args): ...
    def setLeafLevelCulling(self, *args): ...
    def setOrthoFrustum(self, *args): ...
    def setPerspFrustum(self, *args): ...
    def traverse(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kActiveItem : int
    
    kTemplateItem : int


class M3dView(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def beginGL(self, *args): ...
    def beginProjMatrixOverride(self, *args): ...
    def beginSelect(self, *args): ...
    def beginXorDrawing(self, *args): ...
    def colorAtIndex(self, *args): ...
    def colorMask(self, *args): ...
    def deviceContext(self, *args): ...
    def disallowPolygonOffset(self, *args): ...
    def display(self, *args): ...
    def displayStyle(self, *args): ...
    def drawText(self, *args): ...
    def endGL(self, *args): ...
    def endProjMatrixOverride(self, *args): ...
    def endSelect(self, *args): ...
    def endXorDrawing(self, *args): ...
    def filteredObjectList(self, *args): ...
    def getCamera(self, *args): ...
    def getColorIndexAndTable(self, *args): ...
    def getLightCount(self, *args): ...
    def getLightIndex(self, *args): ...
    def getLightPath(self, *args): ...
    def getLightingMode(self, *args): ...
    def getRendererName(self, *args): ...
    def getScreenPosition(self, *args): ...
    def initNames(self, *args): ...
    def isLightVisible(self, *args): ...
    def isShadeActiveOnly(self, *args): ...
    def isVisible(self, *args): ...
    def loadName(self, *args): ...
    def makeSharedContextCurrent(self, *args): ...
    def modelViewMatrix(self, *args): ...
    def multipleDrawEnabled(self, *args): ...
    def multipleDrawPassCount(self, *args): ...
    def numActiveColors(self, *args): ...
    def numDormantColors(self, *args): ...
    def numUserDefinedColors(self, *args): ...
    def objectDisplay(self, *args): ...
    def objectListFilterName(self, *args): ...
    def playblastPortHeight(self, *args): ...
    def playblastPortWidth(self, *args): ...
    def pluginObjectDisplay(self, *args): ...
    def popName(self, *args): ...
    def popViewport(self, *args): ...
    def portHeight(self, *args): ...
    def portWidth(self, *args): ...
    def projectionMatrix(self, *args): ...
    def pushName(self, *args): ...
    def pushViewport(self, *args): ...
    def readBufferTo2dTexture(self, *args): ...
    def readColorBuffer(self, *args): ...
    def readDepthMap(self, *args): ...
    def refresh(self, *args): ...
    def renderOverrideName(self, *args): ...
    def rendererString(self, *args): ...
    def scheduleRefresh(self, *args): ...
    def selectMode(self, *args): ...
    def setCamera(self, *args): ...
    def setColorMask(self, *args): ...
    def setDisallowPolygonOffset(self, *args): ...
    def setDisplayStyle(self, *args): ...
    def setDrawColor(self, *args): ...
    def setDrawColorAndAlpha(self, *args): ...
    def setMultipleDrawEnable(self, *args): ...
    def setMultipleDrawPassCount(self, *args): ...
    def setObjectDisplay(self, *args): ...
    def setObjectListFilterName(self, *args): ...
    def setPluginObjectDisplay(self, *args): ...
    def setRenderOverrideName(self, *args): ...
    def setShowObjectFilterNameInHUD(self, *args): ...
    def setShowViewSelectedChildren(self, *args): ...
    def setUserDefinedColor(self, *args): ...
    def setViewSelectedPrefix(self, *args): ...
    def showObjectFilterNameInHUD(self, *args): ...
    def showViewSelectedChildren(self, *args): ...
    def textureMode(self, *args): ...
    def twoSidedLighting(self, *args): ...
    def updateViewingParameters(self, *args): ...
    def userDefinedColorIndex(self, *args): ...
    def usingDefaultMaterial(self, *args): ...
    def usingMipmappedTextures(self, *args): ...
    def viewIsFiltered(self, *args): ...
    def viewSelectedPrefix(self, *args): ...
    def viewToObjectSpace(self, *args): ...
    def viewToWorld(self, *args): ...
    def viewport(self, *args): ...
    def widget(self, *args): ...
    def window(self, *args): ...
    def wireframeOnShaded(self, *args): ...
    def wireframeOnlyInShadedMode(self, *args): ...
    def worldToView(self, *args): ...
    def writeColorBuffer(self, *args): ...
    def xray(self, *args): ...
    def xrayJoints(self, *args): ...
    @staticmethod
    def active3dView(*args, **kwargs): ...
    @staticmethod
    def activeAffectedColor(*args, **kwargs): ...
    @staticmethod
    def activeTemplateColor(*args, **kwargs): ...
    @staticmethod
    def applicationShell(*args, **kwargs): ...
    @staticmethod
    def backgroundColor(*args, **kwargs): ...
    @staticmethod
    def backgroundColorBottom(*args, **kwargs): ...
    @staticmethod
    def backgroundColorTop(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def displayStatus(*args, **kwargs): ...
    @staticmethod
    def get3dView(*args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelEditor(*args, **kwargs): ...
    @staticmethod
    def getM3dViewFromModelPanel(*args, **kwargs): ...
    @staticmethod
    def hiliteColor(*args, **kwargs): ...
    @staticmethod
    def isBackgroundGradient(*args, **kwargs): ...
    @staticmethod
    def leadColor(*args, **kwargs): ...
    @staticmethod
    def liveColor(*args, **kwargs): ...
    @staticmethod
    def numberOf3dViews(*args, **kwargs): ...
    @staticmethod
    def referenceLayerColor(*args, **kwargs): ...
    @staticmethod
    def scheduleRefreshAllViews(*args, **kwargs): ...
    @staticmethod
    def templateColor(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kActive : int
    
    kActiveAffected : int
    
    kActiveColors : int
    
    kActiveComponent : int
    
    kActiveTemplate : int
    
    kBackgroundColor : int
    
    kBoundingBox : int
    
    kCenter : int
    
    kDefaultQualityRenderer : int
    
    kDepth_8 : int
    
    kDepth_Float : int
    
    kDisplayCVs : int
    
    kDisplayCameras : int
    
    kDisplayDeformers : int
    
    kDisplayDimensions : int
    
    kDisplayDynamicConstraints : int
    
    kDisplayDynamics : int
    
    kDisplayEverything : int
    
    kDisplayFluids : int
    
    kDisplayFollicles : int
    
    kDisplayGrid : int
    
    kDisplayHairSystems : int
    
    kDisplayHulls : int
    
    kDisplayIkHandles : int
    
    kDisplayImagePlane : int
    
    kDisplayJoints : int
    
    kDisplayLights : int
    
    kDisplayLocators : int
    
    kDisplayManipulators : int
    
    kDisplayMeshes : int
    
    kDisplayNCloths : int
    
    kDisplayNParticles : int
    
    kDisplayNRigids : int
    
    kDisplayNurbsCurves : int
    
    kDisplayNurbsSurfaces : int
    
    kDisplayParticleInstancers : int
    
    kDisplayPivots : int
    
    kDisplayPlanes : int
    
    kDisplaySelectHandles : int
    
    kDisplayStrokes : int
    
    kDisplaySubdivSurfaces : int
    
    kDisplayTextures : int
    
    kDormant : int
    
    kDormantColors : int
    
    kExcludeMotionTrails : int
    
    kExcludePluginShapes : int
    
    kExternalRenderer : int
    
    kFlatShaded : int
    
    kGouraudShaded : int
    
    kHighQualityRenderer : int
    
    kHilite : int
    
    kIntermediateObject : int
    
    kInvisible : int
    
    kLead : int
    
    kLeft : int
    
    kLightActive : int
    
    kLightAll : int
    
    kLightDefault : int
    
    kLightNone : int
    
    kLightSelected : int
    
    kLive : int
    
    kNoStatus : int
    
    kPoints : int
    
    kRight : int
    
    kStippleDashed : int
    
    kStippleNone : int
    
    kTemplate : int
    
    kTemplateColor : int
    
    kUnused1 : int
    
    kViewport2Renderer : int
    
    kWireFrame : int


class MObjectListFilter(_object):
    def UIname(self, *args): ...
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args, **kwargs): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def dependentOnSceneUpdates(self, *args): ...
    def filterType(self, *args): ...
    def getList(self, *args): ...
    def name(self, *args): ...
    def requireListUpdate(self, *args): ...
    def setFilterType(self, *args): ...
    def setUIName(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def deregisterFilter(*args, **kwargs): ...
    @staticmethod
    def registerFilter(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kAddRemoveObjects : int
    
    kExclusionList : int
    
    kInclusionList : int
    
    kNone : int
    
    kNumberOfFilterTypes : int


class MDrawData(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def geometry(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MMaterialArray(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __getitem__(self, *args): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def append(self, *args): ...
    def assign(self, *args): ...
    def clear(self, *args): ...
    def copy(self, *args): ...
    def insert(self, *args): ...
    def length(self, *args): ...
    def remove(self, *args): ...
    def set(self, *args): ...
    def setLength(self, *args): ...
    def setSizeIncrement(self, *args): ...
    def sizeIncrement(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MDeviceState(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args, **kwargs): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def buttonState(self, *args): ...
    def devicePosition(self, *args): ...
    def isNull(self, *args): ...
    def maxAxis(self, *args): ...
    def setButtonState(self, *args): ...
    def setDevicePosition(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class intPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MFnDistanceManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToDistancePlug(self, *args): ...
    def create(self, *args): ...
    def currentPointIndex(self, *args): ...
    def directionIndex(self, *args): ...
    def distanceIndex(self, *args): ...
    def isDrawLineOn(self, *args): ...
    def isDrawStartOn(self, *args): ...
    def scalingFactor(self, *args): ...
    def setDirection(self, *args): ...
    def setDrawLine(self, *args): ...
    def setDrawStart(self, *args): ...
    def setScalingFactor(self, *args): ...
    def setStartPoint(self, *args): ...
    def startPointIndex(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MSelectInfo(MDrawInfo):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addSelection(self, *args): ...
    def getAlignmentMatrix(self, *args): ...
    def getLocalRay(self, *args): ...
    def highestPriority(self, *args): ...
    def isRay(self, *args): ...
    def selectClosest(self, *args): ...
    def selectForHilite(self, *args): ...
    def selectOnHilitedOnly(self, *args): ...
    def selectPath(self, *args): ...
    def selectRect(self, *args): ...
    def selectable(self, *args): ...
    def selectableComponent(self, *args): ...
    def setHighestPriority(self, *args): ...
    def setSnapPoint(self, *args): ...
    def singleSelection(self, *args): ...
    def view(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnDiscManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def angleIndex(self, *args): ...
    def axisIndex(self, *args): ...
    def centerIndex(self, *args): ...
    def connectToAnglePlug(self, *args): ...
    def create(self, *args): ...
    def setAngle(self, *args): ...
    def setCenterPoint(self, *args): ...
    def setNormal(self, *args): ...
    def setRadius(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnDirectionManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToDirectionPlug(self, *args): ...
    def create(self, *args): ...
    def directionIndex(self, *args): ...
    def endPointIndex(self, *args): ...
    def setDirection(self, *args): ...
    def setDrawStart(self, *args): ...
    def setNormalizeDirection(self, *args): ...
    def setStartPoint(self, *args): ...
    def startPointIndex(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnCircleSweepManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def angleIndex(self, *args): ...
    def axisIndex(self, *args): ...
    def centerIndex(self, *args): ...
    def connectToAnglePlug(self, *args): ...
    def create(self, *args): ...
    def endCircleIndex(self, *args): ...
    def endPoint(self, *args): ...
    def setAngle(self, *args): ...
    def setCenterPoint(self, *args): ...
    def setDrawAsArc(self, *args): ...
    def setEndPoint(self, *args): ...
    def setNormal(self, *args): ...
    def setRadius(self, *args): ...
    def setStartPoint(self, *args): ...
    def startCircleIndex(self, *args): ...
    def startPoint(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnRotateManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToRotationCenterPlug(self, *args): ...
    def connectToRotationPlug(self, *args): ...
    def create(self, *args): ...
    def displayWithNode(self, *args): ...
    def isSnapModeOn(self, *args): ...
    def rotateMode(self, *args): ...
    def rotationCenterIndex(self, *args): ...
    def rotationIndex(self, *args): ...
    def setInitialRotation(self, *args): ...
    def setRotateMode(self, *args): ...
    def setRotationCenter(self, *args): ...
    def setSnapIncrement(self, *args): ...
    def setSnapMode(self, *args): ...
    def snapIncrement(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kGimbal : int
    
    kObjectSpace : int
    
    kWorldSpace : int


class MFnCurveSegmentManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToCurvePlug(self, *args): ...
    def connectToEndParamPlug(self, *args): ...
    def connectToStartParamPlug(self, *args): ...
    def create(self, *args): ...
    def curveIndex(self, *args): ...
    def endParamIndex(self, *args): ...
    def endParameter(self, *args): ...
    def setEndParameter(self, *args): ...
    def setStartParameter(self, *args): ...
    def startParamIndex(self, *args): ...
    def startParameter(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnToggleManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToTogglePlug(self, *args): ...
    def create(self, *args): ...
    def direction(self, *args): ...
    def directionIndex(self, *args): ...
    def length(self, *args): ...
    def lengthIndex(self, *args): ...
    def setDirection(self, *args): ...
    def setLength(self, *args): ...
    def setStartPoint(self, *args): ...
    def setToggle(self, *args): ...
    def startPoint(self, *args): ...
    def startPointIndex(self, *args): ...
    def toggle(self, *args): ...
    def toggleIndex(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnStateManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToStatePlug(self, *args): ...
    def create(self, *args): ...
    def maxStates(self, *args): ...
    def positionIndex(self, *args): ...
    def setInitialState(self, *args): ...
    def setMaxStates(self, *args): ...
    def state(self, *args): ...
    def stateIndex(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnScaleManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToScaleCenterPlug(self, *args): ...
    def connectToScalePlug(self, *args): ...
    def create(self, *args): ...
    def displayWithNode(self, *args): ...
    def getOrientation(self, *args): ...
    def getOrientationMode(self, *args): ...
    def isSnapModeOn(self, *args): ...
    def scaleCenterIndex(self, *args): ...
    def scaleIndex(self, *args): ...
    def setInitialScale(self, *args): ...
    def setOrientation(self, *args): ...
    def setOrientationMode(self, *args): ...
    def setSnapIncrement(self, *args): ...
    def setSnapMode(self, *args): ...
    def snapIncrement(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kArbitraryOrientation : int
    
    kDefaultOrientation : int


class MFnPointOnSurfaceManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToParamPlug(self, *args): ...
    def connectToSurfacePlug(self, *args): ...
    def create(self, *args): ...
    def getParameters(self, *args): ...
    def isDrawSurfaceOn(self, *args): ...
    def paramIndex(self, *args): ...
    def setDrawArrows(self, *args): ...
    def setDrawSurface(self, *args): ...
    def setParameters(self, *args): ...
    def surfaceIndex(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnPointOnCurveManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToCurvePlug(self, *args): ...
    def connectToParamPlug(self, *args): ...
    def create(self, *args): ...
    def curveIndex(self, *args): ...
    def curvePoint(self, *args): ...
    def isDrawCurveOn(self, *args): ...
    def paramIndex(self, *args): ...
    def parameter(self, *args): ...
    def setDrawCurve(self, *args): ...
    def setParameter(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MFnFreePointTriadManip(MFnManip3D):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectToPointPlug(self, *args): ...
    def create(self, *args): ...
    def isDrawAxesOn(self, *args): ...
    def isKeyframeAllOn(self, *args): ...
    def isSnapModeOn(self, *args): ...
    def pointIndex(self, *args): ...
    def setDirection(self, *args): ...
    def setDrawArrowHead(self, *args): ...
    def setDrawAxes(self, *args): ...
    def setGlobalTriadPlane(self, *args): ...
    def setKeyframeAll(self, *args): ...
    def setPoint(self, *args): ...
    def setSnapMode(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kViewPlane : int
    
    kXYPlane : int
    
    kXZPlane : int
    
    kYZPlane : int




def MProgressWindow_swigregister(*args, **kwargs): ...
def MQtUtil_swigregister(*args, **kwargs): ...
def MObjectListFilter_swigregister(*args, **kwargs): ...
def MEvent_className(*args, **kwargs): ...
def M3dView_isBackgroundGradient(*args, **kwargs): ...
def MExternalDropCallback_addCallback(*args, **kwargs): ...
def MProgressWindow_endProgress(*args, **kwargs): ...
def uIntPtr_swigregister(*args, **kwargs): ...
def weakref_proxy(*args, **kwargs):
    """
    proxy(object[, callback]) -- create a proxy object that weakly
    references 'object'.  'callback', if given, is called with a
    reference to the proxy when 'object' is about to be finalized.
    """
    ...
def MFnFreePointTriadManip_className(*args, **kwargs): ...
def MFnRotateManip_swigregister(*args, **kwargs): ...
def MToolsInfo_className(*args, **kwargs): ...
def MUiMessage_add3dViewRenderOverrideChangedCallback(*args, **kwargs): ...
def M3dView_numberOf3dViews(*args, **kwargs): ...
def MProgressWindow_setProgressMax(*args, **kwargs): ...
def MDeviceChannel_swigregister(*args, **kwargs): ...
def MDrawRequest_className(*args, **kwargs): ...
def MFeedbackLine_setShowFeedback(*args, **kwargs): ...
def MProgressWindow_advanceProgress(*args, **kwargs): ...
def M3dView_swigregister(*args, **kwargs): ...
def MFeedbackLine_swigregister(*args, **kwargs): ...
def MFeedbackLine_setValue(*args, **kwargs): ...
def MDeviceState_swigregister(*args, **kwargs): ...
def MFnManip3D_className(*args, **kwargs): ...
def MToolsInfo_swigregister(*args, **kwargs): ...
def MProgressWindow_isInterruptable(*args, **kwargs): ...
def M3dView_templateColor(*args, **kwargs): ...
def MFnStateManip_className(*args, **kwargs): ...
def intPtr_swigregister(*args, **kwargs): ...
def MUiMessage_add3dViewPreMultipleDrawPassMsgCallback(*args, **kwargs): ...
def MFnManip3D_globalSize(*args, **kwargs): ...
def MFnDiscManip_className(*args, **kwargs): ...
def MProgressWindow_startProgress(*args, **kwargs): ...
def MFnManip3D_lineSize(*args, **kwargs): ...
def MProgressWindow_progressMin(*args, **kwargs): ...
def MQtUtil_createPixmap(*args, **kwargs): ...
def MPaintMessage_addVertexColorCallback(*args, **kwargs): ...
def MFnManip3D_setDrawPlaneHandles(*args, **kwargs): ...
def MQtUtil_getParent(*args, **kwargs): ...
def floatPtr_swigregister(*args, **kwargs): ...
def MUiMessage_add3dViewPreRenderMsgCallback(*args, **kwargs): ...
def MQtUtil_mainWindow(*args, **kwargs): ...
def MDrawInfo_className(*args, **kwargs): ...
def MQtUtil_toQString(*args, **kwargs): ...
def MHWShaderSwatchGenerator_swigregister(*args, **kwargs): ...
def MMaterial_className(*args, **kwargs): ...
def MObjectListFilter_className(*args, **kwargs): ...
def MProgressWindow_progress(*args, **kwargs): ...
def M3dView_backgroundColor(*args, **kwargs): ...
def MFnToolContext_className(*args, **kwargs): ...
def floatPtr_frompointer(*args, **kwargs): ...
def MHWShaderSwatchGenerator_initialize(*args, **kwargs): ...
def _swig_setattr(self, class_type, name, value): ...
def MExternalDropCallback_swigregister(*args, **kwargs): ...
def MFnManip3D_handleSize(*args, **kwargs): ...
def MToolsInfo_isDirty(*args, **kwargs): ...
def M3dView_activeAffectedColor(*args, **kwargs): ...
def doublePtr_swigregister(*args, **kwargs): ...
def MFnScaleManip_className(*args, **kwargs): ...
def uCharPtr_swigregister(*args, **kwargs): ...
def MProgressWindow_reserve(*args, **kwargs): ...
def MSelectInfo_className(*args, **kwargs): ...
def M3dView_active3dView(*args, **kwargs): ...
def MProgressWindow_setProgressMin(*args, **kwargs): ...
def MProgressWindow_progressStatus(*args, **kwargs): ...
def shortPtr_frompointer(*args, **kwargs): ...
def uIntPtr_frompointer(*args, **kwargs): ...
def MFeedbackLine_showFeedback(*args, **kwargs): ...
def MFeedbackLine_setTitle(*args, **kwargs): ...
def MFnFreePointTriadManip_swigregister(*args, **kwargs): ...
def MFnScaleManip_swigregister(*args, **kwargs): ...
def M3dView_className(*args, **kwargs): ...
def MProgressWindow_title(*args, **kwargs): ...
def MFnToolContext_swigregister(*args, **kwargs): ...
def MHWShaderSwatchGenerator_createObj(*args, **kwargs): ...
def MUiMessage_addUiDeletedCallback(*args, **kwargs): ...
def M3dView_backgroundColorTop(*args, **kwargs): ...
def MUiMessage_add3dViewPostRenderMsgCallback(*args, **kwargs): ...
def MManipData_swigregister(*args, **kwargs): ...
def MQtUtil_findLayout(*args, **kwargs): ...
def MProgressWindow_isCancelled(*args, **kwargs): ...
def MFnPointOnCurveManip_swigregister(*args, **kwargs): ...
def MFnManip3D_setHandleSize(*args, **kwargs): ...
def MQtUtil_getCurrentParent(*args, **kwargs): ...
def MUiMessage_swigregister(*args, **kwargs): ...
def MSelectInfo_swigregister(*args, **kwargs): ...
def MFnManip3D_swigregister(*args, **kwargs): ...
def MUiMessage_add3dViewDestroyMsgCallback(*args, **kwargs): ...
def MQtUtil_getLayoutChildren(*args, **kwargs): ...
def MPaintMessage_swigregister(*args, **kwargs): ...
def MFnDiscManip_swigregister(*args, **kwargs): ...
def boolPtr_swigregister(*args, **kwargs): ...
def MFnToggleManip_swigregister(*args, **kwargs): ...
def MQtUtil_toMString(*args, **kwargs): ...
def MObjectListFilter_deregisterFilter(*args, **kwargs): ...
def MMaterial_swigregister(*args, **kwargs): ...
def M3dView_getM3dViewFromModelPanel(*args, **kwargs): ...
def MFnCurveSegmentManip_className(*args, **kwargs): ...
def MToolsInfo_resetDirtyFlag(*args, **kwargs): ...
def _swig_setattr_nondynamic(self, class_type, name, value, static='1'): ...
def M3dView_hiliteColor(*args, **kwargs): ...
def doublePtr_frompointer(*args, **kwargs): ...
def _swig_getattr(self, class_type, name): ...
def MCursor_swigregister(*args, **kwargs): ...
def uCharPtr_frompointer(*args, **kwargs): ...
def MMaterialArray_swigregister(*args, **kwargs): ...
def MProgressWindow_setProgressStatus(*args, **kwargs): ...
def MQtUtil_findWindow(*args, **kwargs): ...
def MExternalDropData_swigregister(*args, **kwargs): ...
def MQtUtil_nativeWindow(*args, **kwargs): ...
def MFeedbackLine_setFormat(*args, **kwargs): ...
def M3dView_displayStatus(*args, **kwargs): ...
def MTextureEditorDrawInfo_swigregister(*args, **kwargs): ...
def MFnCircleSweepManip_swigregister(*args, **kwargs): ...
def M3dView_applicationShell(*args, **kwargs): ...
def MProgressWindow_setTitle(*args, **kwargs): ...
def M3dView_referenceLayerColor(*args, **kwargs): ...
def MFnPointOnCurveManip_className(*args, **kwargs): ...
def charPtr_swigregister(*args, **kwargs): ...
def MMaterial_defaultMaterial(*args, **kwargs): ...
def MDrawRequestQueue_swigregister(*args, **kwargs): ...
def M3dView_liveColor(*args, **kwargs): ...
def MProgressWindow_className(*args, **kwargs): ...
def MDrawData_swigregister(*args, **kwargs): ...
def _swig_repr(self): ...
def MManipData_className(*args, **kwargs): ...
def MQtUtil_findControl(*args, **kwargs): ...
def MUiMessage_add3dViewRendererChangedCallback(*args, **kwargs): ...
def MUiMessage_addCameraChangedCallback(*args, **kwargs): ...
def MQtUtil_fullName(*args, **kwargs): ...
def MFnPointOnSurfaceManip_className(*args, **kwargs): ...
def MFnStateManip_swigregister(*args, **kwargs): ...
def MFnManip3D_deleteManipulator(*args, **kwargs): ...
def MQtUtil_createIcon(*args, **kwargs): ...
def MDrawTraversal_swigregister(*args, **kwargs): ...
def MQtUtil_registerUIType(*args, **kwargs): ...
def MProgressWindow_setProgress(*args, **kwargs): ...
def MFnDistanceManip_className(*args, **kwargs): ...
def M3dView_backgroundColorBottom(*args, **kwargs): ...
def MFnPointOnSurfaceManip_swigregister(*args, **kwargs): ...
def MQtUtil_addWidgetToMayaLayout(*args, **kwargs): ...
def MQtUtil_className(*args, **kwargs): ...
def MObjectListFilter_registerFilter(*args, **kwargs): ...
def MToolsInfo_setDirtyFlag(*args, **kwargs): ...
def MEvent_swigregister(*args, **kwargs): ...
def M3dView_scheduleRefreshAllViews(*args, **kwargs): ...
def MExternalDropCallback_removeCallback(*args, **kwargs): ...
def M3dView_leadColor(*args, **kwargs): ...
def MFnDistanceManip_swigregister(*args, **kwargs): ...
def MQtUtil_findMenuItem(*args, **kwargs): ...
def MMaterialArray_className(*args, **kwargs): ...
def MGraphEditorInfo_className(*args, **kwargs): ...
def MUiMessage_className(*args, **kwargs): ...
def M3dView_get3dView(*args, **kwargs): ...
def MGraphEditorInfo_swigregister(*args, **kwargs): ...
def MTextureEditorDrawInfo_className(*args, **kwargs): ...
def MDrawRequest_swigregister(*args, **kwargs): ...
def MFeedbackLine_className(*args, **kwargs): ...
def MFnDirectionManip_className(*args, **kwargs): ...
def MQtUtil_deregisterUIType(*args, **kwargs): ...
def MFnManip3D_drawPlaneHandles(*args, **kwargs): ...
def charPtr_frompointer(*args, **kwargs): ...
def MProgressWindow_setProgressRange(*args, **kwargs): ...
def M3dView_getM3dViewFromModelEditor(*args, **kwargs): ...
def MProgressWindow_setInterruptable(*args, **kwargs): ...
def MDrawRequestQueue_className(*args, **kwargs): ...
def MQtUtil_dpiScale(*args, **kwargs): ...
def M3dView_activeTemplateColor(*args, **kwargs): ...
def MFeedbackLine_clear(*args, **kwargs): ...
def MDrawData_className(*args, **kwargs): ...
def intPtr_frompointer(*args, **kwargs): ...
def MFnDirectionManip_swigregister(*args, **kwargs): ...
def MUiMessage_add3dViewPostMultipleDrawPassMsgCallback(*args, **kwargs): ...
def MFnManip3D_setGlobalSize(*args, **kwargs): ...
def MFnCurveSegmentManip_swigregister(*args, **kwargs): ...
def MHWShaderSwatchGenerator_getSwatchBackgroundColor(*args, **kwargs): ...
def boolPtr_frompointer(*args, **kwargs): ...
def shortPtr_swigregister(*args, **kwargs): ...
def MFnManip3D_setLineSize(*args, **kwargs): ...
def MQtUtil_createCursor(*args, **kwargs): ...
def MPaintMessage_className(*args, **kwargs): ...
def MFnToggleManip_className(*args, **kwargs): ...
def MProgressWindow_progressMax(*args, **kwargs): ...
def MFnCircleSweepManip_className(*args, **kwargs): ...
def MQtUtil_resourceGLContext(*args, **kwargs): ...
def MDrawInfo_swigregister(*args, **kwargs): ...
def MFnRotateManip_className(*args, **kwargs): ...


cvar
_newclass : int

