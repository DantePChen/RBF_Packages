#version 410

//**************************************************************************/
// Copyright (c) 2014,2018 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/


#define PI 3.14

// World transformation.
uniform mat4 gWXf : World;

uniform mat4 viewInv : ViewInverse; 

uniform mat4 viewMat : View; 

uniform mat4 projMat : Projection; 

// World-view-projection transformation.
uniform mat4 gWVPXf : WorldViewProjection;

uniform mat4 viewPrj : ViewProjection;

uniform vec2 viewPixSize : ViewportPixelSize;

// Maya HW Selection
uniform int gHWSPrimitiveBase : HWS_PrimitiveBase;


uniform float FlatTessellationBlend = 0.0;
uniform float DisplacementOffset = 0.5;
uniform float DisplacementMultiplier = 5.0;
uniform float ClippingBiasAdd = 10.0;

uniform float numInnerLevelsPer100Pix<
 string UIName = "Inner levels/100 *100 pix";
 > = 40;
uniform float numOuterLevelsPer30PixSeg<
  string UIName = "Outer levels/30 pix";
 > = 12;

uniform float TransparencyStd <
 string UIName = "Transparency"; 
 > = 0.0;
 
uniform float texScale <
 string UIName = "Height map scale factor"; 
 > = 1.0f;

uniform texture2D gHeightMap  <
	string ResourceName = "moonHeightMapSharp.jpg";
	string ResourceType = "2D";
    string UIName = "Height Map";
	int mipmaplevels = 0;
>;


uniform sampler2D gHeightMapSamp = sampler_state
{
    texture = <gHeightMap>;
};


//------------------------------------
// Lighting
//------------------------------------
uniform float rimFresnelMin
<
	string UIGroup = "Lighting";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
	string UIName = "Rim Light Min";
	int UIOrder = 60;
> = 0.8;

uniform float rimFresnelMax
<
	string UIGroup = "Lighting";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
	float UIStep = 0.001;
	string UIName = "Rim Light Max";
	int UIOrder = 61;
> = 1.0;

uniform float rimBrightness
<
	string UIGroup = "Lighting";
	string UIWidget = "Slider";
	float UIMin = 0.0;
	float UISoftMax = 10.0;
	float UIMax = 100000.0;
	float UIStep = 0.001;
	string UIName = "Rim Light Brightness";
	int UIOrder = 62;
> = 0.0;

uniform vec3 SpecularColor : Specular
<
	string UIGroup = "Specular";
	string UIName = "Specular Color";
	string UIWidget = "ColorPicker";
	int UIOrder = 404;
> = {1.0f, 1.0f, 1.0f };

uniform float SpecPower
<
	string UIGroup = "Specular";
	string UIWidget = "Slider";
	float UIMin = 0.0;	// 0 for anisotropic
	float UISoftMax = 100.0;
	float UIMax = 1000000;
	float UIStep = 0.01;
	string UIName = "Specular Power";
	int UIOrder = 405;
> = 20.0;


// ---------------------------------------------
// Light 0 GROUP
// ---------------------------------------------
// This value is controlled by Maya to tell us if a light should be calculated
// For example the artist may disable a light in the scene, or choose to see only the selected light
// This flag allows Maya to tell our shader not to contribute this light into the lighting
uniform bool light0Enable : LIGHTENABLE
<
	string Object = "Light 0";	// UI Group for lights, auto-closed
	string UIName = "Enable Light 0";
	int UIOrder = 20;
> = false;	// maya manages lights itself and defaults to no lights


// follows LightParameterInfo::ELightType
// spot = 2, point = 3, directional = 4, ambient = 5,
uniform int light0Type : LIGHTTYPE
<
	string Object = "Light 0";
	string UIName = "Light 0 Type";
	string UIFieldNames ="None:Default:Spot:Point:Directional:Ambient";
	int UIOrder = 21;
	float UIMin = 0;
	float UIMax = 5;
	float UIStep = 1;
> = 2;	// default to spot so the cone angle etc work when "Use Shader Settings" option is used

uniform vec3 light0Pos : POSITION 
< 
	string Object = "Light 0";
	string UIName = "Light 0 Position"; 
	string Space = "World"; 
	int UIOrder = 22;
> = {100.0f, 100.0f, 100.0f}; 

uniform vec3 light0Color : LIGHTCOLOR 
<
	string Object = "Light 0";
	string UIName = "Light 0 Color"; 
	string UIWidget = "Color"; 
	int UIOrder = 23;
> = { 1.0f, 1.0f, 1.0f};

uniform float light0Intensity : LIGHTINTENSITY 
<
	string Object = "Light 0";
	string UIName = "Light 0 Intensity"; 
	float UIMin = 0.0;
	float UIMax = 10;
	float UIStep = 0.01;
	int UIOrder = 24;
> = { 1.0f };

uniform vec3 light0Dir : DIRECTION 
< 
	string Object = "Light 0";
	string UIName = "Light 0 Direction"; 
	string Space = "World"; 
	int UIOrder = 25;
> = {100.0f, 100.0f, 100.0f}; 


uniform float light0ConeAngle : HOTSPOT // In radians
<
	string Object = "Light 0";
	string UIName = "Light 0 Cone Angle"; 
	float UIMin = 0;
	float UIMax = PI/2;
	int UIOrder = 26;
> = { 0.46f };

uniform float light0FallOff : FALLOFF // In radians. Sould be HIGHER then cone angle or lighted area will invert
<
	string Object = "Light 0";
	string UIName = "Light 0 Penumbra Angle"; 
	float UIMin = 0;
	float UIMax = PI/2;
	int UIOrder = 27;
> = { 0.7f };

uniform float light0AttenScale : DECAYRATE
<
	string Object = "Light 0";
	string UIName = "Light 0 Decay";
	float UIMin = 0.0;
	float UIMax = 20.0;
	float UIStep = 0.01;
	int UIOrder = 28;
> = {0.0};

uniform mat4 light0Matrix : SHADOWMAPMATRIX		
< 
	string Object = "Light 0";
	string UIWidget = "None"; 
>;

uniform int DiffuseModel
<
	string UIGroup = "Diffuse";
	string UIName = "Diffuse Model";
	string UIFieldNames ="Lambert:Soften Diffuse (Hair)";
	float UIMin = 0;
	float UIMax = 1;
	float UIStep = 1;
	int UIOrder = 198;
> = 0;

// Calculate a light:
struct lightOut
{
	float Specular;
	vec3 Color;
};



// Vertex shader input structure.
attribute APPDATA
{
	vec3 inPosition : POSITION;
	vec3 inNormal : NORMAL;
	vec2 inmap1 : TEXCOORD0;
};

attribute SHADERDATA
{
	vec4 Normal : NORMAL;
	vec4 WorldPosition : TEXCOORD0;
	vec4 map1 : TEXCOORD2;
};

attribute SHADERDATA2
{
	vec4 Normal : NORMAL;
	vec4 WorldPosition : TEXCOORD0;
	vec4 map1 : TEXCOORD2;
	vec4 colorIN : COLOR0;
};

// ShaderTessControl
attribute TCSDATA
{
	vec3 CP1 : TEXCOORD0;
	vec3 CP2 : TEXCOORD1;
	vec3 DominantNormalE0 : TEXCOORD2;
	vec3 DominantNormalE1 : TEXCOORD3;
	vec3 DominantNormalCorner : TEXCOORD4;
	vec4 Normal : NORMAL;
	vec4 WorldPosition : TEXCOORD5;
	vec4 map1 : TEXCOORD6;
};


attribute pixelOut 
{
    vec4 colorOut : COLOR0;
}



// Vertex shader.
GLSLShader VS
{
    void main()
    {		
		vec3 MulOp = ((mat3(gWXf)) * inNormal);
		vec3 NormalN = normalize(MulOp);
		vec4 WorldNormal = vec4(NormalN.xyz, 1.0);
		VS_OUT.Normal = WorldNormal;
		vec4 WorldPos = (gWXf * vec4(inPosition, 1));
		VS_OUT.WorldPosition = WorldPos;

		vec4 OutUVs = vec4(inmap1.x, inmap1.y, 0.0, 0.0);
		VS_OUT.map1 = OutUVs * texScale;
		gl_Position = VS_OUT.WorldPosition;	
		
    }
}



patchsize 3;
GLSLShader ShaderTessControl
{
vec3 ComputeCP(vec3 posA, vec3 posB, vec3 normA)
{
	return (2.0 * posA + posB - (dot((posB - posA), normA) * normA)) / 3.0;
}


float IsClipped(vec4 clipPos, float clipBias)
{
	float W = clipPos.w + clipBias;
	return (-W <= clipPos.x && clipPos.x <= W && -W <= clipPos.y && clipPos.y <= W && -W <= clipPos.z && clipPos.z <= W) ? 0.0 : 1.0;
}


float ComputeClipping(vec3 cpA, vec3 cpB, vec3 cpC, float clipBias, mat4 vprj)
{
	vec4 projPosA = vprj * vec4(cpA,1);
	vec4 projPosB = vprj * vec4(cpB,1);
	vec4 projPosC = vprj * vec4(cpC,1);
	return min(min(IsClipped(projPosA, clipBias), IsClipped(projPosB, clipBias)), IsClipped(projPosC, clipBias));
}

void ComputeAllLevels(vec3 cpA, vec3 cpB, vec3 cpC, mat4 mVPrj, bool clipAway)
{

    if(clipAway == true)
	{
	  gl_TessLevelInner[0] = 0.0;
	
	  gl_TessLevelOuter[0] = 0.0;
	  gl_TessLevelOuter[1] = 0.0;
	  gl_TessLevelOuter[2] = 0.0;	
	  return;
	}

	//Calculate Inner Level
	vec4 vViewPosA = viewMat * vec4(cpA,1);
	vec4 vViewPosB = viewMat * vec4(cpB,1);
	vec4 vViewPosC = viewMat * vec4(cpC,1);
	
	vViewPosA = vViewPosA / vViewPosA.w;
	vViewPosB = vViewPosB / vViewPosB.w;
	vViewPosC = vViewPosC / vViewPosC.w;
	
	vec3 ABView = vViewPosB.xyz - vViewPosA.xyz;
	vec3 ACView = vViewPosC.xyz - vViewPosA.xyz;
	
	vec3 triCenter = (vViewPosA.xyz+vViewPosB.xyz+vViewPosC.xyz)/3;
	
	float mulLengths = length(ABView) * length(ACView);
	float cosTheta = dot(ABView,ACView)/(mulLengths);
	float areaTriView = 0.5 * mulLengths * sqrt(1-cosTheta*cosTheta);
	
	//hypothetical 3d circle that has same area and that faces the camera
	float hypoRadius = sqrt(areaTriView /PI);
	vec3 hypoViewCirclePoint = triCenter + vec3(hypoRadius,0.0,0.0);
	
	vec4 vProjPosCenter = projMat * vec4(triCenter,1.0);
	vec4 vProjPosRadPoint = projMat * vec4(hypoViewCirclePoint,1.0);
	
	vProjPosCenter = vProjPosCenter / vProjPosCenter.w;
	vProjPosRadPoint = vProjPosRadPoint / vProjPosRadPoint.w;
	
	float newRadius = abs(vProjPosCenter - vProjPosRadPoint).x*0.5;
	
	float newArea = PI * newRadius * newRadius * viewPixSize.x * viewPixSize.y;
		
	gl_TessLevelInner[0] = numInnerLevelsPer100Pix * sqrt(newArea / (100*100));
	
	
	
	//Calculate Outer Levels
	vec4 vProjPosA = mVPrj * vec4(cpA,1);
    vec4 vProjPosB = mVPrj * vec4(cpB,1);
    vec4 vProjPosC = mVPrj * vec4(cpC,1);	
    
    //make in range [0; 1]
    vProjPosA = vProjPosA * 0.5 / vProjPosA.w + 0.5;
    vProjPosB = vProjPosB * 0.5 / vProjPosB.w + 0.5;
    vProjPosC = vProjPosC * 0.5 / vProjPosC.w + 0.5;
    
    //convert to pixels
    vProjPosA.x = vProjPosA.x * viewPixSize.x;
    vProjPosB.x = vProjPosB.x * viewPixSize.x;
    vProjPosC.x = vProjPosC.x * viewPixSize.x;
    vProjPosA.y = vProjPosA.y * viewPixSize.y;
    vProjPosB.y = vProjPosB.y * viewPixSize.y;
    vProjPosC.y = vProjPosC.y * viewPixSize.y;
		
	//gl_TessLevelOuter[0] corresponds to gl_InvocationID 1 and 2
	//gl_TessLevelOuter[1] corresponds to gl_InvocationID 0 and 1
	//gl_TessLevelOuter[2] corresponds to gl_InvocationID 2 and 0
	
	gl_TessLevelOuter[1] = length( vProjPosA.xy - vProjPosB.xy ) * numOuterLevelsPer30PixSeg / 30;
	gl_TessLevelOuter[0] = length( vProjPosB.xy - vProjPosC.xy ) * numOuterLevelsPer30PixSeg / 30;
	gl_TessLevelOuter[2] = length( vProjPosC.xy - vProjPosA.xy ) * numOuterLevelsPer30PixSeg / 30;
}

void main(void)
{
	//Make sure that PNAEN18 is chosen in technique annotation
	const uint index = gl_InvocationID;
	const uint nextIndex = index < 2 ? index + 1 : 0;
	const uint neighborIndex = 3 + 2 * index;
	const uint neighborNextIndex = neighborIndex + 1;
	vec3 myCP, neighborCP;
	myCP = ComputeCP(TCS_IN[index].WorldPosition.xyz, TCS_IN[nextIndex].WorldPosition.xyz, TCS_IN[index].Normal.xyz);
	neighborCP = ComputeCP(TCS_IN[neighborIndex].WorldPosition.xyz, TCS_IN[neighborNextIndex].WorldPosition.xyz, TCS_IN[neighborIndex].Normal.xyz);
	TCS_OUT[gl_InvocationID].CP1 = (myCP + neighborCP) / 2;
	myCP = ComputeCP(TCS_IN[nextIndex].WorldPosition.xyz, TCS_IN[index].WorldPosition.xyz, TCS_IN[nextIndex].Normal.xyz);
	neighborCP = ComputeCP(TCS_IN[neighborNextIndex].WorldPosition.xyz, TCS_IN[neighborIndex].WorldPosition.xyz, TCS_IN[neighborNextIndex].Normal.xyz);
	TCS_OUT[gl_InvocationID].CP2 = (myCP + neighborCP) / 2;

	if(index == 2) {
	    vec3 f3E = (TCS_OUT[0].CP1 + TCS_OUT[0].CP2 + TCS_OUT[1].CP1 + TCS_OUT[1].CP2 + TCS_OUT[2].CP1 + TCS_OUT[2].CP2) / 6.0;
	    vec3 f3V = (TCS_OUT[0].WorldPosition.xyz + TCS_OUT[1].WorldPosition.xyz + TCS_OUT[2].WorldPosition.xyz) / 3.0;
	    vec3 CPCenter = f3E + ((f3E - f3V) / 2.0);
	    float Clipped0 = ComputeClipping(TCS_IN[0].WorldPosition.xyz, TCS_OUT[0].CP1, TCS_OUT[0].CP2, ClippingBiasAdd, viewPrj);
	    float Clipped1 = ComputeClipping(TCS_IN[1].WorldPosition.xyz, TCS_OUT[1].CP1, TCS_OUT[1].CP2, ClippingBiasAdd, viewPrj);
	    float Clipped2 = ComputeClipping(TCS_IN[2].WorldPosition.xyz, TCS_OUT[2].CP1, TCS_OUT[2].CP2, ClippingBiasAdd, viewPrj);
		
		bool clipAway = false;
		vec4 centerViewPos = viewPrj * vec4(CPCenter, 1);
		float centerClipped = IsClipped(centerViewPos, ClippingBiasAdd);
		clipAway = !(Clipped0 != 0 && Clipped1 != 0 && Clipped2 != 0 && centerClipped != 0 );
		//gl_TessLevelOuter[0] = gl_TessLevelOuter[1] = gl_TessLevelOuter[2] = 2.0 * float(clipAway);
		//gl_TessLevelInner[0] = ( gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] ) / 3.0;

		ComputeAllLevels(TCS_IN[0].WorldPosition.xyz, TCS_IN[1].WorldPosition.xyz, TCS_IN[2].WorldPosition.xyz, viewPrj, !clipAway);

	}
	const uint dominantEdgeIndex = 9 + 2 * index;
	const uint dominantEdgeNextIndex = dominantEdgeIndex + 1;
	const uint dominantVertexIndex = 15 + index;
	TCS_OUT[gl_InvocationID].DominantNormalE0 = TCS_IN[dominantEdgeNextIndex].Normal.xyz;
	TCS_OUT[gl_InvocationID].DominantNormalE1 = TCS_IN[dominantEdgeIndex].Normal.xyz;
	TCS_OUT[gl_InvocationID].DominantNormalCorner = TCS_IN[dominantVertexIndex].Normal.xyz;
	TCS_OUT[gl_InvocationID].Normal = TCS_IN[index].Normal;
	TCS_OUT[gl_InvocationID].WorldPosition = TCS_IN[index].WorldPosition;
	TCS_OUT[gl_InvocationID].map1 = TCS_IN[index].map1;
}

}


// -------------------------------------- ShaderTessEval --------------------------------------
tesparams (triangles, fractional_odd_spacing, cw);
GLSLShader ShaderTessEval
{
vec3 PickDominant( vec3 vec,
			float U, float V, float W,
			vec3 DE0A, vec3 DE0B,
			vec3 DE1A, vec3 DE1B,
			vec3 DE2A, vec3 DE2B,
			vec3 DV0, vec3 DV1, vec3 DV2 )
{
	vec3 dominantVector = vec;

	float edgeThreshold = 0.0001f;
	int edgeU = (U == 0) ? 1 : 0;
	int edgeV = (V == 0) ? 1 : 0;
	int edgeW = (W == 0) ? 1 : 0;

	int corner = ((edgeU + edgeV + edgeW) == 2) ? 1 : 0;
	int innerarea = ((edgeU + edgeV + edgeW) == 0) ? 1 : 0;

	if (innerarea != 1)
	{
		if (corner == 1)
		{
			if (U > 1.0 - edgeThreshold)
				dominantVector = DV1;
			else if (V > 1.0 - edgeThreshold)
				dominantVector = DV2;
			else if (W > 1.0 - edgeThreshold)
				dominantVector = DV0;	
		}
		else
		{
			if (edgeU == 1)
				dominantVector = lerp(DE2A, DE2B, W);
			else if (edgeV == 1)
				dominantVector = lerp(DE0A, DE0B, U);
			else 
				dominantVector = lerp(DE1A, DE1B, V);
		}
	}

	return dominantVector;
}

void main(void)
{

	vec3 f3E = (TES_IN[0].CP1 + TES_IN[0].CP2 + TES_IN[1].CP1 + TES_IN[1].CP2 + TES_IN[2].CP1 + TES_IN[2].CP2) / 6.0;
	vec3 f3V = (TES_IN[0].WorldPosition.xyz + TES_IN[1].WorldPosition.xyz + TES_IN[2].WorldPosition.xyz) / 3.0;
	vec3 CPCenter = f3E + ((f3E - f3V) / 2.0);

	vec3 BarycentricCoords = gl_TessCoord.zyx; // swizzle axis to match DX
	float U = BarycentricCoords.x;
	float V = BarycentricCoords.y;
	float W = BarycentricCoords.z;

	float UU = U * U;
	float VV = V * V;
	float WW = W * W;
	float UU3 = UU * 3.0;
	float VV3 = VV * 3.0;
	float WW3 = WW * 3.0;
	
	vec3 position = 
		TES_IN[0].WorldPosition.xyz * WW * W +
		TES_IN[1].WorldPosition.xyz * UU * U +
		TES_IN[2].WorldPosition.xyz * VV * V +
		TES_IN[0].CP1 * WW3 * U +
		TES_IN[0].CP2 * W * UU3 +
		TES_IN[2].CP2 * WW3 * V +
		TES_IN[1].CP1 * UU3 * V +
		TES_IN[2].CP1 * W * VV3 +
		TES_IN[1].CP2 * U * VV3 +
		CPCenter * 6.0 * W * U * V;

	vec3 flatPosition = 
		TES_IN[0].WorldPosition.xyz * W +
		TES_IN[1].WorldPosition.xyz * U +
		TES_IN[2].WorldPosition.xyz * V;

	position = lerp(position, flatPosition, FlatTessellationBlend);

	TES_OUT.Normal = TES_IN[0].Normal * W + TES_IN[1].Normal * U + TES_IN[2].Normal * V;
	TES_OUT.Normal.xyz = normalize(TES_OUT.Normal.xyz);
	TES_OUT.map1 = TES_IN[0].map1 * W + TES_IN[1].map1 * U + TES_IN[2].map1 * V;
	
	vec4 Sampler = textureLod(gHeightMapSamp, vec2(TES_OUT.map1.x, 1-TES_OUT.map1.y), 0.0);
	vec3 PNCrackFixNORMAL = normalize( PickDominant(TES_OUT.Normal.xyz, U, V, W, TES_IN[0].DominantNormalE0, TES_IN[0].DominantNormalE1, TES_IN[1].DominantNormalE0, TES_IN[1].DominantNormalE1, TES_IN[2].DominantNormalE0, TES_IN[2].DominantNormalE1, TES_IN[0].DominantNormalCorner, TES_IN[1].DominantNormalCorner, TES_IN[2].DominantNormalCorner) );
	vec3 GrayScale = (PNCrackFixNORMAL * ((Sampler.x+Sampler.y+Sampler.z+Sampler.w)/4 - DisplacementOffset));
	vec3 DisplaceAmount = (DisplacementMultiplier * GrayScale);

	position.xyz += DisplaceAmount;
	
	gl_Position = vec4(position.xyz, 1);
	TES_OUT.WorldPosition = gl_Position;
	
	TES_OUT.colorIN = vec4(abs(Sampler.xyz),1.0);
	

	vec4 WorldViewSpace = (viewPrj * gl_Position);
	gl_Position = WorldViewSpace;
}

}


//Pixel Shader to show waves
GLSLShader PS_Wave
{
    //Useful Functions

	// Spot light cone
	float lightConeangle(float coneAngle, float coneFalloff, vec3 lightVec, vec3 lightDir) 
	{ 
		// the cone falloff should be equal or bigger then the coneAngle or the light inverts
		// this is added to make manually tweaking the spot settings easier.
		if (coneFalloff < coneAngle)
			coneFalloff = coneAngle;

		float LdotDir = dot(normalize(lightVec), lightDir); 

		// cheaper cone, no fall-off control would be:
		// float cone = pow(saturate(LdotDir), 1 / coneAngle); 

		// higher quality cone (more expensive):
		float cone = smoothstep( cos(coneFalloff), cos(coneAngle), LdotDir);

		return cone; 
	} 
	
	lightOut CalculateLight	(	bool lightEnable, int lightType, float lightAtten, vec3 lightPos, vec3 vertWorldPos, 
							vec3 lightColor, float lightIntensity, vec3 lightDir, float lightConeAngle, float lightFallOff, mat4 lightViewPrjMatrix, 
							vec3 vertexNormal, vec3 normal, vec3 diffuseColorIn, 
							vec3 eyeVec, float roughness,	vec3 specularColorIn, vec3 thickness, float softenMask, 
							float gammaCorrection, float rim, float glossiness, float opacity, vec3 ambientOcclusion, vec4 anisotropicDir )
	{
		lightOut OUT;

		OUT.Specular = 0.0;
		OUT.Color = vec3(0,0,0);

		if (lightEnable)
		{
			// For Maya, flip the lightDir:
			lightDir = -lightDir;

			// Ambient light does no diffuse, specular shading or shadow casting.
			// Because it does equal shading from all directions to the object, we will also not have it do any translucency.
			bool isAmbientLight = (lightType == 5);
			if (isAmbientLight)
			{
				OUT.Color = diffuseColorIn * lightColor * lightIntensity;
				// Ambient Occlusion (and sometimes Lightmap) should affect the contribution of the ambient light:
				OUT.Color.rgb *= ambientOcclusion;
				return OUT;
			}

			// directional light has no position, so we use lightDir instead
			bool isDirectionalLight = (lightType == 4);
			vec3 lightVec = lerp(lightPos - vertWorldPos, lightDir, float(isDirectionalLight));

			vec3 L = normalize(lightVec);	

			// Diffuse:
			vec3 diffuseColor = vec3(0,0,0);
			if (DiffuseModel == 0)	// Lambert:
			{
				diffuseColor = clamp(dot(normal, L), 0.0, 1.0) * diffuseColorIn;
			}
			else if (DiffuseModel == 1) // (hair/fur):
			{
				/// lerp to shift the shadow boundary for a softer look:
				diffuseColor = clamp( lerp(0.25, 1.0, dot(normal, L) ), 0.0, 1.0 ) * diffuseColorIn;
			}

			// Rim Light:
			float rimUnit = rim * clamp(dot(normal, -L), 0.0, 1.0);
			vec3 rimColor = vec3(rimUnit, rimUnit, rimUnit);	 

			// Specular:
			vec3 specularColor = vec3(0,0,0);

			// BLINN
			{
				// Phong:
				// vec3 R = -reflect(L, normal); 
				// float RdotV = saturate(dot(R,eyeVec));
				// specularColor = (pow(RdotV, glossiness) * specularColorIn);

				vec3 H = normalize(L + eyeVec); // half angle
				float NdotH = clamp(dot(normal, H),0.0,1.0);
				specularColor = specularColorIn * pow(NdotH, glossiness);
				specularColor *= clamp( dot(normal, L), 0.0, 1.0 );	// prevent spec leak on back side of model
			}
			

			// Light Attenuation:
			bool enableAttenuation = lightAtten > 0.0001f;
			float attenuation = 1.0f;
			if (!isDirectionalLight)	// directional lights do not support attenuation, skip calculation
			{
				attenuation = lerp(1.0, 1 / pow(length(lightVec), lightAtten), enableAttenuation);
			}

			// compensate diffuse and specular color with various light settings:
			specularColor *= (lightColor * lightIntensity * attenuation);
			diffuseColor *= (lightColor * lightIntensity * attenuation);

			// Spot light Cone Angle:
			if (lightType == 2)
			{
				float angle = lightConeangle(lightConeAngle, lightFallOff, lightVec, lightDir);
				diffuseColor *= angle;
				specularColor *= angle;
			}

			// Add specular and rim light on top of final output color
			// multiply OUT.Color with opacity since we are using a pre-multiplied alpha render state
			// if we don't do this, the rim may have halo's around it when the object is fully transparent
			OUT.Color += diffuseColor;
			OUT.Color *= opacity;

			OUT.Color += specularColor + rimColor;

			// Output specular and rim for opacity:
			OUT.Specular = dot(clamp(specularColor, 0.0, 1.0), vec3(0.3f, 0.6f, 0.1f)) + rimColor.r;


		} // end if light enabled

		return OUT;
	}

	//the pixel shader
    void main()
    {
	
        vec4 result;
    	vec3 N = PS_IN.Normal.xyz;
    	vec3 Nw = N;
    	vec3 V = normalize( viewInv[3].xyz - PS_IN.WorldPosition.xyz );
    	
    	float roughness = 0;
    	vec3 specularColorIn = vec3(0.0,0.0,0.0);
    	vec3 thickness = vec3(0.0,0.0,0.0);
    	float softenMask = 0;
    	float gammaCorrection = 0;
    	float rim = clamp((clamp(1.0f - dot(N, V),0.0, 1.0)-rimFresnelMin)/(max(rimFresnelMax, rimFresnelMin)  - rimFresnelMin),0.0, 1.0);
    		rim *= rimBrightness;	
    	float glossiness = max(1.0, SpecPower);
    	float opacity = 1.0f-TransparencyStd;
    	vec3 ambientOcclusion = vec3(1,1,1);
    	vec4 anisotropicDir = vec4(1.0,1.0,1.0,1.0);
		
		vec3 effectiveDiffuseColor = PS_IN.colorIN.xyz; //DiffuseColor;
    	
    	// light 0:
    	lightOut light0 = CalculateLight(	light0Enable, light0Type, light0AttenScale, light0Pos, PS_IN.WorldPosition.xyz, 
    										light0Color, light0Intensity, light0Dir, light0ConeAngle, light0FallOff, light0Matrix, 
    										 Nw, N, effectiveDiffuseColor, V, roughness, SpecularColor,
    										thickness, softenMask, gammaCorrection, rim, glossiness, opacity, ambientOcclusion, anisotropicDir );
    	
    	vec3 lightTotal =  light0.Color;
    	
    	lightTotal += effectiveDiffuseColor;
    	float specTotal = light0.Specular;
    	
    	float transparency = (specTotal) + opacity;
    	transparency = clamp(transparency, 0.0, 1.0);	// keep 0-1 range
    	
    	
    	result = vec4(lightTotal,transparency);  

#if GL_ES
        gl_FragColor = result;
#else
        colorOut = result;
#endif
    }
}

GLSLShader GS_Wireframe
{
  layout(triangles) in;
  layout(line_strip, max_vertices = 6) out;
  void main()
  {

	gl_Position = gl_in[0].gl_Position;
	EmitVertex();
	
	gl_Position = gl_in[1].gl_Position;
	EmitVertex();
	
	EndPrimitive();
	
	gl_Position = gl_in[1].gl_Position;
	EmitVertex();
	
	gl_Position = gl_in[2].gl_Position;
	EmitVertex();
	
	EndPrimitive();
	
	gl_Position = gl_in[2].gl_Position;
	EmitVertex();
	
	gl_Position = gl_in[0].gl_Position;
	EmitVertex();
	
	EndPrimitive();
  }

}

GLSLShader PS_Wireframe
{
   void main()
   {
   vec4 result = vec4(1.0,0.0,0.0,1.0);
   #if GL_ES
        gl_FragColor = result;
	#else
        colorOut = result;
	#endif
   }
}

// Pixel shader used for Viewport 2.0 hardware selection
GLSLShader PS_HWSelection
{
    void main()
    {
        int colorID = gHWSPrimitiveBase;

        vec4 color;
        color.x = float(colorID & 0x000000FF) / 255.0;
        color.y = float((colorID & 0x0000FF00) >> 8) / 255.0;
        color.z = float((colorID & 0x00FF0000) >> 16) / 255.0;
        color.w = float((colorID & 0xFF000000) >> 24) / 255.0;

#if GL_ES
        gl_FragColor = color;
#else
        colorOut = color;
#endif
    }
}

// Techniques.
technique Main
<
string Transparency = "Opaque";
string index_buffer_type = "GLSL_PNAEN18";
>
{
    pass p0
    {
        VertexShader (in APPDATA, out SHADERDATA VS_OUT) = VS;
		TessControlShader (in SHADERDATA TCS_IN, out TCSDATA TCS_OUT) = ShaderTessControl;
		TessEvaluationShader (in TCSDATA TES_IN, out SHADERDATA2 TES_OUT) = ShaderTessEval;
        PixelShader (in SHADERDATA2 PS_IN, out pixelOut) = PS_Wave;
    }
}

technique Wireframe
<
string Transparency = "Opaque";
string index_buffer_type = "GLSL_PNAEN18";
>
{
    pass p0
    {
        VertexShader (in APPDATA, out SHADERDATA VS_OUT) = VS;
		TessControlShader (in SHADERDATA TCS_IN, out TCSDATA TCS_OUT) = ShaderTessControl;
		TessEvaluationShader (in TCSDATA TES_IN, out SHADERDATA2 TES_OUT) = ShaderTessEval;
		GeometryShader ( in SHADERDATA2 GEO_IN , out SHADERDATA2 GEO_OUT ) = GS_Wireframe;
        PixelShader (in SHADERDATA2 PS_IN, out pixelOut) = PS_Wireframe;
    }
}

technique Main_Selection
<
string Transparency = "Opaque";
string index_buffer_type = "GLSL_PNAEN18";

// The technique is used for Maya HW selection.
string keyword = "mayaHWSelection";
>
{
	pass p0
	{
		VertexShader (in APPDATA, out SHADERDATA VS_OUT) = VS;
		TessControlShader (in SHADERDATA TCS_IN, out TCSDATA TCS_OUT) = ShaderTessControl;
		TessEvaluationShader (in TCSDATA TES_IN, out SHADERDATA2 TES_OUT) = ShaderTessEval;
		PixelShader (in SHADERDATA2 PS_IN, out pixelOut) = PS_HWSelection;
	}
}

technique Wireframe_Selection
<
string Transparency = "Opaque";
string index_buffer_type = "GLSL_PNAEN18";

// The technique is used for Maya HW selection.
string keyword = "mayaHWSelection";
>
{
    pass p0
    {
        VertexShader (in APPDATA, out SHADERDATA VS_OUT) = VS;
		TessControlShader (in SHADERDATA TCS_IN, out TCSDATA TCS_OUT) = ShaderTessControl;
		TessEvaluationShader (in TCSDATA TES_IN, out SHADERDATA2 TES_OUT) = ShaderTessEval;
		GeometryShader ( in SHADERDATA2 GEO_IN , out SHADERDATA2 GEO_OUT ) = GS_Wireframe;
        PixelShader (in SHADERDATA2 PS_IN, out pixelOut) = PS_HWSelection;
    }
}
