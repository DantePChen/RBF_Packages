from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtQml import QQmlImageProviderBase as _QQmlImageProviderBase
from PySide2.QtCore import QObject as _QObject
from PySide2.QtQml import QQmlParserStatus as _QQmlParserStatus
from PySide2.QtGui import QWindow as _QWindow


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QSGAbstractRenderer(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clearColor(*args, **kwargs): ...
    def clearMode(*args, **kwargs): ...
    def deviceRect(*args, **kwargs): ...
    def nodeChanged(*args, **kwargs): ...
    def projectionMatrix(*args, **kwargs): ...
    def renderScene(*args, **kwargs): ...
    def setClearColor(*args, **kwargs): ...
    def setClearMode(*args, **kwargs): ...
    def setDeviceRect(*args, **kwargs): ...
    def setProjectionMatrix(*args, **kwargs): ...
    def setProjectionMatrixToRect(*args, **kwargs): ...
    def setViewportRect(*args, **kwargs): ...
    def viewportRect(*args, **kwargs): ...
    ClearColorBuffer : ClearModeBit
    
    ClearDepthBuffer : ClearModeBit
    
    ClearMode : Type[ClearMode]
    
    ClearModeBit : Type[ClearModeBit]
    
    ClearStencilBuffer : ClearModeBit
    
    __new__ : builtin_function_or_method
    
    sceneGraphChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickImageResponse(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def cancel(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def textureFactory(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    finished : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickImageProvider(_QQmlImageProviderBase):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def flags(*args, **kwargs): ...
    def imageType(*args, **kwargs): ...
    def requestImage(*args, **kwargs): ...
    def requestPixmap(*args, **kwargs): ...
    def requestTexture(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQuickRenderControl(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def grab(*args, **kwargs): ...
    def initialize(*args, **kwargs): ...
    def invalidate(*args, **kwargs): ...
    def polishItems(*args, **kwargs): ...
    def prepareThread(*args, **kwargs): ...
    def render(*args, **kwargs): ...
    def renderWindow(*args, **kwargs): ...
    def sync(*args, **kwargs): ...
    @staticmethod
    def renderWindowFor(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    renderRequested : PySide2.QtCore.Signal
    
    sceneChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSGGeometry(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def allocate(*args, **kwargs): ...
    def attributeCount(*args, **kwargs): ...
    def attributes(*args, **kwargs): ...
    def indexCount(*args, **kwargs): ...
    def indexData(*args, **kwargs): ...
    def indexDataAsUInt(*args, **kwargs): ...
    def indexDataAsUShort(*args, **kwargs): ...
    def indexDataPattern(*args, **kwargs): ...
    def indexType(*args, **kwargs): ...
    def lineWidth(*args, **kwargs): ...
    def markIndexDataDirty(*args, **kwargs): ...
    def markVertexDataDirty(*args, **kwargs): ...
    def setIndexDataPattern(*args, **kwargs): ...
    def setLineWidth(*args, **kwargs): ...
    def setVertexDataPattern(*args, **kwargs): ...
    def sizeOfIndex(*args, **kwargs): ...
    def sizeOfVertex(*args, **kwargs): ...
    def vertexCount(*args, **kwargs): ...
    def vertexData(*args, **kwargs): ...
    def vertexDataAsColoredPoint2D(*args, **kwargs): ...
    def vertexDataAsPoint2D(*args, **kwargs): ...
    def vertexDataAsTexturedPoint2D(*args, **kwargs): ...
    def vertexDataPattern(*args, **kwargs): ...
    @staticmethod
    def defaultAttributes_ColoredPoint2D(*args, **kwargs): ...
    @staticmethod
    def defaultAttributes_Point2D(*args, **kwargs): ...
    @staticmethod
    def defaultAttributes_TexturedPoint2D(*args, **kwargs): ...
    @staticmethod
    def updateRectGeometry(*args, **kwargs): ...
    @staticmethod
    def updateTexturedRectGeometry(*args, **kwargs): ...
    AlwaysUploadPattern : DataPattern
    
    Attribute : Type[Attribute]
    
    AttributeSet : Type[AttributeSet]
    
    ColoredPoint2D : Type[ColoredPoint2D]
    
    DataPattern : Type[DataPattern]
    
    DynamicPattern : DataPattern
    
    Point2D : Type[Point2D]
    
    StaticPattern : DataPattern
    
    StreamPattern : DataPattern
    
    TexturedPoint2D : Type[TexturedPoint2D]
    
    __new__ : builtin_function_or_method


class QQuickItemGrabResult(_QObject):
    def event(*args, **kwargs): ...
    def image(*args, **kwargs): ...
    def saveToFile(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    ready : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSGTextureProvider(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def texture(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    textureChanged : PySide2.QtCore.Signal


class QSGMaterialType(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QQuickTransform(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def appendToItem(*args, **kwargs): ...
    def applyTo(*args, **kwargs): ...
    def prependToItem(*args, **kwargs): ...
    def update(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickTextureFactory(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def createTexture(*args, **kwargs): ...
    def image(*args, **kwargs): ...
    def textureByteCount(*args, **kwargs): ...
    def textureSize(*args, **kwargs): ...
    @staticmethod
    def textureFactoryForImage(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    destroyed : PySide2.QtCore.Signal
    
    objectNameChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickItem(_QObject, _QQmlParserStatus):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def acceptHoverEvents(*args, **kwargs): ...
    def acceptedMouseButtons(*args, **kwargs): ...
    def activeFocusOnTab(*args, **kwargs): ...
    def antialiasing(*args, **kwargs): ...
    def baselineOffset(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def childAt(*args, **kwargs): ...
    def childItems(*args, **kwargs): ...
    def childMouseEventFilter(*args, **kwargs): ...
    def childrenRect(*args, **kwargs): ...
    def classBegin(*args, **kwargs): ...
    def clip(*args, **kwargs): ...
    def clipRect(*args, **kwargs): ...
    def componentComplete(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def cursor(*args, **kwargs): ...
    def dragEnterEvent(*args, **kwargs): ...
    def dragLeaveEvent(*args, **kwargs): ...
    def dragMoveEvent(*args, **kwargs): ...
    def dropEvent(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def filtersChildMouseEvents(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def focusInEvent(*args, **kwargs): ...
    def focusOutEvent(*args, **kwargs): ...
    def forceActiveFocus(*args, **kwargs): ...
    def geometryChanged(*args, **kwargs): ...
    def grabMouse(*args, **kwargs): ...
    def grabToImage(*args, **kwargs): ...
    def grabTouchPoints(*args, **kwargs): ...
    def hasActiveFocus(*args, **kwargs): ...
    def hasFocus(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def heightValid(*args, **kwargs): ...
    def hoverEnterEvent(*args, **kwargs): ...
    def hoverLeaveEvent(*args, **kwargs): ...
    def hoverMoveEvent(*args, **kwargs): ...
    def implicitHeight(*args, **kwargs): ...
    def implicitWidth(*args, **kwargs): ...
    def inputMethodEvent(*args, **kwargs): ...
    def inputMethodQuery(*args, **kwargs): ...
    def isComponentComplete(*args, **kwargs): ...
    def isEnabled(*args, **kwargs): ...
    def isFocusScope(*args, **kwargs): ...
    def isTextureProvider(*args, **kwargs): ...
    def isUnderMouse(*args, **kwargs): ...
    def isVisible(*args, **kwargs): ...
    def itemTransform(*args, **kwargs): ...
    def keepMouseGrab(*args, **kwargs): ...
    def keepTouchGrab(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def mapFromItem(*args, **kwargs): ...
    def mapFromScene(*args, **kwargs): ...
    def mapRectFromItem(*args, **kwargs): ...
    def mapRectFromScene(*args, **kwargs): ...
    def mapRectToItem(*args, **kwargs): ...
    def mapRectToScene(*args, **kwargs): ...
    def mapToItem(*args, **kwargs): ...
    def mapToScene(*args, **kwargs): ...
    def mouseDoubleClickEvent(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def mouseUngrabEvent(*args, **kwargs): ...
    def nextItemInFocusChain(*args, **kwargs): ...
    def opacity(*args, **kwargs): ...
    def parentItem(*args, **kwargs): ...
    def polish(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def releaseResources(*args, **kwargs): ...
    def resetAntialiasing(*args, **kwargs): ...
    def resetHeight(*args, **kwargs): ...
    def resetWidth(*args, **kwargs): ...
    def rotation(*args, **kwargs): ...
    def scale(*args, **kwargs): ...
    def scopedFocusItem(*args, **kwargs): ...
    def setAcceptHoverEvents(*args, **kwargs): ...
    def setAcceptedMouseButtons(*args, **kwargs): ...
    def setActiveFocusOnTab(*args, **kwargs): ...
    def setAntialiasing(*args, **kwargs): ...
    def setBaselineOffset(*args, **kwargs): ...
    def setClip(*args, **kwargs): ...
    def setCursor(*args, **kwargs): ...
    def setEnabled(*args, **kwargs): ...
    def setFiltersChildMouseEvents(*args, **kwargs): ...
    def setFlag(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def setFocus(*args, **kwargs): ...
    def setHeight(*args, **kwargs): ...
    def setImplicitHeight(*args, **kwargs): ...
    def setImplicitSize(*args, **kwargs): ...
    def setImplicitWidth(*args, **kwargs): ...
    def setKeepMouseGrab(*args, **kwargs): ...
    def setKeepTouchGrab(*args, **kwargs): ...
    def setOpacity(*args, **kwargs): ...
    def setParentItem(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def setRotation(*args, **kwargs): ...
    def setScale(*args, **kwargs): ...
    def setSize(*args, **kwargs): ...
    def setSmooth(*args, **kwargs): ...
    def setState(*args, **kwargs): ...
    def setTransformOrigin(*args, **kwargs): ...
    def setTransformOriginPoint(*args, **kwargs): ...
    def setVisible(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def setZ(*args, **kwargs): ...
    def smooth(*args, **kwargs): ...
    def stackAfter(*args, **kwargs): ...
    def stackBefore(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def textureProvider(*args, **kwargs): ...
    def touchEvent(*args, **kwargs): ...
    def touchUngrabEvent(*args, **kwargs): ...
    def transformOrigin(*args, **kwargs): ...
    def transformOriginPoint(*args, **kwargs): ...
    def ungrabMouse(*args, **kwargs): ...
    def ungrabTouchPoints(*args, **kwargs): ...
    def unsetCursor(*args, **kwargs): ...
    def update(*args, **kwargs): ...
    def updateInputMethod(*args, **kwargs): ...
    def updatePaintNode(*args, **kwargs): ...
    def updatePolish(*args, **kwargs): ...
    def wheelEvent(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def widthValid(*args, **kwargs): ...
    def window(*args, **kwargs): ...
    def windowDeactivateEvent(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    def z(*args, **kwargs): ...
    Bottom : TransformOrigin
    
    BottomLeft : TransformOrigin
    
    BottomRight : TransformOrigin
    
    Center : TransformOrigin
    
    Flag : Type[Flag]
    
    Flags : Type[Flags]
    
    ItemAcceptsDrops : Flag
    
    ItemAcceptsInputMethod : Flag
    
    ItemActiveFocusHasChanged : ItemChange
    
    ItemAntialiasingHasChanged : ItemChange
    
    ItemChange : Type[ItemChange]
    
    ItemChildAddedChange : ItemChange
    
    ItemChildRemovedChange : ItemChange
    
    ItemClipsChildrenToShape : Flag
    
    ItemDevicePixelRatioHasChanged : ItemChange
    
    ItemHasContents : Flag
    
    ItemIsFocusScope : Flag
    
    ItemOpacityHasChanged : ItemChange
    
    ItemParentHasChanged : ItemChange
    
    ItemRotationHasChanged : ItemChange
    
    ItemSceneChange : ItemChange
    
    ItemVisibleHasChanged : ItemChange
    
    Left : TransformOrigin
    
    Right : TransformOrigin
    
    Top : TransformOrigin
    
    TopLeft : TransformOrigin
    
    TopRight : TransformOrigin
    
    TransformOrigin : Type[TransformOrigin]
    
    UpdatePaintNodeData : Type[UpdatePaintNodeData]
    
    __new__ : builtin_function_or_method
    
    activeFocusChanged : PySide2.QtCore.Signal
    
    activeFocusOnTabChanged : PySide2.QtCore.Signal
    
    antialiasingChanged : PySide2.QtCore.Signal
    
    baselineOffsetChanged : PySide2.QtCore.Signal
    
    childrenChanged : PySide2.QtCore.Signal
    
    childrenRectChanged : PySide2.QtCore.Signal
    
    clipChanged : PySide2.QtCore.Signal
    
    enabledChanged : PySide2.QtCore.Signal
    
    focusChanged : PySide2.QtCore.Signal
    
    heightChanged : PySide2.QtCore.Signal
    
    implicitHeightChanged : PySide2.QtCore.Signal
    
    implicitWidthChanged : PySide2.QtCore.Signal
    
    opacityChanged : PySide2.QtCore.Signal
    
    parentChanged : PySide2.QtCore.Signal
    
    rotationChanged : PySide2.QtCore.Signal
    
    scaleChanged : PySide2.QtCore.Signal
    
    smoothChanged : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    transformOriginChanged : PySide2.QtCore.Signal
    
    visibleChanged : PySide2.QtCore.Signal
    
    visibleChildrenChanged : PySide2.QtCore.Signal
    
    widthChanged : PySide2.QtCore.Signal
    
    windowChanged : PySide2.QtCore.Signal
    
    xChanged : PySide2.QtCore.Signal
    
    yChanged : PySide2.QtCore.Signal
    
    zChanged : PySide2.QtCore.Signal


class QSGNode(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def appendChildNode(*args, **kwargs): ...
    def childAtIndex(*args, **kwargs): ...
    def childCount(*args, **kwargs): ...
    def clearDirty(*args, **kwargs): ...
    def dirtyState(*args, **kwargs): ...
    def firstChild(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def insertChildNodeAfter(*args, **kwargs): ...
    def insertChildNodeBefore(*args, **kwargs): ...
    def isSubtreeBlocked(*args, **kwargs): ...
    def lastChild(*args, **kwargs): ...
    def markDirty(*args, **kwargs): ...
    def nextSibling(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def prependChildNode(*args, **kwargs): ...
    def preprocess(*args, **kwargs): ...
    def previousSibling(*args, **kwargs): ...
    def removeAllChildNodes(*args, **kwargs): ...
    def removeChildNode(*args, **kwargs): ...
    def reparentChildNodesTo(*args, **kwargs): ...
    def setFlag(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    BasicNodeType : NodeType
    
    ClipNodeType : NodeType
    
    DirtyForceUpdate : DirtyStateBit
    
    DirtyGeometry : DirtyStateBit
    
    DirtyMaterial : DirtyStateBit
    
    DirtyMatrix : DirtyStateBit
    
    DirtyNodeAdded : DirtyStateBit
    
    DirtyNodeRemoved : DirtyStateBit
    
    DirtyOpacity : DirtyStateBit
    
    DirtyPropagationMask : DirtyStateBit
    
    DirtyState : Type[DirtyState]
    
    DirtyStateBit : Type[DirtyStateBit]
    
    DirtySubtreeBlocked : DirtyStateBit
    
    DirtyUsePreprocess : DirtyStateBit
    
    Flag : Type[Flag]
    
    Flags : Type[Flags]
    
    GeometryNodeType : NodeType
    
    IsVisitableNode : Flag
    
    NodeType : Type[NodeType]
    
    OpacityNodeType : NodeType
    
    OwnedByParent : Flag
    
    OwnsGeometry : Flag
    
    OwnsMaterial : Flag
    
    OwnsOpaqueMaterial : Flag
    
    RenderNodeType : NodeType
    
    RootNodeType : NodeType
    
    TransformNodeType : NodeType
    
    UsePreprocess : Flag
    
    __new__ : builtin_function_or_method


class QSGEngine(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def createRenderer(*args, **kwargs): ...
    def createTextureFromId(*args, **kwargs): ...
    def createTextureFromImage(*args, **kwargs): ...
    def initialize(*args, **kwargs): ...
    def invalidate(*args, **kwargs): ...
    CreateTextureOption : Type[CreateTextureOption]
    
    CreateTextureOptions : Type[CreateTextureOptions]
    
    TextureCanUseAtlas : CreateTextureOption
    
    TextureHasAlphaChannel : CreateTextureOption
    
    TextureIsOpaque : CreateTextureOption
    
    TextureOwnsGLTexture : CreateTextureOption
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickTextDocument(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def textDocument(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSGTexture(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bind(*args, **kwargs): ...
    def convertToNormalizedSourceRect(*args, **kwargs): ...
    def filtering(*args, **kwargs): ...
    def hasAlphaChannel(*args, **kwargs): ...
    def hasMipmaps(*args, **kwargs): ...
    def horizontalWrapMode(*args, **kwargs): ...
    def isAtlasTexture(*args, **kwargs): ...
    def mipmapFiltering(*args, **kwargs): ...
    def normalizedTextureSubRect(*args, **kwargs): ...
    def removedFromAtlas(*args, **kwargs): ...
    def setFiltering(*args, **kwargs): ...
    def setHorizontalWrapMode(*args, **kwargs): ...
    def setMipmapFiltering(*args, **kwargs): ...
    def setVerticalWrapMode(*args, **kwargs): ...
    def textureId(*args, **kwargs): ...
    def textureSize(*args, **kwargs): ...
    def updateBindOptions(*args, **kwargs): ...
    def verticalWrapMode(*args, **kwargs): ...
    ClampToEdge : WrapMode
    
    Filtering : Type[Filtering]
    
    Linear : Filtering
    
    Nearest : Filtering
    
    locals()['None'] : Filtering
    
    Repeat : WrapMode
    
    WrapMode : Type[WrapMode]
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickWindow(_QWindow):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def accessibleRoot(*args, **kwargs): ...
    def activeFocusItem(*args, **kwargs): ...
    def clearBeforeRendering(*args, **kwargs): ...
    def color(*args, **kwargs): ...
    def contentItem(*args, **kwargs): ...
    def createTextureFromId(*args, **kwargs): ...
    def createTextureFromImage(*args, **kwargs): ...
    def effectiveDevicePixelRatio(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def exposeEvent(*args, **kwargs): ...
    def focusInEvent(*args, **kwargs): ...
    def focusObject(*args, **kwargs): ...
    def focusOutEvent(*args, **kwargs): ...
    def grabWindow(*args, **kwargs): ...
    def hideEvent(*args, **kwargs): ...
    def incubationController(*args, **kwargs): ...
    def isPersistentOpenGLContext(*args, **kwargs): ...
    def isPersistentSceneGraph(*args, **kwargs): ...
    def isSceneGraphInitialized(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def mouseDoubleClickEvent(*args, **kwargs): ...
    def mouseGrabberItem(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def openglContext(*args, **kwargs): ...
    def releaseResources(*args, **kwargs): ...
    def renderTarget(*args, **kwargs): ...
    def renderTargetId(*args, **kwargs): ...
    def renderTargetSize(*args, **kwargs): ...
    def resetOpenGLState(*args, **kwargs): ...
    def resizeEvent(*args, **kwargs): ...
    def scheduleRenderJob(*args, **kwargs): ...
    def sendEvent(*args, **kwargs): ...
    def setClearBeforeRendering(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setPersistentOpenGLContext(*args, **kwargs): ...
    def setPersistentSceneGraph(*args, **kwargs): ...
    def setRenderTarget(*args, **kwargs): ...
    def showEvent(*args, **kwargs): ...
    def update(*args, **kwargs): ...
    def wheelEvent(*args, **kwargs): ...
    @staticmethod
    def hasDefaultAlphaBuffer(*args, **kwargs): ...
    @staticmethod
    def setDefaultAlphaBuffer(*args, **kwargs): ...
    AfterRenderingStage : RenderStage
    
    AfterSwapStage : RenderStage
    
    AfterSynchronizingStage : RenderStage
    
    BeforeRenderingStage : RenderStage
    
    BeforeSynchronizingStage : RenderStage
    
    ContextNotAvailable : SceneGraphError
    
    CreateTextureOption : Type[CreateTextureOption]
    
    CreateTextureOptions : Type[CreateTextureOptions]
    
    NoStage : RenderStage
    
    RenderStage : Type[RenderStage]
    
    SceneGraphError : Type[SceneGraphError]
    
    TextureCanUseAtlas : CreateTextureOption
    
    TextureHasAlphaChannel : CreateTextureOption
    
    TextureHasMipmaps : CreateTextureOption
    
    TextureIsOpaque : CreateTextureOption
    
    TextureOwnsGLTexture : CreateTextureOption
    
    __new__ : builtin_function_or_method
    
    activeFocusItemChanged : PySide2.QtCore.Signal
    
    afterAnimating : PySide2.QtCore.Signal
    
    afterRendering : PySide2.QtCore.Signal
    
    afterSynchronizing : PySide2.QtCore.Signal
    
    beforeRendering : PySide2.QtCore.Signal
    
    beforeSynchronizing : PySide2.QtCore.Signal
    
    closing : PySide2.QtCore.Signal
    
    colorChanged : PySide2.QtCore.Signal
    
    frameSwapped : PySide2.QtCore.Signal
    
    openglContextCreated : PySide2.QtCore.Signal
    
    sceneGraphAboutToStop : PySide2.QtCore.Signal
    
    sceneGraphError : PySide2.QtCore.Signal
    
    sceneGraphInitialized : PySide2.QtCore.Signal
    
    sceneGraphInvalidated : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QQuickFramebufferObject(QQuickItem):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def createRenderer(*args, **kwargs): ...
    def geometryChanged(*args, **kwargs): ...
    def isTextureProvider(*args, **kwargs): ...
    def mirrorVertically(*args, **kwargs): ...
    def releaseResources(*args, **kwargs): ...
    def setMirrorVertically(*args, **kwargs): ...
    def setTextureFollowsItemSize(*args, **kwargs): ...
    def textureFollowsItemSize(*args, **kwargs): ...
    def textureProvider(*args, **kwargs): ...
    def updatePaintNode(*args, **kwargs): ...
    Renderer : Type[Renderer]
    
    __new__ : builtin_function_or_method
    
    mirrorVerticallyChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    textureFollowsItemSizeChanged : PySide2.QtCore.Signal


class QSGOpacityNode(QSGNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def combinedOpacity(*args, **kwargs): ...
    def isSubtreeBlocked(*args, **kwargs): ...
    def opacity(*args, **kwargs): ...
    def setCombinedOpacity(*args, **kwargs): ...
    def setOpacity(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQuickAsyncImageProvider(QQuickImageProvider):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def requestImageResponse(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQuickView(QQuickWindow):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def engine(*args, **kwargs): ...
    def errors(*args, **kwargs): ...
    def initialSize(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def resizeEvent(*args, **kwargs): ...
    def resizeMode(*args, **kwargs): ...
    def rootContext(*args, **kwargs): ...
    def rootObject(*args, **kwargs): ...
    def setContent(*args, **kwargs): ...
    def setResizeMode(*args, **kwargs): ...
    def setSource(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    def source(*args, **kwargs): ...
    def status(*args, **kwargs): ...
    def timerEvent(*args, **kwargs): ...
    Error : Status
    
    Loading : Status
    
    Null : Status
    
    Ready : Status
    
    ResizeMode : Type[ResizeMode]
    
    SizeRootObjectToView : ResizeMode
    
    SizeViewToRootObject : ResizeMode
    
    Status : Type[Status]
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    statusChanged : PySide2.QtCore.Signal


class QSGBasicGeometryNode(QSGNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clipList(*args, **kwargs): ...
    def geometry(*args, **kwargs): ...
    def matrix(*args, **kwargs): ...
    def setGeometry(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQuickPaintedItem(QQuickItem):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def antialiasing(*args, **kwargs): ...
    def contentsBoundingRect(*args, **kwargs): ...
    def contentsScale(*args, **kwargs): ...
    def contentsSize(*args, **kwargs): ...
    def fillColor(*args, **kwargs): ...
    def isTextureProvider(*args, **kwargs): ...
    def mipmap(*args, **kwargs): ...
    def opaquePainting(*args, **kwargs): ...
    def paint(*args, **kwargs): ...
    def performanceHints(*args, **kwargs): ...
    def releaseResources(*args, **kwargs): ...
    def renderTarget(*args, **kwargs): ...
    def resetContentsSize(*args, **kwargs): ...
    def setAntialiasing(*args, **kwargs): ...
    def setContentsScale(*args, **kwargs): ...
    def setContentsSize(*args, **kwargs): ...
    def setFillColor(*args, **kwargs): ...
    def setMipmap(*args, **kwargs): ...
    def setOpaquePainting(*args, **kwargs): ...
    def setPerformanceHint(*args, **kwargs): ...
    def setPerformanceHints(*args, **kwargs): ...
    def setRenderTarget(*args, **kwargs): ...
    def setTextureSize(*args, **kwargs): ...
    def textureProvider(*args, **kwargs): ...
    def textureSize(*args, **kwargs): ...
    def update(*args, **kwargs): ...
    def updatePaintNode(*args, **kwargs): ...
    FastFBOResizing : PerformanceHint
    
    FramebufferObject : RenderTarget
    
    Image : RenderTarget
    
    InvertedYFramebufferObject : RenderTarget
    
    PerformanceHint : Type[PerformanceHint]
    
    PerformanceHints : Type[PerformanceHints]
    
    RenderTarget : Type[RenderTarget]
    
    __new__ : builtin_function_or_method
    
    contentsScaleChanged : PySide2.QtCore.Signal
    
    contentsSizeChanged : PySide2.QtCore.Signal
    
    fillColorChanged : PySide2.QtCore.Signal
    
    renderTargetChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    textureSizeChanged : PySide2.QtCore.Signal


class QSGDynamicTexture(QSGTexture):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def updateTexture(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSGTransformNode(QSGNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def combinedMatrix(*args, **kwargs): ...
    def matrix(*args, **kwargs): ...
    def setCombinedMatrix(*args, **kwargs): ...
    def setMatrix(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSGClipNode(QSGBasicGeometryNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clipRect(*args, **kwargs): ...
    def isRectangular(*args, **kwargs): ...
    def setClipRect(*args, **kwargs): ...
    def setIsRectangular(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSGGeometryNode(QSGBasicGeometryNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def inheritedOpacity(*args, **kwargs): ...
    def renderOrder(*args, **kwargs): ...
    def setInheritedOpacity(*args, **kwargs): ...
    def setRenderOrder(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSGSimpleRectNode(QSGGeometryNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def color(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setRect(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSGSimpleTextureNode(QSGGeometryNode):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def filtering(*args, **kwargs): ...
    def ownsTexture(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def setFiltering(*args, **kwargs): ...
    def setOwnsTexture(*args, **kwargs): ...
    def setRect(*args, **kwargs): ...
    def setSourceRect(*args, **kwargs): ...
    def setTexture(*args, **kwargs): ...
    def setTextureCoordinatesTransform(*args, **kwargs): ...
    def sourceRect(*args, **kwargs): ...
    def texture(*args, **kwargs): ...
    def textureCoordinatesTransform(*args, **kwargs): ...
    MirrorHorizontally : TextureCoordinatesTransformFlag
    
    MirrorVertically : TextureCoordinatesTransformFlag
    
    NoTransform : TextureCoordinatesTransformFlag
    
    TextureCoordinatesTransformFlag : Type[TextureCoordinatesTransformFlag]
    
    TextureCoordinatesTransformMode : Type[TextureCoordinatesTransformMode]
    
    __new__ : builtin_function_or_method



