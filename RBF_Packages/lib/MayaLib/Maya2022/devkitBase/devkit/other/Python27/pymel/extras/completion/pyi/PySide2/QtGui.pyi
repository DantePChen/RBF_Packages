from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtCore import QAbstractListModel as _QAbstractListModel
from PySide2.QtCore import QObject as _QObject
from PySide2.QtCore import QCoreApplication as _QCoreApplication
from PySide2.QtCore import QEvent as _QEvent
from PySide2.QtCore import QAbstractItemModel as _QAbstractItemModel


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QMatrix4x4(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(*args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def column(*args, **kwargs): ...
    def copyDataTo(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def determinant(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def flipCoordinates(*args, **kwargs): ...
    def frustum(*args, **kwargs): ...
    def inverted(*args, **kwargs): ...
    def isAffine(*args, **kwargs): ...
    def isIdentity(*args, **kwargs): ...
    def lookAt(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mapRect(*args, **kwargs): ...
    def mapVector(*args, **kwargs): ...
    def normalMatrix(*args, **kwargs): ...
    def optimize(*args, **kwargs): ...
    def ortho(*args, **kwargs): ...
    def perspective(*args, **kwargs): ...
    def rotate(*args, **kwargs): ...
    def row(*args, **kwargs): ...
    def scale(*args, **kwargs): ...
    def setColumn(*args, **kwargs): ...
    def setRow(*args, **kwargs): ...
    def setToIdentity(*args, **kwargs): ...
    def toAffine(*args, **kwargs): ...
    def toTransform(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    def viewport(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPainterPathStroker(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def capStyle(*args, **kwargs): ...
    def createStroke(*args, **kwargs): ...
    def curveThreshold(*args, **kwargs): ...
    def dashOffset(*args, **kwargs): ...
    def dashPattern(*args, **kwargs): ...
    def joinStyle(*args, **kwargs): ...
    def miterLimit(*args, **kwargs): ...
    def setCapStyle(*args, **kwargs): ...
    def setCurveThreshold(*args, **kwargs): ...
    def setDashOffset(*args, **kwargs): ...
    def setDashPattern(*args, **kwargs): ...
    def setJoinStyle(*args, **kwargs): ...
    def setMiterLimit(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPictureIO(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def description(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def gamma(*args, **kwargs): ...
    def ioDevice(*args, **kwargs): ...
    def parameters(*args, **kwargs): ...
    def picture(*args, **kwargs): ...
    def quality(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def setDescription(*args, **kwargs): ...
    def setFileName(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setGamma(*args, **kwargs): ...
    def setIODevice(*args, **kwargs): ...
    def setParameters(*args, **kwargs): ...
    def setPicture(*args, **kwargs): ...
    def setQuality(*args, **kwargs): ...
    def setStatus(*args, **kwargs): ...
    def status(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    @staticmethod
    def inputFormats(*args, **kwargs): ...
    @staticmethod
    def outputFormats(*args, **kwargs): ...
    @staticmethod
    def pictureFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QInputMethodEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def attributes(*args, **kwargs): ...
    def commitString(*args, **kwargs): ...
    def preeditString(*args, **kwargs): ...
    def replacementLength(*args, **kwargs): ...
    def replacementStart(*args, **kwargs): ...
    def setCommitString(*args, **kwargs): ...
    Attribute : Type[Attribute]
    
    AttributeType : Type[AttributeType]
    
    Cursor : AttributeType
    
    Language : AttributeType
    
    Ruby : AttributeType
    
    Selection : AttributeType
    
    TextFormat : AttributeType
    
    __new__ : builtin_function_or_method


class QFocusEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def gotFocus(*args, **kwargs): ...
    def lostFocus(*args, **kwargs): ...
    def reason(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QAccessibleInterface(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def backgroundColor(*args, **kwargs): ...
    def child(*args, **kwargs): ...
    def childAt(*args, **kwargs): ...
    def childCount(*args, **kwargs): ...
    def focusChild(*args, **kwargs): ...
    def foregroundColor(*args, **kwargs): ...
    def indexOfChild(*args, **kwargs): ...
    def interface_cast(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def role(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def virtual_hook(*args, **kwargs): ...
    def window(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QQuaternion(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(*args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def conjugate(*args, **kwargs): ...
    def conjugated(*args, **kwargs): ...
    def getAxes(*args, **kwargs): ...
    def inverted(*args, **kwargs): ...
    def isIdentity(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lengthSquared(*args, **kwargs): ...
    def normalize(*args, **kwargs): ...
    def normalized(*args, **kwargs): ...
    def rotatedVector(*args, **kwargs): ...
    def scalar(*args, **kwargs): ...
    def setScalar(*args, **kwargs): ...
    def setVector(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def setZ(*args, **kwargs): ...
    def toEulerAngles(*args, **kwargs): ...
    def toRotationMatrix(*args, **kwargs): ...
    def toVector4D(*args, **kwargs): ...
    def vector(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    def z(*args, **kwargs): ...
    @staticmethod
    def dotProduct(*args, **kwargs): ...
    @staticmethod
    def fromAxes(*args, **kwargs): ...
    @staticmethod
    def fromAxisAndAngle(*args, **kwargs): ...
    @staticmethod
    def fromDirection(*args, **kwargs): ...
    @staticmethod
    def fromEulerAngles(*args, **kwargs): ...
    @staticmethod
    def fromRotationMatrix(*args, **kwargs): ...
    @staticmethod
    def nlerp(*args, **kwargs): ...
    @staticmethod
    def rotationTo(*args, **kwargs): ...
    @staticmethod
    def slerp(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QBrush(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def color(*args, **kwargs): ...
    def gradient(*args, **kwargs): ...
    def isOpaque(*args, **kwargs): ...
    def matrix(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setMatrix(*args, **kwargs): ...
    def setStyle(*args, **kwargs): ...
    def setTexture(*args, **kwargs): ...
    def setTextureImage(*args, **kwargs): ...
    def setTransform(*args, **kwargs): ...
    def style(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def texture(*args, **kwargs): ...
    def textureImage(*args, **kwargs): ...
    def transform(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QStandardItemModel(_QAbstractItemModel):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def appendColumn(*args, **kwargs): ...
    def appendRow(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def columnCount(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def dropMimeData(*args, **kwargs): ...
    def findItems(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def hasChildren(*args, **kwargs): ...
    def headerData(*args, **kwargs): ...
    def horizontalHeaderItem(*args, **kwargs): ...
    def index(*args, **kwargs): ...
    def indexFromItem(*args, **kwargs): ...
    def insertColumn(*args, **kwargs): ...
    def insertColumns(*args, **kwargs): ...
    def insertRow(*args, **kwargs): ...
    def insertRows(*args, **kwargs): ...
    def invisibleRootItem(*args, **kwargs): ...
    def item(*args, **kwargs): ...
    def itemData(*args, **kwargs): ...
    def itemFromIndex(*args, **kwargs): ...
    def itemPrototype(*args, **kwargs): ...
    def mimeData(*args, **kwargs): ...
    def mimeTypes(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def removeRows(*args, **kwargs): ...
    def rowCount(*args, **kwargs): ...
    def setColumnCount(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setHeaderData(*args, **kwargs): ...
    def setHorizontalHeaderItem(*args, **kwargs): ...
    def setHorizontalHeaderLabels(*args, **kwargs): ...
    def setItem(*args, **kwargs): ...
    def setItemData(*args, **kwargs): ...
    def setItemPrototype(*args, **kwargs): ...
    def setItemRoleNames(*args, **kwargs): ...
    def setRowCount(*args, **kwargs): ...
    def setSortRole(*args, **kwargs): ...
    def setVerticalHeaderItem(*args, **kwargs): ...
    def setVerticalHeaderLabels(*args, **kwargs): ...
    def sibling(*args, **kwargs): ...
    def sort(*args, **kwargs): ...
    def sortRole(*args, **kwargs): ...
    def supportedDropActions(*args, **kwargs): ...
    def takeColumn(*args, **kwargs): ...
    def takeHorizontalHeaderItem(*args, **kwargs): ...
    def takeItem(*args, **kwargs): ...
    def takeRow(*args, **kwargs): ...
    def takeVerticalHeaderItem(*args, **kwargs): ...
    def verticalHeaderItem(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    itemChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QMatrix4x2(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextCursor(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def anchor(*args, **kwargs): ...
    def atBlockEnd(*args, **kwargs): ...
    def atBlockStart(*args, **kwargs): ...
    def atEnd(*args, **kwargs): ...
    def atStart(*args, **kwargs): ...
    def beginEditBlock(*args, **kwargs): ...
    def block(*args, **kwargs): ...
    def blockCharFormat(*args, **kwargs): ...
    def blockFormat(*args, **kwargs): ...
    def blockNumber(*args, **kwargs): ...
    def charFormat(*args, **kwargs): ...
    def clearSelection(*args, **kwargs): ...
    def columnNumber(*args, **kwargs): ...
    def createList(*args, **kwargs): ...
    def currentFrame(*args, **kwargs): ...
    def currentList(*args, **kwargs): ...
    def currentTable(*args, **kwargs): ...
    def deleteChar(*args, **kwargs): ...
    def deletePreviousChar(*args, **kwargs): ...
    def document(*args, **kwargs): ...
    def endEditBlock(*args, **kwargs): ...
    def hasComplexSelection(*args, **kwargs): ...
    def hasSelection(*args, **kwargs): ...
    def insertBlock(*args, **kwargs): ...
    def insertFragment(*args, **kwargs): ...
    def insertFrame(*args, **kwargs): ...
    def insertHtml(*args, **kwargs): ...
    def insertImage(*args, **kwargs): ...
    def insertList(*args, **kwargs): ...
    def insertTable(*args, **kwargs): ...
    def insertText(*args, **kwargs): ...
    def isCopyOf(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def joinPreviousEditBlock(*args, **kwargs): ...
    def keepPositionOnInsert(*args, **kwargs): ...
    def mergeBlockCharFormat(*args, **kwargs): ...
    def mergeBlockFormat(*args, **kwargs): ...
    def mergeCharFormat(*args, **kwargs): ...
    def movePosition(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def positionInBlock(*args, **kwargs): ...
    def removeSelectedText(*args, **kwargs): ...
    def select(*args, **kwargs): ...
    def selectedTableCells(*args, **kwargs): ...
    def selectedText(*args, **kwargs): ...
    def selection(*args, **kwargs): ...
    def selectionEnd(*args, **kwargs): ...
    def selectionStart(*args, **kwargs): ...
    def setBlockCharFormat(*args, **kwargs): ...
    def setBlockFormat(*args, **kwargs): ...
    def setCharFormat(*args, **kwargs): ...
    def setKeepPositionOnInsert(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def setVerticalMovementX(*args, **kwargs): ...
    def setVisualNavigation(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def verticalMovementX(*args, **kwargs): ...
    def visualNavigation(*args, **kwargs): ...
    BlockUnderCursor : SelectionType
    
    Document : SelectionType
    
    Down : MoveOperation
    
    End : MoveOperation
    
    EndOfBlock : MoveOperation
    
    EndOfLine : MoveOperation
    
    EndOfWord : MoveOperation
    
    KeepAnchor : MoveMode
    
    Left : MoveOperation
    
    LineUnderCursor : SelectionType
    
    MoveAnchor : MoveMode
    
    MoveMode : Type[MoveMode]
    
    MoveOperation : Type[MoveOperation]
    
    NextBlock : MoveOperation
    
    NextCell : MoveOperation
    
    NextCharacter : MoveOperation
    
    NextRow : MoveOperation
    
    NextWord : MoveOperation
    
    NoMove : MoveOperation
    
    PreviousBlock : MoveOperation
    
    PreviousCell : MoveOperation
    
    PreviousCharacter : MoveOperation
    
    PreviousRow : MoveOperation
    
    PreviousWord : MoveOperation
    
    Right : MoveOperation
    
    SelectionType : Type[SelectionType]
    
    Start : MoveOperation
    
    StartOfBlock : MoveOperation
    
    StartOfLine : MoveOperation
    
    StartOfWord : MoveOperation
    
    Up : MoveOperation
    
    WordLeft : MoveOperation
    
    WordRight : MoveOperation
    
    WordUnderCursor : SelectionType
    
    __new__ : builtin_function_or_method


class QSyntaxHighlighter(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def currentBlock(*args, **kwargs): ...
    def currentBlockState(*args, **kwargs): ...
    def currentBlockUserData(*args, **kwargs): ...
    def document(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def highlightBlock(*args, **kwargs): ...
    def previousBlockState(*args, **kwargs): ...
    def rehighlight(*args, **kwargs): ...
    def rehighlightBlock(*args, **kwargs): ...
    def setCurrentBlockState(*args, **kwargs): ...
    def setCurrentBlockUserData(*args, **kwargs): ...
    def setDocument(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QAccessible(_Object):
    def __copy__(*args, **kwargs): ...
    @staticmethod
    def cleanup(*args, **kwargs): ...
    @staticmethod
    def isActive(*args, **kwargs): ...
    @staticmethod
    def qAccessibleTextBoundaryHelper(*args, **kwargs): ...
    @staticmethod
    def queryAccessibleInterface(*args, **kwargs): ...
    @staticmethod
    def setActive(*args, **kwargs): ...
    @staticmethod
    def setRootObject(*args, **kwargs): ...
    @staticmethod
    def updateAccessibility(*args, **kwargs): ...
    Accelerator : Text
    
    AcceleratorChanged : Event
    
    ActionChanged : Event
    
    ActionInterface : InterfaceType
    
    ActiveDescendantChanged : Event
    
    Alert : Event
    
    AlertMessage : Role
    
    AllRelations : RelationFlag
    
    Animation : Role
    
    Application : Role
    
    Assistant : Role
    
    AttributeChanged : Event
    
    Border : Role
    
    Button : Role
    
    ButtonDropDown : Role
    
    ButtonDropGrid : Role
    
    ButtonMenu : Role
    
    Canvas : Role
    
    Caret : Role
    
    Cell : Role
    
    CharBoundary : TextBoundaryType
    
    Chart : Role
    
    CheckBox : Role
    
    Client : Role
    
    Clock : Role
    
    ColorChooser : Role
    
    Column : Role
    
    ColumnHeader : Role
    
    ComboBox : Role
    
    ComplementaryContent : Role
    
    ContextHelpEnd : Event
    
    ContextHelpStart : Event
    
    Controlled : RelationFlag
    
    Controller : RelationFlag
    
    Cursor : Role
    
    DebugDescription : Text
    
    DefaultActionChanged : Event
    
    Description : Text
    
    DescriptionChanged : Event
    
    Desktop : Role
    
    Dial : Role
    
    Dialog : Role
    
    DialogEnd : Event
    
    DialogStart : Event
    
    Document : Role
    
    DocumentContentChanged : Event
    
    DocumentLoadComplete : Event
    
    DocumentLoadStopped : Event
    
    DocumentReload : Event
    
    DragDropEnd : Event
    
    DragDropStart : Event
    
    EditableText : Role
    
    EditableTextInterface : InterfaceType
    
    Equation : Role
    
    Event : Type[Event]
    
    Focus : Event
    
    Footer : Role
    
    ForegroundChanged : Event
    
    Form : Role
    
    Graphic : Role
    
    Grip : Role
    
    Grouping : Role
    
    Heading : Role
    
    Help : Text
    
    HelpBalloon : Role
    
    HelpChanged : Event
    
    HotkeyField : Role
    
    HyperlinkEndIndexChanged : Event
    
    HyperlinkNumberOfAnchorsChanged : Event
    
    HyperlinkSelectedLinkChanged : Event
    
    HyperlinkStartIndexChanged : Event
    
    HypertextChanged : Event
    
    HypertextLinkActivated : Event
    
    HypertextLinkSelected : Event
    
    HypertextNLinksChanged : Event
    
    ImageInterface : InterfaceType
    
    Indicator : Role
    
    InterfaceType : Type[InterfaceType]
    
    InvalidEvent : Event
    
    Label : RelationFlag
    
    Labelled : RelationFlag
    
    LayeredPane : Role
    
    LineBoundary : TextBoundaryType
    
    Link : Role
    
    List : Role
    
    ListItem : Role
    
    LocationChanged : Event
    
    MenuBar : Role
    
    MenuCommand : Event
    
    MenuEnd : Event
    
    MenuItem : Role
    
    MenuStart : Event
    
    Name : Text
    
    NameChanged : Event
    
    NoBoundary : TextBoundaryType
    
    NoRole : Role
    
    Note : Role
    
    ObjectAttributeChanged : Event
    
    ObjectCreated : Event
    
    ObjectDestroyed : Event
    
    ObjectHide : Event
    
    ObjectReorder : Event
    
    ObjectShow : Event
    
    PageChanged : Event
    
    PageTab : Role
    
    PageTabList : Role
    
    Pane : Role
    
    Paragraph : Role
    
    ParagraphBoundary : TextBoundaryType
    
    ParentChanged : Event
    
    PopupMenu : Role
    
    PopupMenuEnd : Event
    
    PopupMenuStart : Event
    
    ProgressBar : Role
    
    PropertyPage : Role
    
    PushButton : Role
    
    RadioButton : Role
    
    RelationFlag : Type[RelationFlag]
    
    Role : Type[Role]
    
    Row : Role
    
    RowHeader : Role
    
    ScrollBar : Role
    
    ScrollingEnd : Event
    
    ScrollingStart : Event
    
    Section : Role
    
    SectionChanged : Event
    
    Selection : Event
    
    SelectionAdd : Event
    
    SelectionRemove : Event
    
    SelectionWithin : Event
    
    SentenceBoundary : TextBoundaryType
    
    Separator : Role
    
    Slider : Role
    
    Sound : Role
    
    SoundPlayed : Event
    
    SpinBox : Role
    
    Splitter : Role
    
    State : Type[State]
    
    StateChanged : Event
    
    StaticText : Role
    
    StatusBar : Role
    
    Table : Role
    
    TableCaptionChanged : Event
    
    TableCellInterface : InterfaceType
    
    TableColumnDescriptionChanged : Event
    
    TableColumnHeaderChanged : Event
    
    TableInterface : InterfaceType
    
    TableModelChanged : Event
    
    TableRowDescriptionChanged : Event
    
    TableRowHeaderChanged : Event
    
    TableSummaryChanged : Event
    
    Terminal : Role
    
    Text : Type[Text]
    
    TextAttributeChanged : Event
    
    TextBoundaryType : Type[TextBoundaryType]
    
    TextCaretMoved : Event
    
    TextColumnChanged : Event
    
    TextInserted : Event
    
    TextInterface : InterfaceType
    
    TextRemoved : Event
    
    TextSelectionChanged : Event
    
    TextUpdated : Event
    
    TitleBar : Role
    
    ToolBar : Role
    
    ToolTip : Role
    
    Tree : Role
    
    TreeItem : Role
    
    UserRole : Role
    
    UserText : Text
    
    Value : Text
    
    ValueChanged : Event
    
    ValueInterface : InterfaceType
    
    VisibleDataChanged : Event
    
    WebDocument : Role
    
    Whitespace : Role
    
    Window : Role
    
    WordBoundary : TextBoundaryType


class QPaintEngine(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def begin(*args, **kwargs): ...
    def clearDirty(*args, **kwargs): ...
    def coordinateOffset(*args, **kwargs): ...
    def drawEllipse(*args, **kwargs): ...
    def drawImage(*args, **kwargs): ...
    def drawLines(*args, **kwargs): ...
    def drawPath(*args, **kwargs): ...
    def drawPixmap(*args, **kwargs): ...
    def drawPoints(*args, **kwargs): ...
    def drawPolygon(*args, **kwargs): ...
    def drawRects(*args, **kwargs): ...
    def drawTextItem(*args, **kwargs): ...
    def drawTiledPixmap(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def hasFeature(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def isExtended(*args, **kwargs): ...
    def paintDevice(*args, **kwargs): ...
    def painter(*args, **kwargs): ...
    def setActive(*args, **kwargs): ...
    def setDirty(*args, **kwargs): ...
    def setSystemClip(*args, **kwargs): ...
    def setSystemRect(*args, **kwargs): ...
    def syncState(*args, **kwargs): ...
    def systemClip(*args, **kwargs): ...
    def systemRect(*args, **kwargs): ...
    def testDirty(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def updateState(*args, **kwargs): ...
    AllDirty : DirtyFlag
    
    AllFeatures : PaintEngineFeature
    
    AlphaBlend : PaintEngineFeature
    
    Antialiasing : PaintEngineFeature
    
    BlendModes : PaintEngineFeature
    
    Blitter : Type
    
    BrushStroke : PaintEngineFeature
    
    ConicalGradientFill : PaintEngineFeature
    
    ConstantOpacity : PaintEngineFeature
    
    ConvexMode : PolygonDrawMode
    
    CoreGraphics : Type
    
    Direct2D : Type
    
    Direct3D : Type
    
    DirtyBackground : DirtyFlag
    
    DirtyBackgroundMode : DirtyFlag
    
    DirtyBrush : DirtyFlag
    
    DirtyBrushOrigin : DirtyFlag
    
    DirtyClipEnabled : DirtyFlag
    
    DirtyClipPath : DirtyFlag
    
    DirtyClipRegion : DirtyFlag
    
    DirtyCompositionMode : DirtyFlag
    
    DirtyFlag : Type[DirtyFlag]
    
    DirtyFlags : Type[DirtyFlags]
    
    DirtyFont : DirtyFlag
    
    DirtyHints : DirtyFlag
    
    DirtyOpacity : DirtyFlag
    
    DirtyPen : DirtyFlag
    
    DirtyTransform : DirtyFlag
    
    LinearGradientFill : PaintEngineFeature
    
    MacPrinter : Type
    
    MaskedBrush : PaintEngineFeature
    
    MaxUser : Type
    
    ObjectBoundingModeGradients : PaintEngineFeature
    
    OddEvenMode : PolygonDrawMode
    
    OpenGL : Type
    
    OpenGL2 : Type
    
    OpenVG : Type
    
    PaintBuffer : Type
    
    PaintEngineFeature : Type[PaintEngineFeature]
    
    PaintEngineFeatures : Type[PaintEngineFeatures]
    
    PaintOutsidePaintEvent : PaintEngineFeature
    
    PainterPaths : PaintEngineFeature
    
    PatternBrush : PaintEngineFeature
    
    PatternTransform : PaintEngineFeature
    
    Pdf : Type
    
    PerspectiveTransform : PaintEngineFeature
    
    Picture : Type
    
    PixmapTransform : PaintEngineFeature
    
    PolygonDrawMode : Type[PolygonDrawMode]
    
    PolylineMode : PolygonDrawMode
    
    PorterDuff : PaintEngineFeature
    
    PostScript : Type
    
    PrimitiveTransform : PaintEngineFeature
    
    QWindowSystem : Type
    
    QuickDraw : Type
    
    RadialGradientFill : PaintEngineFeature
    
    Raster : Type
    
    RasterOpModes : PaintEngineFeature
    
    SVG : Type
    
    Type : Type[Type]
    
    User : Type
    
    WindingMode : PolygonDrawMode
    
    Windows : Type
    
    X11 : Type
    
    __new__ : builtin_function_or_method
    
    active : getset_descriptor
    
    extended : getset_descriptor
    
    gccaps : getset_descriptor
    
    selfDestruct : getset_descriptor
    
    state : getset_descriptor


class QTextTableCell(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def begin(*args, **kwargs): ...
    def column(*args, **kwargs): ...
    def columnSpan(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def firstCursorPosition(*args, **kwargs): ...
    def firstPosition(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def lastCursorPosition(*args, **kwargs): ...
    def lastPosition(*args, **kwargs): ...
    def row(*args, **kwargs): ...
    def rowSpan(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def tableCellFormatIndex(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QIconEngine(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def actualSize(*args, **kwargs): ...
    def addFile(*args, **kwargs): ...
    def addPixmap(*args, **kwargs): ...
    def availableSizes(*args, **kwargs): ...
    def clone(*args, **kwargs): ...
    def iconName(*args, **kwargs): ...
    def key(*args, **kwargs): ...
    def paint(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    AvailableSizesArgument : Type[AvailableSizesArgument]
    
    AvailableSizesHook : IconEngineHook
    
    IconEngineHook : Type[IconEngineHook]
    
    IconNameHook : IconEngineHook
    
    __new__ : builtin_function_or_method


class QMovie(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def backgroundColor(*args, **kwargs): ...
    def cacheMode(*args, **kwargs): ...
    def currentFrameNumber(*args, **kwargs): ...
    def currentImage(*args, **kwargs): ...
    def currentPixmap(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def frameCount(*args, **kwargs): ...
    def frameRect(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def jumpToFrame(*args, **kwargs): ...
    def jumpToNextFrame(*args, **kwargs): ...
    def loopCount(*args, **kwargs): ...
    def nextFrameDelay(*args, **kwargs): ...
    def scaledSize(*args, **kwargs): ...
    def setBackgroundColor(*args, **kwargs): ...
    def setCacheMode(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setFileName(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setPaused(*args, **kwargs): ...
    def setScaledSize(*args, **kwargs): ...
    def setSpeed(*args, **kwargs): ...
    def speed(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    @staticmethod
    def supportedFormats(*args, **kwargs): ...
    CacheAll : CacheMode
    
    CacheMode : Type[CacheMode]
    
    CacheNone : CacheMode
    
    MovieState : Type[MovieState]
    
    NotRunning : MovieState
    
    Paused : MovieState
    
    Running : MovieState
    
    __new__ : builtin_function_or_method
    
    error : PySide2.QtCore.Signal
    
    finished : PySide2.QtCore.Signal
    
    frameChanged : PySide2.QtCore.Signal
    
    resized : PySide2.QtCore.Signal
    
    started : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    updated : PySide2.QtCore.Signal


class QTextObject(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def document(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def formatIndex(*args, **kwargs): ...
    def objectIndex(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QVector2D(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(*args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def distanceToLine(*args, **kwargs): ...
    def distanceToPoint(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lengthSquared(*args, **kwargs): ...
    def normalize(*args, **kwargs): ...
    def normalized(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def toPoint(*args, **kwargs): ...
    def toPointF(*args, **kwargs): ...
    def toTuple(*args, **kwargs): ...
    def toVector3D(*args, **kwargs): ...
    def toVector4D(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    @staticmethod
    def dotProduct(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QOpenGLShader(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def compileSourceCode(*args, **kwargs): ...
    def compileSourceFile(*args, **kwargs): ...
    def isCompiled(*args, **kwargs): ...
    def log(*args, **kwargs): ...
    def shaderType(*args, **kwargs): ...
    def sourceCode(*args, **kwargs): ...
    @staticmethod
    def hasOpenGLShaders(*args, **kwargs): ...
    Compute : ShaderTypeBit
    
    Fragment : ShaderTypeBit
    
    Geometry : ShaderTypeBit
    
    ShaderType : Type[ShaderType]
    
    ShaderTypeBit : Type[ShaderTypeBit]
    
    TessellationControl : ShaderTypeBit
    
    TessellationEvaluation : ShaderTypeBit
    
    Vertex : ShaderTypeBit
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QHelpEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def globalPos(*args, **kwargs): ...
    def globalX(*args, **kwargs): ...
    def globalY(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPolygon(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __delitem__(*args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self) -> int:
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __setitem__(*args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def append(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def capacity(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def constData(*args, **kwargs): ...
    def constFirst(*args, **kwargs): ...
    def constLast(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def containsPoint(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def empty(*args, **kwargs): ...
    def endsWith(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def first(*args, **kwargs): ...
    def front(*args, **kwargs): ...
    def indexOf(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def intersected(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isSharedWith(*args, **kwargs): ...
    def last(*args, **kwargs): ...
    def lastIndexOf(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def mid(*args, **kwargs): ...
    def move(*args, **kwargs): ...
    def pop_back(*args, **kwargs): ...
    def pop_front(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def push_back(*args, **kwargs): ...
    def push_front(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def removeAll(*args, **kwargs): ...
    def removeAt(*args, **kwargs): ...
    def removeFirst(*args, **kwargs): ...
    def removeLast(*args, **kwargs): ...
    def removeOne(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def reserve(*args, **kwargs): ...
    def resize(*args, **kwargs): ...
    def setSharable(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def squeeze(*args, **kwargs): ...
    def startsWith(*args, **kwargs): ...
    def subtracted(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def takeAt(*args, **kwargs): ...
    def takeFirst(*args, **kwargs): ...
    def takeLast(*args, **kwargs): ...
    def toList(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def translated(*args, **kwargs): ...
    def united(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    @staticmethod
    def fromList(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPainter(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def background(*args, **kwargs): ...
    def backgroundMode(*args, **kwargs): ...
    def begin(*args, **kwargs): ...
    def beginNativePainting(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def brush(*args, **kwargs): ...
    def brushOrigin(*args, **kwargs): ...
    def clipBoundingRect(*args, **kwargs): ...
    def clipPath(*args, **kwargs): ...
    def clipRegion(*args, **kwargs): ...
    def combinedMatrix(*args, **kwargs): ...
    def combinedTransform(*args, **kwargs): ...
    def compositionMode(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def deviceMatrix(*args, **kwargs): ...
    def deviceTransform(*args, **kwargs): ...
    def drawArc(*args, **kwargs): ...
    def drawChord(*args, **kwargs): ...
    def drawConvexPolygon(*args, **kwargs): ...
    def drawEllipse(*args, **kwargs): ...
    def drawImage(*args, **kwargs): ...
    def drawLine(*args, **kwargs): ...
    def drawLines(*args, **kwargs): ...
    def drawPath(*args, **kwargs): ...
    def drawPicture(*args, **kwargs): ...
    def drawPie(*args, **kwargs): ...
    def drawPixmap(*args, **kwargs): ...
    def drawPixmapFragments(*args, **kwargs): ...
    def drawPoint(*args, **kwargs): ...
    def drawPoints(*args, **kwargs): ...
    def drawPolygon(*args, **kwargs): ...
    def drawPolyline(*args, **kwargs): ...
    def drawRect(*args, **kwargs): ...
    def drawRects(*args, **kwargs): ...
    def drawRoundRect(*args, **kwargs): ...
    def drawRoundedRect(*args, **kwargs): ...
    def drawText(*args, **kwargs): ...
    def drawTextItem(*args, **kwargs): ...
    def drawTiledPixmap(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def endNativePainting(*args, **kwargs): ...
    def eraseRect(*args, **kwargs): ...
    def fillPath(*args, **kwargs): ...
    def fillRect(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def fontInfo(*args, **kwargs): ...
    def fontMetrics(*args, **kwargs): ...
    def hasClipping(*args, **kwargs): ...
    def initFrom(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def layoutDirection(*args, **kwargs): ...
    def matrix(*args, **kwargs): ...
    def matrixEnabled(*args, **kwargs): ...
    def opacity(*args, **kwargs): ...
    def paintEngine(*args, **kwargs): ...
    def pen(*args, **kwargs): ...
    def renderHints(*args, **kwargs): ...
    def resetMatrix(*args, **kwargs): ...
    def resetTransform(*args, **kwargs): ...
    def restore(*args, **kwargs): ...
    def rotate(*args, **kwargs): ...
    def save(*args, **kwargs): ...
    def scale(*args, **kwargs): ...
    def setBackground(*args, **kwargs): ...
    def setBackgroundMode(*args, **kwargs): ...
    def setBrush(*args, **kwargs): ...
    def setBrushOrigin(*args, **kwargs): ...
    def setClipPath(*args, **kwargs): ...
    def setClipRect(*args, **kwargs): ...
    def setClipRegion(*args, **kwargs): ...
    def setClipping(*args, **kwargs): ...
    def setCompositionMode(*args, **kwargs): ...
    def setFont(*args, **kwargs): ...
    def setLayoutDirection(*args, **kwargs): ...
    def setMatrix(*args, **kwargs): ...
    def setMatrixEnabled(*args, **kwargs): ...
    def setOpacity(*args, **kwargs): ...
    def setPen(*args, **kwargs): ...
    def setRenderHint(*args, **kwargs): ...
    def setRenderHints(*args, **kwargs): ...
    def setTransform(*args, **kwargs): ...
    def setViewTransformEnabled(*args, **kwargs): ...
    def setViewport(*args, **kwargs): ...
    def setWindow(*args, **kwargs): ...
    def setWorldMatrix(*args, **kwargs): ...
    def setWorldMatrixEnabled(*args, **kwargs): ...
    def setWorldTransform(*args, **kwargs): ...
    def shear(*args, **kwargs): ...
    def strokePath(*args, **kwargs): ...
    def testRenderHint(*args, **kwargs): ...
    def transform(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def viewTransformEnabled(*args, **kwargs): ...
    def viewport(*args, **kwargs): ...
    def window(*args, **kwargs): ...
    def worldMatrix(*args, **kwargs): ...
    def worldMatrixEnabled(*args, **kwargs): ...
    def worldTransform(*args, **kwargs): ...
    @staticmethod
    def redirected(*args, **kwargs): ...
    @staticmethod
    def restoreRedirected(*args, **kwargs): ...
    @staticmethod
    def setRedirected(*args, **kwargs): ...
    Antialiasing : RenderHint
    
    CompositionMode : Type[CompositionMode]
    
    CompositionMode_Clear : CompositionMode
    
    CompositionMode_ColorBurn : CompositionMode
    
    CompositionMode_ColorDodge : CompositionMode
    
    CompositionMode_Darken : CompositionMode
    
    CompositionMode_Destination : CompositionMode
    
    CompositionMode_DestinationAtop : CompositionMode
    
    CompositionMode_DestinationIn : CompositionMode
    
    CompositionMode_DestinationOut : CompositionMode
    
    CompositionMode_DestinationOver : CompositionMode
    
    CompositionMode_Difference : CompositionMode
    
    CompositionMode_Exclusion : CompositionMode
    
    CompositionMode_HardLight : CompositionMode
    
    CompositionMode_Lighten : CompositionMode
    
    CompositionMode_Multiply : CompositionMode
    
    CompositionMode_Overlay : CompositionMode
    
    CompositionMode_Plus : CompositionMode
    
    CompositionMode_Screen : CompositionMode
    
    CompositionMode_SoftLight : CompositionMode
    
    CompositionMode_Source : CompositionMode
    
    CompositionMode_SourceAtop : CompositionMode
    
    CompositionMode_SourceIn : CompositionMode
    
    CompositionMode_SourceOut : CompositionMode
    
    CompositionMode_SourceOver : CompositionMode
    
    CompositionMode_Xor : CompositionMode
    
    HighQualityAntialiasing : RenderHint
    
    NonCosmeticDefaultPen : RenderHint
    
    OpaqueHint : PixmapFragmentHint
    
    PixmapFragment : Type[PixmapFragment]
    
    PixmapFragmentHint : Type[PixmapFragmentHint]
    
    PixmapFragmentHints : Type[PixmapFragmentHints]
    
    Qt4CompatiblePainting : RenderHint
    
    RasterOp_ClearDestination : CompositionMode
    
    RasterOp_NotDestination : CompositionMode
    
    RasterOp_NotSource : CompositionMode
    
    RasterOp_NotSourceAndDestination : CompositionMode
    
    RasterOp_NotSourceAndNotDestination : CompositionMode
    
    RasterOp_NotSourceOrDestination : CompositionMode
    
    RasterOp_NotSourceOrNotDestination : CompositionMode
    
    RasterOp_NotSourceXorDestination : CompositionMode
    
    RasterOp_SetDestination : CompositionMode
    
    RasterOp_SourceAndDestination : CompositionMode
    
    RasterOp_SourceAndNotDestination : CompositionMode
    
    RasterOp_SourceOrDestination : CompositionMode
    
    RasterOp_SourceOrNotDestination : CompositionMode
    
    RasterOp_SourceXorDestination : CompositionMode
    
    RenderHint : Type[RenderHint]
    
    RenderHints : Type[RenderHints]
    
    SmoothPixmapTransform : RenderHint
    
    TextAntialiasing : RenderHint
    
    __new__ : builtin_function_or_method


class QFontMetrics(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def ascent(*args, **kwargs): ...
    def averageCharWidth(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def boundingRectChar(*args, **kwargs): ...
    def charWidth(*args, **kwargs): ...
    def descent(*args, **kwargs): ...
    def elidedText(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def inFont(*args, **kwargs): ...
    def inFontUcs4(*args, **kwargs): ...
    def leading(*args, **kwargs): ...
    def leftBearing(*args, **kwargs): ...
    def lineSpacing(*args, **kwargs): ...
    def lineWidth(*args, **kwargs): ...
    def maxWidth(*args, **kwargs): ...
    def minLeftBearing(*args, **kwargs): ...
    def minRightBearing(*args, **kwargs): ...
    def overlinePos(*args, **kwargs): ...
    def rightBearing(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def strikeOutPos(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def tightBoundingRect(*args, **kwargs): ...
    def underlinePos(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def widthChar(*args, **kwargs): ...
    def xHeight(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QImageReader(_Object):
    def __getattribute__(*args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def autoDetectImageFormat(*args, **kwargs): ...
    def autoTransform(*args, **kwargs): ...
    def backgroundColor(*args, **kwargs): ...
    def canRead(*args, **kwargs): ...
    def clipRect(*args, **kwargs): ...
    def currentImageNumber(*args, **kwargs): ...
    def currentImageRect(*args, **kwargs): ...
    def decideFormatFromContent(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def gamma(*args, **kwargs): ...
    def imageCount(*args, **kwargs): ...
    def jumpToImage(*args, **kwargs): ...
    def jumpToNextImage(*args, **kwargs): ...
    def loopCount(*args, **kwargs): ...
    def nextImageDelay(*args, **kwargs): ...
    def quality(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def scaledClipRect(*args, **kwargs): ...
    def scaledSize(*args, **kwargs): ...
    def setAutoDetectImageFormat(*args, **kwargs): ...
    def setAutoTransform(*args, **kwargs): ...
    def setBackgroundColor(*args, **kwargs): ...
    def setClipRect(*args, **kwargs): ...
    def setDecideFormatFromContent(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setFileName(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setGamma(*args, **kwargs): ...
    def setQuality(*args, **kwargs): ...
    def setScaledClipRect(*args, **kwargs): ...
    def setScaledSize(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def subType(*args, **kwargs): ...
    def supportedSubTypes(*args, **kwargs): ...
    def supportsAnimation(*args, **kwargs): ...
    def supportsOption(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def textKeys(*args, **kwargs): ...
    def transformation(*args, **kwargs): ...
    @staticmethod
    def imageFormat(*args, **kwargs): ...
    @staticmethod
    def supportedImageFormats(*args, **kwargs): ...
    @staticmethod
    def supportedMimeTypes(*args, **kwargs): ...
    DeviceError : ImageReaderError
    
    FileNotFoundError : ImageReaderError
    
    ImageReaderError : Type[ImageReaderError]
    
    InvalidDataError : ImageReaderError
    
    UnknownError : ImageReaderError
    
    UnsupportedFormatError : ImageReaderError
    
    __new__ : builtin_function_or_method


class QTextLayout(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def additionalFormats(*args, **kwargs): ...
    def beginLayout(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def cacheEnabled(*args, **kwargs): ...
    def clearAdditionalFormats(*args, **kwargs): ...
    def clearFormats(*args, **kwargs): ...
    def clearLayout(*args, **kwargs): ...
    def createLine(*args, **kwargs): ...
    def cursorMoveStyle(*args, **kwargs): ...
    def draw(*args, **kwargs): ...
    def drawCursor(*args, **kwargs): ...
    def endLayout(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def formats(*args, **kwargs): ...
    def isValidCursorPosition(*args, **kwargs): ...
    def leftCursorPosition(*args, **kwargs): ...
    def lineAt(*args, **kwargs): ...
    def lineCount(*args, **kwargs): ...
    def lineForTextPosition(*args, **kwargs): ...
    def maximumWidth(*args, **kwargs): ...
    def minimumWidth(*args, **kwargs): ...
    def nextCursorPosition(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def preeditAreaPosition(*args, **kwargs): ...
    def preeditAreaText(*args, **kwargs): ...
    def previousCursorPosition(*args, **kwargs): ...
    def rightCursorPosition(*args, **kwargs): ...
    def setAdditionalFormats(*args, **kwargs): ...
    def setCacheEnabled(*args, **kwargs): ...
    def setCursorMoveStyle(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def setFont(*args, **kwargs): ...
    def setFormats(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def setPreeditArea(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def setTextOption(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def textOption(*args, **kwargs): ...
    CursorMode : Type[CursorMode]
    
    FormatRange : Type[FormatRange]
    
    SkipCharacters : CursorMode
    
    SkipWords : CursorMode
    
    __new__ : builtin_function_or_method


class QImageIOHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def canRead(*args, **kwargs): ...
    def currentImageNumber(*args, **kwargs): ...
    def currentImageRect(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def imageCount(*args, **kwargs): ...
    def jumpToImage(*args, **kwargs): ...
    def jumpToNextImage(*args, **kwargs): ...
    def loopCount(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def nextImageDelay(*args, **kwargs): ...
    def option(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setOption(*args, **kwargs): ...
    def supportsOption(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    Animation : ImageOption
    
    BackgroundColor : ImageOption
    
    ClipRect : ImageOption
    
    CompressionRatio : ImageOption
    
    Description : ImageOption
    
    Endianness : ImageOption
    
    Gamma : ImageOption
    
    ImageFormat : ImageOption
    
    ImageOption : Type[ImageOption]
    
    ImageTransformation : ImageOption
    
    IncrementalReading : ImageOption
    
    Name : ImageOption
    
    OptimizedWrite : ImageOption
    
    ProgressiveScanWrite : ImageOption
    
    Quality : ImageOption
    
    ScaledClipRect : ImageOption
    
    ScaledSize : ImageOption
    
    Size : ImageOption
    
    SubType : ImageOption
    
    SupportedSubTypes : ImageOption
    
    Transformation : Type[Transformation]
    
    TransformationFlip : Transformation
    
    TransformationFlipAndRotate90 : Transformation
    
    TransformationMirror : Transformation
    
    TransformationMirrorAndRotate90 : Transformation
    
    TransformationNone : Transformation
    
    TransformationRotate180 : Transformation
    
    TransformationRotate270 : Transformation
    
    TransformationRotate90 : Transformation
    
    Transformations : Type[Transformations]
    
    TransformedByDefault : ImageOption
    
    __new__ : builtin_function_or_method


class QShowEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QMatrix4x3(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDragLeaveEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QStatusTipEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def tip(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QClipboard(_QObject):
    def clear(*args, **kwargs): ...
    def image(*args, **kwargs): ...
    def mimeData(*args, **kwargs): ...
    def ownsClipboard(*args, **kwargs): ...
    def ownsFindBuffer(*args, **kwargs): ...
    def ownsSelection(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def setImage(*args, **kwargs): ...
    def setMimeData(*args, **kwargs): ...
    def setPixmap(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def supportsFindBuffer(*args, **kwargs): ...
    def supportsSelection(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    Clipboard : Mode
    
    FindBuffer : Mode
    
    LastMode : Mode
    
    Mode : Type[Mode]
    
    Selection : Mode
    
    changed : PySide2.QtCore.Signal
    
    dataChanged : PySide2.QtCore.Signal
    
    findBufferChanged : PySide2.QtCore.Signal
    
    selectionChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QMatrix2x3(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextDocumentWriter(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def codec(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def setCodec(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setFileName(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    @staticmethod
    def supportedDocumentFormats(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextObjectInterface(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def drawObject(*args, **kwargs): ...
    def intrinsicSize(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QHideEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QTextBlockUserData(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QTextFormat(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def background(*args, **kwargs): ...
    def boolProperty(*args, **kwargs): ...
    def brushProperty(*args, **kwargs): ...
    def clearBackground(*args, **kwargs): ...
    def clearForeground(*args, **kwargs): ...
    def clearProperty(*args, **kwargs): ...
    def colorProperty(*args, **kwargs): ...
    def doubleProperty(*args, **kwargs): ...
    def foreground(*args, **kwargs): ...
    def hasProperty(*args, **kwargs): ...
    def intProperty(*args, **kwargs): ...
    def isBlockFormat(*args, **kwargs): ...
    def isCharFormat(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isFrameFormat(*args, **kwargs): ...
    def isImageFormat(*args, **kwargs): ...
    def isListFormat(*args, **kwargs): ...
    def isTableCellFormat(*args, **kwargs): ...
    def isTableFormat(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def layoutDirection(*args, **kwargs): ...
    def lengthProperty(*args, **kwargs): ...
    def lengthVectorProperty(*args, **kwargs): ...
    def merge(*args, **kwargs): ...
    def objectIndex(*args, **kwargs): ...
    def objectType(*args, **kwargs): ...
    def penProperty(*args, **kwargs): ...
    def properties(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def propertyCount(*args, **kwargs): ...
    def setBackground(*args, **kwargs): ...
    def setForeground(*args, **kwargs): ...
    def setLayoutDirection(*args, **kwargs): ...
    def setObjectIndex(*args, **kwargs): ...
    def setObjectType(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    def stringProperty(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def toBlockFormat(*args, **kwargs): ...
    def toCharFormat(*args, **kwargs): ...
    def toFrameFormat(*args, **kwargs): ...
    def toImageFormat(*args, **kwargs): ...
    def toListFormat(*args, **kwargs): ...
    def toTableCellFormat(*args, **kwargs): ...
    def toTableFormat(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    AnchorHref : Property
    
    AnchorName : Property
    
    BackgroundBrush : Property
    
    BackgroundImageUrl : Property
    
    BlockAlignment : Property
    
    BlockBottomMargin : Property
    
    BlockFormat : FormatType
    
    BlockIndent : Property
    
    BlockLeftMargin : Property
    
    BlockNonBreakableLines : Property
    
    BlockRightMargin : Property
    
    BlockTopMargin : Property
    
    BlockTrailingHorizontalRulerWidth : Property
    
    CharFormat : FormatType
    
    CssFloat : Property
    
    FirstFontProperty : Property
    
    FontCapitalization : Property
    
    FontFamily : Property
    
    FontFixedPitch : Property
    
    FontHintingPreference : Property
    
    FontItalic : Property
    
    FontKerning : Property
    
    FontLetterSpacing : Property
    
    FontLetterSpacingType : Property
    
    FontOverline : Property
    
    FontPixelSize : Property
    
    FontPointSize : Property
    
    FontSizeAdjustment : Property
    
    FontSizeIncrement : Property
    
    FontStretch : Property
    
    FontStrikeOut : Property
    
    FontStyleHint : Property
    
    FontStyleStrategy : Property
    
    FontUnderline : Property
    
    FontWeight : Property
    
    FontWordSpacing : Property
    
    ForegroundBrush : Property
    
    FormatType : Type[FormatType]
    
    FrameBorder : Property
    
    FrameBorderBrush : Property
    
    FrameBorderStyle : Property
    
    FrameBottomMargin : Property
    
    FrameFormat : FormatType
    
    FrameHeight : Property
    
    FrameLeftMargin : Property
    
    FrameMargin : Property
    
    FramePadding : Property
    
    FrameRightMargin : Property
    
    FrameTopMargin : Property
    
    FrameWidth : Property
    
    FullWidthSelection : Property
    
    ImageHeight : Property
    
    ImageName : Property
    
    ImageObject : ObjectTypes
    
    ImageWidth : Property
    
    InvalidFormat : FormatType
    
    IsAnchor : Property
    
    LastFontProperty : Property
    
    LayoutDirection : Property
    
    LineHeight : Property
    
    LineHeightType : Property
    
    ListFormat : FormatType
    
    ListIndent : Property
    
    ListNumberPrefix : Property
    
    ListNumberSuffix : Property
    
    ListStyle : Property
    
    NoObject : ObjectTypes
    
    ObjectIndex : Property
    
    ObjectType : Property
    
    ObjectTypes : Type[ObjectTypes]
    
    OutlinePen : Property
    
    PageBreakFlag : Type[PageBreakFlag]
    
    PageBreakFlags : Type[PageBreakFlags]
    
    PageBreakPolicy : Property
    
    PageBreak_AlwaysAfter : PageBreakFlag
    
    PageBreak_AlwaysBefore : PageBreakFlag
    
    PageBreak_Auto : PageBreakFlag
    
    Property : Type[Property]
    
    TabPositions : Property
    
    TableCellBottomPadding : Property
    
    TableCellColumnSpan : Property
    
    TableCellLeftPadding : Property
    
    TableCellObject : ObjectTypes
    
    TableCellPadding : Property
    
    TableCellRightPadding : Property
    
    TableCellRowSpan : Property
    
    TableCellSpacing : Property
    
    TableCellTopPadding : Property
    
    TableColumnWidthConstraints : Property
    
    TableColumns : Property
    
    TableFormat : FormatType
    
    TableHeaderRowCount : Property
    
    TableObject : ObjectTypes
    
    TextIndent : Property
    
    TextOutline : Property
    
    TextToolTip : Property
    
    TextUnderlineColor : Property
    
    TextUnderlineStyle : Property
    
    TextVerticalAlignment : Property
    
    UserFormat : FormatType
    
    UserObject : ObjectTypes
    
    UserProperty : Property
    
    __new__ : builtin_function_or_method


class QPaintEngineState(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def backgroundBrush(*args, **kwargs): ...
    def backgroundMode(*args, **kwargs): ...
    def brush(*args, **kwargs): ...
    def brushNeedsResolving(*args, **kwargs): ...
    def brushOrigin(*args, **kwargs): ...
    def clipOperation(*args, **kwargs): ...
    def clipPath(*args, **kwargs): ...
    def clipRegion(*args, **kwargs): ...
    def compositionMode(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def isClipEnabled(*args, **kwargs): ...
    def matrix(*args, **kwargs): ...
    def opacity(*args, **kwargs): ...
    def painter(*args, **kwargs): ...
    def pen(*args, **kwargs): ...
    def penNeedsResolving(*args, **kwargs): ...
    def renderHints(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def transform(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    dirtyFlags : getset_descriptor


class QOpenGLFramebufferObject(_Object):
    def attachment(*args, **kwargs): ...
    def bind(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def isBound(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def release(*args, **kwargs): ...
    def setAttachment(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def sizes(*args, **kwargs): ...
    def toImage(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    @staticmethod
    def bindDefault(*args, **kwargs): ...
    @staticmethod
    def hasOpenGLFramebufferBlit(*args, **kwargs): ...
    @staticmethod
    def hasOpenGLFramebufferObjects(*args, **kwargs): ...
    Attachment : Type[Attachment]
    
    CombinedDepthStencil : Attachment
    
    Depth : Attachment
    
    NoAttachment : Attachment


class QExposeEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def region(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    rgn : getset_descriptor


class QMoveEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def oldPos(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextLength(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def rawValue(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    FixedLength : Type
    
    PercentageLength : Type
    
    Type : Type[Type]
    
    VariableLength : Type
    
    __new__ : builtin_function_or_method


class QAbstractTextDocumentLayout(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def anchorAt(*args, **kwargs): ...
    def blockBoundingRect(*args, **kwargs): ...
    def document(*args, **kwargs): ...
    def documentChanged(*args, **kwargs): ...
    def documentSize(*args, **kwargs): ...
    def draw(*args, **kwargs): ...
    def drawInlineObject(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def formatIndex(*args, **kwargs): ...
    def frameBoundingRect(*args, **kwargs): ...
    def handlerForObject(*args, **kwargs): ...
    def hitTest(*args, **kwargs): ...
    def pageCount(*args, **kwargs): ...
    def paintDevice(*args, **kwargs): ...
    def positionInlineObject(*args, **kwargs): ...
    def registerHandler(*args, **kwargs): ...
    def resizeInlineObject(*args, **kwargs): ...
    def setPaintDevice(*args, **kwargs): ...
    def unregisterHandler(*args, **kwargs): ...
    PaintContext : Type[PaintContext]
    
    Selection : Type[Selection]
    
    __new__ : builtin_function_or_method
    
    documentSizeChanged : PySide2.QtCore.Signal
    
    pageCountChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    update : PySide2.QtCore.Signal
    
    updateBlock : PySide2.QtCore.Signal


class QCloseEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QVector3D(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(*args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def distanceToLine(*args, **kwargs): ...
    def distanceToPlane(*args, **kwargs): ...
    def distanceToPoint(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lengthSquared(*args, **kwargs): ...
    def normalize(*args, **kwargs): ...
    def normalized(*args, **kwargs): ...
    def project(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def setZ(*args, **kwargs): ...
    def toPoint(*args, **kwargs): ...
    def toPointF(*args, **kwargs): ...
    def toTuple(*args, **kwargs): ...
    def toVector2D(*args, **kwargs): ...
    def toVector4D(*args, **kwargs): ...
    def unproject(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    def z(*args, **kwargs): ...
    @staticmethod
    def crossProduct(*args, **kwargs): ...
    @staticmethod
    def dotProduct(*args, **kwargs): ...
    @staticmethod
    def normal(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QFont(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def bold(*args, **kwargs): ...
    def capitalization(*args, **kwargs): ...
    def defaultFamily(*args, **kwargs): ...
    def exactMatch(*args, **kwargs): ...
    def family(*args, **kwargs): ...
    def fixedPitch(*args, **kwargs): ...
    def fromString(*args, **kwargs): ...
    def hintingPreference(*args, **kwargs): ...
    def isCopyOf(*args, **kwargs): ...
    def italic(*args, **kwargs): ...
    def kerning(*args, **kwargs): ...
    def key(*args, **kwargs): ...
    def lastResortFamily(*args, **kwargs): ...
    def lastResortFont(*args, **kwargs): ...
    def letterSpacing(*args, **kwargs): ...
    def letterSpacingType(*args, **kwargs): ...
    def overline(*args, **kwargs): ...
    def pixelSize(*args, **kwargs): ...
    def pointSize(*args, **kwargs): ...
    def pointSizeF(*args, **kwargs): ...
    def rawMode(*args, **kwargs): ...
    def rawName(*args, **kwargs): ...
    def resolve(*args, **kwargs): ...
    def setBold(*args, **kwargs): ...
    def setCapitalization(*args, **kwargs): ...
    def setFamily(*args, **kwargs): ...
    def setFixedPitch(*args, **kwargs): ...
    def setHintingPreference(*args, **kwargs): ...
    def setItalic(*args, **kwargs): ...
    def setKerning(*args, **kwargs): ...
    def setLetterSpacing(*args, **kwargs): ...
    def setOverline(*args, **kwargs): ...
    def setPixelSize(*args, **kwargs): ...
    def setPointSize(*args, **kwargs): ...
    def setPointSizeF(*args, **kwargs): ...
    def setRawMode(*args, **kwargs): ...
    def setRawName(*args, **kwargs): ...
    def setStretch(*args, **kwargs): ...
    def setStrikeOut(*args, **kwargs): ...
    def setStyle(*args, **kwargs): ...
    def setStyleHint(*args, **kwargs): ...
    def setStyleName(*args, **kwargs): ...
    def setStyleStrategy(*args, **kwargs): ...
    def setUnderline(*args, **kwargs): ...
    def setWeight(*args, **kwargs): ...
    def setWordSpacing(*args, **kwargs): ...
    def stretch(*args, **kwargs): ...
    def strikeOut(*args, **kwargs): ...
    def style(*args, **kwargs): ...
    def styleHint(*args, **kwargs): ...
    def styleName(*args, **kwargs): ...
    def styleStrategy(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    def underline(*args, **kwargs): ...
    def weight(*args, **kwargs): ...
    def wordSpacing(*args, **kwargs): ...
    @staticmethod
    def cacheStatistics(*args, **kwargs): ...
    @staticmethod
    def cleanup(*args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...
    @staticmethod
    def insertSubstitution(*args, **kwargs): ...
    @staticmethod
    def insertSubstitutions(*args, **kwargs): ...
    @staticmethod
    def removeSubstitutions(*args, **kwargs): ...
    @staticmethod
    def substitute(*args, **kwargs): ...
    @staticmethod
    def substitutes(*args, **kwargs): ...
    @staticmethod
    def substitutions(*args, **kwargs): ...
    AbsoluteSpacing : SpacingType
    
    AllLowercase : Capitalization
    
    AllUppercase : Capitalization
    
    AnyStyle : StyleHint
    
    Black : Weight
    
    Bold : Weight
    
    Capitalization : Type[Capitalization]
    
    Capitalize : Capitalization
    
    Condensed : Stretch
    
    Courier : StyleHint
    
    Cursive : StyleHint
    
    Decorative : StyleHint
    
    DemiBold : Weight
    
    Expanded : Stretch
    
    ExtraBold : Weight
    
    ExtraCondensed : Stretch
    
    ExtraExpanded : Stretch
    
    ExtraLight : Weight
    
    Fantasy : StyleHint
    
    ForceIntegerMetrics : StyleStrategy
    
    ForceOutline : StyleStrategy
    
    Helvetica : StyleHint
    
    HintingPreference : Type[HintingPreference]
    
    Light : Weight
    
    Medium : Weight
    
    MixedCase : Capitalization
    
    Monospace : StyleHint
    
    NoAntialias : StyleStrategy
    
    NoFontMerging : StyleStrategy
    
    NoSubpixelAntialias : StyleStrategy
    
    Normal : Weight
    
    OldEnglish : StyleHint
    
    OpenGLCompatible : StyleStrategy
    
    PercentageSpacing : SpacingType
    
    PreferAntialias : StyleStrategy
    
    PreferBitmap : StyleStrategy
    
    PreferDefault : StyleStrategy
    
    PreferDefaultHinting : HintingPreference
    
    PreferDevice : StyleStrategy
    
    PreferFullHinting : HintingPreference
    
    PreferMatch : StyleStrategy
    
    PreferNoHinting : HintingPreference
    
    PreferOutline : StyleStrategy
    
    PreferQuality : StyleStrategy
    
    PreferVerticalHinting : HintingPreference
    
    SansSerif : StyleHint
    
    SemiCondensed : Stretch
    
    SemiExpanded : Stretch
    
    Serif : StyleHint
    
    SmallCaps : Capitalization
    
    SpacingType : Type[SpacingType]
    
    Stretch : Type[Stretch]
    
    Style : Type[Style]
    
    StyleHint : Type[StyleHint]
    
    StyleItalic : Style
    
    StyleNormal : Style
    
    StyleOblique : Style
    
    StyleStrategy : Type[StyleStrategy]
    
    System : StyleHint
    
    Thin : Weight
    
    Times : StyleHint
    
    TypeWriter : StyleHint
    
    UltraCondensed : Stretch
    
    UltraExpanded : Stretch
    
    Unstretched : Stretch
    
    Weight : Type[Weight]
    
    __new__ : builtin_function_or_method


class QStringListModel(_QAbstractListModel):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def data(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def insertRows(*args, **kwargs): ...
    def removeRows(*args, **kwargs): ...
    def rowCount(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setStringList(*args, **kwargs): ...
    def sibling(*args, **kwargs): ...
    def sort(*args, **kwargs): ...
    def stringList(*args, **kwargs): ...
    def supportedDropActions(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QPalette(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def alternateBase(*args, **kwargs): ...
    def background(*args, **kwargs): ...
    def base(*args, **kwargs): ...
    def brightText(*args, **kwargs): ...
    def brush(*args, **kwargs): ...
    def button(*args, **kwargs): ...
    def buttonText(*args, **kwargs): ...
    def cacheKey(*args, **kwargs): ...
    def color(*args, **kwargs): ...
    def currentColorGroup(*args, **kwargs): ...
    def dark(*args, **kwargs): ...
    def foreground(*args, **kwargs): ...
    def highlight(*args, **kwargs): ...
    def highlightedText(*args, **kwargs): ...
    def isBrushSet(*args, **kwargs): ...
    def isCopyOf(*args, **kwargs): ...
    def isEqual(*args, **kwargs): ...
    def light(*args, **kwargs): ...
    def link(*args, **kwargs): ...
    def linkVisited(*args, **kwargs): ...
    def mid(*args, **kwargs): ...
    def midlight(*args, **kwargs): ...
    def resolve(*args, **kwargs): ...
    def setBrush(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setColorGroup(*args, **kwargs): ...
    def setCurrentColorGroup(*args, **kwargs): ...
    def shadow(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def toolTipBase(*args, **kwargs): ...
    def toolTipText(*args, **kwargs): ...
    def window(*args, **kwargs): ...
    def windowText(*args, **kwargs): ...
    Active : ColorGroup
    
    All : ColorGroup
    
    AlternateBase : ColorRole
    
    Background : ColorRole
    
    Base : ColorRole
    
    BrightText : ColorRole
    
    Button : ColorRole
    
    ButtonText : ColorRole
    
    ColorGroup : Type[ColorGroup]
    
    ColorRole : Type[ColorRole]
    
    Current : ColorGroup
    
    Dark : ColorRole
    
    Disabled : ColorGroup
    
    Foreground : ColorRole
    
    Highlight : ColorRole
    
    HighlightedText : ColorRole
    
    Inactive : ColorGroup
    
    Light : ColorRole
    
    Link : ColorRole
    
    LinkVisited : ColorRole
    
    Mid : ColorRole
    
    Midlight : ColorRole
    
    NColorGroups : ColorGroup
    
    NColorRoles : ColorRole
    
    NoRole : ColorRole
    
    Normal : ColorGroup
    
    Shadow : ColorRole
    
    Text : ColorRole
    
    ToolTipBase : ColorRole
    
    ToolTipText : ColorRole
    
    Window : ColorRole
    
    WindowText : ColorRole
    
    __new__ : builtin_function_or_method


class QTextFragment(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def charFormat(*args, **kwargs): ...
    def charFormatIndex(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QMatrix2x4(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QCursor(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def bitmap(*args, **kwargs): ...
    def hotSpot(*args, **kwargs): ...
    def mask(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def setShape(*args, **kwargs): ...
    def shape(*args, **kwargs): ...
    @staticmethod
    def pos(*args, **kwargs): ...
    @staticmethod
    def setPos(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QFontMetricsF(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def ascent(*args, **kwargs): ...
    def averageCharWidth(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def boundingRectChar(*args, **kwargs): ...
    def descent(*args, **kwargs): ...
    def elidedText(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def inFont(*args, **kwargs): ...
    def inFontUcs4(*args, **kwargs): ...
    def leading(*args, **kwargs): ...
    def leftBearing(*args, **kwargs): ...
    def lineSpacing(*args, **kwargs): ...
    def lineWidth(*args, **kwargs): ...
    def maxWidth(*args, **kwargs): ...
    def minLeftBearing(*args, **kwargs): ...
    def minRightBearing(*args, **kwargs): ...
    def overlinePos(*args, **kwargs): ...
    def rightBearing(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def strikeOutPos(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def tightBoundingRect(*args, **kwargs): ...
    def underlinePos(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def widthChar(*args, **kwargs): ...
    def xHeight(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QImageWriter(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def canWrite(*args, **kwargs): ...
    def compression(*args, **kwargs): ...
    def description(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def gamma(*args, **kwargs): ...
    def optimizedWrite(*args, **kwargs): ...
    def progressiveScanWrite(*args, **kwargs): ...
    def quality(*args, **kwargs): ...
    def setCompression(*args, **kwargs): ...
    def setDescription(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setFileName(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setGamma(*args, **kwargs): ...
    def setOptimizedWrite(*args, **kwargs): ...
    def setProgressiveScanWrite(*args, **kwargs): ...
    def setQuality(*args, **kwargs): ...
    def setSubType(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def setTransformation(*args, **kwargs): ...
    def subType(*args, **kwargs): ...
    def supportedSubTypes(*args, **kwargs): ...
    def supportsOption(*args, **kwargs): ...
    def transformation(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    @staticmethod
    def supportedImageFormats(*args, **kwargs): ...
    @staticmethod
    def supportedMimeTypes(*args, **kwargs): ...
    DeviceError : ImageWriterError
    
    ImageWriterError : Type[ImageWriterError]
    
    UnknownError : ImageWriterError
    
    UnsupportedFormatError : ImageWriterError
    
    __new__ : builtin_function_or_method


class QTextItem(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def ascent(*args, **kwargs): ...
    def descent(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def renderFlags(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    Dummy : RenderFlag
    
    Overline : RenderFlag
    
    RenderFlag : Type[RenderFlag]
    
    RenderFlags : Type[RenderFlags]
    
    RightToLeft : RenderFlag
    
    StrikeOut : RenderFlag
    
    Underline : RenderFlag
    
    __new__ : builtin_function_or_method


class QTextInlineObject(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def ascent(*args, **kwargs): ...
    def descent(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def formatIndex(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def setAscent(*args, **kwargs): ...
    def setDescent(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def textDirection(*args, **kwargs): ...
    def textPosition(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSurface(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def format(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def supportsOpenGL(*args, **kwargs): ...
    def surfaceClass(*args, **kwargs): ...
    def surfaceHandle(*args, **kwargs): ...
    def surfaceType(*args, **kwargs): ...
    Offscreen : SurfaceClass
    
    OpenGLSurface : SurfaceType
    
    RasterGLSurface : SurfaceType
    
    RasterSurface : SurfaceType
    
    SurfaceClass : Type[SurfaceClass]
    
    SurfaceType : Type[SurfaceType]
    
    Window : SurfaceClass
    
    __new__ : builtin_function_or_method
    
    m_type : getset_descriptor


class QDropEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def acceptProposedAction(*args, **kwargs): ...
    def dropAction(*args, **kwargs): ...
    def keyboardModifiers(*args, **kwargs): ...
    def mimeData(*args, **kwargs): ...
    def mouseButtons(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def posF(*args, **kwargs): ...
    def possibleActions(*args, **kwargs): ...
    def proposedAction(*args, **kwargs): ...
    def setDropAction(*args, **kwargs): ...
    def source(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QAccessibleEvent(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def accessibleInterface(*args, **kwargs): ...
    def child(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def setChild(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    m_object : getset_descriptor


class QKeySequence(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def count(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def matches(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    @staticmethod
    def fromString(*args, **kwargs): ...
    @staticmethod
    def keyBindings(*args, **kwargs): ...
    @staticmethod
    def listFromString(*args, **kwargs): ...
    @staticmethod
    def listToString(*args, **kwargs): ...
    @staticmethod
    def mnemonic(*args, **kwargs): ...
    AddTab : StandardKey
    
    Back : StandardKey
    
    Backspace : StandardKey
    
    Bold : StandardKey
    
    Cancel : StandardKey
    
    Close : StandardKey
    
    Copy : StandardKey
    
    Cut : StandardKey
    
    Delete : StandardKey
    
    DeleteCompleteLine : StandardKey
    
    DeleteEndOfLine : StandardKey
    
    DeleteEndOfWord : StandardKey
    
    DeleteStartOfWord : StandardKey
    
    Deselect : StandardKey
    
    ExactMatch : SequenceMatch
    
    Find : StandardKey
    
    FindNext : StandardKey
    
    FindPrevious : StandardKey
    
    Forward : StandardKey
    
    FullScreen : StandardKey
    
    HelpContents : StandardKey
    
    InsertLineSeparator : StandardKey
    
    InsertParagraphSeparator : StandardKey
    
    Italic : StandardKey
    
    MoveToEndOfBlock : StandardKey
    
    MoveToEndOfDocument : StandardKey
    
    MoveToEndOfLine : StandardKey
    
    MoveToNextChar : StandardKey
    
    MoveToNextLine : StandardKey
    
    MoveToNextPage : StandardKey
    
    MoveToNextWord : StandardKey
    
    MoveToPreviousChar : StandardKey
    
    MoveToPreviousLine : StandardKey
    
    MoveToPreviousPage : StandardKey
    
    MoveToPreviousWord : StandardKey
    
    MoveToStartOfBlock : StandardKey
    
    MoveToStartOfDocument : StandardKey
    
    MoveToStartOfLine : StandardKey
    
    NativeText : SequenceFormat
    
    New : StandardKey
    
    NextChild : StandardKey
    
    NoMatch : SequenceMatch
    
    Open : StandardKey
    
    PartialMatch : SequenceMatch
    
    Paste : StandardKey
    
    PortableText : SequenceFormat
    
    Preferences : StandardKey
    
    PreviousChild : StandardKey
    
    Print : StandardKey
    
    Quit : StandardKey
    
    Redo : StandardKey
    
    Refresh : StandardKey
    
    Replace : StandardKey
    
    Save : StandardKey
    
    SaveAs : StandardKey
    
    SelectAll : StandardKey
    
    SelectEndOfBlock : StandardKey
    
    SelectEndOfDocument : StandardKey
    
    SelectEndOfLine : StandardKey
    
    SelectNextChar : StandardKey
    
    SelectNextLine : StandardKey
    
    SelectNextPage : StandardKey
    
    SelectNextWord : StandardKey
    
    SelectPreviousChar : StandardKey
    
    SelectPreviousLine : StandardKey
    
    SelectPreviousPage : StandardKey
    
    SelectPreviousWord : StandardKey
    
    SelectStartOfBlock : StandardKey
    
    SelectStartOfDocument : StandardKey
    
    SelectStartOfLine : StandardKey
    
    SequenceFormat : Type[SequenceFormat]
    
    SequenceMatch : Type[SequenceMatch]
    
    StandardKey : Type[StandardKey]
    
    Underline : StandardKey
    
    Undo : StandardKey
    
    UnknownKey : StandardKey
    
    WhatsThis : StandardKey
    
    ZoomIn : StandardKey
    
    ZoomOut : StandardKey
    
    __new__ : builtin_function_or_method


class QPolygonF(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __delitem__(*args, **kwargs):
        """
        x.__delitem__(y) <==> del x[y]
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __len__(self) -> int:
        """
        x.__len__() <==> len(x)
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __setitem__(*args, **kwargs):
        """
        x.__setitem__(i, y) <==> x[i]=y
        """
        ...
    def append(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def capacity(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def constData(*args, **kwargs): ...
    def constFirst(*args, **kwargs): ...
    def constLast(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def containsPoint(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def empty(*args, **kwargs): ...
    def endsWith(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def first(*args, **kwargs): ...
    def front(*args, **kwargs): ...
    def indexOf(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def intersected(*args, **kwargs): ...
    def isClosed(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isSharedWith(*args, **kwargs): ...
    def last(*args, **kwargs): ...
    def lastIndexOf(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def mid(*args, **kwargs): ...
    def move(*args, **kwargs): ...
    def pop_back(*args, **kwargs): ...
    def pop_front(*args, **kwargs): ...
    def prepend(*args, **kwargs): ...
    def push_back(*args, **kwargs): ...
    def push_front(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def removeAll(*args, **kwargs): ...
    def removeAt(*args, **kwargs): ...
    def removeFirst(*args, **kwargs): ...
    def removeLast(*args, **kwargs): ...
    def removeOne(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def reserve(*args, **kwargs): ...
    def resize(*args, **kwargs): ...
    def setSharable(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def squeeze(*args, **kwargs): ...
    def startsWith(*args, **kwargs): ...
    def subtracted(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def takeAt(*args, **kwargs): ...
    def takeFirst(*args, **kwargs): ...
    def takeLast(*args, **kwargs): ...
    def toList(*args, **kwargs): ...
    def toPolygon(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def translated(*args, **kwargs): ...
    def united(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    @staticmethod
    def fromList(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextDocument(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addResource(*args, **kwargs): ...
    def adjustSize(*args, **kwargs): ...
    def allFormats(*args, **kwargs): ...
    def availableRedoSteps(*args, **kwargs): ...
    def availableUndoSteps(*args, **kwargs): ...
    def baseUrl(*args, **kwargs): ...
    def begin(*args, **kwargs): ...
    def blockCount(*args, **kwargs): ...
    def characterAt(*args, **kwargs): ...
    def characterCount(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def clearUndoRedoStacks(*args, **kwargs): ...
    def clone(*args, **kwargs): ...
    def createObject(*args, **kwargs): ...
    def defaultCursorMoveStyle(*args, **kwargs): ...
    def defaultFont(*args, **kwargs): ...
    def defaultStyleSheet(*args, **kwargs): ...
    def defaultTextOption(*args, **kwargs): ...
    def documentLayout(*args, **kwargs): ...
    def documentMargin(*args, **kwargs): ...
    def drawContents(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def find(*args, **kwargs): ...
    def findBlock(*args, **kwargs): ...
    def findBlockByLineNumber(*args, **kwargs): ...
    def findBlockByNumber(*args, **kwargs): ...
    def firstBlock(*args, **kwargs): ...
    def frameAt(*args, **kwargs): ...
    def idealWidth(*args, **kwargs): ...
    def indentWidth(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isModified(*args, **kwargs): ...
    def isRedoAvailable(*args, **kwargs): ...
    def isUndoAvailable(*args, **kwargs): ...
    def isUndoRedoEnabled(*args, **kwargs): ...
    def lastBlock(*args, **kwargs): ...
    def lineCount(*args, **kwargs): ...
    def loadResource(*args, **kwargs): ...
    def markContentsDirty(*args, **kwargs): ...
    def maximumBlockCount(*args, **kwargs): ...
    def metaInformation(*args, **kwargs): ...
    def object(*args, **kwargs): ...
    def objectForFormat(*args, **kwargs): ...
    def pageCount(*args, **kwargs): ...
    def pageSize(*args, **kwargs): ...
    def print_(*args, **kwargs): ...
    def redo(*args, **kwargs): ...
    def resource(*args, **kwargs): ...
    def revision(*args, **kwargs): ...
    def rootFrame(*args, **kwargs): ...
    def setBaseUrl(*args, **kwargs): ...
    def setDefaultCursorMoveStyle(*args, **kwargs): ...
    def setDefaultFont(*args, **kwargs): ...
    def setDefaultStyleSheet(*args, **kwargs): ...
    def setDefaultTextOption(*args, **kwargs): ...
    def setDocumentLayout(*args, **kwargs): ...
    def setDocumentMargin(*args, **kwargs): ...
    def setHtml(*args, **kwargs): ...
    def setIndentWidth(*args, **kwargs): ...
    def setMaximumBlockCount(*args, **kwargs): ...
    def setMetaInformation(*args, **kwargs): ...
    def setModified(*args, **kwargs): ...
    def setPageSize(*args, **kwargs): ...
    def setPlainText(*args, **kwargs): ...
    def setTextWidth(*args, **kwargs): ...
    def setUndoRedoEnabled(*args, **kwargs): ...
    def setUseDesignMetrics(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def textWidth(*args, **kwargs): ...
    def toHtml(*args, **kwargs): ...
    def toPlainText(*args, **kwargs): ...
    def undo(*args, **kwargs): ...
    def useDesignMetrics(*args, **kwargs): ...
    DocumentTitle : MetaInformation
    
    DocumentUrl : MetaInformation
    
    FindBackward : FindFlag
    
    FindCaseSensitively : FindFlag
    
    FindFlag : Type[FindFlag]
    
    FindFlags : Type[FindFlags]
    
    FindWholeWords : FindFlag
    
    HtmlResource : ResourceType
    
    ImageResource : ResourceType
    
    MetaInformation : Type[MetaInformation]
    
    RedoStack : Stacks
    
    ResourceType : Type[ResourceType]
    
    Stacks : Type[Stacks]
    
    StyleSheetResource : ResourceType
    
    UndoAndRedoStacks : Stacks
    
    UndoStack : Stacks
    
    UserResource : ResourceType
    
    __new__ : builtin_function_or_method
    
    baseUrlChanged : PySide2.QtCore.Signal
    
    blockCountChanged : PySide2.QtCore.Signal
    
    contentsChange : PySide2.QtCore.Signal
    
    contentsChanged : PySide2.QtCore.Signal
    
    cursorPositionChanged : PySide2.QtCore.Signal
    
    documentLayoutChanged : PySide2.QtCore.Signal
    
    modificationChanged : PySide2.QtCore.Signal
    
    redoAvailable : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    undoAvailable : PySide2.QtCore.Signal
    
    undoCommandAdded : PySide2.QtCore.Signal


class QDesktopServices(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    @staticmethod
    def openUrl(*args, **kwargs): ...
    @staticmethod
    def setUrlHandler(*args, **kwargs): ...
    @staticmethod
    def unsetUrlHandler(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QMatrix3x2(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QRegion(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __and__(*args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __ior__(*args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __ixor__(*args, **kwargs):
        """
        x.__ixor__(y) <==> x^=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __or__(*args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rand__(*args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __ror__(*args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rxor__(*args, **kwargs):
        """
        x.__rxor__(y) <==> y^x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __xor__(*args, **kwargs):
        """
        x.__xor__(y) <==> x^y
        """
        ...
    def boundingRect(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def intersected(*args, **kwargs): ...
    def intersects(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def rectCount(*args, **kwargs): ...
    def rects(*args, **kwargs): ...
    def setRects(*args, **kwargs): ...
    def subtracted(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def translated(*args, **kwargs): ...
    def united(*args, **kwargs): ...
    def xored(*args, **kwargs): ...
    Ellipse : RegionType
    
    Rectangle : RegionType
    
    RegionType : Type[RegionType]
    
    __new__ : builtin_function_or_method


class QShortcutEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QTextLine(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def ascent(*args, **kwargs): ...
    def cursorToX(*args, **kwargs): ...
    def descent(*args, **kwargs): ...
    def draw(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def horizontalAdvance(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def leading(*args, **kwargs): ...
    def leadingIncluded(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    def naturalTextRect(*args, **kwargs): ...
    def naturalTextWidth(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def setLeadingIncluded(*args, **kwargs): ...
    def setLineWidth(*args, **kwargs): ...
    def setNumColumns(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def textLength(*args, **kwargs): ...
    def textStart(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def xToCursor(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    CursorBetweenCharacters : CursorPosition
    
    CursorOnCharacter : CursorPosition
    
    CursorPosition : Type[CursorPosition]
    
    Edge : Type[Edge]
    
    Leading : Edge
    
    Trailing : Edge
    
    __new__ : builtin_function_or_method


class QVector4D(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __neg__(*args, **kwargs):
        """
        x.__neg__() <==> -x
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def isNull(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lengthSquared(*args, **kwargs): ...
    def normalize(*args, **kwargs): ...
    def normalized(*args, **kwargs): ...
    def setW(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def setZ(*args, **kwargs): ...
    def toPoint(*args, **kwargs): ...
    def toPointF(*args, **kwargs): ...
    def toTuple(*args, **kwargs): ...
    def toVector2D(*args, **kwargs): ...
    def toVector2DAffine(*args, **kwargs): ...
    def toVector3D(*args, **kwargs): ...
    def toVector3DAffine(*args, **kwargs): ...
    def w(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    def z(*args, **kwargs): ...
    @staticmethod
    def dotProduct(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QGradient(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def coordinateMode(*args, **kwargs): ...
    def interpolationMode(*args, **kwargs): ...
    def setColorAt(*args, **kwargs): ...
    def setCoordinateMode(*args, **kwargs): ...
    def setInterpolationMode(*args, **kwargs): ...
    def setSpread(*args, **kwargs): ...
    def setStops(*args, **kwargs): ...
    def spread(*args, **kwargs): ...
    def stops(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    ColorInterpolation : InterpolationMode
    
    ComponentInterpolation : InterpolationMode
    
    ConicalGradient : Type
    
    CoordinateMode : Type[CoordinateMode]
    
    InterpolationMode : Type[InterpolationMode]
    
    LinearGradient : Type
    
    LogicalMode : CoordinateMode
    
    NoGradient : Type
    
    ObjectBoundingMode : CoordinateMode
    
    PadSpread : Spread
    
    RadialGradient : Type
    
    ReflectSpread : Spread
    
    RepeatSpread : Spread
    
    Spread : Type[Spread]
    
    StretchToDeviceMode : CoordinateMode
    
    Type : Type[Type]
    
    __new__ : builtin_function_or_method


class QIcon(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def actualSize(*args, **kwargs): ...
    def addFile(*args, **kwargs): ...
    def addPixmap(*args, **kwargs): ...
    def availableSizes(*args, **kwargs): ...
    def cacheKey(*args, **kwargs): ...
    def isMask(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def paint(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def setIsMask(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    @staticmethod
    def fromTheme(*args, **kwargs): ...
    @staticmethod
    def hasThemeIcon(*args, **kwargs): ...
    @staticmethod
    def setThemeName(*args, **kwargs): ...
    @staticmethod
    def setThemeSearchPaths(*args, **kwargs): ...
    @staticmethod
    def themeName(*args, **kwargs): ...
    @staticmethod
    def themeSearchPaths(*args, **kwargs): ...
    Active : Mode
    
    Disabled : Mode
    
    Mode : Type[Mode]
    
    Normal : Mode
    
    Off : State
    
    On : State
    
    Selected : Mode
    
    State : Type[State]
    
    __new__ : builtin_function_or_method


class QOpenGLBuffer(_Object):
    def __getattribute__(*args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def allocate(*args, **kwargs): ...
    def bind(*args, **kwargs): ...
    def create(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def isCreated(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mapRange(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def setUsagePattern(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def unmap(*args, **kwargs): ...
    def usagePattern(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    @staticmethod
    def release(*args, **kwargs): ...
    Access : Type[Access]
    
    DynamicCopy : UsagePattern
    
    DynamicDraw : UsagePattern
    
    DynamicRead : UsagePattern
    
    IndexBuffer : Type
    
    PixelPackBuffer : Type
    
    PixelUnpackBuffer : Type
    
    RangeAccessFlag : Type[RangeAccessFlag]
    
    RangeAccessFlags : Type[RangeAccessFlags]
    
    RangeFlushExplicit : RangeAccessFlag
    
    RangeInvalidate : RangeAccessFlag
    
    RangeInvalidateBuffer : RangeAccessFlag
    
    RangeRead : RangeAccessFlag
    
    RangeUnsynchronized : RangeAccessFlag
    
    RangeWrite : RangeAccessFlag
    
    ReadOnly : Access
    
    ReadWrite : Access
    
    StaticCopy : UsagePattern
    
    StaticDraw : UsagePattern
    
    StaticRead : UsagePattern
    
    StreamCopy : UsagePattern
    
    StreamDraw : UsagePattern
    
    StreamRead : UsagePattern
    
    Type : Type[Type]
    
    UsagePattern : Type[UsagePattern]
    
    VertexBuffer : Type
    
    WriteOnly : Access
    
    __new__ : builtin_function_or_method


class QToolBarChangeEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def toggle(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QStandardItem(_Object):
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def accessibleDescription(*args, **kwargs): ...
    def accessibleText(*args, **kwargs): ...
    def appendColumn(*args, **kwargs): ...
    def appendRow(*args, **kwargs): ...
    def appendRows(*args, **kwargs): ...
    def background(*args, **kwargs): ...
    def checkState(*args, **kwargs): ...
    def child(*args, **kwargs): ...
    def clone(*args, **kwargs): ...
    def column(*args, **kwargs): ...
    def columnCount(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def emitDataChanged(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def foreground(*args, **kwargs): ...
    def hasChildren(*args, **kwargs): ...
    def icon(*args, **kwargs): ...
    def index(*args, **kwargs): ...
    def insertColumn(*args, **kwargs): ...
    def insertColumns(*args, **kwargs): ...
    def insertRow(*args, **kwargs): ...
    def insertRows(*args, **kwargs): ...
    def isAutoTristate(*args, **kwargs): ...
    def isCheckable(*args, **kwargs): ...
    def isDragEnabled(*args, **kwargs): ...
    def isDropEnabled(*args, **kwargs): ...
    def isEditable(*args, **kwargs): ...
    def isEnabled(*args, **kwargs): ...
    def isSelectable(*args, **kwargs): ...
    def isTristate(*args, **kwargs): ...
    def isUserTristate(*args, **kwargs): ...
    def model(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def read(*args, **kwargs): ...
    def removeColumn(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def removeRow(*args, **kwargs): ...
    def removeRows(*args, **kwargs): ...
    def row(*args, **kwargs): ...
    def rowCount(*args, **kwargs): ...
    def setAccessibleDescription(*args, **kwargs): ...
    def setAccessibleText(*args, **kwargs): ...
    def setAutoTristate(*args, **kwargs): ...
    def setBackground(*args, **kwargs): ...
    def setCheckState(*args, **kwargs): ...
    def setCheckable(*args, **kwargs): ...
    def setChild(*args, **kwargs): ...
    def setColumnCount(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setDragEnabled(*args, **kwargs): ...
    def setDropEnabled(*args, **kwargs): ...
    def setEditable(*args, **kwargs): ...
    def setEnabled(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def setFont(*args, **kwargs): ...
    def setForeground(*args, **kwargs): ...
    def setIcon(*args, **kwargs): ...
    def setRowCount(*args, **kwargs): ...
    def setSelectable(*args, **kwargs): ...
    def setSizeHint(*args, **kwargs): ...
    def setStatusTip(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def setTextAlignment(*args, **kwargs): ...
    def setToolTip(*args, **kwargs): ...
    def setTristate(*args, **kwargs): ...
    def setUserTristate(*args, **kwargs): ...
    def setWhatsThis(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    def sortChildren(*args, **kwargs): ...
    def statusTip(*args, **kwargs): ...
    def takeChild(*args, **kwargs): ...
    def takeColumn(*args, **kwargs): ...
    def takeRow(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def textAlignment(*args, **kwargs): ...
    def toolTip(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def whatsThis(*args, **kwargs): ...
    def write(*args, **kwargs): ...
    ItemType : Type[ItemType]
    
    Type : ItemType
    
    UserType : ItemType
    
    __new__ : builtin_function_or_method


class QInputEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def modifiers(*args, **kwargs): ...
    def setModifiers(*args, **kwargs): ...
    def setTimestamp(*args, **kwargs): ...
    def timestamp(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    ts : getset_descriptor


class QPen(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def brush(*args, **kwargs): ...
    def capStyle(*args, **kwargs): ...
    def color(*args, **kwargs): ...
    def dashOffset(*args, **kwargs): ...
    def dashPattern(*args, **kwargs): ...
    def isCosmetic(*args, **kwargs): ...
    def isSolid(*args, **kwargs): ...
    def joinStyle(*args, **kwargs): ...
    def miterLimit(*args, **kwargs): ...
    def setBrush(*args, **kwargs): ...
    def setCapStyle(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setCosmetic(*args, **kwargs): ...
    def setDashOffset(*args, **kwargs): ...
    def setDashPattern(*args, **kwargs): ...
    def setJoinStyle(*args, **kwargs): ...
    def setMiterLimit(*args, **kwargs): ...
    def setStyle(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def setWidthF(*args, **kwargs): ...
    def style(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def widthF(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextOption(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def alignment(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def setAlignment(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def setTabArray(*args, **kwargs): ...
    def setTabStop(*args, **kwargs): ...
    def setTabs(*args, **kwargs): ...
    def setTextDirection(*args, **kwargs): ...
    def setUseDesignMetrics(*args, **kwargs): ...
    def setWrapMode(*args, **kwargs): ...
    def tabArray(*args, **kwargs): ...
    def tabStop(*args, **kwargs): ...
    def tabs(*args, **kwargs): ...
    def textDirection(*args, **kwargs): ...
    def useDesignMetrics(*args, **kwargs): ...
    def wrapMode(*args, **kwargs): ...
    AddSpaceForLineAndParagraphSeparators : Flag
    
    CenterTab : TabType
    
    DelimiterTab : TabType
    
    Flag : Type[Flag]
    
    Flags : Type[Flags]
    
    IncludeTrailingSpaces : Flag
    
    LeftTab : TabType
    
    ManualWrap : WrapMode
    
    NoWrap : WrapMode
    
    RightTab : TabType
    
    ShowLineAndParagraphSeparators : Flag
    
    ShowTabsAndSpaces : Flag
    
    SuppressColors : Flag
    
    Tab : Type[Tab]
    
    TabType : Type[TabType]
    
    WordWrap : WrapMode
    
    WrapAnywhere : WrapMode
    
    WrapAtWordBoundaryOrAnywhere : WrapMode
    
    WrapMode : Type[WrapMode]
    
    __new__ : builtin_function_or_method


class QActionEvent(_QEvent):
    pass


class QFontDatabase(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bold(*args, **kwargs): ...
    def families(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def hasFamily(*args, **kwargs): ...
    def isBitmapScalable(*args, **kwargs): ...
    def isFixedPitch(*args, **kwargs): ...
    def isPrivateFamily(*args, **kwargs): ...
    def isScalable(*args, **kwargs): ...
    def isSmoothlyScalable(*args, **kwargs): ...
    def italic(*args, **kwargs): ...
    def pointSizes(*args, **kwargs): ...
    def smoothSizes(*args, **kwargs): ...
    def styleString(*args, **kwargs): ...
    def styles(*args, **kwargs): ...
    def weight(*args, **kwargs): ...
    def writingSystems(*args, **kwargs): ...
    @staticmethod
    def addApplicationFont(*args, **kwargs): ...
    @staticmethod
    def addApplicationFontFromData(*args, **kwargs): ...
    @staticmethod
    def applicationFontFamilies(*args, **kwargs): ...
    @staticmethod
    def removeAllApplicationFonts(*args, **kwargs): ...
    @staticmethod
    def removeApplicationFont(*args, **kwargs): ...
    @staticmethod
    def standardSizes(*args, **kwargs): ...
    @staticmethod
    def supportsThreadedFontRendering(*args, **kwargs): ...
    @staticmethod
    def systemFont(*args, **kwargs): ...
    @staticmethod
    def writingSystemName(*args, **kwargs): ...
    @staticmethod
    def writingSystemSample(*args, **kwargs): ...
    Any : WritingSystem
    
    Arabic : WritingSystem
    
    Armenian : WritingSystem
    
    Bengali : WritingSystem
    
    Cyrillic : WritingSystem
    
    Devanagari : WritingSystem
    
    FixedFont : SystemFont
    
    GeneralFont : SystemFont
    
    Georgian : WritingSystem
    
    Greek : WritingSystem
    
    Gujarati : WritingSystem
    
    Gurmukhi : WritingSystem
    
    Hebrew : WritingSystem
    
    Japanese : WritingSystem
    
    Kannada : WritingSystem
    
    Khmer : WritingSystem
    
    Korean : WritingSystem
    
    Lao : WritingSystem
    
    Latin : WritingSystem
    
    Malayalam : WritingSystem
    
    Myanmar : WritingSystem
    
    Nko : WritingSystem
    
    Ogham : WritingSystem
    
    Oriya : WritingSystem
    
    Other : WritingSystem
    
    Runic : WritingSystem
    
    SimplifiedChinese : WritingSystem
    
    Sinhala : WritingSystem
    
    SmallestReadableFont : SystemFont
    
    Symbol : WritingSystem
    
    Syriac : WritingSystem
    
    SystemFont : Type[SystemFont]
    
    Tamil : WritingSystem
    
    Telugu : WritingSystem
    
    Thaana : WritingSystem
    
    Thai : WritingSystem
    
    Tibetan : WritingSystem
    
    TitleFont : SystemFont
    
    TraditionalChinese : WritingSystem
    
    Vietnamese : WritingSystem
    
    WritingSystem : Type[WritingSystem]
    
    WritingSystemsCount : WritingSystem
    
    __new__ : builtin_function_or_method


class QPaintDevice(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def colorCount(*args, **kwargs): ...
    def depth(*args, **kwargs): ...
    def devType(*args, **kwargs): ...
    def devicePixelRatio(*args, **kwargs): ...
    def devicePixelRatioF(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def heightMM(*args, **kwargs): ...
    def initPainter(*args, **kwargs): ...
    def logicalDpiX(*args, **kwargs): ...
    def logicalDpiY(*args, **kwargs): ...
    def metric(*args, **kwargs): ...
    def paintEngine(*args, **kwargs): ...
    def paintingActive(*args, **kwargs): ...
    def physicalDpiX(*args, **kwargs): ...
    def physicalDpiY(*args, **kwargs): ...
    def redirected(*args, **kwargs): ...
    def sharedPainter(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def widthMM(*args, **kwargs): ...
    @staticmethod
    def devicePixelRatioFScale(*args, **kwargs): ...
    PaintDeviceMetric : Type[PaintDeviceMetric]
    
    PdmDepth : PaintDeviceMetric
    
    PdmDevicePixelRatio : PaintDeviceMetric
    
    PdmDevicePixelRatioScaled : PaintDeviceMetric
    
    PdmDpiX : PaintDeviceMetric
    
    PdmDpiY : PaintDeviceMetric
    
    PdmHeight : PaintDeviceMetric
    
    PdmHeightMM : PaintDeviceMetric
    
    PdmNumColors : PaintDeviceMetric
    
    PdmPhysicalDpiX : PaintDeviceMetric
    
    PdmPhysicalDpiY : PaintDeviceMetric
    
    PdmWidth : PaintDeviceMetric
    
    PdmWidthMM : PaintDeviceMetric
    
    __new__ : builtin_function_or_method
    
    painters : getset_descriptor


class QTextBlock(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __iter__(*args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def begin(*args, **kwargs): ...
    def blockFormat(*args, **kwargs): ...
    def blockFormatIndex(*args, **kwargs): ...
    def blockNumber(*args, **kwargs): ...
    def charFormat(*args, **kwargs): ...
    def charFormatIndex(*args, **kwargs): ...
    def clearLayout(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def document(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def firstLineNumber(*args, **kwargs): ...
    def fragmentIndex(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def isVisible(*args, **kwargs): ...
    def layout(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lineCount(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def previous(*args, **kwargs): ...
    def revision(*args, **kwargs): ...
    def setLineCount(*args, **kwargs): ...
    def setRevision(*args, **kwargs): ...
    def setUserData(*args, **kwargs): ...
    def setUserState(*args, **kwargs): ...
    def setVisible(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def textDirection(*args, **kwargs): ...
    def textFormats(*args, **kwargs): ...
    def textList(*args, **kwargs): ...
    def userData(*args, **kwargs): ...
    def userState(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    iterator : Type[iterator]


class QResizeEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def oldSize(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QMatrix3x3(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTransform(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __div__(*args, **kwargs):
        """
        x.__div__(y) <==> x/y
        """
        ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __getattribute__(*args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rdiv__(*args, **kwargs):
        """
        x.__rdiv__(y) <==> y/x
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __rtruediv__(*args, **kwargs):
        """
        x.__rtruediv__(y) <==> y/x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def __truediv__(*args, **kwargs):
        """
        x.__truediv__(y) <==> x/y
        """
        ...
    def adjoint(*args, **kwargs): ...
    def det(*args, **kwargs): ...
    def determinant(*args, **kwargs): ...
    def dx(*args, **kwargs): ...
    def dy(*args, **kwargs): ...
    def inverted(*args, **kwargs): ...
    def isAffine(*args, **kwargs): ...
    def isIdentity(*args, **kwargs): ...
    def isInvertible(*args, **kwargs): ...
    def isRotating(*args, **kwargs): ...
    def isScaling(*args, **kwargs): ...
    def isTranslating(*args, **kwargs): ...
    def m11(*args, **kwargs): ...
    def m12(*args, **kwargs): ...
    def m13(*args, **kwargs): ...
    def m21(*args, **kwargs): ...
    def m22(*args, **kwargs): ...
    def m23(*args, **kwargs): ...
    def m31(*args, **kwargs): ...
    def m32(*args, **kwargs): ...
    def m33(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mapRect(*args, **kwargs): ...
    def mapToPolygon(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def rotate(*args, **kwargs): ...
    def rotateRadians(*args, **kwargs): ...
    def scale(*args, **kwargs): ...
    def setMatrix(*args, **kwargs): ...
    def shear(*args, **kwargs): ...
    def toAffine(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    @staticmethod
    def fromScale(*args, **kwargs): ...
    @staticmethod
    def fromTranslate(*args, **kwargs): ...
    @staticmethod
    def quadToQuad(*args, **kwargs): ...
    @staticmethod
    def quadToSquare(*args, **kwargs): ...
    @staticmethod
    def squareToQuad(*args, **kwargs): ...
    TransformationType : Type[TransformationType]
    
    TxNone : TransformationType
    
    TxProject : TransformationType
    
    TxRotate : TransformationType
    
    TxScale : TransformationType
    
    TxShear : TransformationType
    
    TxTranslate : TransformationType
    
    __new__ : builtin_function_or_method


class QPainterPath(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __and__(*args, **kwargs):
        """
        x.__and__(y) <==> x&y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __iand__(*args, **kwargs):
        """
        x.__iand__(y) <==> x&=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __ior__(*args, **kwargs):
        """
        x.__ior__(y) <==> x|=y
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __or__(*args, **kwargs):
        """
        x.__or__(y) <==> x|y
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def __rand__(*args, **kwargs):
        """
        x.__rand__(y) <==> y&x
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __ror__(*args, **kwargs):
        """
        x.__ror__(y) <==> y|x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __rsub__(*args, **kwargs):
        """
        x.__rsub__(y) <==> y-x
        """
        ...
    def __sub__(*args, **kwargs):
        """
        x.__sub__(y) <==> x-y
        """
        ...
    def addEllipse(*args, **kwargs): ...
    def addPath(*args, **kwargs): ...
    def addPolygon(*args, **kwargs): ...
    def addRect(*args, **kwargs): ...
    def addRegion(*args, **kwargs): ...
    def addRoundRect(*args, **kwargs): ...
    def addRoundedRect(*args, **kwargs): ...
    def addText(*args, **kwargs): ...
    def angleAtPercent(*args, **kwargs): ...
    def arcMoveTo(*args, **kwargs): ...
    def arcTo(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def closeSubpath(*args, **kwargs): ...
    def connectPath(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def controlPointRect(*args, **kwargs): ...
    def cubicTo(*args, **kwargs): ...
    def currentPosition(*args, **kwargs): ...
    def elementAt(*args, **kwargs): ...
    def elementCount(*args, **kwargs): ...
    def fillRule(*args, **kwargs): ...
    def intersected(*args, **kwargs): ...
    def intersects(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def lineTo(*args, **kwargs): ...
    def moveTo(*args, **kwargs): ...
    def percentAtLength(*args, **kwargs): ...
    def pointAtPercent(*args, **kwargs): ...
    def quadTo(*args, **kwargs): ...
    def setElementPositionAt(*args, **kwargs): ...
    def setFillRule(*args, **kwargs): ...
    def simplified(*args, **kwargs): ...
    def slopeAtPercent(*args, **kwargs): ...
    def subtracted(*args, **kwargs): ...
    def subtractedInverted(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def toFillPolygon(*args, **kwargs): ...
    def toFillPolygons(*args, **kwargs): ...
    def toReversed(*args, **kwargs): ...
    def toSubpathPolygons(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    def translated(*args, **kwargs): ...
    def united(*args, **kwargs): ...
    CurveToDataElement : ElementType
    
    CurveToElement : ElementType
    
    Element : Type[Element]
    
    ElementType : Type[ElementType]
    
    LineToElement : ElementType
    
    MoveToElement : ElementType
    
    __new__ : builtin_function_or_method


class QMatrix2x2(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPixmapCache(_Object):
    def __getattribute__(*args, **kwargs):
        """
        x.__getattribute__('name') <==> x.name
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    @staticmethod
    def cacheLimit(*args, **kwargs): ...
    @staticmethod
    def clear(*args, **kwargs): ...
    @staticmethod
    def find(*args, **kwargs): ...
    @staticmethod
    def insert(*args, **kwargs): ...
    @staticmethod
    def remove(*args, **kwargs): ...
    @staticmethod
    def replace(*args, **kwargs): ...
    @staticmethod
    def setCacheLimit(*args, **kwargs): ...
    Key : Type[Key]
    
    __new__ : builtin_function_or_method


class QIconDragEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QWhatsThisClickedEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def href(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextDocumentFragment(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def isEmpty(*args, **kwargs): ...
    def toHtml(*args, **kwargs): ...
    def toPlainText(*args, **kwargs): ...
    @staticmethod
    def fromHtml(*args, **kwargs): ...
    @staticmethod
    def fromPlainText(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSurfaceFormat(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def alphaBufferSize(*args, **kwargs): ...
    def blueBufferSize(*args, **kwargs): ...
    def depthBufferSize(*args, **kwargs): ...
    def greenBufferSize(*args, **kwargs): ...
    def hasAlpha(*args, **kwargs): ...
    def majorVersion(*args, **kwargs): ...
    def minorVersion(*args, **kwargs): ...
    def options(*args, **kwargs): ...
    def profile(*args, **kwargs): ...
    def redBufferSize(*args, **kwargs): ...
    def renderableType(*args, **kwargs): ...
    def samples(*args, **kwargs): ...
    def setAlphaBufferSize(*args, **kwargs): ...
    def setBlueBufferSize(*args, **kwargs): ...
    def setDepthBufferSize(*args, **kwargs): ...
    def setGreenBufferSize(*args, **kwargs): ...
    def setMajorVersion(*args, **kwargs): ...
    def setMinorVersion(*args, **kwargs): ...
    def setOption(*args, **kwargs): ...
    def setOptions(*args, **kwargs): ...
    def setProfile(*args, **kwargs): ...
    def setRedBufferSize(*args, **kwargs): ...
    def setRenderableType(*args, **kwargs): ...
    def setSamples(*args, **kwargs): ...
    def setStencilBufferSize(*args, **kwargs): ...
    def setStereo(*args, **kwargs): ...
    def setSwapBehavior(*args, **kwargs): ...
    def setSwapInterval(*args, **kwargs): ...
    def setVersion(*args, **kwargs): ...
    def stencilBufferSize(*args, **kwargs): ...
    def stereo(*args, **kwargs): ...
    def swapBehavior(*args, **kwargs): ...
    def swapInterval(*args, **kwargs): ...
    def testOption(*args, **kwargs): ...
    def version(*args, **kwargs): ...
    @staticmethod
    def defaultFormat(*args, **kwargs): ...
    @staticmethod
    def setDefaultFormat(*args, **kwargs): ...
    CompatibilityProfile : OpenGLContextProfile
    
    CoreProfile : OpenGLContextProfile
    
    DebugContext : FormatOption
    
    DefaultRenderableType : RenderableType
    
    DefaultSwapBehavior : SwapBehavior
    
    DeprecatedFunctions : FormatOption
    
    DoubleBuffer : SwapBehavior
    
    FormatOption : Type[FormatOption]
    
    FormatOptions : Type[FormatOptions]
    
    NoProfile : OpenGLContextProfile
    
    OpenGL : RenderableType
    
    OpenGLContextProfile : Type[OpenGLContextProfile]
    
    OpenGLES : RenderableType
    
    OpenVG : RenderableType
    
    RenderableType : Type[RenderableType]
    
    ResetNotification : FormatOption
    
    SingleBuffer : SwapBehavior
    
    StereoBuffers : FormatOption
    
    SwapBehavior : Type[SwapBehavior]
    
    TripleBuffer : SwapBehavior
    
    __new__ : builtin_function_or_method


class QFileOpenEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def file(*args, **kwargs): ...
    def openFile(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTouchDevice(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def capabilities(*args, **kwargs): ...
    def maximumTouchPoints(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def setCapabilities(*args, **kwargs): ...
    def setMaximumTouchPoints(*args, **kwargs): ...
    def setName(*args, **kwargs): ...
    def setType(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    @staticmethod
    def devices(*args, **kwargs): ...
    Area : CapabilityFlag
    
    Capabilities : Type[Capabilities]
    
    CapabilityFlag : Type[CapabilityFlag]
    
    DeviceType : Type[DeviceType]
    
    MouseEmulation : CapabilityFlag
    
    NormalizedPosition : CapabilityFlag
    
    Position : CapabilityFlag
    
    Pressure : CapabilityFlag
    
    RawPositions : CapabilityFlag
    
    TouchPad : DeviceType
    
    TouchScreen : DeviceType
    
    Velocity : CapabilityFlag
    
    __new__ : builtin_function_or_method


class QColor(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def __setstate__(*args, **kwargs): ...
    def __str__(self) -> str:
        """
        x.__str__() <==> str(x)
        """
        ...
    def alpha(*args, **kwargs): ...
    def alphaF(*args, **kwargs): ...
    def black(*args, **kwargs): ...
    def blackF(*args, **kwargs): ...
    def blue(*args, **kwargs): ...
    def blueF(*args, **kwargs): ...
    def convertTo(*args, **kwargs): ...
    def cyan(*args, **kwargs): ...
    def cyanF(*args, **kwargs): ...
    def dark(*args, **kwargs): ...
    def darker(*args, **kwargs): ...
    def getCmyk(*args, **kwargs): ...
    def getCmykF(*args, **kwargs): ...
    def getHsl(*args, **kwargs): ...
    def getHslF(*args, **kwargs): ...
    def getHsv(*args, **kwargs): ...
    def getHsvF(*args, **kwargs): ...
    def getRgb(*args, **kwargs): ...
    def getRgbF(*args, **kwargs): ...
    def green(*args, **kwargs): ...
    def greenF(*args, **kwargs): ...
    def hslHue(*args, **kwargs): ...
    def hslHueF(*args, **kwargs): ...
    def hslSaturation(*args, **kwargs): ...
    def hslSaturationF(*args, **kwargs): ...
    def hsvHue(*args, **kwargs): ...
    def hsvHueF(*args, **kwargs): ...
    def hsvSaturation(*args, **kwargs): ...
    def hsvSaturationF(*args, **kwargs): ...
    def hue(*args, **kwargs): ...
    def hueF(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def light(*args, **kwargs): ...
    def lighter(*args, **kwargs): ...
    def lightness(*args, **kwargs): ...
    def lightnessF(*args, **kwargs): ...
    def magenta(*args, **kwargs): ...
    def magentaF(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def red(*args, **kwargs): ...
    def redF(*args, **kwargs): ...
    def rgb(*args, **kwargs): ...
    def rgba(*args, **kwargs): ...
    def saturation(*args, **kwargs): ...
    def saturationF(*args, **kwargs): ...
    def setAlpha(*args, **kwargs): ...
    def setAlphaF(*args, **kwargs): ...
    def setBlue(*args, **kwargs): ...
    def setBlueF(*args, **kwargs): ...
    def setCmyk(*args, **kwargs): ...
    def setCmykF(*args, **kwargs): ...
    def setGreen(*args, **kwargs): ...
    def setGreenF(*args, **kwargs): ...
    def setHsl(*args, **kwargs): ...
    def setHslF(*args, **kwargs): ...
    def setHsv(*args, **kwargs): ...
    def setHsvF(*args, **kwargs): ...
    def setNamedColor(*args, **kwargs): ...
    def setRed(*args, **kwargs): ...
    def setRedF(*args, **kwargs): ...
    def setRgb(*args, **kwargs): ...
    def setRgbF(*args, **kwargs): ...
    def setRgba(*args, **kwargs): ...
    def spec(*args, **kwargs): ...
    def toCmyk(*args, **kwargs): ...
    def toHsl(*args, **kwargs): ...
    def toHsv(*args, **kwargs): ...
    def toRgb(*args, **kwargs): ...
    def toTuple(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    def valueF(*args, **kwargs): ...
    def yellow(*args, **kwargs): ...
    def yellowF(*args, **kwargs): ...
    @staticmethod
    def colorNames(*args, **kwargs): ...
    @staticmethod
    def fromCmyk(*args, **kwargs): ...
    @staticmethod
    def fromCmykF(*args, **kwargs): ...
    @staticmethod
    def fromHsl(*args, **kwargs): ...
    @staticmethod
    def fromHslF(*args, **kwargs): ...
    @staticmethod
    def fromHsv(*args, **kwargs): ...
    @staticmethod
    def fromHsvF(*args, **kwargs): ...
    @staticmethod
    def fromRgb(*args, **kwargs): ...
    @staticmethod
    def fromRgbF(*args, **kwargs): ...
    @staticmethod
    def fromRgba(*args, **kwargs): ...
    @staticmethod
    def fromRgba64(*args, **kwargs): ...
    @staticmethod
    def isValidColor(*args, **kwargs): ...
    Cmyk : Spec
    
    HexArgb : NameFormat
    
    HexRgb : NameFormat
    
    Hsl : Spec
    
    Hsv : Spec
    
    Invalid : Spec
    
    NameFormat : Type[NameFormat]
    
    Rgb : Spec
    
    Spec : Type[Spec]
    
    __new__ : builtin_function_or_method


class QWindowStateChangeEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def isOverride(*args, **kwargs): ...
    def oldState(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QOpenGLContext(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def create(*args, **kwargs): ...
    def doneCurrent(*args, **kwargs): ...
    def extensions(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def hasExtension(*args, **kwargs): ...
    def isOpenGLES(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def makeCurrent(*args, **kwargs): ...
    def nativeHandle(*args, **kwargs): ...
    def screen(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setNativeHandle(*args, **kwargs): ...
    def setScreen(*args, **kwargs): ...
    def setShareContext(*args, **kwargs): ...
    def shareContext(*args, **kwargs): ...
    def surface(*args, **kwargs): ...
    def swapBuffers(*args, **kwargs): ...
    @staticmethod
    def areSharing(*args, **kwargs): ...
    @staticmethod
    def currentContext(*args, **kwargs): ...
    @staticmethod
    def globalShareContext(*args, **kwargs): ...
    @staticmethod
    def openGLModuleHandle(*args, **kwargs): ...
    @staticmethod
    def openGLModuleType(*args, **kwargs): ...
    @staticmethod
    def supportsThreadedOpenGL(*args, **kwargs): ...
    LibGL : OpenGLModuleType
    
    LibGLES : OpenGLModuleType
    
    OpenGLModuleType : Type[OpenGLModuleType]
    
    __new__ : builtin_function_or_method
    
    aboutToBeDestroyed : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QMatrix3x4(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __idiv__(*args, **kwargs):
        """
        x.__idiv__(y) <==> x/=y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __isub__(*args, **kwargs):
        """
        x.__isub__(y) <==> x-=y
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def data(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def transposed(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QScreen(_QObject):
    def angleBetween(*args, **kwargs): ...
    def availableGeometry(*args, **kwargs): ...
    def availableSize(*args, **kwargs): ...
    def availableVirtualGeometry(*args, **kwargs): ...
    def availableVirtualSize(*args, **kwargs): ...
    def depth(*args, **kwargs): ...
    def devicePixelRatio(*args, **kwargs): ...
    def geometry(*args, **kwargs): ...
    def grabWindow(*args, **kwargs): ...
    def isLandscape(*args, **kwargs): ...
    def isPortrait(*args, **kwargs): ...
    def logicalDotsPerInch(*args, **kwargs): ...
    def logicalDotsPerInchX(*args, **kwargs): ...
    def logicalDotsPerInchY(*args, **kwargs): ...
    def mapBetween(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def nativeOrientation(*args, **kwargs): ...
    def orientation(*args, **kwargs): ...
    def orientationUpdateMask(*args, **kwargs): ...
    def physicalDotsPerInch(*args, **kwargs): ...
    def physicalDotsPerInchX(*args, **kwargs): ...
    def physicalDotsPerInchY(*args, **kwargs): ...
    def physicalSize(*args, **kwargs): ...
    def primaryOrientation(*args, **kwargs): ...
    def refreshRate(*args, **kwargs): ...
    def setOrientationUpdateMask(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def transformBetween(*args, **kwargs): ...
    def virtualGeometry(*args, **kwargs): ...
    def virtualSiblings(*args, **kwargs): ...
    def virtualSize(*args, **kwargs): ...
    availableGeometryChanged : PySide2.QtCore.Signal
    
    geometryChanged : PySide2.QtCore.Signal
    
    logicalDotsPerInchChanged : PySide2.QtCore.Signal
    
    orientationChanged : PySide2.QtCore.Signal
    
    physicalDotsPerInchChanged : PySide2.QtCore.Signal
    
    physicalSizeChanged : PySide2.QtCore.Signal
    
    primaryOrientationChanged : PySide2.QtCore.Signal
    
    refreshRateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    virtualGeometryChanged : PySide2.QtCore.Signal


class QFontInfo(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bold(*args, **kwargs): ...
    def exactMatch(*args, **kwargs): ...
    def family(*args, **kwargs): ...
    def fixedPitch(*args, **kwargs): ...
    def italic(*args, **kwargs): ...
    def overline(*args, **kwargs): ...
    def pixelSize(*args, **kwargs): ...
    def pointSize(*args, **kwargs): ...
    def pointSizeF(*args, **kwargs): ...
    def rawMode(*args, **kwargs): ...
    def strikeOut(*args, **kwargs): ...
    def style(*args, **kwargs): ...
    def styleHint(*args, **kwargs): ...
    def styleName(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def underline(*args, **kwargs): ...
    def weight(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QPaintEvent(_QEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def rect(*args, **kwargs): ...
    def region(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QValidator(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def fixup(*args, **kwargs): ...
    def locale(*args, **kwargs): ...
    def setLocale(*args, **kwargs): ...
    def validate(*args, **kwargs): ...
    Acceptable : State
    
    Intermediate : State
    
    Invalid : State
    
    State : Type[State]
    
    __new__ : builtin_function_or_method
    
    changed : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSessionManager(_QObject):
    def allowsErrorInteraction(*args, **kwargs): ...
    def allowsInteraction(*args, **kwargs): ...
    def cancel(*args, **kwargs): ...
    def discardCommand(*args, **kwargs): ...
    def isPhase2(*args, **kwargs): ...
    def release(*args, **kwargs): ...
    def requestPhase2(*args, **kwargs): ...
    def restartCommand(*args, **kwargs): ...
    def restartHint(*args, **kwargs): ...
    def sessionId(*args, **kwargs): ...
    def sessionKey(*args, **kwargs): ...
    def setDiscardCommand(*args, **kwargs): ...
    def setManagerProperty(*args, **kwargs): ...
    def setRestartCommand(*args, **kwargs): ...
    def setRestartHint(*args, **kwargs): ...
    RestartAnyway : RestartHint
    
    RestartHint : Type[RestartHint]
    
    RestartIfRunning : RestartHint
    
    RestartImmediately : RestartHint
    
    RestartNever : RestartHint
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QMatrix(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __imul__(*args, **kwargs):
        """
        x.__imul__(y) <==> x*=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __mul__(*args, **kwargs):
        """
        x.__mul__(y) <==> x*y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __reduce__(*args, **kwargs): ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rmul__(*args, **kwargs):
        """
        x.__rmul__(y) <==> y*x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def determinant(*args, **kwargs): ...
    def dx(*args, **kwargs): ...
    def dy(*args, **kwargs): ...
    def inverted(*args, **kwargs): ...
    def isIdentity(*args, **kwargs): ...
    def isInvertible(*args, **kwargs): ...
    def m11(*args, **kwargs): ...
    def m12(*args, **kwargs): ...
    def m21(*args, **kwargs): ...
    def m22(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mapRect(*args, **kwargs): ...
    def mapToPolygon(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def rotate(*args, **kwargs): ...
    def scale(*args, **kwargs): ...
    def setMatrix(*args, **kwargs): ...
    def shear(*args, **kwargs): ...
    def translate(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDrag(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def defaultAction(*args, **kwargs): ...
    def dragCursor(*args, **kwargs): ...
    def exec_(*args, **kwargs): ...
    def hotSpot(*args, **kwargs): ...
    def mimeData(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def setDragCursor(*args, **kwargs): ...
    def setHotSpot(*args, **kwargs): ...
    def setMimeData(*args, **kwargs): ...
    def setPixmap(*args, **kwargs): ...
    def source(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def supportedActions(*args, **kwargs): ...
    def target(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    actionChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    targetChanged : PySide2.QtCore.Signal


class QGuiApplication(_QCoreApplication):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def devicePixelRatio(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def isSavingSession(*args, **kwargs): ...
    def isSessionRestored(*args, **kwargs): ...
    def notify(*args, **kwargs): ...
    def sessionId(*args, **kwargs): ...
    def sessionKey(*args, **kwargs): ...
    @staticmethod
    def allWindows(*args, **kwargs): ...
    @staticmethod
    def applicationDisplayName(*args, **kwargs): ...
    @staticmethod
    def applicationState(*args, **kwargs): ...
    @staticmethod
    def changeOverrideCursor(*args, **kwargs): ...
    @staticmethod
    def clipboard(*args, **kwargs): ...
    @staticmethod
    def desktopSettingsAware(*args, **kwargs): ...
    @staticmethod
    def exec_(*args, **kwargs): ...
    @staticmethod
    def focusObject(*args, **kwargs): ...
    @staticmethod
    def focusWindow(*args, **kwargs): ...
    @staticmethod
    def font(*args, **kwargs): ...
    @staticmethod
    def isFallbackSessionManagementEnabled(*args, **kwargs): ...
    @staticmethod
    def isLeftToRight(*args, **kwargs): ...
    @staticmethod
    def isRightToLeft(*args, **kwargs): ...
    @staticmethod
    def keyboardModifiers(*args, **kwargs): ...
    @staticmethod
    def layoutDirection(*args, **kwargs): ...
    @staticmethod
    def modalWindow(*args, **kwargs): ...
    @staticmethod
    def mouseButtons(*args, **kwargs): ...
    @staticmethod
    def overrideCursor(*args, **kwargs): ...
    @staticmethod
    def palette(*args, **kwargs): ...
    @staticmethod
    def platformName(*args, **kwargs): ...
    @staticmethod
    def primaryScreen(*args, **kwargs): ...
    @staticmethod
    def queryKeyboardModifiers(*args, **kwargs): ...
    @staticmethod
    def quitOnLastWindowClosed(*args, **kwargs): ...
    @staticmethod
    def restoreOverrideCursor(*args, **kwargs): ...
    @staticmethod
    def screens(*args, **kwargs): ...
    @staticmethod
    def setApplicationDisplayName(*args, **kwargs): ...
    @staticmethod
    def setDesktopSettingsAware(*args, **kwargs): ...
    @staticmethod
    def setFallbackSessionManagementEnabled(*args, **kwargs): ...
    @staticmethod
    def setFont(*args, **kwargs): ...
    @staticmethod
    def setLayoutDirection(*args, **kwargs): ...
    @staticmethod
    def setOverrideCursor(*args, **kwargs): ...
    @staticmethod
    def setPalette(*args, **kwargs): ...
    @staticmethod
    def setQuitOnLastWindowClosed(*args, **kwargs): ...
    @staticmethod
    def setWindowIcon(*args, **kwargs): ...
    @staticmethod
    def sync(*args, **kwargs): ...
    @staticmethod
    def topLevelAt(*args, **kwargs): ...
    @staticmethod
    def topLevelWindows(*args, **kwargs): ...
    @staticmethod
    def windowIcon(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    applicationStateChanged : PySide2.QtCore.Signal
    
    commitDataRequest : PySide2.QtCore.Signal
    
    focusObjectChanged : PySide2.QtCore.Signal
    
    focusWindowChanged : PySide2.QtCore.Signal
    
    fontDatabaseChanged : PySide2.QtCore.Signal
    
    lastWindowClosed : PySide2.QtCore.Signal
    
    layoutDirectionChanged : PySide2.QtCore.Signal
    
    paletteChanged : PySide2.QtCore.Signal
    
    primaryScreenChanged : PySide2.QtCore.Signal
    
    saveStateRequest : PySide2.QtCore.Signal
    
    screenAdded : PySide2.QtCore.Signal
    
    screenRemoved : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QPagedPaintDevice(QPaintDevice):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def margins(*args, **kwargs): ...
    def newPage(*args, **kwargs): ...
    def pageSize(*args, **kwargs): ...
    def pageSizeMM(*args, **kwargs): ...
    def setMargins(*args, **kwargs): ...
    def setPageSize(*args, **kwargs): ...
    def setPageSizeMM(*args, **kwargs): ...
    A0 : PageSize
    
    A1 : PageSize
    
    A10 : PageSize
    
    A2 : PageSize
    
    A3 : PageSize
    
    A3Extra : PageSize
    
    A4 : PageSize
    
    A4Extra : PageSize
    
    A4Plus : PageSize
    
    A4Small : PageSize
    
    A5 : PageSize
    
    A5Extra : PageSize
    
    A6 : PageSize
    
    A7 : PageSize
    
    A8 : PageSize
    
    A9 : PageSize
    
    AnsiA : PageSize
    
    AnsiB : PageSize
    
    AnsiC : PageSize
    
    AnsiD : PageSize
    
    AnsiE : PageSize
    
    ArchA : PageSize
    
    ArchB : PageSize
    
    ArchC : PageSize
    
    ArchD : PageSize
    
    ArchE : PageSize
    
    B0 : PageSize
    
    B1 : PageSize
    
    B10 : PageSize
    
    B2 : PageSize
    
    B3 : PageSize
    
    B4 : PageSize
    
    B5 : PageSize
    
    B5Extra : PageSize
    
    B6 : PageSize
    
    B7 : PageSize
    
    B8 : PageSize
    
    B9 : PageSize
    
    C5E : PageSize
    
    Comm10E : PageSize
    
    Custom : PageSize
    
    DLE : PageSize
    
    DoublePostcard : PageSize
    
    Envelope10 : PageSize
    
    Envelope11 : PageSize
    
    Envelope12 : PageSize
    
    Envelope14 : PageSize
    
    Envelope9 : PageSize
    
    EnvelopeB4 : PageSize
    
    EnvelopeB5 : PageSize
    
    EnvelopeB6 : PageSize
    
    EnvelopeC0 : PageSize
    
    EnvelopeC1 : PageSize
    
    EnvelopeC2 : PageSize
    
    EnvelopeC3 : PageSize
    
    EnvelopeC4 : PageSize
    
    EnvelopeC5 : PageSize
    
    EnvelopeC6 : PageSize
    
    EnvelopeC65 : PageSize
    
    EnvelopeC7 : PageSize
    
    EnvelopeChou3 : PageSize
    
    EnvelopeChou4 : PageSize
    
    EnvelopeDL : PageSize
    
    EnvelopeInvite : PageSize
    
    EnvelopeItalian : PageSize
    
    EnvelopeKaku2 : PageSize
    
    EnvelopeKaku3 : PageSize
    
    EnvelopeMonarch : PageSize
    
    EnvelopePersonal : PageSize
    
    EnvelopePrc1 : PageSize
    
    EnvelopePrc10 : PageSize
    
    EnvelopePrc2 : PageSize
    
    EnvelopePrc3 : PageSize
    
    EnvelopePrc4 : PageSize
    
    EnvelopePrc5 : PageSize
    
    EnvelopePrc6 : PageSize
    
    EnvelopePrc7 : PageSize
    
    EnvelopePrc8 : PageSize
    
    EnvelopePrc9 : PageSize
    
    EnvelopeYou4 : PageSize
    
    Executive : PageSize
    
    ExecutiveStandard : PageSize
    
    FanFoldGerman : PageSize
    
    FanFoldGermanLegal : PageSize
    
    FanFoldUS : PageSize
    
    Folio : PageSize
    
    Imperial10x11 : PageSize
    
    Imperial10x13 : PageSize
    
    Imperial10x14 : PageSize
    
    Imperial12x11 : PageSize
    
    Imperial15x11 : PageSize
    
    Imperial7x9 : PageSize
    
    Imperial8x10 : PageSize
    
    Imperial9x11 : PageSize
    
    Imperial9x12 : PageSize
    
    JisB0 : PageSize
    
    JisB1 : PageSize
    
    JisB10 : PageSize
    
    JisB2 : PageSize
    
    JisB3 : PageSize
    
    JisB4 : PageSize
    
    JisB5 : PageSize
    
    JisB6 : PageSize
    
    JisB7 : PageSize
    
    JisB8 : PageSize
    
    JisB9 : PageSize
    
    LastPageSize : PageSize
    
    Ledger : PageSize
    
    Legal : PageSize
    
    LegalExtra : PageSize
    
    Letter : PageSize
    
    LetterExtra : PageSize
    
    LetterPlus : PageSize
    
    LetterSmall : PageSize
    
    Margins : Type[Margins]
    
    NPageSize : PageSize
    
    NPaperSize : PageSize
    
    Note : PageSize
    
    PageSize : Type[PageSize]
    
    Postcard : PageSize
    
    Prc16K : PageSize
    
    Prc32K : PageSize
    
    Prc32KBig : PageSize
    
    Quarto : PageSize
    
    Statement : PageSize
    
    SuperA : PageSize
    
    SuperB : PageSize
    
    Tabloid : PageSize
    
    TabloidExtra : PageSize
    
    __new__ : builtin_function_or_method


class QTextBlockFormat(QTextFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def alignment(*args, **kwargs): ...
    def bottomMargin(*args, **kwargs): ...
    def indent(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def leftMargin(*args, **kwargs): ...
    def lineHeight(*args, **kwargs): ...
    def lineHeightType(*args, **kwargs): ...
    def nonBreakableLines(*args, **kwargs): ...
    def pageBreakPolicy(*args, **kwargs): ...
    def rightMargin(*args, **kwargs): ...
    def setAlignment(*args, **kwargs): ...
    def setBottomMargin(*args, **kwargs): ...
    def setIndent(*args, **kwargs): ...
    def setLeftMargin(*args, **kwargs): ...
    def setLineHeight(*args, **kwargs): ...
    def setNonBreakableLines(*args, **kwargs): ...
    def setPageBreakPolicy(*args, **kwargs): ...
    def setRightMargin(*args, **kwargs): ...
    def setTabPositions(*args, **kwargs): ...
    def setTextIndent(*args, **kwargs): ...
    def setTopMargin(*args, **kwargs): ...
    def tabPositions(*args, **kwargs): ...
    def textIndent(*args, **kwargs): ...
    def topMargin(*args, **kwargs): ...
    FixedHeight : LineHeightTypes
    
    LineDistanceHeight : LineHeightTypes
    
    LineHeightTypes : Type[LineHeightTypes]
    
    MinimumHeight : LineHeightTypes
    
    ProportionalHeight : LineHeightTypes
    
    SingleHeight : LineHeightTypes
    
    __new__ : builtin_function_or_method


class QWheelEvent(QInputEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def angleDelta(*args, **kwargs): ...
    def buttons(*args, **kwargs): ...
    def delta(*args, **kwargs): ...
    def globalPos(*args, **kwargs): ...
    def globalPosF(*args, **kwargs): ...
    def globalX(*args, **kwargs): ...
    def globalY(*args, **kwargs): ...
    def orientation(*args, **kwargs): ...
    def phase(*args, **kwargs): ...
    def pixelDelta(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def posF(*args, **kwargs): ...
    def source(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    angleD : getset_descriptor
    
    ph : getset_descriptor
    
    pixelD : getset_descriptor
    
    qt4D : getset_descriptor
    
    qt4O : getset_descriptor
    
    reserved : getset_descriptor
    
    src : getset_descriptor


class QImage(QPaintDevice):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def allGray(*args, **kwargs): ...
    def alphaChannel(*args, **kwargs): ...
    def bitPlaneCount(*args, **kwargs): ...
    def bits(*args, **kwargs): ...
    def byteCount(*args, **kwargs): ...
    def bytesPerLine(*args, **kwargs): ...
    def cacheKey(*args, **kwargs): ...
    def color(*args, **kwargs): ...
    def colorCount(*args, **kwargs): ...
    def colorTable(*args, **kwargs): ...
    def constBits(*args, **kwargs): ...
    def constScanLine(*args, **kwargs): ...
    def convertToFormat(*args, **kwargs): ...
    def convertToFormat_helper(*args, **kwargs): ...
    def convertToFormat_inplace(*args, **kwargs): ...
    def copy(*args, **kwargs): ...
    def createAlphaMask(*args, **kwargs): ...
    def createHeuristicMask(*args, **kwargs): ...
    def createMaskFromColor(*args, **kwargs): ...
    def depth(*args, **kwargs): ...
    def devType(*args, **kwargs): ...
    def devicePixelRatio(*args, **kwargs): ...
    def dotsPerMeterX(*args, **kwargs): ...
    def dotsPerMeterY(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def hasAlphaChannel(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def invertPixels(*args, **kwargs): ...
    def isGrayscale(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def loadFromData(*args, **kwargs): ...
    def metric(*args, **kwargs): ...
    def mirrored(*args, **kwargs): ...
    def mirrored_helper(*args, **kwargs): ...
    def mirrored_inplace(*args, **kwargs): ...
    def offset(*args, **kwargs): ...
    def paintEngine(*args, **kwargs): ...
    def pixel(*args, **kwargs): ...
    def pixelColor(*args, **kwargs): ...
    def pixelIndex(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def rgbSwapped(*args, **kwargs): ...
    def rgbSwapped_helper(*args, **kwargs): ...
    def rgbSwapped_inplace(*args, **kwargs): ...
    def save(*args, **kwargs): ...
    def scaled(*args, **kwargs): ...
    def scaledToHeight(*args, **kwargs): ...
    def scaledToWidth(*args, **kwargs): ...
    def scanLine(*args, **kwargs): ...
    def setAlphaChannel(*args, **kwargs): ...
    def setColor(*args, **kwargs): ...
    def setColorCount(*args, **kwargs): ...
    def setColorTable(*args, **kwargs): ...
    def setDevicePixelRatio(*args, **kwargs): ...
    def setDotsPerMeterX(*args, **kwargs): ...
    def setDotsPerMeterY(*args, **kwargs): ...
    def setOffset(*args, **kwargs): ...
    def setPixel(*args, **kwargs): ...
    def setPixelColor(*args, **kwargs): ...
    def setText(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def smoothScaled(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def textKeys(*args, **kwargs): ...
    def transformed(*args, **kwargs): ...
    def valid(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    @staticmethod
    def fromData(*args, **kwargs): ...
    @staticmethod
    def trueMatrix(*args, **kwargs): ...
    Format : Type[Format]
    
    Format_A2BGR30_Premultiplied : Format
    
    Format_A2RGB30_Premultiplied : Format
    
    Format_ARGB32 : Format
    
    Format_ARGB32_Premultiplied : Format
    
    Format_ARGB4444_Premultiplied : Format
    
    Format_ARGB6666_Premultiplied : Format
    
    Format_ARGB8555_Premultiplied : Format
    
    Format_ARGB8565_Premultiplied : Format
    
    Format_Alpha8 : Format
    
    Format_BGR30 : Format
    
    Format_Grayscale8 : Format
    
    Format_Indexed8 : Format
    
    Format_Invalid : Format
    
    Format_Mono : Format
    
    Format_MonoLSB : Format
    
    Format_RGB16 : Format
    
    Format_RGB30 : Format
    
    Format_RGB32 : Format
    
    Format_RGB444 : Format
    
    Format_RGB555 : Format
    
    Format_RGB666 : Format
    
    Format_RGB888 : Format
    
    Format_RGBA8888 : Format
    
    Format_RGBA8888_Premultiplied : Format
    
    Format_RGBX8888 : Format
    
    InvertMode : Type[InvertMode]
    
    InvertRgb : InvertMode
    
    InvertRgba : InvertMode
    
    NImageFormats : Format
    
    __new__ : builtin_function_or_method


class QTextCharFormat(QTextFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def anchorHref(*args, **kwargs): ...
    def anchorName(*args, **kwargs): ...
    def anchorNames(*args, **kwargs): ...
    def font(*args, **kwargs): ...
    def fontCapitalization(*args, **kwargs): ...
    def fontFamily(*args, **kwargs): ...
    def fontFixedPitch(*args, **kwargs): ...
    def fontHintingPreference(*args, **kwargs): ...
    def fontItalic(*args, **kwargs): ...
    def fontKerning(*args, **kwargs): ...
    def fontLetterSpacing(*args, **kwargs): ...
    def fontLetterSpacingType(*args, **kwargs): ...
    def fontOverline(*args, **kwargs): ...
    def fontPointSize(*args, **kwargs): ...
    def fontStretch(*args, **kwargs): ...
    def fontStrikeOut(*args, **kwargs): ...
    def fontStyleHint(*args, **kwargs): ...
    def fontStyleStrategy(*args, **kwargs): ...
    def fontUnderline(*args, **kwargs): ...
    def fontWeight(*args, **kwargs): ...
    def fontWordSpacing(*args, **kwargs): ...
    def isAnchor(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def setAnchor(*args, **kwargs): ...
    def setAnchorHref(*args, **kwargs): ...
    def setAnchorName(*args, **kwargs): ...
    def setAnchorNames(*args, **kwargs): ...
    def setFont(*args, **kwargs): ...
    def setFontCapitalization(*args, **kwargs): ...
    def setFontFamily(*args, **kwargs): ...
    def setFontFixedPitch(*args, **kwargs): ...
    def setFontHintingPreference(*args, **kwargs): ...
    def setFontItalic(*args, **kwargs): ...
    def setFontKerning(*args, **kwargs): ...
    def setFontLetterSpacing(*args, **kwargs): ...
    def setFontLetterSpacingType(*args, **kwargs): ...
    def setFontOverline(*args, **kwargs): ...
    def setFontPointSize(*args, **kwargs): ...
    def setFontStretch(*args, **kwargs): ...
    def setFontStrikeOut(*args, **kwargs): ...
    def setFontStyleHint(*args, **kwargs): ...
    def setFontStyleStrategy(*args, **kwargs): ...
    def setFontUnderline(*args, **kwargs): ...
    def setFontWeight(*args, **kwargs): ...
    def setFontWordSpacing(*args, **kwargs): ...
    def setTableCellColumnSpan(*args, **kwargs): ...
    def setTableCellRowSpan(*args, **kwargs): ...
    def setTextOutline(*args, **kwargs): ...
    def setToolTip(*args, **kwargs): ...
    def setUnderlineColor(*args, **kwargs): ...
    def setUnderlineStyle(*args, **kwargs): ...
    def setVerticalAlignment(*args, **kwargs): ...
    def tableCellColumnSpan(*args, **kwargs): ...
    def tableCellRowSpan(*args, **kwargs): ...
    def textOutline(*args, **kwargs): ...
    def toolTip(*args, **kwargs): ...
    def underlineColor(*args, **kwargs): ...
    def underlineStyle(*args, **kwargs): ...
    def verticalAlignment(*args, **kwargs): ...
    AlignBaseline : VerticalAlignment
    
    AlignBottom : VerticalAlignment
    
    AlignMiddle : VerticalAlignment
    
    AlignNormal : VerticalAlignment
    
    AlignSubScript : VerticalAlignment
    
    AlignSuperScript : VerticalAlignment
    
    AlignTop : VerticalAlignment
    
    DashDotDotLine : UnderlineStyle
    
    DashDotLine : UnderlineStyle
    
    DashUnderline : UnderlineStyle
    
    DotLine : UnderlineStyle
    
    FontPropertiesAll : FontPropertiesInheritanceBehavior
    
    FontPropertiesInheritanceBehavior : Type[FontPropertiesInheritanceBehavior]
    
    FontPropertiesSpecifiedOnly : FontPropertiesInheritanceBehavior
    
    NoUnderline : UnderlineStyle
    
    SingleUnderline : UnderlineStyle
    
    SpellCheckUnderline : UnderlineStyle
    
    UnderlineStyle : Type[UnderlineStyle]
    
    VerticalAlignment : Type[VerticalAlignment]
    
    WaveUnderline : UnderlineStyle
    
    __new__ : builtin_function_or_method


class QConicalGradient(QGradient):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def angle(*args, **kwargs): ...
    def center(*args, **kwargs): ...
    def setAngle(*args, **kwargs): ...
    def setCenter(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextFrameFormat(QTextFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def border(*args, **kwargs): ...
    def borderBrush(*args, **kwargs): ...
    def borderStyle(*args, **kwargs): ...
    def bottomMargin(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def leftMargin(*args, **kwargs): ...
    def margin(*args, **kwargs): ...
    def padding(*args, **kwargs): ...
    def pageBreakPolicy(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def rightMargin(*args, **kwargs): ...
    def setBorder(*args, **kwargs): ...
    def setBorderBrush(*args, **kwargs): ...
    def setBorderStyle(*args, **kwargs): ...
    def setBottomMargin(*args, **kwargs): ...
    def setHeight(*args, **kwargs): ...
    def setLeftMargin(*args, **kwargs): ...
    def setMargin(*args, **kwargs): ...
    def setPadding(*args, **kwargs): ...
    def setPageBreakPolicy(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def setRightMargin(*args, **kwargs): ...
    def setTopMargin(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def topMargin(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    BorderStyle : Type[BorderStyle]
    
    BorderStyle_Dashed : BorderStyle
    
    BorderStyle_DotDash : BorderStyle
    
    BorderStyle_DotDotDash : BorderStyle
    
    BorderStyle_Dotted : BorderStyle
    
    BorderStyle_Double : BorderStyle
    
    BorderStyle_Groove : BorderStyle
    
    BorderStyle_Inset : BorderStyle
    
    BorderStyle_None : BorderStyle
    
    BorderStyle_Outset : BorderStyle
    
    BorderStyle_Ridge : BorderStyle
    
    BorderStyle_Solid : BorderStyle
    
    FloatLeft : Position
    
    FloatRight : Position
    
    InFlow : Position
    
    Position : Type[Position]
    
    __new__ : builtin_function_or_method


class QPyTextObject(_QObject, QTextObjectInterface):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def drawObject(*args, **kwargs): ...
    def intrinsicSize(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QTextBlockGroup(QTextObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def blockFormatChanged(*args, **kwargs): ...
    def blockInserted(*args, **kwargs): ...
    def blockList(*args, **kwargs): ...
    def blockRemoved(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QIntValidator(QValidator):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bottom(*args, **kwargs): ...
    def fixup(*args, **kwargs): ...
    def setBottom(*args, **kwargs): ...
    def setRange(*args, **kwargs): ...
    def setTop(*args, **kwargs): ...
    def top(*args, **kwargs): ...
    def validate(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    bottomChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    topChanged : PySide2.QtCore.Signal


class QMouseEvent(QInputEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def button(*args, **kwargs): ...
    def buttons(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def globalPos(*args, **kwargs): ...
    def globalX(*args, **kwargs): ...
    def globalY(*args, **kwargs): ...
    def localPos(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def screenPos(*args, **kwargs): ...
    def source(*args, **kwargs): ...
    def windowPos(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    caps : getset_descriptor
    
    l : getset_descriptor
    
    s : getset_descriptor
    
    velocity : getset_descriptor
    
    w : getset_descriptor


class QLinearGradient(QGradient):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def finalStop(*args, **kwargs): ...
    def setFinalStop(*args, **kwargs): ...
    def setStart(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QRadialGradient(QGradient):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def center(*args, **kwargs): ...
    def centerRadius(*args, **kwargs): ...
    def focalPoint(*args, **kwargs): ...
    def focalRadius(*args, **kwargs): ...
    def radius(*args, **kwargs): ...
    def setCenter(*args, **kwargs): ...
    def setCenterRadius(*args, **kwargs): ...
    def setFocalPoint(*args, **kwargs): ...
    def setFocalRadius(*args, **kwargs): ...
    def setRadius(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QContextMenuEvent(QInputEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def globalPos(*args, **kwargs): ...
    def globalX(*args, **kwargs): ...
    def globalY(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def reason(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    Keyboard : Reason
    
    Mouse : Reason
    
    Other : Reason
    
    Reason : Type[Reason]
    
    __new__ : builtin_function_or_method


class QDoubleValidator(QValidator):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bottom(*args, **kwargs): ...
    def decimals(*args, **kwargs): ...
    def notation(*args, **kwargs): ...
    def setBottom(*args, **kwargs): ...
    def setDecimals(*args, **kwargs): ...
    def setNotation(*args, **kwargs): ...
    def setRange(*args, **kwargs): ...
    def setTop(*args, **kwargs): ...
    def top(*args, **kwargs): ...
    def validate(*args, **kwargs): ...
    Notation : Type[Notation]
    
    ScientificNotation : Notation
    
    StandardNotation : Notation
    
    __new__ : builtin_function_or_method
    
    bottomChanged : PySide2.QtCore.Signal
    
    decimalsChanged : PySide2.QtCore.Signal
    
    notationChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    topChanged : PySide2.QtCore.Signal


class QTabletEvent(QInputEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def button(*args, **kwargs): ...
    def buttons(*args, **kwargs): ...
    def device(*args, **kwargs): ...
    def globalPos(*args, **kwargs): ...
    def globalPosF(*args, **kwargs): ...
    def globalX(*args, **kwargs): ...
    def globalY(*args, **kwargs): ...
    def hiResGlobalX(*args, **kwargs): ...
    def hiResGlobalY(*args, **kwargs): ...
    def pointerType(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def posF(*args, **kwargs): ...
    def pressure(*args, **kwargs): ...
    def rotation(*args, **kwargs): ...
    def tangentialPressure(*args, **kwargs): ...
    def uniqueId(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def xTilt(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    def yTilt(*args, **kwargs): ...
    def z(*args, **kwargs): ...
    Airbrush : TabletDevice
    
    Cursor : PointerType
    
    Eraser : PointerType
    
    FourDMouse : TabletDevice
    
    NoDevice : TabletDevice
    
    Pen : PointerType
    
    PointerType : Type[PointerType]
    
    Puck : TabletDevice
    
    RotationStylus : TabletDevice
    
    Stylus : TabletDevice
    
    TabletDevice : Type[TabletDevice]
    
    UnknownPointer : PointerType
    
    XFreeEraser : TabletDevice
    
    __new__ : builtin_function_or_method


class QKeyEvent(QInputEvent):
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def count(*args, **kwargs): ...
    def isAutoRepeat(*args, **kwargs): ...
    def key(*args, **kwargs): ...
    def matches(*args, **kwargs): ...
    def modifiers(*args, **kwargs): ...
    def nativeModifiers(*args, **kwargs): ...
    def nativeScanCode(*args, **kwargs): ...
    def nativeVirtualKey(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    autor : getset_descriptor
    
    nModifiers : getset_descriptor
    
    nScanCode : getset_descriptor
    
    nVirtualKey : getset_descriptor


class QDragMoveEvent(QDropEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def accept(*args, **kwargs): ...
    def answerRect(*args, **kwargs): ...
    def ignore(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QRegExpValidator(QValidator):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def regExp(*args, **kwargs): ...
    def setRegExp(*args, **kwargs): ...
    def validate(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    regExpChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QPicture(QPaintDevice):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def boundingRect(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def devType(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def metric(*args, **kwargs): ...
    def paintEngine(*args, **kwargs): ...
    def play(*args, **kwargs): ...
    def save(*args, **kwargs): ...
    def setBoundingRect(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    @staticmethod
    def inputFormatList(*args, **kwargs): ...
    @staticmethod
    def inputFormats(*args, **kwargs): ...
    @staticmethod
    def outputFormatList(*args, **kwargs): ...
    @staticmethod
    def outputFormats(*args, **kwargs): ...
    @staticmethod
    def pictureFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTouchEvent(QInputEvent):
    def device(*args, **kwargs): ...
    def setDevice(*args, **kwargs): ...
    def setTarget(*args, **kwargs): ...
    def setTouchPoints(*args, **kwargs): ...
    def setWindow(*args, **kwargs): ...
    def target(*args, **kwargs): ...
    def touchPoints(*args, **kwargs): ...
    def window(*args, **kwargs): ...
    TouchPoint : Type[TouchPoint]


class QHoverEvent(QInputEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def oldPos(*args, **kwargs): ...
    def oldPosF(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def posF(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextFrame(QTextObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __iter__(*args, **kwargs):
        """
        x.__iter__() <==> iter(x)
        """
        ...
    def begin(*args, **kwargs): ...
    def childFrames(*args, **kwargs): ...
    def end(*args, **kwargs): ...
    def firstCursorPosition(*args, **kwargs): ...
    def firstPosition(*args, **kwargs): ...
    def frameFormat(*args, **kwargs): ...
    def lastCursorPosition(*args, **kwargs): ...
    def lastPosition(*args, **kwargs): ...
    def parentFrame(*args, **kwargs): ...
    def setFrameFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    iterator : Type[iterator]
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QPixmap(QPaintDevice):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def cacheKey(*args, **kwargs): ...
    def convertFromImage(*args, **kwargs): ...
    def copy(*args, **kwargs): ...
    def createHeuristicMask(*args, **kwargs): ...
    def createMaskFromColor(*args, **kwargs): ...
    def depth(*args, **kwargs): ...
    def devType(*args, **kwargs): ...
    def devicePixelRatio(*args, **kwargs): ...
    def fill(*args, **kwargs): ...
    def hasAlpha(*args, **kwargs): ...
    def hasAlphaChannel(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isQBitmap(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def loadFromData(*args, **kwargs): ...
    def mask(*args, **kwargs): ...
    def metric(*args, **kwargs): ...
    def paintEngine(*args, **kwargs): ...
    def rect(*args, **kwargs): ...
    def save(*args, **kwargs): ...
    def scaled(*args, **kwargs): ...
    def scaledToHeight(*args, **kwargs): ...
    def scaledToWidth(*args, **kwargs): ...
    def scroll(*args, **kwargs): ...
    def setDevicePixelRatio(*args, **kwargs): ...
    def setMask(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def toImage(*args, **kwargs): ...
    def transformed(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    @staticmethod
    def defaultDepth(*args, **kwargs): ...
    @staticmethod
    def fromImage(*args, **kwargs): ...
    @staticmethod
    def fromImageInPlace(*args, **kwargs): ...
    @staticmethod
    def fromImageReader(*args, **kwargs): ...
    @staticmethod
    def grabWidget(*args, **kwargs): ...
    @staticmethod
    def grabWindow(*args, **kwargs): ...
    @staticmethod
    def trueMatrix(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QWindow(_QObject, QSurface):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def accessibleRoot(*args, **kwargs): ...
    def alert(*args, **kwargs): ...
    def baseSize(*args, **kwargs): ...
    def close(*args, **kwargs): ...
    def contentOrientation(*args, **kwargs): ...
    def create(*args, **kwargs): ...
    def cursor(*args, **kwargs): ...
    def destroy(*args, **kwargs): ...
    def devicePixelRatio(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def exposeEvent(*args, **kwargs): ...
    def filePath(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def focusInEvent(*args, **kwargs): ...
    def focusObject(*args, **kwargs): ...
    def focusOutEvent(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def frameGeometry(*args, **kwargs): ...
    def frameMargins(*args, **kwargs): ...
    def framePosition(*args, **kwargs): ...
    def geometry(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def hide(*args, **kwargs): ...
    def hideEvent(*args, **kwargs): ...
    def icon(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def isAncestorOf(*args, **kwargs): ...
    def isExposed(*args, **kwargs): ...
    def isModal(*args, **kwargs): ...
    def isTopLevel(*args, **kwargs): ...
    def isVisible(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def lower(*args, **kwargs): ...
    def mapFromGlobal(*args, **kwargs): ...
    def mapToGlobal(*args, **kwargs): ...
    def mask(*args, **kwargs): ...
    def maximumHeight(*args, **kwargs): ...
    def maximumSize(*args, **kwargs): ...
    def maximumWidth(*args, **kwargs): ...
    def minimumHeight(*args, **kwargs): ...
    def minimumSize(*args, **kwargs): ...
    def minimumWidth(*args, **kwargs): ...
    def modality(*args, **kwargs): ...
    def mouseDoubleClickEvent(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def moveEvent(*args, **kwargs): ...
    def opacity(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def position(*args, **kwargs): ...
    def raise_(*args, **kwargs): ...
    def reportContentOrientationChange(*args, **kwargs): ...
    def requestActivate(*args, **kwargs): ...
    def requestUpdate(*args, **kwargs): ...
    def requestedFormat(*args, **kwargs): ...
    def resize(*args, **kwargs): ...
    def resizeEvent(*args, **kwargs): ...
    def screen(*args, **kwargs): ...
    def setBaseSize(*args, **kwargs): ...
    def setCursor(*args, **kwargs): ...
    def setFilePath(*args, **kwargs): ...
    def setFlags(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setFramePosition(*args, **kwargs): ...
    def setGeometry(*args, **kwargs): ...
    def setHeight(*args, **kwargs): ...
    def setIcon(*args, **kwargs): ...
    def setKeyboardGrabEnabled(*args, **kwargs): ...
    def setMask(*args, **kwargs): ...
    def setMaximumHeight(*args, **kwargs): ...
    def setMaximumSize(*args, **kwargs): ...
    def setMaximumWidth(*args, **kwargs): ...
    def setMinimumHeight(*args, **kwargs): ...
    def setMinimumSize(*args, **kwargs): ...
    def setMinimumWidth(*args, **kwargs): ...
    def setModality(*args, **kwargs): ...
    def setMouseGrabEnabled(*args, **kwargs): ...
    def setOpacity(*args, **kwargs): ...
    def setParent(*args, **kwargs): ...
    def setPosition(*args, **kwargs): ...
    def setScreen(*args, **kwargs): ...
    def setSizeIncrement(*args, **kwargs): ...
    def setSurfaceType(*args, **kwargs): ...
    def setTitle(*args, **kwargs): ...
    def setTransientParent(*args, **kwargs): ...
    def setVisibility(*args, **kwargs): ...
    def setVisible(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def setWindowState(*args, **kwargs): ...
    def setX(*args, **kwargs): ...
    def setY(*args, **kwargs): ...
    def show(*args, **kwargs): ...
    def showEvent(*args, **kwargs): ...
    def showFullScreen(*args, **kwargs): ...
    def showMaximized(*args, **kwargs): ...
    def showMinimized(*args, **kwargs): ...
    def showNormal(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def sizeIncrement(*args, **kwargs): ...
    def surfaceHandle(*args, **kwargs): ...
    def surfaceType(*args, **kwargs): ...
    def tabletEvent(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    def touchEvent(*args, **kwargs): ...
    def transientParent(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def unsetCursor(*args, **kwargs): ...
    def visibility(*args, **kwargs): ...
    def wheelEvent(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    def winId(*args, **kwargs): ...
    def windowState(*args, **kwargs): ...
    def x(*args, **kwargs): ...
    def y(*args, **kwargs): ...
    @staticmethod
    def fromWinId(*args, **kwargs): ...
    AncestorMode : Type[AncestorMode]
    
    AutomaticVisibility : Visibility
    
    ExcludeTransients : AncestorMode
    
    FullScreen : Visibility
    
    Hidden : Visibility
    
    IncludeTransients : AncestorMode
    
    Maximized : Visibility
    
    Minimized : Visibility
    
    Visibility : Type[Visibility]
    
    Windowed : Visibility
    
    __new__ : builtin_function_or_method
    
    activeChanged : PySide2.QtCore.Signal
    
    contentOrientationChanged : PySide2.QtCore.Signal
    
    focusObjectChanged : PySide2.QtCore.Signal
    
    heightChanged : PySide2.QtCore.Signal
    
    maximumHeightChanged : PySide2.QtCore.Signal
    
    maximumWidthChanged : PySide2.QtCore.Signal
    
    minimumHeightChanged : PySide2.QtCore.Signal
    
    minimumWidthChanged : PySide2.QtCore.Signal
    
    modalityChanged : PySide2.QtCore.Signal
    
    opacityChanged : PySide2.QtCore.Signal
    
    screenChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    visibilityChanged : PySide2.QtCore.Signal
    
    visibleChanged : PySide2.QtCore.Signal
    
    widthChanged : PySide2.QtCore.Signal
    
    windowStateChanged : PySide2.QtCore.Signal
    
    windowTitleChanged : PySide2.QtCore.Signal
    
    xChanged : PySide2.QtCore.Signal
    
    yChanged : PySide2.QtCore.Signal


class QTextListFormat(QTextFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def indent(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def numberPrefix(*args, **kwargs): ...
    def numberSuffix(*args, **kwargs): ...
    def setIndent(*args, **kwargs): ...
    def setNumberPrefix(*args, **kwargs): ...
    def setNumberSuffix(*args, **kwargs): ...
    def setStyle(*args, **kwargs): ...
    def style(*args, **kwargs): ...
    ListCircle : Style
    
    ListDecimal : Style
    
    ListDisc : Style
    
    ListLowerAlpha : Style
    
    ListLowerRoman : Style
    
    ListSquare : Style
    
    ListStyleUndefined : Style
    
    ListUpperAlpha : Style
    
    ListUpperRoman : Style
    
    Style : Type[Style]
    
    __new__ : builtin_function_or_method


class QTextTableFormat(QTextFrameFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def alignment(*args, **kwargs): ...
    def cellPadding(*args, **kwargs): ...
    def cellSpacing(*args, **kwargs): ...
    def clearColumnWidthConstraints(*args, **kwargs): ...
    def columnWidthConstraints(*args, **kwargs): ...
    def columns(*args, **kwargs): ...
    def headerRowCount(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def setAlignment(*args, **kwargs): ...
    def setCellPadding(*args, **kwargs): ...
    def setCellSpacing(*args, **kwargs): ...
    def setColumnWidthConstraints(*args, **kwargs): ...
    def setColumns(*args, **kwargs): ...
    def setHeaderRowCount(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDragEnterEvent(QDragMoveEvent):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QTextList(QTextBlockGroup):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def add(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def item(*args, **kwargs): ...
    def itemNumber(*args, **kwargs): ...
    def itemText(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def removeItem(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QTextTableCellFormat(QTextCharFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bottomPadding(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def leftPadding(*args, **kwargs): ...
    def rightPadding(*args, **kwargs): ...
    def setBottomPadding(*args, **kwargs): ...
    def setLeftPadding(*args, **kwargs): ...
    def setPadding(*args, **kwargs): ...
    def setRightPadding(*args, **kwargs): ...
    def setTopPadding(*args, **kwargs): ...
    def topPadding(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextImageFormat(QTextCharFormat):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def height(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def setHeight(*args, **kwargs): ...
    def setName(*args, **kwargs): ...
    def setWidth(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QBitmap(QPixmap):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def clear(*args, **kwargs): ...
    def swap(*args, **kwargs): ...
    def transformed(*args, **kwargs): ...
    @staticmethod
    def fromData(*args, **kwargs): ...
    @staticmethod
    def fromImage(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QTextTable(QTextFrame):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def appendColumns(*args, **kwargs): ...
    def appendRows(*args, **kwargs): ...
    def cellAt(*args, **kwargs): ...
    def columns(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def insertColumns(*args, **kwargs): ...
    def insertRows(*args, **kwargs): ...
    def mergeCells(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def removeRows(*args, **kwargs): ...
    def resize(*args, **kwargs): ...
    def rowEnd(*args, **kwargs): ...
    def rowStart(*args, **kwargs): ...
    def rows(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def splitCell(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject




def qRed(*args, **kwargs): ...
def qIsGray(*args, **kwargs): ...
def qAlpha(*args, **kwargs): ...
def qGreen(*args, **kwargs): ...
def qRgb(*args, **kwargs): ...
def qBlue(*args, **kwargs): ...
def qRgba(*args, **kwargs): ...
def qGray(*args, **kwargs): ...

