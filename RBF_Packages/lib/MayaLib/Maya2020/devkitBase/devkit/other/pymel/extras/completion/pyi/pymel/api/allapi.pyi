from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import pymel.util as util


from maya.OpenMayaRender import *
from maya.OpenMayaMPx import *
from maya.OpenMaya import *
from maya.OpenMayaUI import *


from maya.OpenMayaAnim import MFnBlendShapeDeformer
from maya.OpenMayaAnim import MFnWireDeformer
from maya.OpenMayaAnim import MIkSystem
from maya.OpenMayaFX import MFnGravityField
from maya.OpenMayaAnim import MAnimCurveClipboardItemArray
from maya.OpenMayaFX import MnRigid
from maya.OpenMayaAnim import MFnKeyframeDeltaAddRemove
from maya.OpenMayaFX import MFnFluid
from maya.OpenMayaAnim import MFnHikEffector
from maya.OpenMayaFX import MDynamicsUtil
from maya.OpenMayaAnim import MFnKeyframeDelta
from maya.OpenMayaAnim import MFnIkEffector
from maya.OpenMayaFX import MFnInstancer
from maya.OpenMayaAnim import MFnKeyframeDeltaScale
from maya.OpenMayaAnim import MFnKeyframeDeltaInfType
from maya.OpenMayaFX import MRenderLineArray
from maya.OpenMayaAnim import MFnGeometryFilter
from maya.OpenMayaFX import MDynSweptLine
from maya.OpenMayaAnim import MAnimCurveClipboardItem
from maya.OpenMayaAnim import MFnCharacter
from maya.OpenMayaFX import MnParticle
from maya.OpenMayaFX import MFnAirField
from maya.OpenMayaFX import MFnVortexField
from maya.OpenMayaFX import MDynSweptTriangle
from maya.OpenMayaFX import MnSolver
from maya.OpenMayaAnim import MFnWeightGeometryFilter
from maya.OpenMayaAnim import MFnIkHandle
from maya.OpenMayaFX import MFnParticleSystem
from maya.OpenMayaAnim import MFnLatticeDeformer
from maya.OpenMayaFX import MnObject
from maya.OpenMayaFX import MFnField
from maya.OpenMayaFX import MFnTurbulenceField
from maya.OpenMayaAnim import MAnimCurveClipboard
from maya.OpenMayaAnim import MAnimMessage
from maya.OpenMayaAnim import MFnLattice
from maya.OpenMayaFX import MFnDynSweptGeometryData
from maya.OpenMayaFX import MFnNewtonField
from maya.OpenMayaFX import MHairSystem
from maya.OpenMayaAnim import MFnKeyframeDeltaMove
from maya.OpenMayaAnim import MFnMotionPath
from maya.OpenMayaAnim import MFnKeyframeDeltaBlockAddRemove
from maya.OpenMayaAnim import MFnAnimCurve
from maya.OpenMayaAnim import MAnimUtil
from maya.OpenMayaAnim import MIkHandleGroup
from maya.OpenMayaAnim import MFnClip
from maya.OpenMayaFX import MFnNObjectData
from maya.OpenMayaFX import MFnVolumeAxisField
from maya.OpenMayaAnim import MFnIkJoint
from maya.OpenMayaFX import MnCloth
from maya.OpenMayaAnim import MAnimControl
from maya.OpenMayaFX import MFnDragField
from maya.OpenMayaAnim import MFnKeyframeDeltaWeighted
from maya.OpenMayaAnim import MFnKeyframeDeltaTangent
from maya.OpenMayaFX import MFnRadialField
from maya.OpenMayaFX import MFnUniformField
from maya.OpenMayaAnim import MFnSkinCluster
from maya.OpenMayaFX import MFnPfxGeometry
from maya.OpenMayaAnim import MAnimCurveChange
from maya.OpenMayaAnim import MItKeyframe
from maya.OpenMayaFX import MRenderLine
from maya.OpenMayaAnim import MFnIkSolver
from maya.OpenMayaAnim import MFnKeyframeDeltaBreakdown
from maya.OpenMayaFX import MFnNIdData


if False:
    from typing import Dict, List, Tuple, Union, Optional

class SafeApiPtr(object):
    """
    A wrapper for api pointers which also contains a reference
    to the MScriptUtil which contains the storage. This helps
    ensure that the 'storage' for the pointer doesn't get
    wiped out before the pointer does. Pass the SafeApiPtr
    around in place of the 'true' pointer - then, when
    the 'true' pointer is needed (ie, immediately
    before feeding it into an api function), 'call'
    the SafeApiPtr object to return the 'true'
    pointer.
    
    Examples
    --------
    >>> from pymel.api.allapi import *
    >>> sel = MSelectionList()
    >>> sel.add('perspShape')
    >>> dag = MDagPath()
    >>> sel.getDagPath(0, dag)
    >>> cam = MFnCamera(dag)
    
    >>> aperMin = SafeApiPtr('double')
    >>> aperMax = SafeApiPtr('double')
    >>> cam.getFilmApertureLimits(aperMin(), aperMax())
    >>> print '%.5f, %.5f' % (aperMin.get(), aperMax.get())
    0.01378, 20.28991
    """
    
    
    
    def __call__(self): ...
    def __getitem__(self, index): ...
    def __init__(self, valueType, scriptUtil='None', size='1', asTypeNPtr='False'):
        """
        Parameters
        ----------
        valueType : str
            The name of the maya pointer type you would like
            returned - ie, 'int', 'short', 'float'.
        scriptUtil : `MScriptUtil`
            If you wish to use an existing MScriptUtil as
            the 'storage' for the value returned, specify it
            here - otherwise, a new MScriptUtil object is
            created.
        size : `int`
            If we want a pointer to an array, size indicates
            the number of items the array holds.  If we are
            creating an MScriptUtil, it will be initialized
            to hold this many items - if we are fed an
            MScriptUtil, then it is your responsibility to
            make sure it can hold the necessary number of items,
            or else maya will crash!
        asTypeNPtr : `bool`
            If we want a call to this SafeApiPtr to return a pointer
            for an argument such as:
               int2 &myArg;
            then we need to set asTypeNPtr to True:
               SafeApiPtr('int', size=2, asTypeNPtr=True)
            Otherwise, it is assumed that calling the object returns array
            ptrs:
               int myArg[2];
        """
        ...
    def __len__(self) -> int: ...
    def __setitem__(self, index, value): ...
    def get(self):
        """
        Dereference the pointer - ie, get the actual value we're pointing to.
        """
        ...
    def set(self, value):
        """
        Store the actual value we're pointing to.
        """
        ...
    __dict__ : dictproxy
    
    __weakref__ : getset_descriptor




def MHairSystem_registeringCallableScript(*args, **kwargs): ...
def MIkSystem_setGlobalSolve(*args, **kwargs): ...
def MAnimControl_isPlaying(*args, **kwargs): ...
def MFnDynSweptGeometryData_className(*args, **kwargs): ...
def MFnField_className(*args, **kwargs): ...
def MFnTurbulenceField_swigregister(*args, **kwargs): ...
def isValidMDagNode(obj): ...
def MFnDragField_className(*args, **kwargs): ...
def MAnimControl_globalInTangentType(*args, **kwargs): ...
def MFnSkinCluster_className(*args, **kwargs): ...
def MAnimControl_setGlobalInTangentType(*args, **kwargs): ...
def MnParticle_swigregister(*args, **kwargs): ...
def MAnimCurveChange_swigregister(*args, **kwargs): ...
def MHairSystem_unregisterCollisionSolverPreFrame(*args, **kwargs): ...
def MIkSystem_getSolvers(*args, **kwargs): ...
def MAnimControl_autoKeyMode(*args, **kwargs): ...
def MDynSweptLine_className(*args, **kwargs): ...
def MAnimUtil_findAnimationLayers(*args, **kwargs): ...
def MHairSystem_setRegisteringCallableScript(*args, **kwargs): ...
def MFnHikEffector_swigregister(*args, **kwargs): ...
def toMDagPath(nodeName):
    """
    Get an API MDagPAth to the node, given the name of an existing dag node
    """
    ...
def toMPlug(plugName):
    """
    Get the API MObject given the name of an existing plug (node.attribute)
    """
    ...
def MFnKeyframeDeltaTangent_className(*args, **kwargs): ...
def MIkHandleGroup_swigregister(*args, **kwargs): ...
def MFnFluid_swigregister(*args, **kwargs): ...
def MFnVortexField_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaBlockAddRemove_swigregister(*args, **kwargs): ...
def MAnimControl_playBackward(*args, **kwargs): ...
def MAnimUtil_findAnimation(*args, **kwargs): ...
def MItGraph(nodeOrPlug, *args, **kwargs):
    """
    Iterate over MObjects of Dependency Graph (DG) Nodes or Plugs starting at a specified root Node or Plug,
    If a list of types is provided, then only nodes of these types will be returned,
    if no type is provided all connected nodes will be iterated on.
    Types are specified as Maya API types.
    The following keywords will affect order and behavior of traversal:
    upstream: if True connections will be followed from destination to source,
              if False from source to destination
              default is False (downstream)
    breadth: if True nodes will be returned as a breadth first traversal of the connection graph,
             if False as a preorder (depth first)
             default is False (depth first)
    plug: if True traversal will be at plug level (no plug will be traversed more than once),
          if False at node level (no node will be traversed more than once),
          default is False (node level)
    prune : if True will stop the iteration on nodes than do not fit the types list,
            if False these nodes will be traversed but not returned
            default is False (do not prune)
    """
    ...
def MAnimControl_playbackBy(*args, **kwargs): ...
def MAnimCurveClipboardItem_className(*args, **kwargs): ...
def MFnAirField_className(*args, **kwargs): ...
def MFnKeyframeDeltaTangent_swigregister(*args, **kwargs): ...
def MFnVolumeAxisField_className(*args, **kwargs): ...
def MFnSkinCluster_swigregister(*args, **kwargs): ...
def MAnimControl_playbackMode(*args, **kwargs): ...
def MAnimControl_stop(*args, **kwargs): ...
def MAnimCurveClipboard_theAPIClipboard(*args, **kwargs): ...
def MAnimControl_swigregister(*args, **kwargs): ...
def MFnVortexField_className(*args, **kwargs): ...
def MFnKeyframeDeltaScale_swigregister(*args, **kwargs): ...
def MFnLattice_swigregister(*args, **kwargs): ...
def MAnimControl_setCurrentTime(*args, **kwargs): ...
def MFnIkHandle_className(*args, **kwargs): ...
def MFnNewtonField_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaWeighted_swigregister(*args, **kwargs): ...
def MFnIkJoint_swigregister(*args, **kwargs): ...
def MFnNObjectData_className(*args, **kwargs): ...
def MFnKeyframeDeltaMove_swigregister(*args, **kwargs): ...
def toComponentMObject(dagPath):
    """
    get an MObject representing all components of the passed dagPath
    
    The component type that will be returned depends on the exact type of
    object passed in - for instance, a poly mesh will return a component
    representing all the kMeshVertComponents.
    
    The exact choice of component type is determined by MItGeometry.
    """
    ...
def MIkSystem_className(*args, **kwargs): ...
def MFnHikEffector_className(*args, **kwargs): ...
def MAnimControl_globalOutTangentType(*args, **kwargs): ...
def MFnBlendShapeDeformer_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaBlockAddRemove_className(*args, **kwargs): ...
def MDynamicsUtil_runupIfRequired(*args, **kwargs): ...
def MFnNObjectData_swigregister(*args, **kwargs): ...
def MFnKeyframeDelta_className(*args, **kwargs): ...
def MFnLatticeDeformer_className(*args, **kwargs): ...
def MFnCharacter_className(*args, **kwargs): ...
def MFnWeightGeometryFilter_swigregister(*args, **kwargs): ...
def MFnClip_swigregister(*args, **kwargs): ...
def MFnPfxGeometry_swigregister(*args, **kwargs): ...
def MHairSystem_getCollisionObject(*args, **kwargs): ...
def MIkSystem_isGlobalSnap(*args, **kwargs): ...
def MFnAnimCurve_className(*args, **kwargs): ...
def MAnimControl_setAutoKeyMode(*args, **kwargs): ...
def MFnWireDeformer_swigregister(*args, **kwargs): ...
def MAnimUtil_className(*args, **kwargs): ...
def MRenderLineArray_className(*args, **kwargs): ...
def MAnimControl_setMaxTime(*args, **kwargs): ...
def MAnimMessage_addAnimKeyframeEditCheckCallback(*args, **kwargs): ...
def MIkSystem_setGlobalSnap(*args, **kwargs): ...
def MFnPfxGeometry_className(*args, **kwargs): ...
def MFnMotionPath_swigregister(*args, **kwargs): ...
def isValidMDagPath(obj): ...
def MAnimControl_setPlaybackMode(*args, **kwargs): ...
def MFnKeyframeDeltaMove_className(*args, **kwargs): ...
def MFnIkJoint_className(*args, **kwargs): ...
def MHairSystem_registerCollisionSolverCollide(*args, **kwargs): ...
def MIkHandleGroup_className(*args, **kwargs): ...
def MnRigid_swigregister(*args, **kwargs): ...
def MAnimMessage_addPostBakeResultsCallback(*args, **kwargs): ...
def MAnimUtil_findSetDrivenKeyAnimation(*args, **kwargs): ...
def MFnAirField_swigregister(*args, **kwargs): ...
def MAnimControl_setPlaybackBy(*args, **kwargs): ...
def MFnDynSweptGeometryData_swigregister(*args, **kwargs): ...
def MAnimCurveClipboardItem_swigregister(*args, **kwargs): ...
def MAnimControl_maxTime(*args, **kwargs): ...
def MHairSystem_unregisterCollisionSolverCollide(*args, **kwargs): ...
def MItKeyframe_swigregister(*args, **kwargs): ...
def MFnIkHandle_swigregister(*args, **kwargs): ...
def MDynSweptTriangle_className(*args, **kwargs): ...
def MAnimControl_playbackSpeed(*args, **kwargs): ...
def MDynamicsUtil_swigregister(*args, **kwargs): ...
def MAnimMessage_swigregister(*args, **kwargs): ...
def isValidMNodeOrPlug(obj): ...
def MFnBlendShapeDeformer_className(*args, **kwargs): ...
def MFnInstancer_className(*args, **kwargs): ...
def MDynSweptLine_swigregister(*args, **kwargs): ...
def MnObject_swigregister(*args, **kwargs): ...
def MDynamicsUtil_addNodeTypeToRunup(*args, **kwargs): ...
def MFnGravityField_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaInfType_className(*args, **kwargs): ...
def MFnDragField_swigregister(*args, **kwargs): ...
def MAnimControl_setGlobalOutTangentType(*args, **kwargs): ...
def MFnVolumeAxisField_swigregister(*args, **kwargs): ...
def MAnimUtil_isAnimated(*args, **kwargs): ...
def MAnimControl_setAnimationEndTime(*args, **kwargs): ...
def MFnIkEffector_swigregister(*args, **kwargs): ...
def MFnGeometryFilter_swigregister(*args, **kwargs): ...
def MAnimMessage_flushAnimKeyframeEditedCallbacks(*args, **kwargs): ...
def MAnimMessage_addAnimCurveEditedCallback(*args, **kwargs): ...
def MDynSweptTriangle_swigregister(*args, **kwargs): ...
def MAnimMessage_addNodeAnimKeyframeEditedCallback(*args, **kwargs): ...
def MFnClip_className(*args, **kwargs): ...
def MFnLattice_className(*args, **kwargs): ...
def MAnimControl_setMinMaxTime(*args, **kwargs): ...
def MItDag(root='None', *args, **kwargs):
    """
    Iterate over the hierarchy under a root dag node, if root is None, will iterate on whole Maya scene
    If a list of types is provided, then only nodes of these types will be returned,
    if no type is provided all dag nodes under the root will be iterated on.
    Types are specified as Maya API types.
    The following keywords will affect order and behavior of traversal:
    breadth: if True nodes Mobjects will be returned as a breadth first traversal of the hierarchy tree,
             if False as a preorder (depth first)
             default is False (depth first)
    underworld: if True traversal will include a shape's underworld (dag object parented to the shape),
          if False underworld will not be traversed,
          default is False (do not traverse underworld )
    depth : if True will return depth of each node.
    prune : if True will stop the iteration on nodes than do not fit the types list,
            if False these nodes will be traversed but not returned
            default is False (do not prune)
    """
    ...
def MAnimMessage_addPreBakeResultsCallback(*args, **kwargs): ...
def MFnIkSolver_swigregister(*args, **kwargs): ...
def MAnimControl_setMinTime(*args, **kwargs): ...
def MRenderLine_className(*args, **kwargs): ...
def MAnimMessage_addDisableImplicitControlCallback(*args, **kwargs): ...
def MFnNIdData_className(*args, **kwargs): ...
def MAnimMessage_className(*args, **kwargs): ...
def MHairSystem_registerCollisionSolverPreFrame(*args, **kwargs): ...
def MAnimControl_isScrubbing(*args, **kwargs): ...
def MAnimUtil_findConstraint(*args, **kwargs): ...
def toApiObject(nodeName, dagPlugs='True'):
    """
    Get the API MPlug, MObject or (MObject, MComponent) tuple given the name
    of an existing node, attribute, components selection
    
    Parameters
    ----------
    dagPlugs : bool
        if True, plug result will be a tuple of type (MDagPath, MPlug)
    
    If we were unable to retrieve the node/attribute/etc, returns None
    """
    ...
def MAnimControl_minTime(*args, **kwargs): ...
def isValidMNode(obj): ...
def MFnTurbulenceField_className(*args, **kwargs): ...
def MAnimCurveClipboardItemArray_className(*args, **kwargs): ...
def MFnField_swigregister(*args, **kwargs): ...
def MFnInstancer_swigregister(*args, **kwargs): ...
def MFnParticleSystem_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaInfType_swigregister(*args, **kwargs): ...
def MFnNIdData_swigregister(*args, **kwargs): ...
def MAnimControl_setPlaybackSpeed(*args, **kwargs): ...
def MDynamicsUtil_hasValidDynamics2dTexture(*args, **kwargs): ...
def MAnimControl_viewMode(*args, **kwargs): ...
def MFnUniformField_swigregister(*args, **kwargs): ...
def MDynamicsUtil_evalDynamics2dTexture(*args, **kwargs): ...
def MAnimControl_weightedTangents(*args, **kwargs): ...
def MFnNewtonField_className(*args, **kwargs): ...
def MFnIkSolver_className(*args, **kwargs): ...
def MAnimControl_setAnimationStartEndTime(*args, **kwargs): ...
def MDynamicsUtil_removeNodeTypeFromRunup(*args, **kwargs): ...
def MFnFluid_className(*args, **kwargs): ...
def MDynamicsUtil_inRunup(*args, **kwargs): ...
def MIkSystem_isGlobalSolve(*args, **kwargs): ...
def MFnKeyframeDeltaBreakdown_swigregister(*args, **kwargs): ...
def MAnimUtil_swigregister(*args, **kwargs): ...
def MFnIkEffector_className(*args, **kwargs): ...
def isValidMPlug(obj): ...
def MFnGravityField_className(*args, **kwargs): ...
def MObjectName(obj):
    """
    Get the name of an existing MPlug, MDagPath or MObject representing a dependency node
    """
    ...
def MIkSystem_findSolver(*args, **kwargs): ...
def MFnKeyframeDeltaBreakdown_className(*args, **kwargs): ...
def MFnCharacter_swigregister(*args, **kwargs): ...
def MnCloth_swigregister(*args, **kwargs): ...
def MFnKeyframeDelta_swigregister(*args, **kwargs): ...
def MAnimUtil_findAnimatablePlugs(*args, **kwargs): ...
def MFnLatticeDeformer_swigregister(*args, **kwargs): ...
def MRenderLineArray_swigregister(*args, **kwargs): ...
def MAnimMessage_addAnimKeyframeEditedCallback(*args, **kwargs): ...
def MFnKeyframeDeltaWeighted_className(*args, **kwargs): ...
def toMObject(nodeName):
    """
    Get the API MObject given the name of an existing node
    """
    ...
def MFnWeightGeometryFilter_className(*args, **kwargs): ...
def MAnimCurveClipboardItemArray_swigregister(*args, **kwargs): ...
def MFnAnimCurve_swigregister(*args, **kwargs): ...
def nameToMObject(*args):
    """
    Get the API MObjects given names of existing nodes
    """
    ...
def MAnimCurveClipboard_swigregister(*args, **kwargs): ...
def MFnKeyframeDeltaAddRemove_swigregister(*args, **kwargs): ...
def MFnMotionPath_className(*args, **kwargs): ...
def MRenderLine_swigregister(*args, **kwargs): ...
def MAnimControl_playForward(*args, **kwargs): ...
def MAnimUtil_findAnimatedPlugs(*args, **kwargs): ...
def MFnKeyframeDeltaAddRemove_className(*args, **kwargs): ...
def MHairSystem_getFollicle(*args, **kwargs): ...
def MHairSystem_className(*args, **kwargs): ...
def MFnParticleSystem_className(*args, **kwargs): ...
def MAnimControl_setViewMode(*args, **kwargs): ...
def MAnimControl_animationStartTime(*args, **kwargs): ...
def MFnRadialField_swigregister(*args, **kwargs): ...
def MAnimControl_animationEndTime(*args, **kwargs): ...
def MItNodes(*args, **kwargs):
    """
    Iterator on MObjects of nodes of the specified types in the Maya scene,
    if a list of tyes is passed as args, then all nodes of a type included in the list will be iterated on,
    if no types are specified, all nodes of the scene will be iterated on
    the types are specified as Maya API types
    """
    ...
def MFnKeyframeDeltaScale_className(*args, **kwargs): ...
def MAnimControl_setAnimationStartTime(*args, **kwargs): ...
def MHairSystem_swigregister(*args, **kwargs): ...
def MIkSystem_swigregister(*args, **kwargs): ...
def MFnUniformField_className(*args, **kwargs): ...
def MAnimControl_setWeightedTangents(*args, **kwargs): ...
def MAnimControl_currentTime(*args, **kwargs): ...
def MItKeyframe_className(*args, **kwargs): ...
def getPlugValue(plug):
    """
    given an MPlug, get its value
    """
    ...
def MnSolver_swigregister(*args, **kwargs): ...
def isValidMObjectHandle(obj):
    """
    # fast convenience tests on API objects
    """
    ...
def isValidMObject(obj): ...
def MFnWireDeformer_className(*args, **kwargs): ...
def MAnimCurveChange_className(*args, **kwargs): ...
def MFnGeometryFilter_className(*args, **kwargs): ...
def MFnRadialField_className(*args, **kwargs): ...

