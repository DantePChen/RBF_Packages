from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import _OpenMayaMPx
from . import OpenMaya
from . import OpenMayaAnim
from . import OpenMayaRender
import weakref
from . import OpenMayaUI


from __builtin__ import object as _object
from __builtin__ import property as _swig_property


if False:
    from typing import Dict, List, Tuple, Union, Optional

class MPxAttributePatternFactory(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def createPatternsFromFile(self, *args): ...
    def createPatternsFromString(self, *args): ...
    def name(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class uIntPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxMaterialInformation(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def computeMaterial(self, *args): ...
    def connectAsTexture(self, *args): ...
    def materialInfoIsDirty(self, *args): ...
    def textureDisconnected(self, *args): ...
    def useMaterialAsTexture(self, *args): ...
    @property
    def fInstance(self): ...
    @fInstance.setter
    def fInstance(self, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kOverrideDraw : int
    
    kSimpleMaterial : int
    
    kTexture : int


class MPxCacheFormat(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def beginReadChunk(self, *args): ...
    def beginWriteChunk(self, *args): ...
    def close(self, *args): ...
    def endReadChunk(self, *args): ...
    def endWriteChunk(self, *args): ...
    def extension(self, *args): ...
    def findChannelName(self, *args): ...
    def findTime(self, *args): ...
    def handlesDescription(self, *args): ...
    def isValid(self, *args): ...
    def open(self, *args): ...
    def readArraySize(self, *args): ...
    def readChannelName(self, *args): ...
    def readDescription(self, *args): ...
    def readDoubleArray(self, *args): ...
    def readDoubleVectorArray(self, *args): ...
    def readFloatArray(self, *args): ...
    def readFloatVectorArray(self, *args): ...
    def readHeader(self, *args): ...
    def readInt32(self, *args): ...
    def readIntArray(self, *args): ...
    def readNextTime(self, *args): ...
    def readTime(self, *args): ...
    def rewind(self, *args): ...
    def writeChannelName(self, *args): ...
    def writeDescription(self, *args): ...
    def writeDoubleArray(self, *args): ...
    def writeDoubleVectorArray(self, *args): ...
    def writeFloatArray(self, *args): ...
    def writeFloatVectorArray(self, *args): ...
    def writeHeader(self, *args): ...
    def writeInt32(self, *args): ...
    def writeIntArray(self, *args): ...
    def writeTime(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kRead : int
    
    kReadWrite : int
    
    kWrite : int


class MPxRenderPassImpl(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def frameBufferSemantic(self, *args): ...
    def getDefaultType(self, *args): ...
    def getNumChannels(self, *args): ...
    def isCompatible(self, *args): ...
    def perLightPassContributionSupported(self, *args): ...
    def typesSupported(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kBit : int
    
    kColorSemantic : int
    
    kDepthSemantic : int
    
    kDirectionVectorSemantic : int
    
    kFloat16 : int
    
    kFloat32 : int
    
    kFloat64 : int
    
    kInt16 : int
    
    kInt32 : int
    
    kInt64 : int
    
    kInt8 : int
    
    kInvalidSemantic : int
    
    kLabelSemantic : int
    
    kMaskSemantic : int
    
    kOther : int
    
    kOtherSemantic : int
    
    kUInt16 : int
    
    kUInt32 : int
    
    kUInt64 : int
    
    kUInt8 : int
    
    kVectorSemantic : int


class charPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxModelEditorCommand(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def appendSyntax(self, *args): ...
    def doEditFlags(self, *args): ...
    def doQueryFlags(self, *args): ...
    def editorCommandName(self, *args): ...
    def editorMenuScriptName(self, *args): ...
    def makeModelView(self, *args): ...
    def modelView(self, *args): ...
    def setResult(self, *args): ...
    def skipFlagForCreate(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxGlBuffer(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def beginBufferNotify(self, *args): ...
    def bindFbo(self, *args): ...
    def closeFbo(self, *args): ...
    def endBufferNotify(self, *args): ...
    def openFbo(self, *args): ...
    def unbindFbo(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxCommand(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def commandString(self, *args): ...
    def doIt(self, *args): ...
    def hasSyntax(self, *args): ...
    def isHistoryOn(self, *args): ...
    def isUndoable(self, *args): ...
    def redoIt(self, *args): ...
    def setCommandString(self, *args): ...
    def setHistoryOn(self, *args): ...
    def setUndoable(self, *args): ...
    def syntax(self, *args): ...
    def undoIt(self, *args): ...
    @staticmethod
    def appendToResult(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def clearResult(*args, **kwargs): ...
    @staticmethod
    def currentDoubleResult(*args, **kwargs): ...
    @staticmethod
    def currentIntResult(*args, **kwargs): ...
    @staticmethod
    def currentResultType(*args, **kwargs): ...
    @staticmethod
    def currentStringResult(*args, **kwargs): ...
    @staticmethod
    def displayError(*args, **kwargs): ...
    @staticmethod
    def displayInfo(*args, **kwargs): ...
    @staticmethod
    def displayWarning(*args, **kwargs): ...
    @staticmethod
    def getCurrentResult(*args, **kwargs): ...
    @staticmethod
    def isCurrentResultArray(*args, **kwargs): ...
    @staticmethod
    def setResult(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kDouble : int
    
    kLong : int
    
    kNoArg : int
    
    kString : int


class boolPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxTransformationMatrix(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __eq__(self, other: Any) -> bool: ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __ne__(self, other: Any) -> bool: ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def asInterpolationMatrix(self, *args): ...
    def asMatrix(self, *args): ...
    def asMatrixInverse(self, *args): ...
    def asRotateMatrix(self, *args): ...
    def asRotateMatrixInverse(self, *args): ...
    def asScaleMatrix(self, *args): ...
    def asScaleMatrixInverse(self, *args): ...
    def asTransformationMatrix(self, *args): ...
    def assign(self, *args): ...
    def copyValues(self, *args): ...
    def decomposeMatrix(self, *args): ...
    def eulerRotateOrientation(self, *args): ...
    def eulerRotation(self, *args): ...
    def isEquivalent(self, *args): ...
    def reverse(self, *args): ...
    def rotateBy(self, *args): ...
    def rotateOrientation(self, *args): ...
    def rotatePivot(self, *args): ...
    def rotatePivotTranslation(self, *args): ...
    def rotateTo(self, *args): ...
    def rotation(self, *args): ...
    def rotationOrder(self, *args): ...
    def scale(self, *args): ...
    def scaleBy(self, *args): ...
    def scalePivot(self, *args): ...
    def scalePivotTranslation(self, *args): ...
    def scaleTo(self, *args): ...
    def setRotateOrientation(self, *args): ...
    def setRotatePivot(self, *args): ...
    def setRotatePivotTranslation(self, *args): ...
    def setRotationOrder(self, *args): ...
    def setScalePivot(self, *args): ...
    def setScalePivotTranslation(self, *args): ...
    def shear(self, *args): ...
    def shearBy(self, *args): ...
    def shearTo(self, *args): ...
    def transformBy(self, *args): ...
    def translateBy(self, *args): ...
    def translateTo(self, *args): ...
    def translation(self, *args): ...
    def typeId(self, *args): ...
    def unSquishIt(self, *args): ...
    def unSquishMatrix(self, *args): ...
    @staticmethod
    def convertEulerRotationOrder(*args, **kwargs): ...
    @staticmethod
    def convertTransformationRotationOrder(*args, **kwargs): ...
    @staticmethod
    def creator(*args, **kwargs): ...
    @property
    def baseTransformationMatrixId(self): ...
    @baseTransformationMatrixId.setter
    def baseTransformationMatrixId(self, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    identity : MPxTransformationMatrix


class MPxGeometryIterator(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def component(self, *args): ...
    def currentPoint(self, *args): ...
    def geometry(self, *args): ...
    def hasNormals(self, *args): ...
    def hasPoints(self, *args): ...
    def index(self, *args): ...
    def indexUnsimplified(self, *args): ...
    def isDone(self, *args): ...
    def iteratorCount(self, *args): ...
    def maxPoints(self, *args): ...
    def next(self, *args): ...
    def point(self, *args): ...
    def reset(self, *args): ...
    def setCurrentPoint(self, *args): ...
    def setMaxPoints(self, *args): ...
    def setObject(self, *args): ...
    def setPoint(self, *args): ...
    def setPointGetNext(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxUIControl(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxMayaAsciiFilterOutput(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __lshift__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxFileResolver(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def performAfterSaveURI(self, *args): ...
    def resolveURI(self, *args): ...
    def resolveURIWithContext(self, *args): ...
    def resolverName(self, *args): ...
    def uriScheme(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def findURIResolverByName(*args, **kwargs): ...
    @staticmethod
    def findURIResolverByScheme(*args, **kwargs): ...
    @staticmethod
    def getURIResolversByName(*args, **kwargs): ...
    @staticmethod
    def getURIResolversByScheme(*args, **kwargs): ...
    @staticmethod
    def numURIResolvers(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kInput : int
    
    kNone : int


class MPxContextCommand(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def appendSyntax(self, *args): ...
    def doEditFlags(self, *args): ...
    def doQueryFlags(self, *args): ...
    def makeObj(self, *args): ...
    def setResult(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class uCharPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MaterialInputData(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    @property
    def ambient(self): ...
    @ambient.setter
    def ambient(self, value): ...
    @property
    def diffuse(self): ...
    @diffuse.setter
    def diffuse(self, value): ...
    @property
    def emission(self): ...
    @emission.setter
    def emission(self, value): ...
    @property
    def hasTransparency(self): ...
    @hasTransparency.setter
    def hasTransparency(self, value): ...
    @property
    def shininess(self): ...
    @shininess.setter
    def shininess(self, value): ...
    @property
    def specular(self): ...
    @specular.setter
    def specular(self, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxDragAndDropBehavior(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def connectAttrToAttr(self, *args): ...
    def connectAttrToNode(self, *args): ...
    def connectNodeToAttr(self, *args): ...
    def connectNodeToNode(self, *args): ...
    def shouldBeUsedFor(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class doublePtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MFnPlugin(OpenMaya.MFnBase):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addMenuItem(self, *args): ...
    def apiVersion(self, *args): ...
    def deregisterAnimCurveInterpolator(self, *args): ...
    def deregisterAttributePatternFactory(self, *args): ...
    def deregisterCacheFormat(self, *args): ...
    def deregisterCommand(self, *args): ...
    def deregisterConstraintCommand(self, *args): ...
    def deregisterContextCommand(self, *args): ...
    def deregisterControlCommand(self, *args): ...
    def deregisterData(self, *args): ...
    def deregisterDevice(self, *args): ...
    def deregisterDisplayFilter(self, *args): ...
    def deregisterDragAndDropBehavior(self, *args): ...
    def deregisterEvaluator(self, *args): ...
    def deregisterFileTranslator(self, *args): ...
    def deregisterIkSolver(self, *args): ...
    def deregisterImageFile(self, *args): ...
    def deregisterModelEditorCommand(self, *args): ...
    def deregisterNode(self, *args): ...
    def deregisterRenderPassImpl(self, *args): ...
    def deregisterRenderer(self, *args): ...
    def deregisterTopologyEvaluator(self, *args): ...
    def deregisterURIFileResolver(self, *args): ...
    def loadPath(self, *args): ...
    def matrixTypeIdFromXformId(self, *args): ...
    def name(self, *args): ...
    def registerAnimCurveInterpolator(self, *args): ...
    def registerAttributePatternFactory(self, *args): ...
    def registerBakeEngine(self, *args): ...
    def registerCacheFormat(self, *args): ...
    def registerCommand(self, *args): ...
    def registerConstraintCommand(self, *args): ...
    def registerContextCommand(self, *args): ...
    def registerControlCommand(self, *args): ...
    def registerData(self, *args): ...
    def registerDevice(self, *args): ...
    def registerDisplayFilter(self, *args): ...
    def registerDragAndDropBehavior(self, *args): ...
    def registerEvaluator(self, *args): ...
    def registerFileTranslator(self, *args): ...
    def registerIkSolver(self, *args): ...
    def registerImageFile(self, *args): ...
    def registerMaterialInfo(self, *args): ...
    def registerModelEditorCommand(self, *args): ...
    def registerNode(self, *args): ...
    def registerRenderPassImpl(self, *args): ...
    def registerRenderer(self, *args): ...
    def registerShape(self, *args): ...
    def registerTopologyEvaluator(self, *args): ...
    def registerTransform(self, *args): ...
    def registerUI(self, *args): ...
    def registerUIStrings(self, *args): ...
    def registerURIFileResolver(self, *args): ...
    def removeMenuItem(self, *args): ...
    def setName(self, *args): ...
    def setVersion(self, *args): ...
    def type(self, *args): ...
    def unregisterBakeEngine(self, *args): ...
    def unregisterMaterialInfo(self, *args): ...
    def vendor(self, *args): ...
    def version(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def findPlugin(*args, **kwargs): ...
    @staticmethod
    def isNodeRegistered(*args, **kwargs): ...
    @staticmethod
    def registeringCallableScript(*args, **kwargs): ...
    @staticmethod
    def setRegisteringCallableScript(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kDefaultDataLocation : SwigPyObject


class MPxCacheConfigRuleFilter(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def isMatch(self, *args): ...
    def postRulesExecution(self, *args): ...
    def preRulesExecution(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxAnimCurveInterpolator(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def evaluate(self, *args): ...
    def initialize(self, *args): ...
    def typeId(self, *args): ...
    def typeName(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kEvaluateAtKey : int
    
    kLockType : int


class MPxRepresentation(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def activate(self, *args): ...
    def canApplyEdits(self, *args): ...
    def getExternalContent(self, *args): ...
    def getName(self, *args): ...
    def getType(self, *args): ...
    def inactivate(self, *args): ...
    def setExternalContent(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxControlCommand(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def appendSyntax(self, *args): ...
    def clearResult(self, *args): ...
    def doEditFlags(self, *args): ...
    def doQueryFlags(self, *args): ...
    def makeControl(self, *args): ...
    def setResult(self, *args): ...
    def skipFlagForCreate(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxEditData(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def isEqual(self, *args): ...
    def isLessThan(self, *args): ...
    def performIsEqual(self, *args): ...
    def performIsLessThan(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxNode(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addExternalContentForFileAttr(self, *args): ...
    def compute(self, *args): ...
    def connectionBroken(self, *args): ...
    def connectionMade(self, *args): ...
    def copyInternalData(self, *args): ...
    def dependsOn(self, *args): ...
    def existWithoutInConnections(self, *args): ...
    def existWithoutOutConnections(self, *args): ...
    def getExternalContent(self, *args): ...
    def getFilesToArchive(self, *args): ...
    def getInternalValue(self, *args): ...
    def getInternalValueInContext(self, *args): ...
    def internalArrayCount(self, *args): ...
    def isAbstractClass(self, *args): ...
    def isPassiveOutput(self, *args): ...
    def isTrackingTopology(self, *args): ...
    def legalConnection(self, *args): ...
    def legalDisconnection(self, *args): ...
    def name(self, *args): ...
    def passThroughToMany(self, *args): ...
    def passThroughToOne(self, *args): ...
    def postConstructor(self, *args): ...
    def postEvaluation(self, *args): ...
    def preEvaluation(self, *args): ...
    def schedulingType(self, *args): ...
    def setDependentsDirty(self, *args): ...
    def setExistWithoutInConnections(self, *args): ...
    def setExistWithoutOutConnections(self, *args): ...
    def setExternalContent(self, *args): ...
    def setExternalContentForFileAttr(self, *args): ...
    def setInternalValue(self, *args): ...
    def setInternalValueInContext(self, *args): ...
    def shouldSave(self, *args): ...
    def thisMObject(self, *args): ...
    def type(self, *args): ...
    def typeId(self, *args): ...
    def typeName(self, *args): ...
    @staticmethod
    def addAttribute(*args, **kwargs): ...
    @staticmethod
    def attributeAffects(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def inheritAttributesFrom(*args, **kwargs): ...
    @property
    def caching(self): ...
    @caching.setter
    def caching(self, value): ...
    @property
    def frozen(self): ...
    @frozen.setter
    def frozen(self, value): ...
    @property
    def isHistoricallyInteresting(self): ...
    @isHistoricallyInteresting.setter
    def isHistoricallyInteresting(self, value): ...
    @property
    def message(self): ...
    @message.setter
    def message(self, value): ...
    @property
    def state(self): ...
    @state.setter
    def state(self, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kAssembly : int
    
    kBlendShape : int
    
    kCameraSetNode : int
    
    kClientDeviceNode : int
    
    kConstraintNode : int
    
    kDefaultScheduling : int
    
    kDeformerNode : int
    
    kDependNode : int
    
    kEmitterNode : int
    
    kEvaluatedDirectly : int
    
    kEvaluatedIndirectly : int
    
    kFieldNode : int
    
    kFluidEmitterNode : int
    
    kGeometryFilter : int
    
    kGloballySerial : int
    
    kGloballySerialize : int
    
    kHardwareShader : int
    
    kHwShaderNode : int
    
    kIkSolverNode : int
    
    kImagePlaneNode : int
    
    kLast : int
    
    kLeaveDirty : int
    
    kLocatorNode : int
    
    kManipContainer : int
    
    kManipulatorNode : int
    
    kMotionPathNode : int
    
    kObjectSet : int
    
    kParallel : int
    
    kParticleAttributeMapperNode : int
    
    kPostEvaluationTypeLast : int
    
    kSchedulingTypeLast : int
    
    kSerial : int
    
    kSerialize : int
    
    kSkinCluster : int
    
    kSpringNode : int
    
    kSurfaceShape : int
    
    kThreadedDeviceNode : int
    
    kTransformNode : int
    
    kUntrusted : int


class MPxImageFile(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def close(self, *args): ...
    def glLoad(self, *args): ...
    def load(self, *args): ...
    def open(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class floatPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxSurfaceShapeUI(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def canDrawUV(self, *args): ...
    def draw(self, *args): ...
    def drawUV(self, *args): ...
    def getDrawData(self, *args): ...
    def getDrawRequests(self, *args): ...
    def material(self, *args): ...
    def materials(self, *args): ...
    def select(self, *args): ...
    def selectUV(self, *args): ...
    def snap(self, *args): ...
    def surfaceShape(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def surfaceShapeUI(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kSelectMeshEdges : int
    
    kSelectMeshFaces : int
    
    kSelectMeshUVs : int
    
    kSelectMeshVerts : int


class MPxData(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def copy(self, *args): ...
    def name(self, *args): ...
    def readASCII(self, *args): ...
    def readBinary(self, *args): ...
    def typeId(self, *args): ...
    def writeASCII(self, *args): ...
    def writeBinary(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kData : int
    
    kGeometryData : int
    
    kLast : int


class MPxMidiInputDevice(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def closeDevice(self, *args): ...
    def deviceState(self, *args): ...
    def doButtonEvents(self, *args): ...
    def doMovementEvents(self, *args): ...
    def getMessage(self, *args): ...
    def nameAxes(self, *args): ...
    def nameButtons(self, *args): ...
    def openDevice(self, *args): ...
    def sendMessage(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxFileTranslator(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def allowMultipleFileOptimization(self, *args): ...
    def canBeOpened(self, *args): ...
    def defaultExtension(self, *args): ...
    def filter(self, *args): ...
    def haveNamespaceSupport(self, *args): ...
    def haveReadMethod(self, *args): ...
    def haveReferenceMethod(self, *args): ...
    def haveWriteMethod(self, *args): ...
    def identifyFile(self, *args): ...
    def reader(self, *args): ...
    def writer(self, *args): ...
    @staticmethod
    def fileAccessMode(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kCouldBeMyFileType : int
    
    kExportAccessMode : int
    
    kExportActiveAccessMode : int
    
    kImportAccessMode : int
    
    kIsMyFileType : int
    
    kNotMyFileType : int
    
    kOpenAccessMode : int
    
    kReferenceAccessMode : int
    
    kSaveAccessMode : int
    
    kUnknownAccessMode : int


class MPx3dModelView(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def backgroundColor(self, *args): ...
    def backgroundColorBottom(self, *args): ...
    def backgroundColorTop(self, *args): ...
    def beginGL(self, *args): ...
    def beginXorDrawing(self, *args): ...
    def colorAtIndex(self, *args): ...
    def customDraw(self, *args): ...
    def customDrawEnabled(self, *args): ...
    def destroyOnPanelDestruction(self, *args): ...
    def displayAxisAtOriginOn(self, *args): ...
    def displayAxisOn(self, *args): ...
    def displayCameraAnnotationOn(self, *args): ...
    def displayHUD(self, *args): ...
    def displayStyle(self, *args): ...
    def doUpdateOnMove(self, *args): ...
    def drawAdornments(self, *args): ...
    def drawAdornmentsNow(self, *args): ...
    def drawHUDNow(self, *args): ...
    def drawInterrupt(self, *args): ...
    def drawOnePass(self, *args): ...
    def drawText(self, *args): ...
    def endGL(self, *args): ...
    def endXorDrawing(self, *args): ...
    def filteredObjectList(self, *args): ...
    def fogColor(self, *args): ...
    def fogDensity(self, *args): ...
    def fogEnd(self, *args): ...
    def fogMode(self, *args): ...
    def fogSource(self, *args): ...
    def fogStart(self, *args): ...
    def getAsM3dView(self, *args): ...
    def getCamera(self, *args): ...
    def getCameraHUDName(self, *args): ...
    def getCameraSet(self, *args): ...
    def getColorIndexAndTable(self, *args): ...
    def getCurrentCameraSetCamera(self, *args): ...
    def getObjectsToView(self, *args): ...
    def handleDraw(self, *args): ...
    def hasStereoBufferSupport(self, *args): ...
    def includeInvisible(self, *args): ...
    def isBackfaceCulling(self, *args): ...
    def isBackgroundFogEnabled(self, *args): ...
    def isBackgroundGradient(self, *args): ...
    def isFogEnabled(self, *args): ...
    def isShadeActiveOnly(self, *args): ...
    def isTextureDisplayEnabled(self, *args): ...
    def isTwoSidedLighting(self, *args): ...
    def isVisible(self, *args): ...
    def isWireframeOnShaded(self, *args): ...
    def isXrayEnabled(self, *args): ...
    def lightingMode(self, *args): ...
    def multipleDrawEnabled(self, *args): ...
    def multipleDrawPassCount(self, *args): ...
    def name(self, *args): ...
    def numActiveColors(self, *args): ...
    def numDormantColors(self, *args): ...
    def numUserDefinedColors(self, *args): ...
    def objectDisplay(self, *args): ...
    def okForMultipleDraw(self, *args): ...
    def portHeight(self, *args): ...
    def portWidth(self, *args): ...
    def postMultipleDraw(self, *args): ...
    def postMultipleDrawPass(self, *args): ...
    def preMultipleDraw(self, *args): ...
    def preMultipleDrawPass(self, *args): ...
    def processDraw(self, *args): ...
    def refresh(self, *args): ...
    def removingCamera(self, *args): ...
    def requestOkForDraw(self, *args): ...
    def setBackfaceCulling(self, *args): ...
    def setBackgroundFogEnabled(self, *args): ...
    def setCamera(self, *args): ...
    def setCameraInDraw(self, *args): ...
    def setCameraSet(self, *args): ...
    def setCurrentCameraSetCamera(self, *args): ...
    def setCustomDrawEnable(self, *args): ...
    def setDestroyOnPanelDestruction(self, *args): ...
    def setDisplayAxis(self, *args): ...
    def setDisplayAxisAtOrigin(self, *args): ...
    def setDisplayCameraAnnotation(self, *args): ...
    def setDisplayHUD(self, *args): ...
    def setDisplayStyle(self, *args): ...
    def setDoUpdateOnMove(self, *args): ...
    def setDrawAdornments(self, *args): ...
    def setDrawCameraOverride(self, *args): ...
    def setDrawColor(self, *args): ...
    def setDrawInterrupt(self, *args): ...
    def setFogColor(self, *args): ...
    def setFogDensity(self, *args): ...
    def setFogEnabled(self, *args): ...
    def setFogEnd(self, *args): ...
    def setFogMode(self, *args): ...
    def setFogSource(self, *args): ...
    def setFogStart(self, *args): ...
    def setInStereoDrawMode(self, *args): ...
    def setIncludeInvisible(self, *args): ...
    def setLightingMode(self, *args): ...
    def setMultipleDrawEnable(self, *args): ...
    def setObjectDisplay(self, *args): ...
    def setObjectsToView(self, *args): ...
    def setTextureDisplayEnabled(self, *args): ...
    def setTwoSidedLighting(self, *args): ...
    def setUserDefinedColor(self, *args): ...
    def setViewSelected(self, *args): ...
    def setViewSelectedPrefix(self, *args): ...
    def setViewSelectedSet(self, *args): ...
    def setWireframeOnShaded(self, *args): ...
    def setXrayEnabled(self, *args): ...
    def templateColor(self, *args): ...
    def updateViewingParameters(self, *args): ...
    def userDefinedColorIndex(self, *args): ...
    def viewIsFiltered(self, *args): ...
    def viewSelected(self, *args): ...
    def viewSelectedPrefix(self, *args): ...
    def viewSelectedSet(self, *args): ...
    def viewToObjectSpace(self, *args): ...
    def viewToWorld(self, *args): ...
    def viewType(self, *args): ...
    def wantStereoGLBuffer(self, *args): ...
    def worldToView(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def getModelView(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kFogCoordinate : int
    
    kFogExponential : int
    
    kFogExponentialSquared : int
    
    kFogFragment : int
    
    kFogLinear : int
    
    kLightActive : int
    
    kLightAll : int
    
    kLightDefault : int
    
    kLightNone : int
    
    kLightQuality : int
    
    kLightSelected : int


class intPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MExternalContentLocationTable(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addEntry(self, *args): ...
    def getEntryByIndex(self, *args): ...
    def getLocationByKey(self, *args): ...
    def length(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MExternalContentInfoTable(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addResolvedEntry(self, *args): ...
    def addUnresolvedEntry(self, *args): ...
    def getEntryByIndex(self, *args): ...
    def getInfoByKey(self, *args): ...
    def length(self, *args): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxContext(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def abortAction(self, *args): ...
    def addManipulator(self, *args): ...
    def argTypeNumericalInput(self, *args): ...
    def completeAction(self, *args): ...
    def deleteAction(self, *args): ...
    def deleteManipulators(self, *args): ...
    def doDrag(self, *args): ...
    def doEnterRegion(self, *args): ...
    def doHold(self, *args): ...
    def doPress(self, *args): ...
    def doPtrMoved(self, *args): ...
    def doRelease(self, *args): ...
    def feedbackNumericalInput(self, *args): ...
    def helpStateHasChanged(self, *args): ...
    def image(self, *args): ...
    def newToolCommand(self, *args): ...
    def processNumericalInput(self, *args): ...
    def setImage(self, *args): ...
    def stringClassName(self, *args): ...
    def toolOffCleanup(self, *args): ...
    def toolOnSetup(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor
    
    kImage1 : int
    
    kImage2 : int
    
    kImage3 : int


class shortPtr(_object):
    def __del__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def assign(self, *args): ...
    def cast(self, *args): ...
    def value(self, *args): ...
    @staticmethod
    def frompointer(*args, **kwargs): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxBakeEngine(_object):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def bake(self, *args): ...
    def getUVRange(self, *args): ...
    def setNeedTransparency(self, *args): ...
    @property
    def fInstance(self): ...
    @fInstance.setter
    def fInstance(self, value): ...
    __dict__ : dictproxy
    
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    __weakref__ : getset_descriptor


class MPxGeometryFilter(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def accessoryAttribute(self, *args): ...
    def accessoryNodeSetup(self, *args): ...
    def deform(self, *args): ...
    def getDeformationDetails(self, *args): ...
    def setDeformationDetails(self, *args): ...
    def setModifiedCallback(self, *args): ...
    def setUseExistingConnectionWhenSetEditing(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def envelope(self): ...
    @envelope.setter
    def envelope(self, value): ...
    @property
    def groupId(self): ...
    @groupId.setter
    def groupId(self, value): ...
    @property
    def input(self): ...
    @input.setter
    def input(self, value): ...
    @property
    def inputGeom(self): ...
    @inputGeom.setter
    def inputGeom(self, value): ...
    @property
    def outputGeom(self): ...
    @outputGeom.setter
    def outputGeom(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kDeformsAll : int
    
    kDeformsColors : int
    
    kDeformsUVs : int


class MPxHwShaderNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def bind(self, *args): ...
    def colorsPerVertex(self, *args): ...
    def currentPath(self, *args): ...
    def currentShadingEngine(self, *args): ...
    def dirtyMask(self, *args): ...
    def geometry(self, *args): ...
    def glBind(self, *args): ...
    def glGeometry(self, *args): ...
    def glUnbind(self, *args): ...
    def hasTransparency(self, *args): ...
    def invertTexCoords(self, *args): ...
    def normalsPerVertex(self, *args): ...
    def provideFaceIDs(self, *args): ...
    def provideLocalUVCoord(self, *args): ...
    def provideVertexIDs(self, *args): ...
    def renderSwatchImage(self, *args): ...
    def supportsBatching(self, *args): ...
    def texCoordsPerVertex(self, *args): ...
    def transparencyOptions(self, *args): ...
    def type(self, *args): ...
    def unbind(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def getHwShaderNodePtr(*args, **kwargs): ...
    @property
    def outColor(self): ...
    @outColor.setter
    def outColor(self, value): ...
    @property
    def outColorB(self): ...
    @outColorB.setter
    def outColorB(self, value): ...
    @property
    def outColorG(self): ...
    @outColorG.setter
    def outColorG(self, value): ...
    @property
    def outColorR(self): ...
    @outColorR.setter
    def outColorR(self, value): ...
    @property
    def outGlowColor(self): ...
    @outGlowColor.setter
    def outGlowColor(self, value): ...
    @property
    def outGlowColorB(self): ...
    @outGlowColorB.setter
    def outGlowColorB(self, value): ...
    @property
    def outGlowColorG(self): ...
    @outGlowColorG.setter
    def outGlowColorG(self, value): ...
    @property
    def outGlowColorR(self): ...
    @outGlowColorR.setter
    def outGlowColorR(self, value): ...
    @property
    def outMatteOpacity(self): ...
    @outMatteOpacity.setter
    def outMatteOpacity(self, value): ...
    @property
    def outMatteOpacityB(self): ...
    @outMatteOpacityB.setter
    def outMatteOpacityB(self, value): ...
    @property
    def outMatteOpacityG(self): ...
    @outMatteOpacityG.setter
    def outMatteOpacityG(self, value): ...
    @property
    def outMatteOpacityR(self): ...
    @outMatteOpacityR.setter
    def outMatteOpacityR(self, value): ...
    @property
    def outTransparency(self): ...
    @outTransparency.setter
    def outTransparency(self, value): ...
    @property
    def outTransparencyB(self): ...
    @outTransparencyB.setter
    def outTransparencyB(self, value): ...
    @property
    def outTransparencyG(self): ...
    @outTransparencyG.setter
    def outTransparencyG(self, value): ...
    @property
    def outTransparencyR(self): ...
    @outTransparencyR.setter
    def outTransparencyR(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kDirtyAll : int
    
    kDirtyColorArrays : int
    
    kDirtyNone : int
    
    kDirtyNormalArray : int
    
    kDirtyTexCoordArrays : int
    
    kDirtyVertexArray : int
    
    kIsTransparent : int
    
    kNoTransparencyFrontBackCull : int
    
    kNoTransparencyPolygonSort : int
    
    kWriteAll : int
    
    kWriteColorArrays : int
    
    kWriteNone : int
    
    kWriteNormalArray : int
    
    kWriteTexCoordArrays : int
    
    kWriteVertexArray : int


class MPxMayaAsciiFilter(MPxFileTranslator):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def haveReadMethod(self, *args): ...
    def haveWriteMethod(self, *args): ...
    def processReadOptions(self, *args): ...
    def processWriteOptions(self, *args): ...
    def reader(self, *args): ...
    def writePostConnectAttrsBlock(self, *args): ...
    def writePostCreateNodesBlock(self, *args): ...
    def writePostHeader(self, *args): ...
    def writePostRequires(self, *args): ...
    def writePreConnectAttrsBlock(self, *args): ...
    def writePreCreateNodesBlock(self, *args): ...
    def writePreTrailer(self, *args): ...
    def writer(self, *args): ...
    def writesConnectAttr(self, *args): ...
    def writesCreateNode(self, *args): ...
    def writesDisconnectAttr(self, *args): ...
    def writesFileReference(self, *args): ...
    def writesMetadata(self, *args): ...
    def writesParentNode(self, *args): ...
    def writesRequirements(self, *args): ...
    def writesSelectNode(self, *args): ...
    def writesSetAttr(self, *args): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxEmitterNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def compute(self, *args): ...
    def draw(self, *args): ...
    def evalEmission2dTexture(self, *args): ...
    def getCurrentTime(self, *args): ...
    def getDeltaTime(self, *args): ...
    def getEmitterType(self, *args): ...
    def getMaxDistance(self, *args): ...
    def getMinDistance(self, *args): ...
    def getOwnerShape(self, *args): ...
    def getRandomSeed(self, *args): ...
    def getRandomState(self, *args): ...
    def getRate(self, *args): ...
    def getStartTime(self, *args): ...
    def getWorldMatrix(self, *args): ...
    def getWorldPosition(self, *args): ...
    def hasValidEmission2dTexture(self, *args): ...
    def randgen(self, *args): ...
    def resetRandomState(self, *args): ...
    def setRandomState(self, *args): ...
    def type(self, *args): ...
    def volumePrimitiveBoundingBox(self, *args): ...
    def volumePrimitiveDistanceFromAxis(self, *args): ...
    def volumePrimitivePointInside(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def mCurrentTime(self): ...
    @mCurrentTime.setter
    def mCurrentTime(self, value): ...
    @property
    def mDeltaTime(self): ...
    @mDeltaTime.setter
    def mDeltaTime(self, value): ...
    @property
    def mDirection(self): ...
    @mDirection.setter
    def mDirection(self, value): ...
    @property
    def mDirectionX(self): ...
    @mDirectionX.setter
    def mDirectionX(self, value): ...
    @property
    def mDirectionY(self): ...
    @mDirectionY.setter
    def mDirectionY(self, value): ...
    @property
    def mDirectionZ(self): ...
    @mDirectionZ.setter
    def mDirectionZ(self, value): ...
    @property
    def mEmitterType(self): ...
    @mEmitterType.setter
    def mEmitterType(self, value): ...
    @property
    def mInheritFactor(self): ...
    @mInheritFactor.setter
    def mInheritFactor(self, value): ...
    @property
    def mIsFull(self): ...
    @mIsFull.setter
    def mIsFull(self, value): ...
    @property
    def mMaxDistance(self): ...
    @mMaxDistance.setter
    def mMaxDistance(self, value): ...
    @property
    def mMinDistance(self): ...
    @mMinDistance.setter
    def mMinDistance(self, value): ...
    @property
    def mOutput(self): ...
    @mOutput.setter
    def mOutput(self, value): ...
    @property
    def mOwnerCentroid(self): ...
    @mOwnerCentroid.setter
    def mOwnerCentroid(self, value): ...
    @property
    def mOwnerCentroidX(self): ...
    @mOwnerCentroidX.setter
    def mOwnerCentroidX(self, value): ...
    @property
    def mOwnerCentroidY(self): ...
    @mOwnerCentroidY.setter
    def mOwnerCentroidY(self, value): ...
    @property
    def mOwnerCentroidZ(self): ...
    @mOwnerCentroidZ.setter
    def mOwnerCentroidZ(self, value): ...
    @property
    def mOwnerPosData(self): ...
    @mOwnerPosData.setter
    def mOwnerPosData(self, value): ...
    @property
    def mOwnerVelData(self): ...
    @mOwnerVelData.setter
    def mOwnerVelData(self, value): ...
    @property
    def mRandState(self): ...
    @mRandState.setter
    def mRandState(self, value): ...
    @property
    def mRandStateX(self): ...
    @mRandStateX.setter
    def mRandStateX(self, value): ...
    @property
    def mRandStateY(self): ...
    @mRandStateY.setter
    def mRandStateY(self, value): ...
    @property
    def mRandStateZ(self): ...
    @mRandStateZ.setter
    def mRandStateZ(self, value): ...
    @property
    def mRate(self): ...
    @mRate.setter
    def mRate(self, value): ...
    @property
    def mSeed(self): ...
    @mSeed.setter
    def mSeed(self, value): ...
    @property
    def mSpeed(self): ...
    @mSpeed.setter
    def mSpeed(self, value): ...
    @property
    def mStartTime(self): ...
    @mStartTime.setter
    def mStartTime(self, value): ...
    @property
    def mSweptGeometry(self): ...
    @mSweptGeometry.setter
    def mSweptGeometry(self, value): ...
    @property
    def mWorldMatrix(self): ...
    @mWorldMatrix.setter
    def mWorldMatrix(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kCurve : int
    
    kDirectional : int
    
    kOmni : int
    
    kSurface : int
    
    kVolume : int


class MPxMotionPathNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def banking(self, *args): ...
    def evaluatePath(self, *args): ...
    def fractionalToParametric(self, *args): ...
    def getVectors(self, *args): ...
    def matrix(self, *args): ...
    def parametricToFractional(self, *args): ...
    def position(self, *args): ...
    def type(self, *args): ...
    def wraparoundFractionalValue(self, *args): ...
    @property
    def allCoordinates(self): ...
    @allCoordinates.setter
    def allCoordinates(self, value): ...
    @property
    def bank(self): ...
    @bank.setter
    def bank(self, value): ...
    @property
    def bankScale(self): ...
    @bankScale.setter
    def bankScale(self, value): ...
    @property
    def bankThreshold(self): ...
    @bankThreshold.setter
    def bankThreshold(self, value): ...
    @property
    def flowNode(self): ...
    @flowNode.setter
    def flowNode(self, value): ...
    @property
    def follow(self): ...
    @follow.setter
    def follow(self, value): ...
    @property
    def fractionMode(self): ...
    @fractionMode.setter
    def fractionMode(self, value): ...
    @property
    def frontAxis(self): ...
    @frontAxis.setter
    def frontAxis(self, value): ...
    @property
    def frontTwist(self): ...
    @frontTwist.setter
    def frontTwist(self, value): ...
    @property
    def inverseFront(self): ...
    @inverseFront.setter
    def inverseFront(self, value): ...
    @property
    def inverseUp(self): ...
    @inverseUp.setter
    def inverseUp(self, value): ...
    @property
    def normal(self): ...
    @normal.setter
    def normal(self, value): ...
    @property
    def orientMatrix(self): ...
    @orientMatrix.setter
    def orientMatrix(self, value): ...
    @property
    def orientationMarkerTime(self): ...
    @orientationMarkerTime.setter
    def orientationMarkerTime(self, value): ...
    @property
    def pathGeometry(self): ...
    @pathGeometry.setter
    def pathGeometry(self, value): ...
    @property
    def positionMarkerTime(self): ...
    @positionMarkerTime.setter
    def positionMarkerTime(self, value): ...
    @property
    def rotate(self): ...
    @rotate.setter
    def rotate(self, value): ...
    @property
    def rotateOrder(self): ...
    @rotateOrder.setter
    def rotateOrder(self, value): ...
    @property
    def rotateX(self): ...
    @rotateX.setter
    def rotateX(self, value): ...
    @property
    def rotateY(self): ...
    @rotateY.setter
    def rotateY(self, value): ...
    @property
    def rotateZ(self): ...
    @rotateZ.setter
    def rotateZ(self, value): ...
    @property
    def sideTwist(self): ...
    @sideTwist.setter
    def sideTwist(self, value): ...
    @property
    def uValue(self): ...
    @uValue.setter
    def uValue(self, value): ...
    @property
    def upAxis(self): ...
    @upAxis.setter
    def upAxis(self, value): ...
    @property
    def upTwist(self): ...
    @upTwist.setter
    def upTwist(self, value): ...
    @property
    def updateOrientationMarkers(self): ...
    @updateOrientationMarkers.setter
    def updateOrientationMarkers(self, value): ...
    @property
    def worldUpMatrix(self): ...
    @worldUpMatrix.setter
    def worldUpMatrix(self, value): ...
    @property
    def worldUpType(self): ...
    @worldUpType.setter
    def worldUpType(self, value): ...
    @property
    def worldUpVector(self): ...
    @worldUpVector.setter
    def worldUpVector(self, value): ...
    @property
    def worldUpVectorX(self): ...
    @worldUpVectorX.setter
    def worldUpVectorX(self, value): ...
    @property
    def worldUpVectorY(self): ...
    @worldUpVectorY.setter
    def worldUpVectorY(self, value): ...
    @property
    def worldUpVectorZ(self): ...
    @worldUpVectorZ.setter
    def worldUpVectorZ(self, value): ...
    @property
    def xCoordinate(self): ...
    @xCoordinate.setter
    def xCoordinate(self, value): ...
    @property
    def yCoordinate(self): ...
    @yCoordinate.setter
    def yCoordinate(self, value): ...
    @property
    def zCoordinate(self): ...
    @zCoordinate.setter
    def zCoordinate(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kUpNormal : int
    
    kUpObject : int
    
    kUpObjectRotation : int
    
    kUpScene : int
    
    kUpVector : int


class MPxUITableControl(MPxUIControl):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addToSelection(self, *args): ...
    def allowEdit(self, *args): ...
    def allowSelection(self, *args): ...
    def cellString(self, *args): ...
    def clearSelection(self, *args): ...
    def collapseOrExpandRow(self, *args): ...
    def getCellColor(self, *args): ...
    def isSelected(self, *args): ...
    def labelString(self, *args): ...
    def numberOfColumns(self, *args): ...
    def numberOfRows(self, *args): ...
    def redrawCells(self, *args): ...
    def redrawLabels(self, *args): ...
    def removeFromSelection(self, *args): ...
    def setNumberOfColumns(self, *args): ...
    def setNumberOfRows(self, *args): ...
    def setSelection(self, *args): ...
    def suspendUpdates(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kAllLabels : int
    
    kColumnLabel : int
    
    kNoLabel : int
    
    kRowLabel : int


class MPxConstraintCommand(MPxCommand):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def aimVectorAttribute(self, *args): ...
    def appendSyntax(self, *args): ...
    def connectObjectAndConstraint(self, *args): ...
    def connectTarget(self, *args): ...
    def constraintEnableRestAttribute(self, *args): ...
    def constraintInstancedAttribute(self, *args): ...
    def constraintNode(self, *args): ...
    def constraintOutputAttribute(self, *args): ...
    def constraintRestAttribute(self, *args): ...
    def constraintTargetAttribute(self, *args): ...
    def constraintTargetInstancedAttribute(self, *args): ...
    def constraintTargetWeightAttribute(self, *args): ...
    def constraintTypeId(self, *args): ...
    def createdConstraint(self, *args): ...
    def doCreate(self, *args): ...
    def doEdit(self, *args): ...
    def doIt(self, *args): ...
    def doQuery(self, *args): ...
    def getObjectAttributesArray(self, *args): ...
    def handleNewTargets(self, *args): ...
    def hasVectorFlags(self, *args): ...
    def objectAttribute(self, *args): ...
    def offsetAttribute(self, *args): ...
    def parseArgs(self, *args): ...
    def redoIt(self, *args): ...
    def setRestPosition(self, *args): ...
    def supportsOffset(self, *args): ...
    def targetType(self, *args): ...
    def undoIt(self, *args): ...
    def upVectorAttribute(self, *args): ...
    def worldUpMatrixAttribute(self, *args): ...
    def worldUpTypeAttribute(self, *args): ...
    def worldUpVectorAttribute(self, *args): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kGeometryShape : int
    
    kLast : int
    
    kTransform : int


class MPxManipulatorNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addDependentPlug(self, *args): ...
    def addDoubleValue(self, *args): ...
    def addPointValue(self, *args): ...
    def addVectorValue(self, *args): ...
    def colorAndName(self, *args): ...
    def connectPlugToValue(self, *args): ...
    def connectToDependNode(self, *args): ...
    def dependentPlugsReset(self, *args): ...
    def deregisterForMouseMove(self, *args): ...
    def dimmedColor(self, *args): ...
    def doDrag(self, *args): ...
    def doMove(self, *args): ...
    def doPress(self, *args): ...
    def doRelease(self, *args): ...
    def draw(self, *args): ...
    def finishAddingManips(self, *args): ...
    def getDoubleValue(self, *args): ...
    def getInstancePtr(self, *args): ...
    def getPointValue(self, *args): ...
    def getVectorValue(self, *args): ...
    def glActiveName(self, *args): ...
    def glFirstHandle(self, *args): ...
    def labelBackgroundColor(self, *args): ...
    def labelColor(self, *args): ...
    def lineColor(self, *args): ...
    def mainColor(self, *args): ...
    def mouseDown(self, *args): ...
    def mousePosition(self, *args): ...
    def mouseRay(self, *args): ...
    def mouseRayWorld(self, *args): ...
    def mouseUp(self, *args): ...
    def prevColor(self, *args): ...
    def registerForMouseMove(self, *args): ...
    def selectedColor(self, *args): ...
    def setDoubleValue(self, *args): ...
    def setHandleColor(self, *args): ...
    def setInstancePtr(self, *args): ...
    def setPointValue(self, *args): ...
    def setVectorValue(self, *args): ...
    def shouldDrawHandleAsSelected(self, *args): ...
    def xColor(self, *args): ...
    def yColor(self, *args): ...
    def zColor(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    @property
    def connectedNodes(self): ...
    @connectedNodes.setter
    def connectedNodes(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxGeometryData(MPxData):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def copy(self, *args): ...
    def deleteComponent(self, *args): ...
    def deleteComponentsFromGroups(self, *args): ...
    def iterator(self, *args): ...
    def matrix(self, *args): ...
    def name(self, *args): ...
    def setMatrix(self, *args): ...
    def smartCopy(self, *args): ...
    def typeId(self, *args): ...
    def updateCompleteVertexGroup(self, *args): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxSurfaceShape(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def acceptsGeometryIterator(self, *args): ...
    def activeComponents(self, *args): ...
    def boundingBox(self, *args): ...
    def cachedShapeAttr(self, *args): ...
    def canMakeLive(self, *args): ...
    def childChanged(self, *args): ...
    def closestPoint(self, *args): ...
    def componentToPlugs(self, *args): ...
    def convertToTweakNodePlug(self, *args): ...
    def createFullRenderGroup(self, *args): ...
    def createFullVertexGroup(self, *args): ...
    def deleteComponents(self, *args): ...
    def evalNodeAffectsDrawDb(self, *args): ...
    def excludeAsPluginShape(self, *args): ...
    def geometryData(self, *args): ...
    def geometryIteratorSetup(self, *args): ...
    def getComponentSelectionMask(self, *args): ...
    def getShapeSelectionMask(self, *args): ...
    def getWorldMatrix(self, *args): ...
    def hasActiveComponents(self, *args): ...
    def isBounded(self, *args): ...
    def isRenderable(self, *args): ...
    def localShapeInAttr(self, *args): ...
    def localShapeOutAttr(self, *args): ...
    def match(self, *args): ...
    def matchComponent(self, *args): ...
    def newControlPointComponent(self, *args): ...
    def pointAtParm(self, *args): ...
    def renderGroupComponentType(self, *args): ...
    def setRenderable(self, *args): ...
    def transformUsing(self, *args): ...
    def tweakUsing(self, *args): ...
    def type(self, *args): ...
    def undeleteComponents(self, *args): ...
    def vertexOffsetDirection(self, *args): ...
    def weightedTransformUsing(self, *args): ...
    def weightedTweakUsing(self, *args): ...
    def worldShapeOutAttr(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def boundingBoxCenterX(self): ...
    @boundingBoxCenterX.setter
    def boundingBoxCenterX(self, value): ...
    @property
    def boundingBoxCenterY(self): ...
    @boundingBoxCenterY.setter
    def boundingBoxCenterY(self, value): ...
    @property
    def boundingBoxCenterZ(self): ...
    @boundingBoxCenterZ.setter
    def boundingBoxCenterZ(self, value): ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value): ...
    @property
    def instObjGroups(self): ...
    @instObjGroups.setter
    def instObjGroups(self, value): ...
    @property
    def intermediateObject(self): ...
    @intermediateObject.setter
    def intermediateObject(self, value): ...
    @property
    def inverseMatrix(self): ...
    @inverseMatrix.setter
    def inverseMatrix(self, value): ...
    @property
    def isTemplated(self): ...
    @isTemplated.setter
    def isTemplated(self, value): ...
    @property
    def mControlPoints(self): ...
    @mControlPoints.setter
    def mControlPoints(self, value): ...
    @property
    def mControlValueX(self): ...
    @mControlValueX.setter
    def mControlValueX(self, value): ...
    @property
    def mControlValueY(self): ...
    @mControlValueY.setter
    def mControlValueY(self, value): ...
    @property
    def mControlValueZ(self): ...
    @mControlValueZ.setter
    def mControlValueZ(self, value): ...
    @property
    def mHasHistoryOnCreate(self): ...
    @mHasHistoryOnCreate.setter
    def mHasHistoryOnCreate(self, value): ...
    @property
    def matrix(self): ...
    @matrix.setter
    def matrix(self, value): ...
    @property
    def nodeBoundingBox(self): ...
    @nodeBoundingBox.setter
    def nodeBoundingBox(self, value): ...
    @property
    def nodeBoundingBoxMax(self): ...
    @nodeBoundingBoxMax.setter
    def nodeBoundingBoxMax(self, value): ...
    @property
    def nodeBoundingBoxMaxX(self): ...
    @nodeBoundingBoxMaxX.setter
    def nodeBoundingBoxMaxX(self, value): ...
    @property
    def nodeBoundingBoxMaxY(self): ...
    @nodeBoundingBoxMaxY.setter
    def nodeBoundingBoxMaxY(self, value): ...
    @property
    def nodeBoundingBoxMaxZ(self): ...
    @nodeBoundingBoxMaxZ.setter
    def nodeBoundingBoxMaxZ(self, value): ...
    @property
    def nodeBoundingBoxMin(self): ...
    @nodeBoundingBoxMin.setter
    def nodeBoundingBoxMin(self, value): ...
    @property
    def nodeBoundingBoxMinX(self): ...
    @nodeBoundingBoxMinX.setter
    def nodeBoundingBoxMinX(self, value): ...
    @property
    def nodeBoundingBoxMinY(self): ...
    @nodeBoundingBoxMinY.setter
    def nodeBoundingBoxMinY(self, value): ...
    @property
    def nodeBoundingBoxMinZ(self): ...
    @nodeBoundingBoxMinZ.setter
    def nodeBoundingBoxMinZ(self, value): ...
    @property
    def nodeBoundingBoxSize(self): ...
    @nodeBoundingBoxSize.setter
    def nodeBoundingBoxSize(self, value): ...
    @property
    def nodeBoundingBoxSizeX(self): ...
    @nodeBoundingBoxSizeX.setter
    def nodeBoundingBoxSizeX(self, value): ...
    @property
    def nodeBoundingBoxSizeY(self): ...
    @nodeBoundingBoxSizeY.setter
    def nodeBoundingBoxSizeY(self, value): ...
    @property
    def nodeBoundingBoxSizeZ(self): ...
    @nodeBoundingBoxSizeZ.setter
    def nodeBoundingBoxSizeZ(self, value): ...
    @property
    def objectColor(self): ...
    @objectColor.setter
    def objectColor(self, value): ...
    @property
    def objectGroupColor(self): ...
    @objectGroupColor.setter
    def objectGroupColor(self, value): ...
    @property
    def objectGroupId(self): ...
    @objectGroupId.setter
    def objectGroupId(self, value): ...
    @property
    def objectGroups(self): ...
    @objectGroups.setter
    def objectGroups(self, value): ...
    @property
    def objectGrpCompList(self): ...
    @objectGrpCompList.setter
    def objectGrpCompList(self, value): ...
    @property
    def parentInverseMatrix(self): ...
    @parentInverseMatrix.setter
    def parentInverseMatrix(self, value): ...
    @property
    def parentMatrix(self): ...
    @parentMatrix.setter
    def parentMatrix(self, value): ...
    @property
    def useObjectColor(self): ...
    @useObjectColor.setter
    def useObjectColor(self, value): ...
    @property
    def visibility(self): ...
    @visibility.setter
    def visibility(self, value): ...
    @property
    def worldInverseMatrix(self): ...
    @worldInverseMatrix.setter
    def worldInverseMatrix(self, value): ...
    @property
    def worldMatrix(self): ...
    @worldMatrix.setter
    def worldMatrix(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kBoundingBoxChanged : int
    
    kMatchInvalidAttribute : int
    
    kMatchInvalidAttributeDim : int
    
    kMatchInvalidAttributeIndex : int
    
    kMatchInvalidAttributeRange : int
    
    kMatchInvalidName : int
    
    kMatchNone : int
    
    kMatchOk : int
    
    kMatchTooMany : int
    
    kNoPointCaching : int
    
    kNormal : int
    
    kObjectChanged : int
    
    kRestorePoints : int
    
    kSavePoints : int
    
    kTransformOriginalPoints : int
    
    kUTangent : int
    
    kUVNTriad : int
    
    kUpdatePoints : int
    
    kVTangent : int


class MPxSelectionContext(MPxContext):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def abortAction(self, *args): ...
    def addManipulator(self, *args): ...
    def argTypeNumericalInput(self, *args): ...
    def deleteManipulators(self, *args): ...
    def doDrag(self, *args): ...
    def doHold(self, *args): ...
    def doPress(self, *args): ...
    def doRelease(self, *args): ...
    def feedbackNumericalInput(self, *args): ...
    def helpStateHasChanged(self, *args): ...
    def image(self, *args): ...
    def newToolCommand(self, *args): ...
    def processNumericalInput(self, *args): ...
    def setAllowDoubleClickAction(self, *args): ...
    def setAllowPreSelectHilight(self, *args): ...
    def setAllowSoftSelect(self, *args): ...
    def setAllowSymmetry(self, *args): ...
    def setImage(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxPolyTrg(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def compute(self, *args): ...
    def isAbstractClass(self, *args): ...
    def postConstructor(self, *args): ...
    def registerTrgFunction(self, *args): ...
    def unregisterTrgFunction(self, *args): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxSpringNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def applySpringLaw(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def mDeltaTime(self): ...
    @mDeltaTime.setter
    def mDeltaTime(self, value): ...
    @property
    def mEnd1Weight(self): ...
    @mEnd1Weight.setter
    def mEnd1Weight(self, value): ...
    @property
    def mEnd2Weight(self): ...
    @mEnd2Weight.setter
    def mEnd2Weight(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxLocatorNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def boundingBox(self, *args): ...
    def closestPoint(self, *args): ...
    def color(self, *args): ...
    def colorRGB(self, *args): ...
    def draw(self, *args): ...
    def drawLast(self, *args): ...
    def excludeAsLocator(self, *args): ...
    def getShapeSelectionMask(self, *args): ...
    def isBounded(self, *args): ...
    def isTransparent(self, *args): ...
    def type(self, *args): ...
    def useClosestPointForSelection(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def boundingBoxCenterX(self): ...
    @boundingBoxCenterX.setter
    def boundingBoxCenterX(self, value): ...
    @property
    def boundingBoxCenterY(self): ...
    @boundingBoxCenterY.setter
    def boundingBoxCenterY(self, value): ...
    @property
    def boundingBoxCenterZ(self): ...
    @boundingBoxCenterZ.setter
    def boundingBoxCenterZ(self, value): ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value): ...
    @property
    def instObjGroups(self): ...
    @instObjGroups.setter
    def instObjGroups(self, value): ...
    @property
    def intermediateObject(self): ...
    @intermediateObject.setter
    def intermediateObject(self, value): ...
    @property
    def inverseMatrix(self): ...
    @inverseMatrix.setter
    def inverseMatrix(self, value): ...
    @property
    def isTemplated(self): ...
    @isTemplated.setter
    def isTemplated(self, value): ...
    @property
    def localPosition(self): ...
    @localPosition.setter
    def localPosition(self, value): ...
    @property
    def localPositionX(self): ...
    @localPositionX.setter
    def localPositionX(self, value): ...
    @property
    def localPositionY(self): ...
    @localPositionY.setter
    def localPositionY(self, value): ...
    @property
    def localPositionZ(self): ...
    @localPositionZ.setter
    def localPositionZ(self, value): ...
    @property
    def localScale(self): ...
    @localScale.setter
    def localScale(self, value): ...
    @property
    def localScaleX(self): ...
    @localScaleX.setter
    def localScaleX(self, value): ...
    @property
    def localScaleY(self): ...
    @localScaleY.setter
    def localScaleY(self, value): ...
    @property
    def localScaleZ(self): ...
    @localScaleZ.setter
    def localScaleZ(self, value): ...
    @property
    def matrix(self): ...
    @matrix.setter
    def matrix(self, value): ...
    @property
    def nodeBoundingBox(self): ...
    @nodeBoundingBox.setter
    def nodeBoundingBox(self, value): ...
    @property
    def nodeBoundingBoxMax(self): ...
    @nodeBoundingBoxMax.setter
    def nodeBoundingBoxMax(self, value): ...
    @property
    def nodeBoundingBoxMaxX(self): ...
    @nodeBoundingBoxMaxX.setter
    def nodeBoundingBoxMaxX(self, value): ...
    @property
    def nodeBoundingBoxMaxY(self): ...
    @nodeBoundingBoxMaxY.setter
    def nodeBoundingBoxMaxY(self, value): ...
    @property
    def nodeBoundingBoxMaxZ(self): ...
    @nodeBoundingBoxMaxZ.setter
    def nodeBoundingBoxMaxZ(self, value): ...
    @property
    def nodeBoundingBoxMin(self): ...
    @nodeBoundingBoxMin.setter
    def nodeBoundingBoxMin(self, value): ...
    @property
    def nodeBoundingBoxMinX(self): ...
    @nodeBoundingBoxMinX.setter
    def nodeBoundingBoxMinX(self, value): ...
    @property
    def nodeBoundingBoxMinY(self): ...
    @nodeBoundingBoxMinY.setter
    def nodeBoundingBoxMinY(self, value): ...
    @property
    def nodeBoundingBoxMinZ(self): ...
    @nodeBoundingBoxMinZ.setter
    def nodeBoundingBoxMinZ(self, value): ...
    @property
    def nodeBoundingBoxSize(self): ...
    @nodeBoundingBoxSize.setter
    def nodeBoundingBoxSize(self, value): ...
    @property
    def nodeBoundingBoxSizeX(self): ...
    @nodeBoundingBoxSizeX.setter
    def nodeBoundingBoxSizeX(self, value): ...
    @property
    def nodeBoundingBoxSizeY(self): ...
    @nodeBoundingBoxSizeY.setter
    def nodeBoundingBoxSizeY(self, value): ...
    @property
    def nodeBoundingBoxSizeZ(self): ...
    @nodeBoundingBoxSizeZ.setter
    def nodeBoundingBoxSizeZ(self, value): ...
    @property
    def objectColor(self): ...
    @objectColor.setter
    def objectColor(self, value): ...
    @property
    def objectGroupColor(self): ...
    @objectGroupColor.setter
    def objectGroupColor(self, value): ...
    @property
    def objectGroupId(self): ...
    @objectGroupId.setter
    def objectGroupId(self, value): ...
    @property
    def objectGroups(self): ...
    @objectGroups.setter
    def objectGroups(self, value): ...
    @property
    def objectGrpCompList(self): ...
    @objectGrpCompList.setter
    def objectGrpCompList(self, value): ...
    @property
    def parentInverseMatrix(self): ...
    @parentInverseMatrix.setter
    def parentInverseMatrix(self, value): ...
    @property
    def parentMatrix(self): ...
    @parentMatrix.setter
    def parentMatrix(self, value): ...
    @property
    def underWorldObject(self): ...
    @underWorldObject.setter
    def underWorldObject(self, value): ...
    @property
    def useObjectColor(self): ...
    @useObjectColor.setter
    def useObjectColor(self, value): ...
    @property
    def visibility(self): ...
    @visibility.setter
    def visibility(self, value): ...
    @property
    def worldInverseMatrix(self): ...
    @worldInverseMatrix.setter
    def worldInverseMatrix(self, value): ...
    @property
    def worldMatrix(self): ...
    @worldMatrix.setter
    def worldMatrix(self, value): ...
    @property
    def worldPosition(self): ...
    @worldPosition.setter
    def worldPosition(self, value): ...
    @property
    def worldPositionX(self): ...
    @worldPositionX.setter
    def worldPositionX(self, value): ...
    @property
    def worldPositionY(self): ...
    @worldPositionY.setter
    def worldPositionY(self, value): ...
    @property
    def worldPositionZ(self): ...
    @worldPositionZ.setter
    def worldPositionZ(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxIkSolverNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def create(self, *args): ...
    def doSolve(self, *args): ...
    def funcValueTolerance(self, *args): ...
    def groupHandlesByTopology(self, *args): ...
    def handleGroup(self, *args): ...
    def hasJointLimitSupport(self, *args): ...
    def hasUniqueSolution(self, *args): ...
    def isAttributeCreatedBySolver(self, *args): ...
    def isPositionOnly(self, *args): ...
    def isSingleChainOnly(self, *args): ...
    def maxIterations(self, *args): ...
    def positionOnly(self, *args): ...
    def postSolve(self, *args): ...
    def preSolve(self, *args): ...
    def rotatePlane(self, *args): ...
    def setFuncValueTolerance(self, *args): ...
    def setHandleGroup(self, *args): ...
    def setMaxIterations(self, *args): ...
    def setPositionOnly(self, *args): ...
    def setRotatePlane(self, *args): ...
    def setSingleChainOnly(self, *args): ...
    def setSupportJointLimits(self, *args): ...
    def setUniqueSolution(self, *args): ...
    def singleChainOnly(self, *args): ...
    def snapHandle(self, *args): ...
    def solverTypeName(self, *args): ...
    def supportJointLimits(self, *args): ...
    def toSolverSpace(self, *args): ...
    def toWorldSpace(self, *args): ...
    def type(self, *args): ...
    def uniqueSolution(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxMultiPolyTweakUVCommand(MPxCommand):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def getTweakedUVs(self, *args): ...
    def parseSyntax(self, *args): ...
    def preProcessUVs(self, *args): ...
    @staticmethod
    def newSyntax(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxObjectSet(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def canBeDeleted(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def DNSetMembers(self): ...
    @DNSetMembers.setter
    def DNSetMembers(self, value): ...
    @property
    def annotation(self): ...
    @annotation.setter
    def annotation(self, value): ...
    @property
    def dagSetMembers(self): ...
    @dagSetMembers.setter
    def dagSetMembers(self, value): ...
    @property
    def edgesOnlySet(self): ...
    @edgesOnlySet.setter
    def edgesOnlySet(self, value): ...
    @property
    def editPointsOnlySet(self): ...
    @editPointsOnlySet.setter
    def editPointsOnlySet(self, value): ...
    @property
    def facetsOnlySet(self): ...
    @facetsOnlySet.setter
    def facetsOnlySet(self, value): ...
    @property
    def groupNodes(self): ...
    @groupNodes.setter
    def groupNodes(self, value): ...
    @property
    def isLayer(self): ...
    @isLayer.setter
    def isLayer(self, value): ...
    @property
    def memberWireframeColor(self): ...
    @memberWireframeColor.setter
    def memberWireframeColor(self, value): ...
    @property
    def partition(self): ...
    @partition.setter
    def partition(self, value): ...
    @property
    def renderableOnlySet(self): ...
    @renderableOnlySet.setter
    def renderableOnlySet(self, value): ...
    @property
    def usedByNodes(self): ...
    @usedByNodes.setter
    def usedByNodes(self, value): ...
    @property
    def verticesOnlySet(self): ...
    @verticesOnlySet.setter
    def verticesOnlySet(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxCameraSet(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def active(self): ...
    @active.setter
    def active(self, value): ...
    @property
    def camera(self): ...
    @camera.setter
    def camera(self, value): ...
    @property
    def cameraLayer(self): ...
    @cameraLayer.setter
    def cameraLayer(self, value): ...
    @property
    def order(self): ...
    @order.setter
    def order(self, value): ...
    @property
    def sceneData(self): ...
    @sceneData.setter
    def sceneData(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxParticleAttributeMapperNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def compute(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def computeNode(self): ...
    @computeNode.setter
    def computeNode(self, value): ...
    @property
    def computeNodeColor(self): ...
    @computeNodeColor.setter
    def computeNodeColor(self, value): ...
    @property
    def computeNodeColorB(self): ...
    @computeNodeColorB.setter
    def computeNodeColorB(self, value): ...
    @property
    def computeNodeColorG(self): ...
    @computeNodeColorG.setter
    def computeNodeColorG(self, value): ...
    @property
    def computeNodeColorR(self): ...
    @computeNodeColorR.setter
    def computeNodeColorR(self, value): ...
    @property
    def outColorPP(self): ...
    @outColorPP.setter
    def outColorPP(self, value): ...
    @property
    def outMaxValue(self): ...
    @outMaxValue.setter
    def outMaxValue(self, value): ...
    @property
    def outMinValue(self): ...
    @outMinValue.setter
    def outMinValue(self, value): ...
    @property
    def outValuePP(self): ...
    @outValuePP.setter
    def outValuePP(self, value): ...
    @property
    def time(self): ...
    @time.setter
    def time(self, value): ...
    @property
    def uCoordPP(self): ...
    @uCoordPP.setter
    def uCoordPP(self, value): ...
    @property
    def vCoordPP(self): ...
    @vCoordPP.setter
    def vCoordPP(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxManipContainer(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def addCircleSweepManip(self, *args): ...
    def addCurveSegmentManip(self, *args): ...
    def addDirectionManip(self, *args): ...
    def addDiscManip(self, *args): ...
    def addDistanceManip(self, *args): ...
    def addFreePointTriadManip(self, *args): ...
    def addMPxManipulatorNode(self, *args): ...
    def addManipToPlugConversion(self, *args): ...
    def addPlugToInViewEditor(self, *args): ...
    def addPlugToManipConversion(self, *args): ...
    def addPointOnCurveManip(self, *args): ...
    def addPointOnSurfaceManip(self, *args): ...
    def addRotateManip(self, *args): ...
    def addScaleManip(self, *args): ...
    def addStateManip(self, *args): ...
    def addToggleManip(self, *args): ...
    def connectToDependNode(self, *args): ...
    def createChildren(self, *args): ...
    def doDrag(self, *args): ...
    def doPress(self, *args): ...
    def doRelease(self, *args): ...
    def draw(self, *args): ...
    def finishAddingManips(self, *args): ...
    def getConverterManipValue(self, *args): ...
    def getConverterPlugValue(self, *args): ...
    def isManipActive(self, *args): ...
    def manipToPlugConversion(self, *args): ...
    def plugToManipConversion(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def addToManipConnectTable(*args, **kwargs): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def initialize(*args, **kwargs): ...
    @staticmethod
    def newManipulator(*args, **kwargs): ...
    @staticmethod
    def removeFromManipConnectTable(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kCircleSweepManip : int
    
    kCurveSegmentManip : int
    
    kCustomManip : int
    
    kDirectionManip : int
    
    kDiscManip : int
    
    kDistanceManip : int
    
    kFreePointTriadManip : int
    
    kPointOnCurveManip : int
    
    kPointOnSurfaceManip : int
    
    kStateManip : int
    
    kToggleManip : int


class MPxConstraint(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def constraintRotateOrderAttribute(self, *args): ...
    def getOutputAttributes(self, *args): ...
    def passiveOutputAttribute(self, *args): ...
    def targetAttribute(self, *args): ...
    def weightAttribute(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def enableRestPosition(self): ...
    @enableRestPosition.setter
    def enableRestPosition(self, value): ...
    @property
    def lockOutput(self): ...
    @lockOutput.setter
    def lockOutput(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kLast : int
    
    kObject : int
    
    kObjectRotation : int
    
    kScene : int
    
    kVector : int


class MPxAssembly(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def activate(self, *args): ...
    def activateRep(self, *args): ...
    def activating(self, *args): ...
    def addAddAttrEdit(self, *args): ...
    def addConnectAttrEdit(self, *args): ...
    def addDeleteAttrEdit(self, *args): ...
    def addDisconnectAttrEdit(self, *args): ...
    def addEdits(self, *args): ...
    def addParentEdit(self, *args): ...
    def addSetAttrEdit(self, *args): ...
    def beforeSave(self, *args): ...
    def canRepApplyEdits(self, *args): ...
    def createRepresentation(self, *args): ...
    def deleteAllRepresentations(self, *args): ...
    def deleteRepresentation(self, *args): ...
    def existWithoutInConnections(self, *args): ...
    def existWithoutOutConnections(self, *args): ...
    def getActive(self, *args): ...
    def getInitialRep(self, *args): ...
    def getInstancePtr(self, *args): ...
    def getRepLabel(self, *args): ...
    def getRepNamespace(self, *args): ...
    def getRepType(self, *args): ...
    def getRepresentations(self, *args): ...
    def handlesAddEdits(self, *args): ...
    def inactivateRep(self, *args): ...
    def isActive(self, *args): ...
    def memberAdded(self, *args): ...
    def memberRemoved(self, *args): ...
    def name(self, *args): ...
    def performActivate(self, *args): ...
    def performInactivate(self, *args): ...
    def postActivateRep(self, *args): ...
    def postApplyEdits(self, *args): ...
    def postLoad(self, *args): ...
    def postUnapplyEdits(self, *args): ...
    def preApplyEdits(self, *args): ...
    def preUnapplyEdits(self, *args): ...
    def repTypes(self, *args): ...
    def setExistWithoutInConnections(self, *args): ...
    def setExistWithoutOutConnections(self, *args): ...
    def setInstancePtr(self, *args): ...
    def setRepLabel(self, *args): ...
    def setRepName(self, *args): ...
    def supportsEdits(self, *args): ...
    def supportsMemberChanges(self, *args): ...
    def thisMObject(self, *args): ...
    def type(self, *args): ...
    def typeId(self, *args): ...
    def typeName(self, *args): ...
    def updateRepNamespace(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxTexContext(MPxContext):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def newToolCommand(self, *args): ...
    def portSize(self, *args): ...
    def portToView(self, *args): ...
    def viewRect(self, *args): ...
    def viewToPort(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def getMarqueeSelection(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxHardwareShader(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def profile(self, *args): ...
    def render(self, *args): ...
    def renderSwatchImage(self, *args): ...
    def setUniformParameters(self, *args): ...
    def setVaryingParameters(self, *args): ...
    def transparencyOptions(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def findResource(*args, **kwargs): ...
    @staticmethod
    def getHardwareShaderPtr(*args, **kwargs): ...
    @property
    def outColor(self): ...
    @outColor.setter
    def outColor(self, value): ...
    @property
    def outColorB(self): ...
    @outColorB.setter
    def outColorB(self, value): ...
    @property
    def outColorG(self): ...
    @outColorG.setter
    def outColorG(self, value): ...
    @property
    def outColorR(self): ...
    @outColorR.setter
    def outColorR(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict
    
    kIsTransparent : int
    
    kNoTransparencyFrontBackCull : int
    
    kNoTransparencyPolygonSort : int


class MPxImagePlane(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def exactImageFile(self, *args): ...
    def loadImageMap(self, *args): ...
    def refreshImage(self, *args): ...
    def setImageDirty(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def alphaGain(self): ...
    @alphaGain.setter
    def alphaGain(self, value): ...
    @property
    def alreadyPremult(self): ...
    @alreadyPremult.setter
    def alreadyPremult(self, value): ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value): ...
    @property
    def centerX(self): ...
    @centerX.setter
    def centerX(self, value): ...
    @property
    def centerY(self): ...
    @centerY.setter
    def centerY(self, value): ...
    @property
    def centerZ(self): ...
    @centerZ.setter
    def centerZ(self, value): ...
    @property
    def colorGain(self): ...
    @colorGain.setter
    def colorGain(self, value): ...
    @property
    def colorGainB(self): ...
    @colorGainB.setter
    def colorGainB(self, value): ...
    @property
    def colorGainG(self): ...
    @colorGainG.setter
    def colorGainG(self, value): ...
    @property
    def colorGainR(self): ...
    @colorGainR.setter
    def colorGainR(self, value): ...
    @property
    def colorOffset(self): ...
    @colorOffset.setter
    def colorOffset(self, value): ...
    @property
    def colorOffsetB(self): ...
    @colorOffsetB.setter
    def colorOffsetB(self, value): ...
    @property
    def colorOffsetG(self): ...
    @colorOffsetG.setter
    def colorOffsetG(self, value): ...
    @property
    def colorOffsetR(self): ...
    @colorOffsetR.setter
    def colorOffsetR(self, value): ...
    @property
    def composite(self): ...
    @composite.setter
    def composite(self, value): ...
    @property
    def coverage(self): ...
    @coverage.setter
    def coverage(self, value): ...
    @property
    def coverageOrigin(self): ...
    @coverageOrigin.setter
    def coverageOrigin(self, value): ...
    @property
    def coverageOriginX(self): ...
    @coverageOriginX.setter
    def coverageOriginX(self, value): ...
    @property
    def coverageOriginY(self): ...
    @coverageOriginY.setter
    def coverageOriginY(self, value): ...
    @property
    def coverageX(self): ...
    @coverageX.setter
    def coverageX(self, value): ...
    @property
    def coverageY(self): ...
    @coverageY.setter
    def coverageY(self, value): ...
    @property
    def depth(self): ...
    @depth.setter
    def depth(self, value): ...
    @property
    def depthBias(self): ...
    @depthBias.setter
    def depthBias(self, value): ...
    @property
    def depthFile(self): ...
    @depthFile.setter
    def depthFile(self, value): ...
    @property
    def depthOversample(self): ...
    @depthOversample.setter
    def depthOversample(self, value): ...
    @property
    def depthScale(self): ...
    @depthScale.setter
    def depthScale(self, value): ...
    @property
    def displayMode(self): ...
    @displayMode.setter
    def displayMode(self, value): ...
    @property
    def displayOnlyIfCurrent(self): ...
    @displayOnlyIfCurrent.setter
    def displayOnlyIfCurrent(self, value): ...
    @property
    def fit(self): ...
    @fit.setter
    def fit(self, value): ...
    @property
    def frameExtension(self): ...
    @frameExtension.setter
    def frameExtension(self, value): ...
    @property
    def frameOffset(self): ...
    @frameOffset.setter
    def frameOffset(self, value): ...
    @property
    def height(self): ...
    @height.setter
    def height(self, value): ...
    @property
    def imageName(self): ...
    @imageName.setter
    def imageName(self, value): ...
    @property
    def imageType(self): ...
    @imageType.setter
    def imageType(self, value): ...
    @property
    def lockedToCamera(self): ...
    @lockedToCamera.setter
    def lockedToCamera(self, value): ...
    @property
    def maxShadingSamples(self): ...
    @maxShadingSamples.setter
    def maxShadingSamples(self, value): ...
    @property
    def offset(self): ...
    @offset.setter
    def offset(self, value): ...
    @property
    def offsetX(self): ...
    @offsetX.setter
    def offsetX(self, value): ...
    @property
    def offsetY(self): ...
    @offsetY.setter
    def offsetY(self, value): ...
    @property
    def rotate(self): ...
    @rotate.setter
    def rotate(self, value): ...
    @property
    def separateDepth(self): ...
    @separateDepth.setter
    def separateDepth(self, value): ...
    @property
    def shadingSamples(self): ...
    @shadingSamples.setter
    def shadingSamples(self, value): ...
    @property
    def shadingSamplesOverride(self): ...
    @shadingSamplesOverride.setter
    def shadingSamplesOverride(self, value): ...
    @property
    def size(self): ...
    @size.setter
    def size(self, value): ...
    @property
    def sizeX(self): ...
    @sizeX.setter
    def sizeX(self, value): ...
    @property
    def sizeY(self): ...
    @sizeY.setter
    def sizeY(self, value): ...
    @property
    def sourceTexture(self): ...
    @sourceTexture.setter
    def sourceTexture(self, value): ...
    @property
    def squeezeCorrection(self): ...
    @squeezeCorrection.setter
    def squeezeCorrection(self, value): ...
    @property
    def useDepthMap(self): ...
    @useDepthMap.setter
    def useDepthMap(self, value): ...
    @property
    def useFrameExtension(self): ...
    @useFrameExtension.setter
    def useFrameExtension(self, value): ...
    @property
    def visibleInReflections(self): ...
    @visibleInReflections.setter
    def visibleInReflections(self, value): ...
    @property
    def visibleInRefractions(self): ...
    @visibleInRefractions.setter
    def visibleInRefractions(self, value): ...
    @property
    def width(self): ...
    @width.setter
    def width(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxFieldNode(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def compute(self, *args): ...
    def draw(self, *args): ...
    def falloffCurve(self, *args): ...
    def getForceAtPoint(self, *args): ...
    def iconBitmap(self, *args): ...
    def iconSizeAndOrigin(self, *args): ...
    def isFalloffCurveConstantOne(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def mApplyPerVertex(self): ...
    @mApplyPerVertex.setter
    def mApplyPerVertex(self, value): ...
    @property
    def mAttenuation(self): ...
    @mAttenuation.setter
    def mAttenuation(self, value): ...
    @property
    def mDeltaTime(self): ...
    @mDeltaTime.setter
    def mDeltaTime(self, value): ...
    @property
    def mInputData(self): ...
    @mInputData.setter
    def mInputData(self, value): ...
    @property
    def mInputForce(self): ...
    @mInputForce.setter
    def mInputForce(self, value): ...
    @property
    def mInputMass(self): ...
    @mInputMass.setter
    def mInputMass(self, value): ...
    @property
    def mInputPPData(self): ...
    @mInputPPData.setter
    def mInputPPData(self, value): ...
    @property
    def mInputPositions(self): ...
    @mInputPositions.setter
    def mInputPositions(self, value): ...
    @property
    def mInputVelocities(self): ...
    @mInputVelocities.setter
    def mInputVelocities(self, value): ...
    @property
    def mMagnitude(self): ...
    @mMagnitude.setter
    def mMagnitude(self, value): ...
    @property
    def mMaxDistance(self): ...
    @mMaxDistance.setter
    def mMaxDistance(self, value): ...
    @property
    def mOutputForce(self): ...
    @mOutputForce.setter
    def mOutputForce(self, value): ...
    @property
    def mOwnerCentroid(self): ...
    @mOwnerCentroid.setter
    def mOwnerCentroid(self, value): ...
    @property
    def mOwnerCentroidX(self): ...
    @mOwnerCentroidX.setter
    def mOwnerCentroidX(self, value): ...
    @property
    def mOwnerCentroidY(self): ...
    @mOwnerCentroidY.setter
    def mOwnerCentroidY(self, value): ...
    @property
    def mOwnerCentroidZ(self): ...
    @mOwnerCentroidZ.setter
    def mOwnerCentroidZ(self, value): ...
    @property
    def mOwnerPPData(self): ...
    @mOwnerPPData.setter
    def mOwnerPPData(self, value): ...
    @property
    def mOwnerPosData(self): ...
    @mOwnerPosData.setter
    def mOwnerPosData(self, value): ...
    @property
    def mOwnerVelData(self): ...
    @mOwnerVelData.setter
    def mOwnerVelData(self, value): ...
    @property
    def mUseMaxDistance(self): ...
    @mUseMaxDistance.setter
    def mUseMaxDistance(self, value): ...
    @property
    def mWorldMatrix(self): ...
    @mWorldMatrix.setter
    def mWorldMatrix(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxTransform(MPxNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def applyRotateOrientationLocks(self, *args): ...
    def applyRotatePivotLocks(self, *args): ...
    def applyRotatePivotLocksTranslate(self, *args): ...
    def applyRotationLimits(self, *args): ...
    def applyRotationLocks(self, *args): ...
    def applyScaleLimits(self, *args): ...
    def applyScaleLocks(self, *args): ...
    def applyScaleLocksPivot(self, *args): ...
    def applyScaleLocksPivotTranslate(self, *args): ...
    def applyShearLocks(self, *args): ...
    def applyTranslationLimits(self, *args): ...
    def applyTranslationLocks(self, *args): ...
    def assign(self, *args): ...
    def boundingBox(self, *args): ...
    def checkAndSetRotateOrientation(self, *args): ...
    def checkAndSetRotatePivot(self, *args): ...
    def checkAndSetRotatePivotTranslation(self, *args): ...
    def checkAndSetRotation(self, *args): ...
    def checkAndSetScale(self, *args): ...
    def checkAndSetScalePivot(self, *args): ...
    def checkAndSetScalePivotTranslation(self, *args): ...
    def checkAndSetShear(self, *args): ...
    def checkAndSetTranslation(self, *args): ...
    def clearLimits(self, *args): ...
    def compute(self, *args): ...
    def computeLocalTransformation(self, *args): ...
    def copyInternalData(self, *args): ...
    def createTransformationMatrix(self, *args): ...
    def enableLimit(self, *args): ...
    def getEulerRotation(self, *args): ...
    def getMatrix(self, *args): ...
    def getMatrixInverse(self, *args): ...
    def getRotateOrientation(self, *args): ...
    def getRotatePivot(self, *args): ...
    def getRotatePivotTranslation(self, *args): ...
    def getRotation(self, *args): ...
    def getRotationOrder(self, *args): ...
    def getScale(self, *args): ...
    def getScalePivot(self, *args): ...
    def getScalePivotTranslation(self, *args): ...
    def getShear(self, *args): ...
    def getTranslation(self, *args): ...
    def isBounded(self, *args): ...
    def isLimited(self, *args): ...
    def limitValue(self, *args): ...
    def postConstructor(self, *args): ...
    def resetTransformation(self, *args): ...
    def rotateBy(self, *args): ...
    def rotateTo(self, *args): ...
    def scaleBy(self, *args): ...
    def scaleTo(self, *args): ...
    def setLimit(self, *args): ...
    def setRotateOrientation(self, *args): ...
    def setRotatePivot(self, *args): ...
    def setRotatePivotTranslation(self, *args): ...
    def setRotationOrder(self, *args): ...
    def setScalePivot(self, *args): ...
    def setScalePivotTranslation(self, *args): ...
    def shearBy(self, *args): ...
    def shearTo(self, *args): ...
    def transformationMatrix(self, *args): ...
    def transformationMatrixPtr(self, *args): ...
    def translateBy(self, *args): ...
    def translateTo(self, *args): ...
    def treatAsTransform(self, *args): ...
    def type(self, *args): ...
    def updateMatrixAttrs(self, *args): ...
    def validateAndSetValue(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @staticmethod
    def isNonAffineMatricesEnabled(*args, **kwargs): ...
    @staticmethod
    def mustCallValidateAndSet(*args, **kwargs): ...
    @staticmethod
    def setNonAffineMatricesEnabled(*args, **kwargs): ...
    @property
    def boundingBoxCenterX(self): ...
    @boundingBoxCenterX.setter
    def boundingBoxCenterX(self, value): ...
    @property
    def boundingBoxCenterY(self): ...
    @boundingBoxCenterY.setter
    def boundingBoxCenterY(self, value): ...
    @property
    def boundingBoxCenterZ(self): ...
    @boundingBoxCenterZ.setter
    def boundingBoxCenterZ(self, value): ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value): ...
    @property
    def displayHandle(self): ...
    @displayHandle.setter
    def displayHandle(self, value): ...
    @property
    def displayLocalAxis(self): ...
    @displayLocalAxis.setter
    def displayLocalAxis(self, value): ...
    @property
    def displayRotatePivot(self): ...
    @displayRotatePivot.setter
    def displayRotatePivot(self, value): ...
    @property
    def displayScalePivot(self): ...
    @displayScalePivot.setter
    def displayScalePivot(self, value): ...
    @property
    def drawOverride(self): ...
    @drawOverride.setter
    def drawOverride(self, value): ...
    @property
    def dynamics(self): ...
    @dynamics.setter
    def dynamics(self, value): ...
    @property
    def geometry(self): ...
    @geometry.setter
    def geometry(self, value): ...
    @property
    def ghosting(self): ...
    @ghosting.setter
    def ghosting(self, value): ...
    @property
    def identification(self): ...
    @identification.setter
    def identification(self, value): ...
    @property
    def inheritsTransform(self): ...
    @inheritsTransform.setter
    def inheritsTransform(self, value): ...
    @property
    def instObjGroups(self): ...
    @instObjGroups.setter
    def instObjGroups(self, value): ...
    @property
    def intermediateObject(self): ...
    @intermediateObject.setter
    def intermediateObject(self, value): ...
    @property
    def inverseMatrix(self): ...
    @inverseMatrix.setter
    def inverseMatrix(self, value): ...
    @property
    def isTemplated(self): ...
    @isTemplated.setter
    def isTemplated(self, value): ...
    @property
    def layerOverrideColor(self): ...
    @layerOverrideColor.setter
    def layerOverrideColor(self, value): ...
    @property
    def layerRenderable(self): ...
    @layerRenderable.setter
    def layerRenderable(self, value): ...
    @property
    def lodVisibility(self): ...
    @lodVisibility.setter
    def lodVisibility(self, value): ...
    @property
    def matrix(self): ...
    @matrix.setter
    def matrix(self, value): ...
    @property
    def maxRotLimit(self): ...
    @maxRotLimit.setter
    def maxRotLimit(self, value): ...
    @property
    def maxRotLimitEnable(self): ...
    @maxRotLimitEnable.setter
    def maxRotLimitEnable(self, value): ...
    @property
    def maxRotXLimit(self): ...
    @maxRotXLimit.setter
    def maxRotXLimit(self, value): ...
    @property
    def maxRotXLimitEnable(self): ...
    @maxRotXLimitEnable.setter
    def maxRotXLimitEnable(self, value): ...
    @property
    def maxRotYLimit(self): ...
    @maxRotYLimit.setter
    def maxRotYLimit(self, value): ...
    @property
    def maxRotYLimitEnable(self): ...
    @maxRotYLimitEnable.setter
    def maxRotYLimitEnable(self, value): ...
    @property
    def maxRotZLimit(self): ...
    @maxRotZLimit.setter
    def maxRotZLimit(self, value): ...
    @property
    def maxRotZLimitEnable(self): ...
    @maxRotZLimitEnable.setter
    def maxRotZLimitEnable(self, value): ...
    @property
    def maxScaleLimit(self): ...
    @maxScaleLimit.setter
    def maxScaleLimit(self, value): ...
    @property
    def maxScaleLimitEnable(self): ...
    @maxScaleLimitEnable.setter
    def maxScaleLimitEnable(self, value): ...
    @property
    def maxScaleXLimit(self): ...
    @maxScaleXLimit.setter
    def maxScaleXLimit(self, value): ...
    @property
    def maxScaleXLimitEnable(self): ...
    @maxScaleXLimitEnable.setter
    def maxScaleXLimitEnable(self, value): ...
    @property
    def maxScaleYLimit(self): ...
    @maxScaleYLimit.setter
    def maxScaleYLimit(self, value): ...
    @property
    def maxScaleYLimitEnable(self): ...
    @maxScaleYLimitEnable.setter
    def maxScaleYLimitEnable(self, value): ...
    @property
    def maxScaleZLimit(self): ...
    @maxScaleZLimit.setter
    def maxScaleZLimit(self, value): ...
    @property
    def maxScaleZLimitEnable(self): ...
    @maxScaleZLimitEnable.setter
    def maxScaleZLimitEnable(self, value): ...
    @property
    def maxTransLimit(self): ...
    @maxTransLimit.setter
    def maxTransLimit(self, value): ...
    @property
    def maxTransLimitEnable(self): ...
    @maxTransLimitEnable.setter
    def maxTransLimitEnable(self, value): ...
    @property
    def maxTransXLimit(self): ...
    @maxTransXLimit.setter
    def maxTransXLimit(self, value): ...
    @property
    def maxTransXLimitEnable(self): ...
    @maxTransXLimitEnable.setter
    def maxTransXLimitEnable(self, value): ...
    @property
    def maxTransYLimit(self): ...
    @maxTransYLimit.setter
    def maxTransYLimit(self, value): ...
    @property
    def maxTransYLimitEnable(self): ...
    @maxTransYLimitEnable.setter
    def maxTransYLimitEnable(self, value): ...
    @property
    def maxTransZLimit(self): ...
    @maxTransZLimit.setter
    def maxTransZLimit(self, value): ...
    @property
    def maxTransZLimitEnable(self): ...
    @maxTransZLimitEnable.setter
    def maxTransZLimitEnable(self, value): ...
    @property
    def minRotLimit(self): ...
    @minRotLimit.setter
    def minRotLimit(self, value): ...
    @property
    def minRotLimitEnable(self): ...
    @minRotLimitEnable.setter
    def minRotLimitEnable(self, value): ...
    @property
    def minRotXLimit(self): ...
    @minRotXLimit.setter
    def minRotXLimit(self, value): ...
    @property
    def minRotXLimitEnable(self): ...
    @minRotXLimitEnable.setter
    def minRotXLimitEnable(self, value): ...
    @property
    def minRotYLimit(self): ...
    @minRotYLimit.setter
    def minRotYLimit(self, value): ...
    @property
    def minRotYLimitEnable(self): ...
    @minRotYLimitEnable.setter
    def minRotYLimitEnable(self, value): ...
    @property
    def minRotZLimit(self): ...
    @minRotZLimit.setter
    def minRotZLimit(self, value): ...
    @property
    def minRotZLimitEnable(self): ...
    @minRotZLimitEnable.setter
    def minRotZLimitEnable(self, value): ...
    @property
    def minScaleLimit(self): ...
    @minScaleLimit.setter
    def minScaleLimit(self, value): ...
    @property
    def minScaleLimitEnable(self): ...
    @minScaleLimitEnable.setter
    def minScaleLimitEnable(self, value): ...
    @property
    def minScaleXLimit(self): ...
    @minScaleXLimit.setter
    def minScaleXLimit(self, value): ...
    @property
    def minScaleXLimitEnable(self): ...
    @minScaleXLimitEnable.setter
    def minScaleXLimitEnable(self, value): ...
    @property
    def minScaleYLimit(self): ...
    @minScaleYLimit.setter
    def minScaleYLimit(self, value): ...
    @property
    def minScaleYLimitEnable(self): ...
    @minScaleYLimitEnable.setter
    def minScaleYLimitEnable(self, value): ...
    @property
    def minScaleZLimit(self): ...
    @minScaleZLimit.setter
    def minScaleZLimit(self, value): ...
    @property
    def minScaleZLimitEnable(self): ...
    @minScaleZLimitEnable.setter
    def minScaleZLimitEnable(self, value): ...
    @property
    def minTransLimit(self): ...
    @minTransLimit.setter
    def minTransLimit(self, value): ...
    @property
    def minTransLimitEnable(self): ...
    @minTransLimitEnable.setter
    def minTransLimitEnable(self, value): ...
    @property
    def minTransXLimit(self): ...
    @minTransXLimit.setter
    def minTransXLimit(self, value): ...
    @property
    def minTransXLimitEnable(self): ...
    @minTransXLimitEnable.setter
    def minTransXLimitEnable(self, value): ...
    @property
    def minTransYLimit(self): ...
    @minTransYLimit.setter
    def minTransYLimit(self, value): ...
    @property
    def minTransYLimitEnable(self): ...
    @minTransYLimitEnable.setter
    def minTransYLimitEnable(self, value): ...
    @property
    def minTransZLimit(self): ...
    @minTransZLimit.setter
    def minTransZLimit(self, value): ...
    @property
    def minTransZLimitEnable(self): ...
    @minTransZLimitEnable.setter
    def minTransZLimitEnable(self, value): ...
    @property
    def nodeBoundingBox(self): ...
    @nodeBoundingBox.setter
    def nodeBoundingBox(self, value): ...
    @property
    def nodeBoundingBoxMax(self): ...
    @nodeBoundingBoxMax.setter
    def nodeBoundingBoxMax(self, value): ...
    @property
    def nodeBoundingBoxMaxX(self): ...
    @nodeBoundingBoxMaxX.setter
    def nodeBoundingBoxMaxX(self, value): ...
    @property
    def nodeBoundingBoxMaxY(self): ...
    @nodeBoundingBoxMaxY.setter
    def nodeBoundingBoxMaxY(self, value): ...
    @property
    def nodeBoundingBoxMaxZ(self): ...
    @nodeBoundingBoxMaxZ.setter
    def nodeBoundingBoxMaxZ(self, value): ...
    @property
    def nodeBoundingBoxMin(self): ...
    @nodeBoundingBoxMin.setter
    def nodeBoundingBoxMin(self, value): ...
    @property
    def nodeBoundingBoxMinX(self): ...
    @nodeBoundingBoxMinX.setter
    def nodeBoundingBoxMinX(self, value): ...
    @property
    def nodeBoundingBoxMinY(self): ...
    @nodeBoundingBoxMinY.setter
    def nodeBoundingBoxMinY(self, value): ...
    @property
    def nodeBoundingBoxMinZ(self): ...
    @nodeBoundingBoxMinZ.setter
    def nodeBoundingBoxMinZ(self, value): ...
    @property
    def nodeBoundingBoxSize(self): ...
    @nodeBoundingBoxSize.setter
    def nodeBoundingBoxSize(self, value): ...
    @property
    def nodeBoundingBoxSizeX(self): ...
    @nodeBoundingBoxSizeX.setter
    def nodeBoundingBoxSizeX(self, value): ...
    @property
    def nodeBoundingBoxSizeY(self): ...
    @nodeBoundingBoxSizeY.setter
    def nodeBoundingBoxSizeY(self, value): ...
    @property
    def nodeBoundingBoxSizeZ(self): ...
    @nodeBoundingBoxSizeZ.setter
    def nodeBoundingBoxSizeZ(self, value): ...
    @property
    def objectColor(self): ...
    @objectColor.setter
    def objectColor(self, value): ...
    @property
    def objectGroupColor(self): ...
    @objectGroupColor.setter
    def objectGroupColor(self, value): ...
    @property
    def objectGroupId(self): ...
    @objectGroupId.setter
    def objectGroupId(self, value): ...
    @property
    def objectGroups(self): ...
    @objectGroups.setter
    def objectGroups(self, value): ...
    @property
    def objectGrpCompList(self): ...
    @objectGrpCompList.setter
    def objectGrpCompList(self, value): ...
    @property
    def overrideColor(self): ...
    @overrideColor.setter
    def overrideColor(self, value): ...
    @property
    def overrideDisplayType(self): ...
    @overrideDisplayType.setter
    def overrideDisplayType(self, value): ...
    @property
    def overrideEnabled(self): ...
    @overrideEnabled.setter
    def overrideEnabled(self, value): ...
    @property
    def overrideLevelOfDetail(self): ...
    @overrideLevelOfDetail.setter
    def overrideLevelOfDetail(self, value): ...
    @property
    def overridePlayback(self): ...
    @overridePlayback.setter
    def overridePlayback(self, value): ...
    @property
    def overrideShading(self): ...
    @overrideShading.setter
    def overrideShading(self, value): ...
    @property
    def overrideTexturing(self): ...
    @overrideTexturing.setter
    def overrideTexturing(self, value): ...
    @property
    def overrideVisibility(self): ...
    @overrideVisibility.setter
    def overrideVisibility(self, value): ...
    @property
    def parentInverseMatrix(self): ...
    @parentInverseMatrix.setter
    def parentInverseMatrix(self, value): ...
    @property
    def parentMatrix(self): ...
    @parentMatrix.setter
    def parentMatrix(self, value): ...
    @property
    def renderInfo(self): ...
    @renderInfo.setter
    def renderInfo(self, value): ...
    @property
    def renderLayerColor(self): ...
    @renderLayerColor.setter
    def renderLayerColor(self, value): ...
    @property
    def renderLayerId(self): ...
    @renderLayerId.setter
    def renderLayerId(self, value): ...
    @property
    def renderLayerInfo(self): ...
    @renderLayerInfo.setter
    def renderLayerInfo(self, value): ...
    @property
    def renderLayerRenderable(self): ...
    @renderLayerRenderable.setter
    def renderLayerRenderable(self, value): ...
    @property
    def rotate(self): ...
    @rotate.setter
    def rotate(self, value): ...
    @property
    def rotateAxis(self): ...
    @rotateAxis.setter
    def rotateAxis(self, value): ...
    @property
    def rotateAxisX(self): ...
    @rotateAxisX.setter
    def rotateAxisX(self, value): ...
    @property
    def rotateAxisY(self): ...
    @rotateAxisY.setter
    def rotateAxisY(self, value): ...
    @property
    def rotateAxisZ(self): ...
    @rotateAxisZ.setter
    def rotateAxisZ(self, value): ...
    @property
    def rotateOrder(self): ...
    @rotateOrder.setter
    def rotateOrder(self, value): ...
    @property
    def rotatePivot(self): ...
    @rotatePivot.setter
    def rotatePivot(self, value): ...
    @property
    def rotatePivotTranslate(self): ...
    @rotatePivotTranslate.setter
    def rotatePivotTranslate(self, value): ...
    @property
    def rotatePivotTranslateX(self): ...
    @rotatePivotTranslateX.setter
    def rotatePivotTranslateX(self, value): ...
    @property
    def rotatePivotTranslateY(self): ...
    @rotatePivotTranslateY.setter
    def rotatePivotTranslateY(self, value): ...
    @property
    def rotatePivotTranslateZ(self): ...
    @rotatePivotTranslateZ.setter
    def rotatePivotTranslateZ(self, value): ...
    @property
    def rotatePivotX(self): ...
    @rotatePivotX.setter
    def rotatePivotX(self, value): ...
    @property
    def rotatePivotY(self): ...
    @rotatePivotY.setter
    def rotatePivotY(self, value): ...
    @property
    def rotatePivotZ(self): ...
    @rotatePivotZ.setter
    def rotatePivotZ(self, value): ...
    @property
    def rotateQuaternion(self): ...
    @rotateQuaternion.setter
    def rotateQuaternion(self, value): ...
    @property
    def rotateQuaternionW(self): ...
    @rotateQuaternionW.setter
    def rotateQuaternionW(self, value): ...
    @property
    def rotateQuaternionX(self): ...
    @rotateQuaternionX.setter
    def rotateQuaternionX(self, value): ...
    @property
    def rotateQuaternionY(self): ...
    @rotateQuaternionY.setter
    def rotateQuaternionY(self, value): ...
    @property
    def rotateQuaternionZ(self): ...
    @rotateQuaternionZ.setter
    def rotateQuaternionZ(self, value): ...
    @property
    def rotateX(self): ...
    @rotateX.setter
    def rotateX(self, value): ...
    @property
    def rotateY(self): ...
    @rotateY.setter
    def rotateY(self, value): ...
    @property
    def rotateZ(self): ...
    @rotateZ.setter
    def rotateZ(self, value): ...
    @property
    def rotationInterpolation(self): ...
    @rotationInterpolation.setter
    def rotationInterpolation(self, value): ...
    @property
    def scale(self): ...
    @scale.setter
    def scale(self, value): ...
    @property
    def scalePivot(self): ...
    @scalePivot.setter
    def scalePivot(self, value): ...
    @property
    def scalePivotTranslate(self): ...
    @scalePivotTranslate.setter
    def scalePivotTranslate(self, value): ...
    @property
    def scalePivotTranslateX(self): ...
    @scalePivotTranslateX.setter
    def scalePivotTranslateX(self, value): ...
    @property
    def scalePivotTranslateY(self): ...
    @scalePivotTranslateY.setter
    def scalePivotTranslateY(self, value): ...
    @property
    def scalePivotTranslateZ(self): ...
    @scalePivotTranslateZ.setter
    def scalePivotTranslateZ(self, value): ...
    @property
    def scalePivotX(self): ...
    @scalePivotX.setter
    def scalePivotX(self, value): ...
    @property
    def scalePivotY(self): ...
    @scalePivotY.setter
    def scalePivotY(self, value): ...
    @property
    def scalePivotZ(self): ...
    @scalePivotZ.setter
    def scalePivotZ(self, value): ...
    @property
    def scaleX(self): ...
    @scaleX.setter
    def scaleX(self, value): ...
    @property
    def scaleY(self): ...
    @scaleY.setter
    def scaleY(self, value): ...
    @property
    def scaleZ(self): ...
    @scaleZ.setter
    def scaleZ(self, value): ...
    @property
    def selectHandle(self): ...
    @selectHandle.setter
    def selectHandle(self, value): ...
    @property
    def selectHandleX(self): ...
    @selectHandleX.setter
    def selectHandleX(self, value): ...
    @property
    def selectHandleY(self): ...
    @selectHandleY.setter
    def selectHandleY(self, value): ...
    @property
    def selectHandleZ(self): ...
    @selectHandleZ.setter
    def selectHandleZ(self, value): ...
    @property
    def shear(self): ...
    @shear.setter
    def shear(self, value): ...
    @property
    def shearXY(self): ...
    @shearXY.setter
    def shearXY(self, value): ...
    @property
    def shearXZ(self): ...
    @shearXZ.setter
    def shearXZ(self, value): ...
    @property
    def shearYZ(self): ...
    @shearYZ.setter
    def shearYZ(self, value): ...
    @property
    def showManipDefault(self): ...
    @showManipDefault.setter
    def showManipDefault(self, value): ...
    @property
    def specifiedManipLocation(self): ...
    @specifiedManipLocation.setter
    def specifiedManipLocation(self, value): ...
    @property
    def transMinusRotatePivot(self): ...
    @transMinusRotatePivot.setter
    def transMinusRotatePivot(self, value): ...
    @property
    def transMinusRotatePivotX(self): ...
    @transMinusRotatePivotX.setter
    def transMinusRotatePivotX(self, value): ...
    @property
    def transMinusRotatePivotY(self): ...
    @transMinusRotatePivotY.setter
    def transMinusRotatePivotY(self, value): ...
    @property
    def transMinusRotatePivotZ(self): ...
    @transMinusRotatePivotZ.setter
    def transMinusRotatePivotZ(self, value): ...
    @property
    def translate(self): ...
    @translate.setter
    def translate(self, value): ...
    @property
    def translateX(self): ...
    @translateX.setter
    def translateX(self, value): ...
    @property
    def translateY(self): ...
    @translateY.setter
    def translateY(self, value): ...
    @property
    def translateZ(self): ...
    @translateZ.setter
    def translateZ(self, value): ...
    @property
    def useObjectColor(self): ...
    @useObjectColor.setter
    def useObjectColor(self, value): ...
    @property
    def visibility(self): ...
    @visibility.setter
    def visibility(self, value): ...
    @property
    def worldInverseMatrix(self): ...
    @worldInverseMatrix.setter
    def worldInverseMatrix(self, value): ...
    @property
    def worldMatrix(self): ...
    @worldMatrix.setter
    def worldMatrix(self, value): ...
    @property
    def xformMatrix(self): ...
    @xformMatrix.setter
    def xformMatrix(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxPolyTweakUVCommand(MPxCommand):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def getTweakedUVs(self, *args): ...
    def parseSyntax(self, *args): ...
    @staticmethod
    def newSyntax(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxToolCommand(MPxCommand):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def cancel(self, *args): ...
    def doIt(self, *args): ...
    def finalize(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxComponentShape(MPxSurfaceShape):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def componentToPlugs(self, *args): ...
    def createFullVertexGroup(self, *args): ...
    def getControlPoints(self, *args): ...
    def localShapeInAttr(self, *args): ...
    def match(self, *args): ...
    def setControlPoints(self, *args): ...
    def transformUsing(self, *args): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxSkinCluster(MPxGeometryFilter):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def type(self, *args): ...
    def weightValue(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def bindPreMatrix(self): ...
    @bindPreMatrix.setter
    def bindPreMatrix(self, value): ...
    @property
    def matrix(self): ...
    @matrix.setter
    def matrix(self, value): ...
    @property
    def weightList(self): ...
    @weightList.setter
    def weightList(self, value): ...
    @property
    def weights(self): ...
    @weights.setter
    def weights(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxDeformerNode(MPxGeometryFilter):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def getDeformationDetails(self, *args): ...
    def setDeformationDetails(self, *args): ...
    def setUseExistingConnectionWhenSetEditing(self, *args): ...
    def type(self, *args): ...
    def weightValue(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def weightList(self): ...
    @weightList.setter
    def weightList(self, value): ...
    @property
    def weights(self): ...
    @weights.setter
    def weights(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxFluidEmitterNode(MPxEmitterNode):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def compute(self, *args): ...
    def fluidColor(self, *args): ...
    def fluidDensityEmission(self, *args): ...
    def fluidDropoff(self, *args): ...
    def fluidEmitColor(self, *args): ...
    def fluidEmitter(self, *args): ...
    def fluidFuelEmission(self, *args): ...
    def fluidHeatEmission(self, *args): ...
    def fluidJitter(self, *args): ...
    def turbulence(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def mEmissionFunction(self): ...
    @mEmissionFunction.setter
    def mEmissionFunction(self, value): ...
    @property
    def mEmitFluidColor(self): ...
    @mEmitFluidColor.setter
    def mEmitFluidColor(self, value): ...
    @property
    def mFluidColor(self): ...
    @mFluidColor.setter
    def mFluidColor(self, value): ...
    @property
    def mFluidColorB(self): ...
    @mFluidColorB.setter
    def mFluidColorB(self, value): ...
    @property
    def mFluidColorG(self): ...
    @mFluidColorG.setter
    def mFluidColorG(self, value): ...
    @property
    def mFluidColorR(self): ...
    @mFluidColorR.setter
    def mFluidColorR(self, value): ...
    @property
    def mFluidDensityEmission(self): ...
    @mFluidDensityEmission.setter
    def mFluidDensityEmission(self, value): ...
    @property
    def mFluidDropoff(self): ...
    @mFluidDropoff.setter
    def mFluidDropoff(self, value): ...
    @property
    def mFluidFuelEmission(self): ...
    @mFluidFuelEmission.setter
    def mFluidFuelEmission(self, value): ...
    @property
    def mFluidHeatEmission(self): ...
    @mFluidHeatEmission.setter
    def mFluidHeatEmission(self, value): ...
    @property
    def mFluidJitter(self): ...
    @mFluidJitter.setter
    def mFluidJitter(self, value): ...
    @property
    def mTurbulence(self): ...
    @mTurbulence.setter
    def mTurbulence(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxBlendShape(MPxGeometryFilter):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def deformData(self, *args): ...
    def type(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    @property
    def inputComponentsTarget(self): ...
    @inputComponentsTarget.setter
    def inputComponentsTarget(self, value): ...
    @property
    def inputGeomTarget(self): ...
    @inputGeomTarget.setter
    def inputGeomTarget(self, value): ...
    @property
    def inputPointsTarget(self): ...
    @inputPointsTarget.setter
    def inputPointsTarget(self, value): ...
    @property
    def inputTarget(self): ...
    @inputTarget.setter
    def inputTarget(self, value): ...
    @property
    def inputTargetGroup(self): ...
    @inputTargetGroup.setter
    def inputTargetGroup(self, value): ...
    @property
    def inputTargetItem(self): ...
    @inputTargetItem.setter
    def inputTargetItem(self, value): ...
    @property
    def targetWeights(self): ...
    @targetWeights.setter
    def targetWeights(self, value): ...
    @property
    def weight(self): ...
    @weight.setter
    def weight(self, value): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict


class MPxPolyTweakUVInteractiveCommand(MPxToolCommand):
    def __del__(self): ...
    def __disown__(self): ...
    def __getattr__(self, name): ...
    def __init__(self, *args): ...
    def __repr__(self) -> str: ...
    def __setattr__(self, name, value): ...
    def cancel(self, *args): ...
    def doIt(self, *args): ...
    def finalize(self, *args): ...
    def isUndoable(self, *args): ...
    def setUVs(self, *args): ...
    @staticmethod
    def className(*args, **kwargs): ...
    __swig_destroy__ : builtin_function_or_method
    
    __swig_getmethods__ : dict
    
    __swig_setmethods__ : dict




def MPxNode_inheritAttributesFrom(*args, **kwargs): ...
def MPx3dModelView_getModelView(*args, **kwargs): ...
def MPxCommand_getCurrentResult(*args, **kwargs): ...
def MPxAnimCurveInterpolator_swigregister(*args, **kwargs): ...
def intPtr_frompointer(*args, **kwargs): ...
def MPxManipulatorNode_swigregister(*args, **kwargs): ...
def MPxSpringNode_swigregister(*args, **kwargs): ...
def doublePtr_frompointer(*args, **kwargs): ...
def weakref_proxy(*args, **kwargs):
    """
    proxy(object[, callback]) -- create a proxy object that weakly
    references 'object'.  'callback', if given, is called with a
    reference to the proxy when 'object' is about to be finalized.
    """
    ...
def MPxPolyTweakUVInteractiveCommand_swigregister(*args, **kwargs): ...
def MPxControlCommand_swigregister(*args, **kwargs): ...
def MPxManipContainer_initialize(*args, **kwargs): ...
def MPxGeometryIterator_className(*args, **kwargs): ...
def MPx3dModelView_swigregister(*args, **kwargs): ...
def MPxTransform_className(*args, **kwargs): ...
def MPxModelEditorCommand_className(*args, **kwargs): ...
def shortPtr_swigregister(*args, **kwargs): ...
def MPxToolCommand_className(*args, **kwargs): ...
def MPxFileResolver_findURIResolverByName(*args, **kwargs): ...
def MPxBlendShape_swigregister(*args, **kwargs): ...
def MFnPlugin_isNodeRegistered(*args, **kwargs): ...
def MFnPlugin_registeringCallableScript(*args, **kwargs): ...
def MPxData_swigregister(*args, **kwargs): ...
def MPxGeometryData_swigregister(*args, **kwargs): ...
def MPxTransform_mustCallValidateAndSet(*args, **kwargs): ...
def _swig_repr(self): ...
def MPxGlBuffer_className(*args, **kwargs): ...
def MPxRenderPassImpl_swigregister(*args, **kwargs): ...
def MPxNode_addAttribute(*args, **kwargs): ...
def MPxAssembly_swigregister(*args, **kwargs): ...
def MFnPlugin_swigregister(*args, **kwargs): ...
def MPxEmitterNode_swigregister(*args, **kwargs): ...
def MPxParticleAttributeMapperNode_swigregister(*args, **kwargs): ...
def MPxContext__ignoreEntry(*args, **kwargs): ...
def MPxFileTranslator_fileAccessMode(*args, **kwargs): ...
def MPxCommand_displayInfo(*args, **kwargs): ...
def MPxSurfaceShapeUI_swigregister(*args, **kwargs): ...
def MPxContext_className(*args, **kwargs): ...
def MPxCommand_setResult(*args, **kwargs): ...
def MPxPolyTweakUVCommand_swigregister(*args, **kwargs): ...
def MPxDeformerNode_className(*args, **kwargs): ...
def MPxCommand_className(*args, **kwargs): ...
def MPxHwShaderNode_className(*args, **kwargs): ...
def MPxConstraintCommand_swigregister(*args, **kwargs): ...
def MPxEditData_swigregister(*args, **kwargs): ...
def MPxMultiPolyTweakUVCommand_newSyntax(*args, **kwargs): ...
def MPxIkSolverNode_swigregister(*args, **kwargs): ...
def uCharPtr_frompointer(*args, **kwargs): ...
def MPxSelectionContext_className(*args, **kwargs): ...
def MPxImagePlane_className(*args, **kwargs): ...
def MPxFileResolver_swigregister(*args, **kwargs): ...
def MPxMultiPolyTweakUVCommand_swigregister(*args, **kwargs): ...
def MPxDeformerNode_swigregister(*args, **kwargs): ...
def MPxFluidEmitterNode_className(*args, **kwargs): ...
def MPxSpringNode_className(*args, **kwargs): ...
def MExternalContentInfoTable_swigregister(*args, **kwargs): ...
def MPxHardwareShader_className(*args, **kwargs): ...
def MPxCacheConfigRuleFilter_swigregister(*args, **kwargs): ...
def MPxObjectSet_className(*args, **kwargs): ...
def MPxBakeEngine_swigregister(*args, **kwargs): ...
def MPxTransformationMatrix_convertEulerRotationOrder(*args, **kwargs): ...
def shortPtr_frompointer(*args, **kwargs): ...
def MPxFieldNode_swigregister(*args, **kwargs): ...
def MPxFileResolver_findURIResolverByScheme(*args, **kwargs): ...
def MPxManipContainer_newManipulator(*args, **kwargs): ...
def MPxTexContext_className(*args, **kwargs): ...
def MFnPlugin_findPlugin(*args, **kwargs): ...
def MPxFileResolver_numURIResolvers(*args, **kwargs): ...
def MPxContext_swigregister(*args, **kwargs): ...
def MPxGeometryFilter_className(*args, **kwargs): ...
def MPxCacheFormat_className(*args, **kwargs): ...
def MFnPlugin_className(*args, **kwargs): ...
def uIntPtr_frompointer(*args, **kwargs): ...
def getLockCaptureCount(*args, **kwargs): ...
def MPxManipContainer_addToManipConnectTable(*args, **kwargs): ...
def MPxCameraSet_className(*args, **kwargs): ...
def _swig_setattr_nondynamic(self, class_type, name, value, static='1'): ...
def MPxSurfaceShape_swigregister(*args, **kwargs): ...
def MPxCommand_clearResult(*args, **kwargs): ...
def MPxManipContainer_removeFromManipConnectTable(*args, **kwargs): ...
def MPxCommand_currentResultType(*args, **kwargs): ...
def MPxManipContainer_className(*args, **kwargs): ...
def MPxCommand_isCurrentResultArray(*args, **kwargs): ...
def MPxCommand_currentStringResult(*args, **kwargs): ...
def MPxTransformationMatrix_swigregister(*args, **kwargs): ...
def MPxCommand_swigregister(*args, **kwargs): ...
def MPxManipulatorNode_className(*args, **kwargs): ...
def MPxTransform_swigregister(*args, **kwargs): ...
def MPxAttributePatternFactory_className(*args, **kwargs): ...
def asHashable(mpxObj): ...
def MPxAttributePatternFactory_swigregister(*args, **kwargs): ...
def MPxMidiInputDevice_swigregister(*args, **kwargs): ...
def MPxNode_className(*args, **kwargs): ...
def charPtr_frompointer(*args, **kwargs): ...
def MPxControlCommand_className(*args, **kwargs): ...
def MExternalContentLocationTable_swigregister(*args, **kwargs): ...
def MPx3dModelView_className(*args, **kwargs): ...
def MPxImagePlane_swigregister(*args, **kwargs): ...
def MPxMotionPathNode_swigregister(*args, **kwargs): ...
def MPxGeometryIterator_swigregister(*args, **kwargs): ...
def MPxToolCommand_swigregister(*args, **kwargs): ...
def MPxUIControl_className(*args, **kwargs): ...
def MPxBlendShape_className(*args, **kwargs): ...
def MPxModelEditorCommand_swigregister(*args, **kwargs): ...
def MPxDragAndDropBehavior_swigregister(*args, **kwargs): ...
def MPxUITableControl_swigregister(*args, **kwargs): ...
def MPxFileResolver_getURIResolversByName(*args, **kwargs): ...
def MPxImageFile_swigregister(*args, **kwargs): ...
def MPxEmitterNode_className(*args, **kwargs): ...
def MPxTransform_isNonAffineMatricesEnabled(*args, **kwargs): ...
def MPxDragAndDropBehavior_className(*args, **kwargs): ...
def MPxPolyTrg_swigregister(*args, **kwargs): ...
def boolPtr_swigregister(*args, **kwargs): ...
def uCharPtr_swigregister(*args, **kwargs): ...
def MPxPolyTweakUVInteractiveCommand_className(*args, **kwargs): ...
def uIntPtr_swigregister(*args, **kwargs): ...
def MPxContextCommand_className(*args, **kwargs): ...
def MPxHardwareShader_findResource(*args, **kwargs): ...
def MPxSurfaceShapeUI_className(*args, **kwargs): ...
def MPxParticleAttributeMapperNode_className(*args, **kwargs): ...
def MPxTexContext_swigregister(*args, **kwargs): ...
def MPxMayaAsciiFilter_swigregister(*args, **kwargs): ...
def MPxObjectSet_swigregister(*args, **kwargs): ...
def MPxLocatorNode_swigregister(*args, **kwargs): ...
def _swig_getattr(self, class_type, name): ...
def MPxPolyTweakUVCommand_newSyntax(*args, **kwargs): ...
def MPxFileTranslator_swigregister(*args, **kwargs): ...
def charPtr_swigregister(*args, **kwargs): ...
def MaterialInputData_swigregister(*args, **kwargs): ...
def MPxCommand_displayError(*args, **kwargs): ...
def MPxManipulatorNode_newManipulator(*args, **kwargs): ...
def MPxMidiInputDevice_className(*args, **kwargs): ...
def MPxCommand_appendToResult(*args, **kwargs): ...
def asMPxPtr(mpxObj): ...
def MPxEditData_className(*args, **kwargs): ...
def MPxAssembly_className(*args, **kwargs): ...
def MPxUITableControl_className(*args, **kwargs): ...
def MPxCommand_currentDoubleResult(*args, **kwargs): ...
def boolPtr_frompointer(*args, **kwargs): ...
def MPxSurfaceShape_className(*args, **kwargs): ...
def floatPtr_swigregister(*args, **kwargs): ...
def MPxNode_attributeAffects(*args, **kwargs): ...
def MPxSkinCluster_swigregister(*args, **kwargs): ...
def MPxSkinCluster_className(*args, **kwargs): ...
def MPxHardwareShader_getHardwareShaderPtr(*args, **kwargs): ...
def MPxHwShaderNode_swigregister(*args, **kwargs): ...
def MPxGlBuffer_swigregister(*args, **kwargs): ...
def _swig_setattr(self, class_type, name, value): ...
def doublePtr_swigregister(*args, **kwargs): ...
def MPxTexContext_getMarqueeSelection(*args, **kwargs): ...
def MPxTransformationMatrix_convertTransformationRotationOrder(*args, **kwargs): ...
def MPxTransformationMatrix_creator(*args, **kwargs): ...
def MPxFluidEmitterNode_swigregister(*args, **kwargs): ...
def MPxFieldNode_className(*args, **kwargs): ...
def MPxHardwareShader_swigregister(*args, **kwargs): ...
def MPxConstraint_className(*args, **kwargs): ...
def MPxComponentShape_swigregister(*args, **kwargs): ...
def MPxRepresentation_swigregister(*args, **kwargs): ...
def MPxConstraint_swigregister(*args, **kwargs): ...
def MPxFileResolver_getURIResolversByScheme(*args, **kwargs): ...
def MPxNode_swigregister(*args, **kwargs): ...
def floatPtr_frompointer(*args, **kwargs): ...
def MPxMaterialInformation_swigregister(*args, **kwargs): ...
def MPxCacheFormat_swigregister(*args, **kwargs): ...
def MPxMayaAsciiFilterOutput_swigregister(*args, **kwargs): ...
def MPxSurfaceShapeUI_surfaceShapeUI(*args, **kwargs): ...
def MFnPlugin_setRegisteringCallableScript(*args, **kwargs): ...
def MPxContextCommand_swigregister(*args, **kwargs): ...
def MPxUIControl_swigregister(*args, **kwargs): ...
def MPxFileResolver_className(*args, **kwargs): ...
def MPxLocatorNode_className(*args, **kwargs): ...
def MPxTransform_setNonAffineMatricesEnabled(*args, **kwargs): ...
def MPxHwShaderNode_getHwShaderNodePtr(*args, **kwargs): ...
def MPxCameraSet_swigregister(*args, **kwargs): ...
def MPxCommand_displayWarning(*args, **kwargs): ...
def MPxSelectionContext_swigregister(*args, **kwargs): ...
def intPtr_swigregister(*args, **kwargs): ...
def MPxCommand_currentIntResult(*args, **kwargs): ...
def MPxManipContainer_swigregister(*args, **kwargs): ...
def MPxGeometryFilter_swigregister(*args, **kwargs): ...
def MPxIkSolverNode_className(*args, **kwargs): ...


_newclass : int
cvar
PLUGIN_COMPANY : str

