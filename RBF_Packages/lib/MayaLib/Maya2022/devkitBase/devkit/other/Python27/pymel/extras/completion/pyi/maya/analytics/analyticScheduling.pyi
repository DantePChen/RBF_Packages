from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya
import re
import os
import maya.cmds as cmds


"""
Check that the scheduling graph generated by the automated process is
equivalent to the graph generated by the dbpeek command.
"""


from maya.analytics.decorators import makeAnalytic
from maya.debug.PlaybackManager import PlaybackManager
from maya.analytics.decorators import addMethodDocs
from maya.analytics.BaseAnalytic import BaseAnalytic
from maya.analytics.decorators import addHelp
from maya.debug.emModeManager import emModeManager


if False:
    from typing import Dict, List, Tuple, Union, Optional

class analyticScheduling(BaseAnalytic):
    """
    The normal output the output is a dictionary whose keys are the error types
    the values are the details of that error. There are only four:
    
        "scheduling" : {
            "nodeMissing" : "transform1",
            "nodeAdded"   : "transform2",
            "edgeMissing" : ["transform1", "transform2"],
            "edgeAdded"   : ["transform2", "group1"]
        }
    
    "Missing" means it existed in the original dump but not in the new one.
    "Added" means it did not exist in the original dump but does in the new one.
    """
    
    
    
    def __init__(self):
        """
        Initialize the persistent class members
        """
        ...
    def read_scheduling_file(self, file_name):
        """
        Read the scheduling .dot file and extract the relevant information
        from it.
        
        :param file_name: Name of file containing JSON scheduling data
        :return: (nodes, edges) where:
            nodes: list of node names in the file
            edges: list of node pairs corresponding to edges in the file
        """
        ...
    def run(self):
        """
        Run the analytic on the current scene.
        Runs the EMP animation to generate the old scheduling graph dump,
        run the commands needed to generate the new dump, then compare
        the two to generate the results
        :result: JSON data as described in the class doc
        """
        ...
    @staticmethod
    def help():
        """
        Call this method to print the class documentation, including all methods.
        """
        ...
    ANALYTIC_DESCRIPTION_DETAILED : str
    
    ANALYTIC_DESCRIPTION_SHORT : unicode
    
    ANALYTIC_LABEL : unicode
    
    ANALYTIC_NAME : str
    
    __fulldocs__ : str
    
    is_static : bool




RE_NODE : re.SRE_Pattern
BUILD : NoneType
OLD_ROOT : str
kAnalyticDescriptionShort : unicode
RE_EDGE : re.SRE_Pattern
NEW_ROOT : str
kAnalyticLabel : unicode

