from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtCore import QObject as _QObject


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QAudio(_Object):
    ActiveState : State
    
    AudioInput : Mode
    
    AudioOutput : Mode
    
    Error : Type[Error]
    
    FatalError : Error
    
    IOError : Error
    
    IdleState : State
    
    Mode : Type[Mode]
    
    NoError : Error
    
    OpenError : Error
    
    State : Type[State]
    
    StoppedState : State
    
    SuspendedState : State
    
    UnderrunError : Error


class QAbstractAudioDeviceInfo(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def deviceName(*args, **kwargs): ...
    def isFormatSupported(*args, **kwargs): ...
    def preferredFormat(*args, **kwargs): ...
    def supportedByteOrders(*args, **kwargs): ...
    def supportedChannelCounts(*args, **kwargs): ...
    def supportedCodecs(*args, **kwargs): ...
    def supportedSampleRates(*args, **kwargs): ...
    def supportedSampleSizes(*args, **kwargs): ...
    def supportedSampleTypes(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QAbstractAudioOutput(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bufferSize(*args, **kwargs): ...
    def bytesFree(*args, **kwargs): ...
    def category(*args, **kwargs): ...
    def elapsedUSecs(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def notifyInterval(*args, **kwargs): ...
    def periodSize(*args, **kwargs): ...
    def processedUSecs(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def resume(*args, **kwargs): ...
    def setBufferSize(*args, **kwargs): ...
    def setCategory(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setNotifyInterval(*args, **kwargs): ...
    def setVolume(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def suspend(*args, **kwargs): ...
    def volume(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    errorChanged : PySide2.QtCore.Signal
    
    notify : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QVideoSurfaceFormat(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def frameHeight(*args, **kwargs): ...
    def frameRate(*args, **kwargs): ...
    def frameSize(*args, **kwargs): ...
    def frameWidth(*args, **kwargs): ...
    def handleType(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def pixelAspectRatio(*args, **kwargs): ...
    def pixelFormat(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def propertyNames(*args, **kwargs): ...
    def scanLineDirection(*args, **kwargs): ...
    def setFrameRate(*args, **kwargs): ...
    def setFrameSize(*args, **kwargs): ...
    def setPixelAspectRatio(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    def setScanLineDirection(*args, **kwargs): ...
    def setViewport(*args, **kwargs): ...
    def setYCbCrColorSpace(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    def viewport(*args, **kwargs): ...
    def yCbCrColorSpace(*args, **kwargs): ...
    BottomToTop : Direction
    
    Direction : Type[Direction]
    
    TopToBottom : Direction
    
    YCbCrColorSpace : Type[YCbCrColorSpace]
    
    YCbCr_BT601 : YCbCrColorSpace
    
    YCbCr_BT709 : YCbCrColorSpace
    
    YCbCr_CustomMatrix : YCbCrColorSpace
    
    YCbCr_JPEG : YCbCrColorSpace
    
    YCbCr_Undefined : YCbCrColorSpace
    
    YCbCr_xvYCC601 : YCbCrColorSpace
    
    YCbCr_xvYCC709 : YCbCrColorSpace
    
    __new__ : builtin_function_or_method


class QAbstractAudioInput(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bufferSize(*args, **kwargs): ...
    def bytesReady(*args, **kwargs): ...
    def elapsedUSecs(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def notifyInterval(*args, **kwargs): ...
    def periodSize(*args, **kwargs): ...
    def processedUSecs(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def resume(*args, **kwargs): ...
    def setBufferSize(*args, **kwargs): ...
    def setFormat(*args, **kwargs): ...
    def setNotifyInterval(*args, **kwargs): ...
    def setVolume(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def suspend(*args, **kwargs): ...
    def volume(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    errorChanged : PySide2.QtCore.Signal
    
    notify : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QAbstractVideoSurface(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def error(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def isFormatSupported(*args, **kwargs): ...
    def nativeResolution(*args, **kwargs): ...
    def nearestFormat(*args, **kwargs): ...
    def present(*args, **kwargs): ...
    def setError(*args, **kwargs): ...
    def setNativeResolution(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def supportedPixelFormats(*args, **kwargs): ...
    def surfaceFormat(*args, **kwargs): ...
    Error : Type[Error]
    
    IncorrectFormatError : Error
    
    NoError : Error
    
    ResourceError : Error
    
    StoppedError : Error
    
    UnsupportedFormatError : Error
    
    __new__ : builtin_function_or_method
    
    activeChanged : PySide2.QtCore.Signal
    
    nativeResolutionChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    supportedFormatsChanged : PySide2.QtCore.Signal
    
    surfaceFormatChanged : PySide2.QtCore.Signal


class QAudioFormat(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def byteOrder(*args, **kwargs): ...
    def bytesForDuration(*args, **kwargs): ...
    def bytesForFrames(*args, **kwargs): ...
    def bytesPerFrame(*args, **kwargs): ...
    def channelCount(*args, **kwargs): ...
    def codec(*args, **kwargs): ...
    def durationForBytes(*args, **kwargs): ...
    def durationForFrames(*args, **kwargs): ...
    def framesForBytes(*args, **kwargs): ...
    def framesForDuration(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def sampleRate(*args, **kwargs): ...
    def sampleSize(*args, **kwargs): ...
    def sampleType(*args, **kwargs): ...
    def setByteOrder(*args, **kwargs): ...
    def setChannelCount(*args, **kwargs): ...
    def setCodec(*args, **kwargs): ...
    def setSampleRate(*args, **kwargs): ...
    def setSampleSize(*args, **kwargs): ...
    def setSampleType(*args, **kwargs): ...
    BigEndian : Endian
    
    Endian : Type[Endian]
    
    Float : SampleType
    
    LittleEndian : Endian
    
    SampleType : Type[SampleType]
    
    SignedInt : SampleType
    
    UnSignedInt : SampleType
    
    Unknown : SampleType
    
    __new__ : builtin_function_or_method


class QAudioOutput(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bufferSize(*args, **kwargs): ...
    def bytesFree(*args, **kwargs): ...
    def category(*args, **kwargs): ...
    def elapsedUSecs(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def notifyInterval(*args, **kwargs): ...
    def periodSize(*args, **kwargs): ...
    def processedUSecs(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def resume(*args, **kwargs): ...
    def setBufferSize(*args, **kwargs): ...
    def setCategory(*args, **kwargs): ...
    def setNotifyInterval(*args, **kwargs): ...
    def setVolume(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def suspend(*args, **kwargs): ...
    def volume(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    notify : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QAbstractVideoBuffer(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def handle(*args, **kwargs): ...
    def handleType(*args, **kwargs): ...
    def mapMode(*args, **kwargs): ...
    def release(*args, **kwargs): ...
    def unmap(*args, **kwargs): ...
    CoreImageHandle : HandleType
    
    EGLImageHandle : HandleType
    
    GLTextureHandle : HandleType
    
    HandleType : Type[HandleType]
    
    MapMode : Type[MapMode]
    
    NoHandle : HandleType
    
    NotMapped : MapMode
    
    QPixmapHandle : HandleType
    
    ReadOnly : MapMode
    
    ReadWrite : MapMode
    
    UserHandle : HandleType
    
    WriteOnly : MapMode
    
    XvShmImageHandle : HandleType
    
    __new__ : builtin_function_or_method
    
    m_type : getset_descriptor


class QAudioDeviceInfo(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def deviceName(*args, **kwargs): ...
    def isFormatSupported(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def nearestFormat(*args, **kwargs): ...
    def preferredFormat(*args, **kwargs): ...
    def supportedByteOrders(*args, **kwargs): ...
    def supportedChannelCounts(*args, **kwargs): ...
    def supportedCodecs(*args, **kwargs): ...
    def supportedSampleRates(*args, **kwargs): ...
    def supportedSampleSizes(*args, **kwargs): ...
    def supportedSampleTypes(*args, **kwargs): ...
    @staticmethod
    def availableDevices(*args, **kwargs): ...
    @staticmethod
    def defaultInputDevice(*args, **kwargs): ...
    @staticmethod
    def defaultOutputDevice(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QVideoFrame(_Object):
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def availableMetaData(*args, **kwargs): ...
    def bits(*args, **kwargs): ...
    def bytesPerLine(*args, **kwargs): ...
    def endTime(*args, **kwargs): ...
    def fieldType(*args, **kwargs): ...
    def handle(*args, **kwargs): ...
    def handleType(*args, **kwargs): ...
    def height(*args, **kwargs): ...
    def isMapped(*args, **kwargs): ...
    def isReadable(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def isWritable(*args, **kwargs): ...
    def map(*args, **kwargs): ...
    def mapMode(*args, **kwargs): ...
    def mappedBytes(*args, **kwargs): ...
    def metaData(*args, **kwargs): ...
    def pixelFormat(*args, **kwargs): ...
    def planeCount(*args, **kwargs): ...
    def setEndTime(*args, **kwargs): ...
    def setFieldType(*args, **kwargs): ...
    def setMetaData(*args, **kwargs): ...
    def setStartTime(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def startTime(*args, **kwargs): ...
    def unmap(*args, **kwargs): ...
    def width(*args, **kwargs): ...
    @staticmethod
    def imageFormatFromPixelFormat(*args, **kwargs): ...
    @staticmethod
    def pixelFormatFromImageFormat(*args, **kwargs): ...
    BottomField : FieldType
    
    FieldType : Type[FieldType]
    
    Format_ARGB32 : PixelFormat
    
    Format_ARGB32_Premultiplied : PixelFormat
    
    Format_ARGB8565_Premultiplied : PixelFormat
    
    Format_AYUV444 : PixelFormat
    
    Format_AYUV444_Premultiplied : PixelFormat
    
    Format_AdobeDng : PixelFormat
    
    Format_BGR24 : PixelFormat
    
    Format_BGR32 : PixelFormat
    
    Format_BGR555 : PixelFormat
    
    Format_BGR565 : PixelFormat
    
    Format_BGRA32 : PixelFormat
    
    Format_BGRA32_Premultiplied : PixelFormat
    
    Format_BGRA5658_Premultiplied : PixelFormat
    
    Format_CameraRaw : PixelFormat
    
    Format_IMC1 : PixelFormat
    
    Format_IMC2 : PixelFormat
    
    Format_IMC3 : PixelFormat
    
    Format_IMC4 : PixelFormat
    
    Format_Invalid : PixelFormat
    
    Format_Jpeg : PixelFormat
    
    Format_NV12 : PixelFormat
    
    Format_NV21 : PixelFormat
    
    Format_RGB24 : PixelFormat
    
    Format_RGB32 : PixelFormat
    
    Format_RGB555 : PixelFormat
    
    Format_RGB565 : PixelFormat
    
    Format_UYVY : PixelFormat
    
    Format_User : PixelFormat
    
    Format_Y16 : PixelFormat
    
    Format_Y8 : PixelFormat
    
    Format_YUV420P : PixelFormat
    
    Format_YUV444 : PixelFormat
    
    Format_YUYV : PixelFormat
    
    Format_YV12 : PixelFormat
    
    InterlacedFrame : FieldType
    
    PixelFormat : Type[PixelFormat]
    
    ProgressiveFrame : FieldType
    
    TopField : FieldType
    
    __new__ : builtin_function_or_method


class QAudioInput(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bufferSize(*args, **kwargs): ...
    def bytesReady(*args, **kwargs): ...
    def elapsedUSecs(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def format(*args, **kwargs): ...
    def notifyInterval(*args, **kwargs): ...
    def periodSize(*args, **kwargs): ...
    def processedUSecs(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def resume(*args, **kwargs): ...
    def setBufferSize(*args, **kwargs): ...
    def setNotifyInterval(*args, **kwargs): ...
    def setVolume(*args, **kwargs): ...
    def start(*args, **kwargs): ...
    def state(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def suspend(*args, **kwargs): ...
    def volume(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    notify : PySide2.QtCore.Signal
    
    stateChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject



