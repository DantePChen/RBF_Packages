from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QXmlErrorHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def error(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def fatalError(*args, **kwargs): ...
    def warning(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlReader(_Object):
    def DTDHandler(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def contentHandler(*args, **kwargs): ...
    def declHandler(*args, **kwargs): ...
    def entityResolver(*args, **kwargs): ...
    def errorHandler(*args, **kwargs): ...
    def feature(*args, **kwargs): ...
    def hasFeature(*args, **kwargs): ...
    def hasProperty(*args, **kwargs): ...
    def lexicalHandler(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def setContentHandler(*args, **kwargs): ...
    def setDTDHandler(*args, **kwargs): ...
    def setDeclHandler(*args, **kwargs): ...
    def setEntityResolver(*args, **kwargs): ...
    def setErrorHandler(*args, **kwargs): ...
    def setFeature(*args, **kwargs): ...
    def setLexicalHandler(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlDeclHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def attributeDecl(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def externalEntityDecl(*args, **kwargs): ...
    def internalEntityDecl(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomNodeList(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def at(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def item(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomImplementation(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def createDocument(*args, **kwargs): ...
    def createDocumentType(*args, **kwargs): ...
    def hasFeature(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    @staticmethod
    def invalidDataPolicy(*args, **kwargs): ...
    @staticmethod
    def setInvalidDataPolicy(*args, **kwargs): ...
    AcceptInvalidChars : InvalidDataPolicy
    
    DropInvalidChars : InvalidDataPolicy
    
    InvalidDataPolicy : Type[InvalidDataPolicy]
    
    ReturnNullNode : InvalidDataPolicy
    
    __new__ : builtin_function_or_method


class QDomNode(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def appendChild(*args, **kwargs): ...
    def attributes(*args, **kwargs): ...
    def childNodes(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def cloneNode(*args, **kwargs): ...
    def columnNumber(*args, **kwargs): ...
    def firstChild(*args, **kwargs): ...
    def firstChildElement(*args, **kwargs): ...
    def hasAttributes(*args, **kwargs): ...
    def hasChildNodes(*args, **kwargs): ...
    def insertAfter(*args, **kwargs): ...
    def insertBefore(*args, **kwargs): ...
    def isAttr(*args, **kwargs): ...
    def isCDATASection(*args, **kwargs): ...
    def isCharacterData(*args, **kwargs): ...
    def isComment(*args, **kwargs): ...
    def isDocument(*args, **kwargs): ...
    def isDocumentFragment(*args, **kwargs): ...
    def isDocumentType(*args, **kwargs): ...
    def isElement(*args, **kwargs): ...
    def isEntity(*args, **kwargs): ...
    def isEntityReference(*args, **kwargs): ...
    def isNotation(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isProcessingInstruction(*args, **kwargs): ...
    def isSupported(*args, **kwargs): ...
    def isText(*args, **kwargs): ...
    def lastChild(*args, **kwargs): ...
    def lastChildElement(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    def localName(*args, **kwargs): ...
    def namedItem(*args, **kwargs): ...
    def namespaceURI(*args, **kwargs): ...
    def nextSibling(*args, **kwargs): ...
    def nextSiblingElement(*args, **kwargs): ...
    def nodeName(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def nodeValue(*args, **kwargs): ...
    def normalize(*args, **kwargs): ...
    def ownerDocument(*args, **kwargs): ...
    def parentNode(*args, **kwargs): ...
    def prefix(*args, **kwargs): ...
    def previousSibling(*args, **kwargs): ...
    def previousSiblingElement(*args, **kwargs): ...
    def removeChild(*args, **kwargs): ...
    def replaceChild(*args, **kwargs): ...
    def save(*args, **kwargs): ...
    def setNodeValue(*args, **kwargs): ...
    def setPrefix(*args, **kwargs): ...
    def toAttr(*args, **kwargs): ...
    def toCDATASection(*args, **kwargs): ...
    def toCharacterData(*args, **kwargs): ...
    def toComment(*args, **kwargs): ...
    def toDocument(*args, **kwargs): ...
    def toDocumentFragment(*args, **kwargs): ...
    def toDocumentType(*args, **kwargs): ...
    def toElement(*args, **kwargs): ...
    def toEntity(*args, **kwargs): ...
    def toEntityReference(*args, **kwargs): ...
    def toNotation(*args, **kwargs): ...
    def toProcessingInstruction(*args, **kwargs): ...
    def toText(*args, **kwargs): ...
    AttributeNode : NodeType
    
    BaseNode : NodeType
    
    CDATASectionNode : NodeType
    
    CharacterDataNode : NodeType
    
    CommentNode : NodeType
    
    DocumentFragmentNode : NodeType
    
    DocumentNode : NodeType
    
    DocumentTypeNode : NodeType
    
    ElementNode : NodeType
    
    EncodingFromDocument : EncodingPolicy
    
    EncodingFromTextStream : EncodingPolicy
    
    EncodingPolicy : Type[EncodingPolicy]
    
    EntityNode : NodeType
    
    EntityReferenceNode : NodeType
    
    NodeType : Type[NodeType]
    
    NotationNode : NodeType
    
    ProcessingInstructionNode : NodeType
    
    TextNode : NodeType
    
    __new__ : builtin_function_or_method


class QXmlLexicalHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def comment(*args, **kwargs): ...
    def endCDATA(*args, **kwargs): ...
    def endDTD(*args, **kwargs): ...
    def endEntity(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def startCDATA(*args, **kwargs): ...
    def startDTD(*args, **kwargs): ...
    def startEntity(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlEntityResolver(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def errorString(*args, **kwargs): ...
    def resolveEntity(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlContentHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def characters(*args, **kwargs): ...
    def endDocument(*args, **kwargs): ...
    def endElement(*args, **kwargs): ...
    def endPrefixMapping(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def ignorableWhitespace(*args, **kwargs): ...
    def processingInstruction(*args, **kwargs): ...
    def setDocumentLocator(*args, **kwargs): ...
    def skippedEntity(*args, **kwargs): ...
    def startDocument(*args, **kwargs): ...
    def startElement(*args, **kwargs): ...
    def startPrefixMapping(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlNamespaceSupport(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def popContext(*args, **kwargs): ...
    def prefix(*args, **kwargs): ...
    def prefixes(*args, **kwargs): ...
    def processName(*args, **kwargs): ...
    def pushContext(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def setPrefix(*args, **kwargs): ...
    def splitName(*args, **kwargs): ...
    def uri(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlParseException(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def columnNumber(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    def message(*args, **kwargs): ...
    def publicId(*args, **kwargs): ...
    def systemId(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlInputSource(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def data(*args, **kwargs): ...
    def fetchData(*args, **kwargs): ...
    def fromRawData(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlAttributes(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def append(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def index(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def localName(*args, **kwargs): ...
    def qName(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def uri(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomNamedNodeMap(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def contains(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def item(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def namedItem(*args, **kwargs): ...
    def namedItemNS(*args, **kwargs): ...
    def removeNamedItem(*args, **kwargs): ...
    def removeNamedItemNS(*args, **kwargs): ...
    def setNamedItem(*args, **kwargs): ...
    def setNamedItemNS(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlDTDHandler(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def errorString(*args, **kwargs): ...
    def notationDecl(*args, **kwargs): ...
    def unparsedEntityDecl(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlLocator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def columnNumber(*args, **kwargs): ...
    def lineNumber(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomElement(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def attribute(*args, **kwargs): ...
    def attributeNS(*args, **kwargs): ...
    def attributeNode(*args, **kwargs): ...
    def attributeNodeNS(*args, **kwargs): ...
    def attributes(*args, **kwargs): ...
    def elementsByTagName(*args, **kwargs): ...
    def elementsByTagNameNS(*args, **kwargs): ...
    def hasAttribute(*args, **kwargs): ...
    def hasAttributeNS(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def removeAttribute(*args, **kwargs): ...
    def removeAttributeNS(*args, **kwargs): ...
    def removeAttributeNode(*args, **kwargs): ...
    def setAttribute(*args, **kwargs): ...
    def setAttributeNS(*args, **kwargs): ...
    def setAttributeNode(*args, **kwargs): ...
    def setAttributeNodeNS(*args, **kwargs): ...
    def setTagName(*args, **kwargs): ...
    def tagName(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomAttr(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def name(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def ownerElement(*args, **kwargs): ...
    def setValue(*args, **kwargs): ...
    def specified(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlDefaultHandler(QXmlContentHandler, QXmlErrorHandler, QXmlDTDHandler, QXmlEntityResolver, QXmlLexicalHandler, QXmlDeclHandler):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def attributeDecl(*args, **kwargs): ...
    def characters(*args, **kwargs): ...
    def comment(*args, **kwargs): ...
    def endCDATA(*args, **kwargs): ...
    def endDTD(*args, **kwargs): ...
    def endDocument(*args, **kwargs): ...
    def endElement(*args, **kwargs): ...
    def endEntity(*args, **kwargs): ...
    def endPrefixMapping(*args, **kwargs): ...
    def error(*args, **kwargs): ...
    def errorString(*args, **kwargs): ...
    def externalEntityDecl(*args, **kwargs): ...
    def fatalError(*args, **kwargs): ...
    def ignorableWhitespace(*args, **kwargs): ...
    def internalEntityDecl(*args, **kwargs): ...
    def notationDecl(*args, **kwargs): ...
    def processingInstruction(*args, **kwargs): ...
    def resolveEntity(*args, **kwargs): ...
    def setDocumentLocator(*args, **kwargs): ...
    def skippedEntity(*args, **kwargs): ...
    def startCDATA(*args, **kwargs): ...
    def startDTD(*args, **kwargs): ...
    def startDocument(*args, **kwargs): ...
    def startElement(*args, **kwargs): ...
    def startEntity(*args, **kwargs): ...
    def startPrefixMapping(*args, **kwargs): ...
    def unparsedEntityDecl(*args, **kwargs): ...
    def warning(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomDocumentType(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def entities(*args, **kwargs): ...
    def internalSubset(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def notations(*args, **kwargs): ...
    def publicId(*args, **kwargs): ...
    def systemId(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomEntityReference(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomCharacterData(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def appendData(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def deleteData(*args, **kwargs): ...
    def insertData(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def replaceData(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def substringData(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomProcessingInstruction(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def data(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def target(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomDocumentFragment(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlSimpleReader(QXmlReader):
    def DTDHandler(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def contentHandler(*args, **kwargs): ...
    def declHandler(*args, **kwargs): ...
    def entityResolver(*args, **kwargs): ...
    def errorHandler(*args, **kwargs): ...
    def feature(*args, **kwargs): ...
    def hasFeature(*args, **kwargs): ...
    def hasProperty(*args, **kwargs): ...
    def lexicalHandler(*args, **kwargs): ...
    def parse(*args, **kwargs): ...
    def parseContinue(*args, **kwargs): ...
    def property(*args, **kwargs): ...
    def setContentHandler(*args, **kwargs): ...
    def setDTDHandler(*args, **kwargs): ...
    def setDeclHandler(*args, **kwargs): ...
    def setEntityResolver(*args, **kwargs): ...
    def setErrorHandler(*args, **kwargs): ...
    def setFeature(*args, **kwargs): ...
    def setLexicalHandler(*args, **kwargs): ...
    def setProperty(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomEntity(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    def notationName(*args, **kwargs): ...
    def publicId(*args, **kwargs): ...
    def systemId(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomNotation(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    def publicId(*args, **kwargs): ...
    def systemId(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomDocument(QDomNode):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def createAttribute(*args, **kwargs): ...
    def createAttributeNS(*args, **kwargs): ...
    def createCDATASection(*args, **kwargs): ...
    def createComment(*args, **kwargs): ...
    def createDocumentFragment(*args, **kwargs): ...
    def createElement(*args, **kwargs): ...
    def createElementNS(*args, **kwargs): ...
    def createEntityReference(*args, **kwargs): ...
    def createProcessingInstruction(*args, **kwargs): ...
    def createTextNode(*args, **kwargs): ...
    def doctype(*args, **kwargs): ...
    def documentElement(*args, **kwargs): ...
    def elementById(*args, **kwargs): ...
    def elementsByTagName(*args, **kwargs): ...
    def elementsByTagNameNS(*args, **kwargs): ...
    def implementation(*args, **kwargs): ...
    def importNode(*args, **kwargs): ...
    def nodeType(*args, **kwargs): ...
    def setContent(*args, **kwargs): ...
    def toByteArray(*args, **kwargs): ...
    def toString(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomComment(QDomCharacterData):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomText(QDomCharacterData):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    def splitText(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QDomCDATASection(QDomText):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def nodeType(*args, **kwargs): ...
    __new__ : builtin_function_or_method



