from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtWidgets import QItemDelegate as _QItemDelegate
from PySide2.QtCore import QAbstractTableModel as _QAbstractTableModel
from PySide2.QtCore import QObject as _QObject


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QSqlError(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def databaseText(*args, **kwargs): ...
    def driverText(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def nativeErrorCode(*args, **kwargs): ...
    def number(*args, **kwargs): ...
    def setDatabaseText(*args, **kwargs): ...
    def setDriverText(*args, **kwargs): ...
    def setNumber(*args, **kwargs): ...
    def setType(*args, **kwargs): ...
    def text(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    ConnectionError : ErrorType
    
    ErrorType : Type[ErrorType]
    
    NoError : ErrorType
    
    StatementError : ErrorType
    
    TransactionError : ErrorType
    
    UnknownError : ErrorType
    
    __new__ : builtin_function_or_method


class QSqlResult(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addBindValue(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def bindValue(*args, **kwargs): ...
    def bindValueType(*args, **kwargs): ...
    def bindingSyntax(*args, **kwargs): ...
    def boundValue(*args, **kwargs): ...
    def boundValueCount(*args, **kwargs): ...
    def boundValueName(*args, **kwargs): ...
    def boundValues(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def detachFromResultSet(*args, **kwargs): ...
    def driver(*args, **kwargs): ...
    def execBatch(*args, **kwargs): ...
    def exec_(*args, **kwargs): ...
    def executedQuery(*args, **kwargs): ...
    def fetch(*args, **kwargs): ...
    def fetchFirst(*args, **kwargs): ...
    def fetchLast(*args, **kwargs): ...
    def fetchNext(*args, **kwargs): ...
    def fetchPrevious(*args, **kwargs): ...
    def handle(*args, **kwargs): ...
    def hasOutValues(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def isForwardOnly(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isSelect(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def lastError(*args, **kwargs): ...
    def lastInsertId(*args, **kwargs): ...
    def lastQuery(*args, **kwargs): ...
    def nextResult(*args, **kwargs): ...
    def numRowsAffected(*args, **kwargs): ...
    def numericalPrecisionPolicy(*args, **kwargs): ...
    def prepare(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def reset(*args, **kwargs): ...
    def resetBindCount(*args, **kwargs): ...
    def savePrepare(*args, **kwargs): ...
    def setActive(*args, **kwargs): ...
    def setAt(*args, **kwargs): ...
    def setForwardOnly(*args, **kwargs): ...
    def setLastError(*args, **kwargs): ...
    def setNumericalPrecisionPolicy(*args, **kwargs): ...
    def setQuery(*args, **kwargs): ...
    def setSelect(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    BindingSyntax : Type[BindingSyntax]
    
    NamedBinding : BindingSyntax
    
    PositionalBinding : BindingSyntax
    
    VirtualHookOperation : Type[VirtualHookOperation]
    
    __new__ : builtin_function_or_method


class QSqlField(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def clear(*args, **kwargs): ...
    def defaultValue(*args, **kwargs): ...
    def isAutoValue(*args, **kwargs): ...
    def isGenerated(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isReadOnly(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def length(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def precision(*args, **kwargs): ...
    def requiredStatus(*args, **kwargs): ...
    def setAutoValue(*args, **kwargs): ...
    def setDefaultValue(*args, **kwargs): ...
    def setGenerated(*args, **kwargs): ...
    def setLength(*args, **kwargs): ...
    def setName(*args, **kwargs): ...
    def setPrecision(*args, **kwargs): ...
    def setReadOnly(*args, **kwargs): ...
    def setRequired(*args, **kwargs): ...
    def setRequiredStatus(*args, **kwargs): ...
    def setSqlType(*args, **kwargs): ...
    def setType(*args, **kwargs): ...
    def setValue(*args, **kwargs): ...
    def type(*args, **kwargs): ...
    def typeID(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    Optional : RequiredStatus
    
    Required : RequiredStatus
    
    RequiredStatus : Type[RequiredStatus]
    
    Unknown : RequiredStatus
    
    __new__ : builtin_function_or_method


class QSqlDriverCreatorBase(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def createObject(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSqlDatabase(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def close(*args, **kwargs): ...
    def commit(*args, **kwargs): ...
    def connectOptions(*args, **kwargs): ...
    def connectionName(*args, **kwargs): ...
    def databaseName(*args, **kwargs): ...
    def driver(*args, **kwargs): ...
    def driverName(*args, **kwargs): ...
    def exec_(*args, **kwargs): ...
    def hostName(*args, **kwargs): ...
    def isOpen(*args, **kwargs): ...
    def isOpenError(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def lastError(*args, **kwargs): ...
    def numericalPrecisionPolicy(*args, **kwargs): ...
    def open(*args, **kwargs): ...
    def password(*args, **kwargs): ...
    def port(*args, **kwargs): ...
    def primaryIndex(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def rollback(*args, **kwargs): ...
    def setConnectOptions(*args, **kwargs): ...
    def setDatabaseName(*args, **kwargs): ...
    def setHostName(*args, **kwargs): ...
    def setNumericalPrecisionPolicy(*args, **kwargs): ...
    def setPassword(*args, **kwargs): ...
    def setPort(*args, **kwargs): ...
    def setUserName(*args, **kwargs): ...
    def tables(*args, **kwargs): ...
    def transaction(*args, **kwargs): ...
    def userName(*args, **kwargs): ...
    @staticmethod
    def addDatabase(*args, **kwargs): ...
    @staticmethod
    def cloneDatabase(*args, **kwargs): ...
    @staticmethod
    def connectionNames(*args, **kwargs): ...
    @staticmethod
    def contains(*args, **kwargs): ...
    @staticmethod
    def database(*args, **kwargs): ...
    @staticmethod
    def drivers(*args, **kwargs): ...
    @staticmethod
    def isDriverAvailable(*args, **kwargs): ...
    @staticmethod
    def registerSqlDriver(*args, **kwargs): ...
    @staticmethod
    def removeDatabase(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    defaultConnection : str


class QSqlRelation(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def displayColumn(*args, **kwargs): ...
    def indexColumn(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def tableName(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSqlRecord(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def append(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def clearValues(*args, **kwargs): ...
    def contains(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def field(*args, **kwargs): ...
    def fieldName(*args, **kwargs): ...
    def indexOf(*args, **kwargs): ...
    def insert(*args, **kwargs): ...
    def isEmpty(*args, **kwargs): ...
    def isGenerated(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def keyValues(*args, **kwargs): ...
    def remove(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def setGenerated(*args, **kwargs): ...
    def setNull(*args, **kwargs): ...
    def setValue(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSql(_Object):
    AfterLastRow : Location
    
    AllTables : TableType
    
    BeforeFirstRow : Location
    
    Binary : ParamTypeFlag
    
    HighPrecision : NumericalPrecisionPolicy
    
    In : ParamTypeFlag
    
    InOut : ParamTypeFlag
    
    Location : Type[Location]
    
    LowPrecisionDouble : NumericalPrecisionPolicy
    
    LowPrecisionInt32 : NumericalPrecisionPolicy
    
    LowPrecisionInt64 : NumericalPrecisionPolicy
    
    NumericalPrecisionPolicy : Type[NumericalPrecisionPolicy]
    
    Out : ParamTypeFlag
    
    ParamType : Type[ParamType]
    
    ParamTypeFlag : Type[ParamTypeFlag]
    
    SystemTables : TableType
    
    TableType : Type[TableType]
    
    Tables : TableType
    
    Views : TableType


class QSqlQuery(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addBindValue(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def bindValue(*args, **kwargs): ...
    def boundValue(*args, **kwargs): ...
    def boundValues(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def driver(*args, **kwargs): ...
    def execBatch(*args, **kwargs): ...
    def exec_(*args, **kwargs): ...
    def executedQuery(*args, **kwargs): ...
    def finish(*args, **kwargs): ...
    def first(*args, **kwargs): ...
    def isActive(*args, **kwargs): ...
    def isForwardOnly(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def isSelect(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def last(*args, **kwargs): ...
    def lastError(*args, **kwargs): ...
    def lastInsertId(*args, **kwargs): ...
    def lastQuery(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    def nextResult(*args, **kwargs): ...
    def numRowsAffected(*args, **kwargs): ...
    def numericalPrecisionPolicy(*args, **kwargs): ...
    def prepare(*args, **kwargs): ...
    def previous(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def result(*args, **kwargs): ...
    def seek(*args, **kwargs): ...
    def setForwardOnly(*args, **kwargs): ...
    def setNumericalPrecisionPolicy(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    def value(*args, **kwargs): ...
    BatchExecutionMode : Type[BatchExecutionMode]
    
    ValuesAsColumns : BatchExecutionMode
    
    ValuesAsRows : BatchExecutionMode
    
    __new__ : builtin_function_or_method


class QSqlRelationalDelegate(_QItemDelegate):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def createEditor(*args, **kwargs): ...
    def setModelData(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSqlDriver(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def beginTransaction(*args, **kwargs): ...
    def cancelQuery(*args, **kwargs): ...
    def close(*args, **kwargs): ...
    def commitTransaction(*args, **kwargs): ...
    def createResult(*args, **kwargs): ...
    def dbmsType(*args, **kwargs): ...
    def escapeIdentifier(*args, **kwargs): ...
    def formatValue(*args, **kwargs): ...
    def hasFeature(*args, **kwargs): ...
    def isIdentifierEscaped(*args, **kwargs): ...
    def isOpen(*args, **kwargs): ...
    def isOpenError(*args, **kwargs): ...
    def lastError(*args, **kwargs): ...
    def numericalPrecisionPolicy(*args, **kwargs): ...
    def open(*args, **kwargs): ...
    def primaryIndex(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def rollbackTransaction(*args, **kwargs): ...
    def setLastError(*args, **kwargs): ...
    def setNumericalPrecisionPolicy(*args, **kwargs): ...
    def setOpen(*args, **kwargs): ...
    def setOpenError(*args, **kwargs): ...
    def sqlStatement(*args, **kwargs): ...
    def stripDelimiters(*args, **kwargs): ...
    def subscribeToNotification(*args, **kwargs): ...
    def subscribedToNotifications(*args, **kwargs): ...
    def tables(*args, **kwargs): ...
    def unsubscribeFromNotification(*args, **kwargs): ...
    BLOB : DriverFeature
    
    BatchOperations : DriverFeature
    
    CancelQuery : DriverFeature
    
    DB2 : DbmsType
    
    DbmsType : Type[DbmsType]
    
    DeleteStatement : StatementType
    
    DriverFeature : Type[DriverFeature]
    
    EventNotifications : DriverFeature
    
    FieldName : IdentifierType
    
    FinishQuery : DriverFeature
    
    IdentifierType : Type[IdentifierType]
    
    InsertStatement : StatementType
    
    Interbase : DbmsType
    
    LastInsertId : DriverFeature
    
    LowPrecisionNumbers : DriverFeature
    
    MSSqlServer : DbmsType
    
    MultipleResultSets : DriverFeature
    
    MySqlServer : DbmsType
    
    NamedPlaceholders : DriverFeature
    
    NotificationSource : Type[NotificationSource]
    
    Oracle : DbmsType
    
    OtherSource : NotificationSource
    
    PositionalPlaceholders : DriverFeature
    
    PostgreSQL : DbmsType
    
    PreparedQueries : DriverFeature
    
    QuerySize : DriverFeature
    
    SQLite : DbmsType
    
    SelectStatement : StatementType
    
    SelfSource : NotificationSource
    
    SimpleLocking : DriverFeature
    
    StatementType : Type[StatementType]
    
    Sybase : DbmsType
    
    TableName : IdentifierType
    
    Transactions : DriverFeature
    
    Unicode : DriverFeature
    
    UnknownDbms : DbmsType
    
    UnknownSource : NotificationSource
    
    UpdateStatement : StatementType
    
    WhereStatement : StatementType
    
    __new__ : builtin_function_or_method
    
    notification : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSqlQueryModel(_QAbstractTableModel):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def beginInsertColumns(*args, **kwargs): ...
    def beginInsertRows(*args, **kwargs): ...
    def beginRemoveColumns(*args, **kwargs): ...
    def beginRemoveRows(*args, **kwargs): ...
    def beginResetModel(*args, **kwargs): ...
    def canFetchMore(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def columnCount(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def endInsertColumns(*args, **kwargs): ...
    def endInsertRows(*args, **kwargs): ...
    def endRemoveColumns(*args, **kwargs): ...
    def endRemoveRows(*args, **kwargs): ...
    def endResetModel(*args, **kwargs): ...
    def fetchMore(*args, **kwargs): ...
    def headerData(*args, **kwargs): ...
    def indexInQuery(*args, **kwargs): ...
    def insertColumns(*args, **kwargs): ...
    def lastError(*args, **kwargs): ...
    def query(*args, **kwargs): ...
    def queryChange(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def rowCount(*args, **kwargs): ...
    def setHeaderData(*args, **kwargs): ...
    def setLastError(*args, **kwargs): ...
    def setQuery(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSqlIndex(QSqlRecord):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def append(*args, **kwargs): ...
    def cursorName(*args, **kwargs): ...
    def isDescending(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def setCursorName(*args, **kwargs): ...
    def setDescending(*args, **kwargs): ...
    def setName(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSqlTableModel(QSqlQueryModel):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clear(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def database(*args, **kwargs): ...
    def deleteRowFromTable(*args, **kwargs): ...
    def editStrategy(*args, **kwargs): ...
    def fieldIndex(*args, **kwargs): ...
    def filter(*args, **kwargs): ...
    def flags(*args, **kwargs): ...
    def headerData(*args, **kwargs): ...
    def indexInQuery(*args, **kwargs): ...
    def insertRecord(*args, **kwargs): ...
    def insertRowIntoTable(*args, **kwargs): ...
    def insertRows(*args, **kwargs): ...
    def isDirty(*args, **kwargs): ...
    def orderByClause(*args, **kwargs): ...
    def primaryKey(*args, **kwargs): ...
    def primaryValues(*args, **kwargs): ...
    def record(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def removeRows(*args, **kwargs): ...
    def revert(*args, **kwargs): ...
    def revertAll(*args, **kwargs): ...
    def revertRow(*args, **kwargs): ...
    def rowCount(*args, **kwargs): ...
    def select(*args, **kwargs): ...
    def selectRow(*args, **kwargs): ...
    def selectStatement(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setEditStrategy(*args, **kwargs): ...
    def setFilter(*args, **kwargs): ...
    def setPrimaryKey(*args, **kwargs): ...
    def setQuery(*args, **kwargs): ...
    def setRecord(*args, **kwargs): ...
    def setSort(*args, **kwargs): ...
    def setTable(*args, **kwargs): ...
    def sort(*args, **kwargs): ...
    def submit(*args, **kwargs): ...
    def submitAll(*args, **kwargs): ...
    def tableName(*args, **kwargs): ...
    def updateRowInTable(*args, **kwargs): ...
    EditStrategy : Type[EditStrategy]
    
    OnFieldChange : EditStrategy
    
    OnManualSubmit : EditStrategy
    
    OnRowChange : EditStrategy
    
    __new__ : builtin_function_or_method
    
    beforeDelete : PySide2.QtCore.Signal
    
    beforeInsert : PySide2.QtCore.Signal
    
    beforeUpdate : PySide2.QtCore.Signal
    
    primeInsert : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QSqlRelationalTableModel(QSqlTableModel):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def clear(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def insertRowIntoTable(*args, **kwargs): ...
    def orderByClause(*args, **kwargs): ...
    def relation(*args, **kwargs): ...
    def relationModel(*args, **kwargs): ...
    def removeColumns(*args, **kwargs): ...
    def revertRow(*args, **kwargs): ...
    def select(*args, **kwargs): ...
    def selectStatement(*args, **kwargs): ...
    def setData(*args, **kwargs): ...
    def setJoinMode(*args, **kwargs): ...
    def setRelation(*args, **kwargs): ...
    def setTable(*args, **kwargs): ...
    def updateRowInTable(*args, **kwargs): ...
    InnerJoin : JoinMode
    
    JoinMode : Type[JoinMode]
    
    LeftJoin : JoinMode
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject



