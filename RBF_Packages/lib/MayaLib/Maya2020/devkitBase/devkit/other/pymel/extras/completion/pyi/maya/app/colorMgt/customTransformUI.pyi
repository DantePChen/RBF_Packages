from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya
import maya.cmds as cmds


from functools import partial


if False:
    from typing import Dict, List, Tuple, Union, Optional

class Dialog(object):
    def __init__(self, path="''", name="''", transformConnection="''"): ...
    def add(self):
        """
        Add the transform to the catalog.
        """
        ...
    def build(self): ...
    def onDismissButton(self, data, msg): ...
    def onPathBrowse(self, data): ...
    def remove(self):
        """
        Remove the transform from the catalog.
        """
        ...
    def show(self): ...
    __dict__ : dictproxy
    
    __weakref__ : getset_descriptor


class ViewTransformDialog(Dialog):
    def __init__(self, path="''", name="''", transformConnection="''"): ...
    def apply(self): ...
    def direction(self): ...
    def title(self): ...
    def type(self): ...


class RenderingSpaceDialog(Dialog):
    def __init__(self, path="''", name="''", transformConnection="''"): ...
    def apply(self): ...
    def direction(self): ...
    def title(self): ...
    def type(self): ...


class InputTransformDialog(Dialog):
    def __init__(self, path="''", name="''", transformConnection="''"): ...
    def apply(self): ...
    def direction(self): ...
    def title(self): ...
    def type(self): ...


class OutputTransformDialog(Dialog):
    def __init__(self, path="''", name="''", transformConnection="''", connectionType="''", outputTarget="''", dialogTitle="''"): ...
    def apply(self): ...
    def direction(self): ...
    def title(self): ...
    def type(self): ...




def addCustomTransformDialog(type):
    """
    Add and return a user transform.
    
    Return transform name, or empty string in case of error or cancel.
    """
    ...
def dialogFactory(type): ...

