from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya.api.OpenMaya as nom
import maya.OpenMaya as om
from . import plugin as typePlugin
import maya
import PySide2.QtGui as QtGui
import maya.app.flux.core as fx
import maya.mel as mel
import PySide2.QtXml as QtXml
from . import TypeAnimTextWidget
import PySide2.QtSvg as QtSvg
import PySide2.QtWidgets as QtWidgets
import MASH
import time
import shiboken2 as shiboken
import maya.app.flux.ae.ui as faeui
import PySide2.QtCore as QtCore
import PySide2.QtXml as qt


from maya.app.flux.ae.Template import *


from maya.app.flux.ae.Custom import Custom
from maya.app.flux.ui.core import pix
from PySide2.QtCore import Slot


if False:
    from typing import Dict, List, Tuple, Union, Optional

class MyCustom(Custom):
    def addShellDynamics(self): ...
    def alignChanged(self, *args): ...
    def alignClicked(self, index): ...
    def animationTabChanged(self, visible): ...
    def backBevelEnabledChanged(self): ...
    def bevelStyleChanged(self): ...
    def buildUI(self, nodeName): ...
    def connectToMash(self, name): ...
    def contextChanged(self): ...
    def createAndConnectToMash(self): ...
    def createCurveClicked(self): ...
    def createCustomWidgets(self): ...
    def createFalloffCurve(self, attr): ...
    def createLocalPivotBtn(self, axis): ...
    def deformableTypeChanged(self): ...
    def disableAllBevels(self): ...
    def editFalloffCurve(self, attr): ...
    def enableBevelClicked(self): ...
    def enableBevelStyle(self): ...
    def enableDisableBevels(self): ...
    def extrudeEnableChanged(self): ...
    def fixAnimLegacyConnections(self): ...
    def fontChanged(self, index='None'): ...
    def fontStyleChanged(self, index='None'): ...
    def generatorChanged(self): ...
    def getAcceptableNodesForMASH(self): ...
    def getAnimationNode(self): ...
    def getExtrudeNode(self):
        """
        # Utilities
        """
        ...
    def getMashConnection(self): ...
    def getRemeshNode(self): ...
    def getShader(self, index): ...
    def initFontDictionary(self): ...
    def isAnimConnLegacy(self): ...
    def isBevelEnabled(self): ...
    def loadStyleList(self): ...
    def manipReplacementClicked(self): ...
    def materialJoinClicked(self): ...
    def materialSplitClicked(self): ...
    def nodeChanged(self): ...
    def pivotLocationClicked(self, axis): ...
    def pivotLocationMenuClicked(self, cmd): ...
    def setupNavigationControls(self, navigations): ...
    def setupWritingSystems(self): ...
    def shellAnimOptionChanged(self, index): ...
    def shellAnimationClicked(self): ...
    def showLocalPivotMenu(self, axis, rpChecked, spChecked): ...
    def strRes(self, name): ...
    def stringResourceFunction(self, name): ...
    def switchBackBevel(self): ...
    def switchFrontBevel(self): ...
    def textChanged(self): ...
    def updateAnimateEnabled(self): ...
    def updateBevelVisibility(self): ...
    def updateDecimalPlaces(self): ...
    def updateFont(self): ...
    def updateFontStyle(self): ...
    def updateFontWritingSystem(self): ...
    def updateMASHShortcuts(self): ...
    def updateMaterialSplitBtn(self): ...
    def updateShellAnimOption(self): ...
    def updateTextValues(self): ...
    def updateWritingSystem(self): ...
    def writingSystemChanged(self, index='None'): ...
    staticMetaObject : QtCore.QMetaObject


class AEtypeTemplate(Template):
    def buildUI(self, nodeName): ...




def EscapedToUni(str): ...
def wrapInstance(*args, **kwargs): ...
def getShaderFromObject(mesh):
    """
    #get the shader attribute attached to an object
    #this and the next function are VERY similar, but they go about their task in different ways - which only work in different situations.
    """
    ...
def unwrapInstance(*args, **kwargs): ...
def getShaderFromArray(GrpMessageConections):
    """
    #given a list of nodes, find the shading engine, and it's material
    """
    ...
def UniToEscaped(str): ...
def ByteToHex(byteStr):
    """
    Convert a byte string to it's hex string representation e.g. for output.
    """
    ...
def getVectorShadingGroups(mesh, extrudeNode):
    """
    #given the group nodes, get the associated materials
    """
    ...
def getShadingGroupsFromObject(mesh):
    """
    #get the shaders attached to an object
    """
    ...
def str_res(name): ...
def joinTypeMaterials(meshShape, typeNode, shaderType): ...
def HexToUni(hexStr): ...
def splitTypeMaterials(extrudeNode, meshShape, typeNode, shaderType):
    """
    #assign materials to the type tool
    """
    ...
def HexToByte(hexStr):
    """
    Convert a string hex byte values into a byte string. The Hex Byte values may
    or may not be space separated.
    """
    ...
def getCurrentCtxName(): ...

