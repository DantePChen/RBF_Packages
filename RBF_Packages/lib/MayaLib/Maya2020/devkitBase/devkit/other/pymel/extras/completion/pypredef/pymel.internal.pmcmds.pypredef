"""
There are a number of pymel objects which must be converted to a "mel-friendly"
representation. For example, in versions prior to 2009, some mel commands (ie, getAttr) which expect
string arguments will simply reject custom classes, even if they have a valid string representation.
Another Example is mel's matrix inputs, which expects a flat list of 16 flaots, while pymel's Matrix has a more typical
4x4 representation.

If you're having compatibility issues with your custom classes when passing them to maya.cmds,
simply add a __melobject__ function that returns a mel-friendly result and pass them to pymel's wrapped commands.

The wrapped commands in this module are the starting point for any other pymel customizations.
"""


from exceptions import ValueError as objectErrorType


if False:
    from typing import Dict, List, Tuple, Union, Optional

def igBrush(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.igBrush`
    """
    pass
def ModifyDisplacementRelease(*args, **kwargs): pass
def Art3dPaintTool(*args, **kwargs): pass
def UVCameraBasedProjection(*args, **kwargs): pass
def ToggleVertIDs(*args, **kwargs): pass
def TimeEditorClipScaleStart(*args, **kwargs): pass
def MakePaintable(*args, **kwargs): pass
def dR_loadRecentFile1(*args, **kwargs): pass
def multiTouch(*args, **kwargs):
    """
    Used to interact with the Gestura (multi-touch) library.                 In
    query mode, return type is based on queried flag.
    
    Flags:
    - gestures : g                   (bool)          [create,query]
        Enables/Disables multi touch gestures.
    
    - trackpad : t                   (int)           [create,query]
        Sets the trackpad mode.  Values can be: 1 - Cursor Control only2 - Multi-touch
        Gestures Only3 - Cursor and Multi-touchNote: this is a Maconly flag.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.multiTouch`
    """
    pass
def SelectAllMarkingMenu(*args, **kwargs): pass
def keyframeOutliner(*args, **kwargs): pass
def textField(*args, **kwargs): pass
def PolygonBooleanUnionOptions(*args, **kwargs): pass
def ActivateGlobalScreenSliderModeMarkingMenu(*args, **kwargs): pass
def SewUVs3D(*args, **kwargs): pass
def xgmBifrostBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmBifrostBrushToolCmd`
    """
    pass
def OutlinerExpandAllItems(*args, **kwargs): pass
def MoveRotateScaleTool(*args, **kwargs): pass
def exportEdits(*args, **kwargs): pass
def ToggleIsolateSelect(*args, **kwargs): pass
def OpenLayerEditor(*args, **kwargs): pass
def changeSubdivComponentDisplayLevel(*args, **kwargs):
    """
    Explicitly forces the subdivision surface to display components at a particular
    level of refinement.
    
    Flags:
    - level : l                      (int)           [create,query]
        Specifies the display level of components.
    
    - relative : r                   (bool)          [create,query]
        If set, level refers to the relative display level
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.changeSubdivComponentDisplayLevel`
    """
    pass
def polySplitCtx(*args, **kwargs):
    """
    Create a new context to split facets on polygonal objects                In
    query mode, return type is based on queried flag.
    
    Flags:
    - enablesnap : es                (bool)          [create,query,edit]
        Enable/disable custom magnet snapping to start/middle/end of edge
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - magnetsnap : ms                (int)           [create,query,edit]
        number of extra magnets to snap onto, regularly spaced along the edge
    
    - precsnap : ps                  (float)         [create,query,edit]
        precision for custom magnet snapping. Range[0,100]. Value 100 means any click on
        an edge will snap to either extremities or magnets.
    
    - smoothingangle : sma           (float)         [create,query,edit]
        the threshold that controls whether newly created edges are hard or soft
    
    - snaptoedge : ste               (bool)          [create,query,edit]
        Enable/disable snapping to edge. If enabled any click in the current face will
        snap to the closest valid edge. If there is no valid edge, the click will be
        ignored. NOTE: This is different from magnet snapping, which causes the click to
        snap to certain points along the edge.
    
    - subdivision : s                (int)           [create,query,edit]
        number of sub-edges to add between 2 consecutive edge points. Default is 1.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySplitCtx`
    """
    pass
def FBIKLabelThumb(*args, **kwargs): pass
def convertTessellation(*args, **kwargs):
    """
    Command to translate the basic tessellation attributes to advanced. If a camera
    flag is specified the translation will be based on the distance the surface is
    from the camera. The closer the surface is to the camera the more triangles
    there will be in the tessellation. If the -allCamerasflags is specified, the
    renderable camera closest to the surface will be used to set the tessellation.
    The camera tessellation estimate is also dependent on the current render
    resolution; a higher resolution the result in a more finely tessellated surface.
    Multiple NURB surfaces may be specified on the command line, or if no command
    arguments are specified the surfaces on the active list will be used. This
    command operates by calculating the chord height such that smooth tessellation
    is achieved when the surface is rendered.  The advanced tessellation setting
    will be enabled on each surface specified, the primary tessellation parameters
    will be set, and chord height will be used as the secondary criteria.
    
    Flags:
    - allCameras : acm               (bool)          [create]
        Specifies that all renderable cameras should be used in calculating     the
        screen based tessellation.
    
    - camera : cam                   (PyNode)        [create]
        Specifies the camera which should be used in calculating the screen     based
        tessellation.                                Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.convertTessellation`
    """
    pass
def SwapBlendShape(*args, **kwargs): pass
def polyDelVertex(*args, **kwargs): pass
def imfPlugins(*args, **kwargs):
    """
    This command queries all the available imf plugins for its name, keyword or
    image file extension. Only one of the attributes (name, keyword or extension)
    can be queried at a time. If no flags are specified, this command returns a list
    of all available plugin names.
    
    Flags:
    - extension : ext                (unicode)       [create,query]
        image file extension
    
    - keyword : key                  (unicode)       [create,query]
        imf keyword
    
    - multiFrameSupport : mfs        (unicode)       [create,query]
        multi frame IO is supported
    
    - pluginName : pn                (unicode)       [create,query]
        imf plugin name
    
    - readSupport : rs               (unicode)       [create,query]
        read operation is supported
    
    - writeSupport : ws              (unicode)       [create,query]
        write operation is supported                               Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.imfPlugins`
    """
    pass
def coarsenSubdivSelectionList(*args, **kwargs):
    """
    Coarsens a subdivision surface set of components based on the selection list.
    The selected components are selected at a coarser level.
    
    
    Derived from mel command `maya.cmds.coarsenSubdivSelectionList`
    """
    pass
def DisableConstraints(*args, **kwargs): pass
def PublishAttributes(*args, **kwargs): pass
def currentTime(*args, **kwargs): pass
def reference(*args, **kwargs): pass
def dR_selectRelease(*args, **kwargs): pass
def MatchUVs(*args, **kwargs): pass
def HypershadeIncreaseTraversalDepth(*args, **kwargs): pass
def NURBSSmoothnessHull(*args, **kwargs): pass
def characterizationToolUICmd(*args, **kwargs):
    """
    Flags:
    - character : ch                 (unicode)       []
    
    - characterlist : cl             (unicode)       []
    
    - characternodeassign : ca       (unicode)       []
    
    - configuremirrormatch : cm      (bool)          []
    
    - curcharstatus : cs             (bool)          []
    
    - currentcharname : cn           (bool)          []
    
    - deleteTool : dt                (bool)          []
    
    - deleteallchar : da             (bool)          []
    
    - deletecurrentchar : dc         (bool)          []
    
    - extractmapping : em            (bool)          []
    
    - forceUpdate : fup              (bool)          []
    
    - invertbone : ib                (int)           []
    
    - invertstate : invertstate      (bool)          []
    
    - islocked : im                  (bool)          []
    
    - ismirrortoggle : il            (bool)          []
    
    - locktoggle : lc                (bool)          []
    
    - mapbones : mb                  (bool)          []
    
    - mayanodename : mn              (unicode)       []
    
    - mirrormatch : mm               (bool)          []
    
    - nodeid : ni                    (int)           []
    
    - nonename : nn                  (bool)          []
    
    - saveCharacterization : sv      (bool)          []
    
    - setcurrentcharname : sc        (unicode)       []
    
    - validcharname : vc             (unicode)       []
    
    
    Derived from mel command `maya.cmds.characterizationToolUICmd`
    """
    pass
def ToggleCurrentContainerHud(*args, **kwargs): pass
def HypershadeDeleteAllBakeSets(*args, **kwargs): pass
def cmdArnoldAreaLights(*args, **kwargs): pass
def wire(*args, **kwargs): pass
def arnoldTemperatureToColor(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.arnoldTemperatureToColor`
    """
    pass
def SetDefaultManipMove(*args, **kwargs): pass
def TimeEditorUnmuteSelectedTracks(*args, **kwargs): pass
def AddHolder(*args, **kwargs): pass
def CreateWake(*args, **kwargs): pass
def polyUVSet(*args, **kwargs):
    """
    Command to do the following to uv sets:         - delete an existing uv set.
    - rename an existing uv set.     - create a new empty uv set.     - copy the
    values from one uv set to a another       pre-existing uv set.         - reorder
    two uv sets         - set the current uv set to a pre-existing uv set.     -
    modify sharing between instances of per-instance uv sets         - query the
    current uv set.         - set the current uv set to the last uv set added to an
    object.     - query the names of all uv sets.
    
    Flags:
    - allUVSets : auv                (bool)          [query,edit]
        This flag when used in in a query will return a list of all of the uv set names
    
    - allUVSetsIndices : uvn         (bool)          [query,edit]
        This flag when queried will return a list of the logical plug indices of all the
        uv sets in the sparse uv set array.
    
    - allUVSetsWithCount : awc       (bool)          [query,edit]
        This flag when used in a query will return a list of all of the uv set family
        names, with a count appended to the perInstance sets indicating the number of
        instances in the uv set shared by the specified or selected shape.
    
    - copy : cp                      (bool)          [create,query,edit]
        This flag when used will result in the copying of the uv set corresponding to
        name specified with the uvSet flag to the uvset corresponding to the name
        specified with the newUVSet flag
    
    - create : cr                    (bool)          [create,query,edit]
        This flag when used will result in the creation of an empty uv set corresponding
        to the name specified with the uvSet flag. If a uvSet with that name already
        exists, then no new uv set will be created.
    
    - currentLastUVSet : luv         (bool)          [create,query,edit]
        This flag when used will set the current uv set that the object needs to work
        on, to be the last uv set added to the object. If no uv set exists for the
        object, then no uv set name will be returned.
    
    - currentPerInstanceUVSet : cpi  (bool)          [query,edit]
        This is a query-only flag for use when the current uv set is a per-instance uv
        set family. This returns the member of the set family that corresponds to the
        currently select instance.
    
    - currentUVSet : cuv             (bool)          [create,query,edit]
        This flag when used will set the current uv set that the object needs to work
        on, to be the uv set corresponding to the name specified with the uvSet flag.
        This does require that a uvSet with the specified name exist. When queried, this
        returns the current uv set.
    
    - delete : d                     (bool)          [create,query,edit]
        This flag when used will result in the deletion of the uv set corresponding to
        the name specified with the uvSet flag.
    
    - genNewUVSet : gen              (bool)          [query,edit]
        This is a query-only flag to generate a new unique name.
    
    - newUVSet : nuv                 (unicode)       [create,query,edit]
        Specifies the name that the uv set corresponding to the name specified with the
        uvSet flag, needs to be renamed to.
    
    - perInstance : pi               (bool)          [create,query,edit]
        This flag can be used in conjunction with the create flag to indicate whether or
        not the uv set is per-instance. When you create a per-instance uv set, the set
        will be applied as shared between all selected instances of the shape unless the
        unshared flag is used. The perInstance flag can be used in query mode with the
        currentUVSet or allUVSets  flag to indicate that the set family names (i.e. not
        containing instance identifiers) will be returned by the query. In query mode,
        this flag can accept a value.
    
    - projections : pr               (bool)          [query,edit]
        This flag when used in a query will return a list of polygon uv projection node
        names. The order of the list is from most-recently-applied to least-recently-
        applied.
    
    - rename : rn                    (bool)          [create,query,edit]
        This flag when used will result in the renaming of the uv set corresponding to
        the name specified with the uvSet flag to the name specified using the newUVSet
        flag.
    
    - reorder : ro                   (bool)          [create,query,edit]
        This flag when used will result in the reordering of two uv sets corresponding
        to name specified with the uvSet flag, and the uvset corresponding to the name
        specified with the newUVSet flag
    
    - shareInstances : si            (bool)          [create,query,edit]
        This flag is used to modify the sharing of per-instance uv sets within a given
        uv set family so that all selected instances share the specified set. In query
        mode, it returns a list of the instances that share the set specified by the
        uvSet flag.
    
    - unshared : us                  (bool)          [create,query,edit]
        This flag can be used in conjunction with the create and perInstance flags to
        indicate that the newly created per-instance set should be created with a
        separate set per instance.
    
    - uvSet : uvs                    (unicode)       [create,query,edit]
        Specifies the name of the uv set that this command needs to work on. This flag
        has to be specified for this command to do anything meaningful other than query
        the current uv set. Flag can have multiple arguments, passed either as a tuple
        or a list.
    
    
    Derived from mel command `maya.cmds.polyUVSet`
    """
    pass
def distanceDimContext(*args, **kwargs):
    """
    Command used to register the distanceDimCtx tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.distanceDimContext`
    """
    pass
def AssignToonShaderThreeToneBrightness(*args, **kwargs): pass
def nClothReplaceFrames(*args, **kwargs): pass
def FBXUIShowOptions(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXUIShowOptions`
    """
    pass
def SubdivSmoothnessFineOptions(*args, **kwargs): pass
def getParticleAttr(*args, **kwargs):
    """
    This action will return either an array of values, or the average value and
    maximum offset, for a specied per-particle attribute of a particle object or
    component.  If a particle component is specified on the command line, values are
    returned for that component only.  If an object name is given instead, values
    are returned for all particles in that object.  If no object name is passed, but
    a particle object or component is selected, values are returned for the
    selection. If you list components, they must all be from the same particle
    object; the action ignores all objects after the first.  Likewise if you list
    more than one object, the actiion will return values only for the first one.
    
    Flags:
    - array : a                      (bool)          [create]
        Tells the action whether you want a full array of data. If set true, the action
        returns an array of floats containing the values for all the specified
        particles.  If set false (the default), the action returns the average value and
        the maximum offset from the average over the component.  If the attribute is a
        vector attribute, the action returns six values: Average X, Average Y, Average
        Z, Maximum offset in X, Y, and Z of component.
    
    - attribute : at                 (unicode)       [create]
        Tells the action which attribute you want the value of. Must be a per-particle
        attribute.
    
    - object : o                     (unicode)       [create]
        This flag is obsolete.  Instead of using it, please pass the name of the object
        and/or components you want on the command line. See the examples.Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getParticleAttr`
    """
    pass
def createNurbsCubeCtx(*args, **kwargs):
    """
    Flags:
    - attachToPatchesU : apu         (bool)          []
    
    - attachToPatchesV : apv         (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - depth : d                      (float)         []
    
    - doDragEdit : dde               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - surfaceDegree : sd             (int)           []
    
    - uPatches : up                  (int)           []
    
    - vPatches : vp                  (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createNurbsCubeCtx`
    """
    pass
def rollCtx(*args, **kwargs):
    """
    Create, edit, or query a roll context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - rollScale : rs                 (float)         [create,query,edit]
        In degrees of rotation per 100 pixels of cursor drag.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.rollCtx`
    """
    pass
def performanceOptions(*args, **kwargs):
    """
    Sets the global performance options for the application.  The options allow the
    disabling of features such as stitch surfaces or deformers to cut down on
    computation time in the scene. Performance options that are in effect may be on
    all the time, or they can be turned on only for interaction.  In the latter
    case, the options will only take effect during UI interaction or playback. Note
    that none of these performance options will affect rendering.
    
    Flags:
    - clusterResolution : cr         (float)         [query]
        Sets the global cluster resolution.  This value may range between 0.0 (exact
        calculation) and 10.0 (rough approximation)
    
    - disableStitch : ds             (unicode)       [query]
        Sets the state of stitch surface disablement.  Setting this to onsuppresses the
        generation of stitch surfaces. Valid values are on, off, interactive.
    
    - disableTrimBoundaryDisplay : dtb (unicode)       [query]
        Sets the state of trim boundary drawing disablement.  Setting this to
        onsuppresses the drawing of surface trim boundaries. Valid values are on, off,
        interactive.
    
    - disableTrimDisplay : dt        (unicode)       [query]
        Sets the state of trim drawing disablement.  Setting this to onsuppresses the
        drawing of surface trims. Valid values are on, off, interactive.
    
    - latticeResolution : lr         (float)         [query]
        Sets the global lattice resolution.  This value may range between 0.0 (exact
        calculation) and 1.0 (rough approximation)
    
    - passThroughBindSkinAndFlexors : pbf (unicode)       [query]
        Sets the state of bind skin and all flexors pass through. Valid values are on,
        off, interactive.
    
    - passThroughBlendShape : pbs    (unicode)       [query]
        Sets the state of blend shape deformer pass through. Valid values are on, off,
        interactive.
    
    - passThroughCluster : pc        (unicode)       [query]
        Sets the state of cluster deformer pass through. Valid values are on, off,
        interactive.
    
    - passThroughDeltaMush : pdm     (unicode)       [query]
        Sets the state of delta mush deformer pass through. Valid values are on, off,
        interactive.
    
    - passThroughFlexors : pf        (unicode)       [query]
        Sets the state of flexor pass through. Valid values are on, off, interactive.
    
    - passThroughLattice : pl        (unicode)       [query]
        Sets the state of lattice deformer pass through. Valid values are on, off,
        interactive.
    
    - passThroughPaintEffects : pp   (unicode)       [query]
        Sets the state of paint effects pass through. Valid values are on, off,
        interactive.
    
    - passThroughSculpt : ps         (unicode)       [query]
        Sets the state of sculpt deformer pass through. Valid values are on, off,
        interactive.
    
    - passThroughWire : pw           (unicode)       [query]
        Sets the state of wire deformer pass through. Valid values are on, off,
        interactive.
    
    - skipHierarchyTraversal : sht   (bool)          [query]
        When enabled, hierarchy traversal of invisible objects in the scene will be
        disabled in order to increase performance however this has a side effect of
        performing redundant viewport refreshes on certain actions such as
        manipulations, start/end of playback, idle refresh calls, etc.
    
    - useClusterResolution : ucr     (unicode)       [query]
        Sets the state of cluster deformer global resolution.  This allows clusters to
        be calculated at a lower resolution. Valid values are on, off, interactive.
    
    - useLatticeResolution : ulr     (unicode)       [query]
        Sets the state of lattice deformer global resolution.  This allows lattices to
        be calculated at a lower resolution. Valid values are on, off, interactive.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.performanceOptions`
    """
    pass
def ResetViewport(*args, **kwargs): pass
def OutlinerToggleIgnoreHidden(*args, **kwargs): pass
def TangentsFlat(*args, **kwargs): pass
def PanelPreferencesWindow(*args, **kwargs): pass
def polyGear(*args, **kwargs):
    """
    Flags:
    - gearMiddle : gm                (float)         []
    
    - gearOffset : go                (float)         []
    
    - gearSpacing : gs               (float)         []
    
    - gearTip : gt                   (float)         []
    
    - height : h                     (float)         []
    
    - heightDivisions : hd           (int)           []
    
    - internalRadius : ir            (float)         []
    
    - radius : r                     (float)         []
    
    - sides : s                      (int)           []
    
    - taper : ta                     (float)         []
    
    - twist : t                      (float)         []
    
    
    Derived from mel command `maya.cmds.polyGear`
    """
    pass
def ToggleToolSettings(*args, **kwargs): pass
def CutKeysOptions(*args, **kwargs): pass
def hardware(*args, **kwargs):
    """
    Return description of the hardware available in the machine.
    
    Flags:
    - brdType : brd                  (bool)          [create]
        Returns IP number identifying the CPU motherboard
    
    - cpuType : cpu                  (bool)          [create]
        Returns type of CPU
    
    - graphicsType : gfx             (bool)          [create]
        Returns string identifying graphics hardware type
    
    - megaHertz : mhz                (bool)          [create]
        Returns string identifying the speed of the CPU chip
    
    - numProcessors : npr            (bool)          [create]
        Returns string identifying the number of processors                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hardware`
    """
    pass
def ResetProperty2State(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.ResetProperty2State`
    """
    pass
def TimeEditorExportSelectionOpt(*args, **kwargs): pass
def moduleDetectionLogic(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.moduleDetectionLogic`
    """
    pass
def colorSliderButtonGrp(*args, **kwargs): pass
def modelPanel(*args, **kwargs): pass
def ToggleKeepWireCulling(*args, **kwargs): pass
def ToggleColorFeedback(*args, **kwargs): pass
def BrushPresetBlendShadingOff(*args, **kwargs): pass
def addDynamicAttribute(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.addDynamicAttribute`
    """
    pass
def ikHandleDisplayScale(*args, **kwargs):
    """
    This action modifies and queries the current display size of ikHandle. The
    default display scale is 1.0.
    
    
    Derived from mel command `maya.cmds.ikHandleDisplayScale`
    """
    pass
def FreezeTransformations(*args, **kwargs): pass
def polyCloseBorder(*args, **kwargs): pass
def EmptyAnimLayer(*args, **kwargs): pass
def RemoveShrinkWrapTarget(*args, **kwargs): pass
def artAttrPaintVertexCtx(*args, **kwargs):
    """
    This is a context command to set the flags on the artAttrContext, which is the
    base context for attribute painting operations. All commands require the name of
    the context as the last argument as this provides the name of the context to
    create, edit or query. This is a context command to set the flags on the Paint
    color on vertex Tool context. In query mode, return type is based on queried
    flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - activeListChangedProc : alp    (unicode)       [create,query,edit]
        Accepts a string that contains a MEL command that is invoked whenever the active
        list changes. There may be some situations where the UI, for example, needs to
        be updated, when objects are selected/deselected in the scene. In query mode,
        the name of the currently registered MEL command is returned and this will be an
        empty string if none is defined.
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - alphaclamp : alc               (unicode)       [create,query,edit]
        Specifies if the weight value should be alpha clamped to the lower and upper
        bounds. There are four options here: none- no clamping is performed, lower-
        clamps only to the lower bound, upper- clamps only to the upper bounds, both-
        clamps to the lower and upper bounds. C: Default is none.  Q: When queried, it
        returns a string.
    
    - alphaclamplower : acl          (float)         [create,query,edit]
        Specifies the lower bound for the alpha values. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - alphaclampupper : acu          (float)         [create,query,edit]
        Specifies the upper bound for the alpha values. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - attrSelected : asl             (unicode)       [query]
        Returns a name of the currently selected attribute. Q: When queried, it returns
        a string.
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clamp : cl                     (unicode)       [create,query,edit]
        Specifies if the weight value should be clamped to the lower and upper bounds.
        There are four options here: none- no clamping is performed, lower- clamps only
        to the lower bound, upper- clamps only to the upper bounds, both- clamps to the
        lower and upper bounds. C: Default is none.  Q: When queried, it returns a
        string.
    
    - clamplower : cll               (float)         [create,query,edit]
        Specifies the lower bound for the values. C: Default is 0.0.  Q: When queried,
        it returns a float.
    
    - clampupper : clu               (float)         [create,query,edit]
        Specifies the upper bound for the values. C: Default is 1.0.  Q: When queried,
        it returns a float.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - colorAlphaValue : cl1          (float)         [create,query,edit]
        The Alpha value of the color.
    
    - colorRGBAValue : cl4           (float, float, float, float) [create,query,edit]
        The RGBA value of the color.
    
    - colorRGBValue : cl3            (float, float, float) [create,query,edit]
        The RGB value of the color.
    
    - colorRamp : cr                 (unicode)       [create,query,edit]
        Allows a user defined color ramp to be used to map values to colors.
    
    - colorfeedback : cf             (bool)          [create,query,edit]
        Sets on/off the color feedback display. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorfeedbackOverride : cfo    (bool)          [create,query,edit]
        Sets on/off the color feedback override. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorrangelower : crl          (float)         [create,query,edit]
        Specifies the value that maps to black when color feedback mode is on. C:
        Default is 0.0.  Q: When queried, it returns a float.
    
    - colorrangeupper : cru          (float)         [create,query,edit]
        Specifies the value that maps to the maximum color when color feedback mode is
        on. C: Default is 1.0.  Q: When queried, it returns a float.
    
    - dataTypeIndex : dti            (int)           [query,edit]
        When the selected paintable attribute is a vectorArray, it specifies which field
        to paint on.
    
    - disablelighting : dl           (bool)          [create,query,edit]
        If color feedback is on, this flag determines whether lighting is disabled or
        not for the surfaces that are affected. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - duringStrokeCmd : dsk          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command during the stroke, each time the
        mouse is dragged. C: Default is no command. Q: When queried, it returns the
        current command
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - filterNodes : fon              (bool)          [edit]
        Sets the node filter.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - interactiveUpdate : iu         (bool)          [create,query,edit]
        Specifies how often to transfer the painted values into the attribute. TRUE:
        transfer them continuously(many times per stroke) FALSE: transfer them only at
        the end of a stroke (on mouse button release). C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - maxvalue : mxv                 (float)         [create,query,edit]
        Specifies the maximum value for each attribute. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - minvalue : miv                 (float)         [create,query,edit]
        Specifies the minimum value for each attribute. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objattrArray : oaa             (unicode)       [query]
        An array of all paintable attributes. Each element of the array is a string with
        the following information: NodeType.NodeName.AttributeName.MenuType. \*MenuType:
        type (level) of the item in the Menu (UI). Q: When queried, it returns a string.
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintComponent : pc            (int)           [create,query,edit]
        Specifies whether face or vertex or vertex face is being painted. 1 - Vertex 2 -
        VertexFace 3 - Face C: Default is Vertex.  Q: When queried, it returns a int.
    
    - paintNodeArray : pna           (unicode)       [query]
        An array of paintable nodes. Q: When queried, it returns a string.
    
    - paintNumChannels : pnc         (int)           [create,query,edit]
        Number of channels to paint - 1 (alpha), 3 (RGB), or 4 (RGBA)
    
    - paintRGBA : pc4                (bool)          [create,query,edit]
        Specifies whether RGB or RGBA channels are being painted. TRUE: RGBA channels.
        FALSE: RGB channels. Alpha channel remains unaffected. C: Default is FALSE
        (Painting RGB channels). Q: When queried, it returns a int.
    
    - paintVertexFace : pvf          (bool)          [create,query,edit]
        Specifies whether vertex face is being painted. TRUE: Vertex face being painted.
        (Allows each face connected to the vertex to be painted) FALSE: Vertex being
        painted.(affects all connected faces) C: Default is FALSE.  Q: When queried, it
        returns a int.
    
    - paintattrselected : pas        (unicode)       [edit]
        An array of selected paintable attributes. Each element of the array is a string
        with the following information: NodeType.NodeName.AttributeName.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - rampMaxColor : rxc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is greater than or equal to
        the maximum value.
    
    - rampMinColor : rmc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is less than or equal to the
        minimum value.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - selectedattroper : sao         (unicode)       [create,query,edit]
        Sets the edit weight operation. Four edit weights operations are provided :
        absolute- the value of the weight is replaced by the current one, additive- the
        value of the weight is added to the current one, scale- the value of the weight
        is multiplied by the current one, smooth- the value of the weight is divided by
        the current one. C: Default is absolute.  Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - toolOffProc : tfp              (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned off. For example, cloth invokes
        clothPaintToolOffwhen the cloth paint tool is turned on. Define this callback if
        your tool requires special functionality when your tool is deactivated. It is
        typical that if you implement a toolOffProc you will want to implement a
        toolOnProc as well (see the -toolOnProc flag. In query mode, the name of the
        currently registered MEL command is returned and this will be an empty string if
        none is defined.
    
    - toolOnProc : top               (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned on. For example, cloth invokes clothPaintToolOnwhen
        the cloth paint tool is turned on. Define this callback if your tool requires
        special functionality when your tool is activated. It is typical that if you
        implement a toolOnProc you will want to implement a toolOffProc as well (see the
        -toolOffProc flag. In query mode, the name of the currently registered MEL
        command is returned and this will be an empty string if none is defined.
    
    - useColorRamp : ucr             (bool)          [create,query,edit]
        Specifies whether the user defined color ramp should be used to map values from
        to colors.  If this is turned off, the default greyscale feedback will be used.
    
    - useMaxMinColor : umc           (bool)          [create,query,edit]
        Specifies whether the out of range colors should be used.  See rampMinColor and
        rampMaxColor flags for further details.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - value : val                    (float)         [create,query,edit]
        Specifies the value for each attribute. C: Default is 0.0.  Q: When queried, it
        returns a float.
    
    - vertexColorRange : vcr         (bool)          [create,query,edit]
        Specifies whether the vertex color range should be applied to the currently
        selected object. C: Default is false  Q: When queried, it returns a boolean.
    
    - vertexColorRangeLower : vcl    (float)         [create,query,edit]
        Specifies the min value of the vertex color range. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - vertexColorRangeUpper : vcu    (float)         [create,query,edit]
        Specifies the max value of the vertex color range. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - whichTool : wst                (unicode)       [create,query,edit]
        The string defines the name of the tool to be used for the Artisan context. An
        example is artClothPaint. In query mode, the tool name for the given context is
        returned. Note: due to the way MEL works, always specify the -query flag last
        when specifying a flag that takes arguments.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artAttrPaintVertexCtx`
    """
    pass
def HypershadeToggleNodeTitleMode(*args, **kwargs): pass
def NodeEditorPinSelected(*args, **kwargs): pass
def SmoothHairCurves(*args, **kwargs): pass
def SurfaceBooleanSubtractTool(*args, **kwargs): pass
def crashInfo(*args, **kwargs):
    """
    Provides an interface to the crash file information.             In query mode,
    return type is based on queried flag.
    
    Flags:
    - crashFile : cf                 (bool)          [query]
        Return the crash file full path name.
    
    - savedBeforeCrash : sbc         (bool)          [query]
        Return the saved file full path name before crash.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.crashInfo`
    """
    pass
def AddToCharacterSet(*args, **kwargs): pass
def PaintLatticeWeightsToolOptions(*args, **kwargs): pass
def AddTrailsToParticles(*args, **kwargs): pass
def saveViewportSettings(*args, **kwargs):
    """
    This command causes all the 3d views to save their settings as optionVar's. This
    is called automatically by the system when Maya exits.
    
    
    Derived from mel command `maya.cmds.saveViewportSettings`
    """
    pass
def dR_customPivotToolPress(*args, **kwargs): pass
def CreatePose(*args, **kwargs): pass
def FilePathEditor(*args, **kwargs): pass
def MakeCollideHair(*args, **kwargs): pass
def flushThumbnailCache(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.flushThumbnailCache`
    """
    pass
def RenderViewPrevImage(*args, **kwargs): pass
def CVCurveTool(*args, **kwargs): pass
def TimeEditorSoloSelectedTracks(*args, **kwargs): pass
def LayerRelationshipEditor(*args, **kwargs): pass
def SelectUVBorder(*args, **kwargs): pass
def ShowLastHidden(*args, **kwargs): pass
def savePrefObjects(*args, **kwargs):
    """
    This command saves preference dependency nodes to userPrefObjects.main the user
    preference directory.
    
    
    Derived from mel command `maya.cmds.savePrefObjects`
    """
    pass
def fileDialog(*args, **kwargs):
    """
    The fileBrowserDialog and fileDialog commands have now been deprecated. Both
    commands are still callable, but it is recommended that the fileDialog2 command
    be used instead.  To maintain some backwards compatibility, both
    fileBrowserDialog and fileDialog will convert the flags/values passed to them
    into the appropriate flags/values that the fileDialog2 command uses and will
    call that command internally.  It is not guaranteed that this compatibility will
    be able to be maintained in future versions so any new scripts that are written
    should use fileDialog2. See below for an example of how to change a script to
    use fileDialog2.
    
    Flags:
    - application : app              (bool)          [create]
        This is a Maconly flag. This brings up the dialog which selects only the
        application bundle.
    
    - defaultFileName : dfn          (unicode)       [create]
        Set default file name. This flag is available under writemode
    
    - directoryMask : dm             (unicode)       [create]
        This can be used to specify what directory and file names will be displayed in
        the dialog.  If not specified, the current directory will be used, with all
        files displayed. The string may contain a path name, and must contain a wild-
        carded file specifier. (eg \*.ccor /usr/u/\*) If just a path is specified, then
        the last directory in the path is taken to be a file specifier, and this will
        not produce the desired results.
    
    - mode : m                       (int)           [create]
        Defines the mode in which to run the file dialog: 0 for read1 for writeWrite
        mode can not be used in conjunction with the -application flag.
    
    - title : t                      (unicode)       [create]
        Set title text. The default value under writemode is Save As. The default value
        under readmode is Open.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.fileDialog`
    """
    pass
def UnlockContainer(*args, **kwargs): pass
def MirrorCutPolygonGeometryOptions(*args, **kwargs): pass
def ShowSmoothSkinInfluences(*args, **kwargs): pass
def nurbsToPoly(*args, **kwargs):
    """
    This command tesselates a NURBS surface and produces a polygonal surface. The
    name of the new polygonal surface is returned. If construction history is ON,
    then the name of the new dependency node is returned as well.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - chordHeight : cht              (float)         []
    
    - chordHeightRatio : chr         (float)         []
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - curvatureTolerance : cvt       (int)           [create,query,edit]
        Presets for level of secondary criteria curvature tolerance: 0 = highest
        tolerance, 1 = high tolerance, 2 = medium tolerance, 3 = no tolerance Default:2
    
    - delta : d                      (float)         []
    
    - edgeSwap : es                  (bool)          []
    
    - explicitTessellationAttributes : eta (bool)          [create,query,edit]
        specify advanced or novice mode for tessellation parameters Default:true
    
    - format : f                     (int)           []
    
    - fractionalTolerance : ft       (float)         []
    
    - frozen : fzn                   (bool)          []
    
    - matchNormalDir : mnd           (bool)          []
    
    - matchRenderTessellation : mrt  (bool)          []
    
    - minEdgeLength : mel            (float)         []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normalizeTrimmedUVRange : ntr  (bool)          []
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygonCount : pc              (int)           []
    
    - polygonType : pt               (int)           []
    
    - smoothEdge : ues               (bool)          [create,query,edit]
        Specifies if the decision to continue tessellation should be based on the nurbs
        edge smoothness Default:false
    
    - smoothEdgeRatio : esr          (float)         [create,query,edit]
        Specifies the edge smooth ratio.  The higher the value, the smoother the edge
        will be. Default:0.99
    
    - uDivisionsFactor : nuf         (float)         [create,query,edit]
        Specifies the tessellation increase factor in U for novice mode Default:1.5
    
    - uNumber : un                   (int)           []
    
    - uType : ut                     (int)           []
    
    - useChordHeight : uch           (bool)          []
    
    - useChordHeightRatio : ucr      (bool)          []
    
    - useSurfaceShader : uss         (bool)          []
    
    - vDivisionsFactor : nvf         (float)         [create,query,edit]
        Specifies the tessellation increase factor in V for novice mode Default:1.5
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    - vNumber : vn                   (int)           []
    
    - vType : vt                     (int)           []
    
    
    Derived from mel command `maya.cmds.nurbsToPoly`
    """
    pass
def SetAsCombinationTarget(*args, **kwargs): pass
def HideCameras(*args, **kwargs): pass
def curveEditorCtx(*args, **kwargs):
    """
    The curveEditorCtx command creates a new NURBS editor context, which is used to
    edit a NURBS curve or surface.
    
    Flags:
    - direction : dir                (int)           [query]
        Query the current direction of the tangent control.  Always zero for the curve
        case.  In the surface case, its 0 for the normal direction, 1 for U direction
        and 2 for V direction.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - relativeTangentSize : rts      (float)         [create,query,edit]
        Relative size of the tangent manipulator handle.  Helps to adjust as the surface
        parameterization controls the size of the tangent, even if the shape of the
        surface remains the same. The default is 4.
    
    - title : t                      (unicode)       [query,edit]
        The title for the tool.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveEditorCtx`
    """
    pass
def SnapPointToPoint(*args, **kwargs): pass
def CreateCameraOnlyOptions(*args, **kwargs): pass
def UpdateCurrentSceneMotionBuilder(*args, **kwargs): pass
def SculptPolygonsToolOptions(*args, **kwargs): pass
def EnableIKSolvers(*args, **kwargs): pass
def ZoomTool(*args, **kwargs): pass
def loadFluid(*args, **kwargs):
    """
    A command to set builtin fluid attributes such as Density, Velocity, etc for all
    cells in the grid from the initial state cache                  In query mode,
    return type is based on queried flag.
    
    Flags:
    - currentTime : ct               (bool)          [create,query,edit]
        This flag is now obsolete. Move the cache clip in the Trax editor to view
        different frames of the playback cache.
    
    - frame : f                      (float)         [create,query,edit]
        This flag is now obsolete. Move the cache clip in the Trax editor to view
        different frames of the playback cache.
    
    - initialConditions : ic         (bool)          [create,query,edit]
        load initial conditions cache                              Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.loadFluid`
    """
    pass
def SetMeshSculptTool(*args, **kwargs): pass
def dR_objectTemplateTGL(*args, **kwargs): pass
def dR_graphEditorTGL(*args, **kwargs): pass
def ChangeUVSize(*args, **kwargs): pass
def ModifyUVVectorPress(*args, **kwargs): pass
def AddTargetShape(*args, **kwargs): pass
def HideNonlinears(*args, **kwargs): pass
def xgmSplineCache(*args, **kwargs):
    """
    Flags:
    - create : cr                    (bool)          []
    
    - export : ex                    (bool)          []
    
    - file : f                       (unicode)       []
    
    - fitTimeRange : ftr             (bool)          []
    
    - im : im                        (bool)          []
    
    - jobArg : j                     (unicode)       []
    
    - replace : rp                   (bool)          []
    
    - setToStartFrame : sts          (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmSplineCache`
    """
    pass
def ShowMeshMaskToolOptions(*args, **kwargs): pass
def CreateSculptDeformer(*args, **kwargs): pass
def SetDefaultManipTransform(*args, **kwargs): pass
def DeltaMush(*args, **kwargs): pass
def goal(*args, **kwargs):
    """
    Specifies the given objects as being goals for the given particle object.  If
    the goal objects are geometry, each particle in the particle object will each
    try to follow or match its position to that of a certain vertex/CV/lattice point
    of the goal.  If the goal object is another particle object, each particle will
    try to follow a paricle of the goal. In any other case, all the particles will
    try to follow the current location of the goal object's transform.  You can get
    this latter behavior for a geometry or particle object too by using -utr true.
    The goal weight can be keyframed.  It lives on the particle object to which the
    goal was added and is a multi-attribute.
    
    Flags:
    - goal : g                       (unicode)       [create,query]
        This flag specifies string to be a goal of the particle object on the command
        line or the currently selected particle object.  This flag can be used multiple
        times to specify multiple goals for a particle object.  Query is for use by the
        attribute editor.
    
    - index : i                      (bool)          [query]
        Returns array of multi-attribute indices for the goals. Intended for use by the
        Attribute Editor.
    
    - useTransformAsGoal : utr       (bool)          [create]
        Use transform of specified object instead of the shape. Meaningful only for
        particle and geometry objects.  Can only be passed once, applies to all objects
        passed with -g.
    
    - weight : w                     (float)         [create]
        This specifies the goal weight as a value from 0 to 1.  A value of 0 means that
        the goal's position will have no effect on the particle object, while a weight
        of 1 will make the particle object try to follow the goal object exactly.  This
        flag can only be passed once and sets the weight for every goal passed with the
        -g/-goal flag.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.goal`
    """
    pass
def getAttr(*args, **kwargs): pass
def renderSettings(*args, **kwargs):
    """
    Query interface to the common tab of the render settings
    
    Flags:
    - camera : cam                   (unicode)       [create]
        Specify a camera that you want to replace the current renderable camera
    
    - customTokenString : cts        (unicode)       [create]
        Specify a custom key-value string to use to replace custom tokens in the file
        name. Use with firstImageName or lastImageName. Basic tokens (Scene, Layer,
        RenderLayer, Camera, Version, Extension) will be automatically expanded. Any
        other tokens must be specified here to be expanded. The format of the string is
        a space separated list of tokens-value pairs. For example, if the file name
        string is myFile_myToken_myOtherToken_vthen the argument to this flag string
        should take the form myToken=myTokenValue myOtherToken=myOtherTokenValue.
    
    - firstImageName : fin           (bool)          [create]
        Returns the first image name
    
    - fullPath : fp                  (bool)          [create]
        Returns the full path for the image using the current project. Use with
        firstImageName, lastImageName, or genericFrameImageName.
    
    - fullPathTemp : fpt             (bool)          [create]
        Returns the full path for the preview render of the image using the current
        project. Use with firstImageName, lastImageName, or genericFrameImageName.
    
    - genericFrameImageName : gin    (unicode)       [create]
        Returns the generic frame image name with the custom specified frame index token
    
    - imageGenericName : ign         (bool)          [create]
        Returns the image generic name
    
    - lastImageName : lin            (bool)          [create]
        Returns the last image name
    
    - layer : lyr                    (unicode)       [create]
        Specify a render layer name that you want to replace the current render layer
    
    - leaveUnmatchedTokens : lut     (bool)          [create]
        Do not remove unmatched tokens from the name string. Use with firstImageName or
        lastImageName.                             Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderSettings`
    """
    pass
def RemoveBifrostAdaptiveMesh(*args, **kwargs): pass
def HypershadeFrameAll(*args, **kwargs): pass
def UngroupOptions(*args, **kwargs): pass
def snapMode(*args, **kwargs):
    """
    The snapMode command is used to control snapping.  It toggles the snapping modes
    in effect and sets information used for snapping.
    
    Flags:
    - curve : c                      (bool)          [create,query]
        Set curve snap mode
    
    - distanceIncrement : dsi        (float)         [create,query]
        Set the distance for the snapping to objects such as a lines or planes.
    
    - edgeMagnet : em                (int)           [create,query]
        Number of extra magnets to snap onto, regularly spaced along the edge.
    
    - edgeMagnetTolerance : emt      (float)         [create,query]
        Precision for edge magnet snapping.
    
    - grid : gr                      (bool)          [create,query]
        Set grid snap mode
    
    - liveFaceCenter : lfc           (bool)          [create,query]
        While moving on live polygon objects, snap to its face centers.
    
    - livePoint : lp                 (bool)          [create,query]
        While moving on live polygon objects, snap to its vertices.
    
    - meshCenter : mc                (bool)          [create,query]
        While moving, snap on the center of the mesh that intersect the line from the
        camera to the cursor.
    
    - pixelCenter : pc               (bool)          [create,query]
        Snap UV to the center of the pixel instead of the corner.
    
    - pixelSnap : ps                 (bool)          [create,query]
        Snap UVs to the nearest pixel center or corner.
    
    - point : p                      (bool)          [create,query]
        Set point snap mode
    
    - tolerance : t                  (int)           [create,query]
        Tolerance defines the size of the square region in which points must lie in
        order to be snapped to. The tolerance value is the distance from the cursor
        position to the boundary of the square (in all four directions).
    
    - useTolerance : ut              (bool)          [create,query]
        If useTolerance is set, then point snapping is limited to points that are within
        a square region surrounding the cursor position. The size of the square is
        determined by the tolerance value.
    
    - uvTolerance : uvt              (int)           [create,query]
        uvTolerance defines the size of the square region in which points must lie in
        order to be snapped to, in the UV Editor.  The tolerance value is the distance
        from the cursor position to the boundary of the square (in all four directions).
    
    - viewPlane : vp                 (bool)          [create,query]
        Set view-plane snap mode                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.snapMode`
    """
    pass
def polySeparate(*args, **kwargs): pass
def NodeEditorGraphAddSelected(*args, **kwargs): pass
def HypergraphWindow(*args, **kwargs): pass
def VisualizeMetadataOptions(*args, **kwargs): pass
def SetSnapTogetherToolOptions(*args, **kwargs): pass
def AddBifrostMotionField(*args, **kwargs): pass
def TextureViewWindow(*args, **kwargs): pass
def xgmMakeGuideDynamic(*args, **kwargs):
    """
    Flags:
    - clear : cl                     (bool)          []
    
    - create : c                     (bool, bool, bool, bool, bool) []
    
    - createFromCurves : cc          (bool)          []
    
    - deleteCurves : dc              (bool)          []
    
    - hasGuide : hg                  (bool)          []
    
    - preserveDynamicLink : pdl      (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmMakeGuideDynamic`
    """
    pass
def dR_scalePress(*args, **kwargs): pass
def FBXImportSetTake(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportSetTake`
    """
    pass
def disable(*args, **kwargs):
    """
    This command enables or disables the control passed as argument.
    
    Flags:
    - value : v                      (bool)          [create]
        If true, this command disables the control. If false, this command enables the
        control. Default value is true (disable)                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.disable`
    """
    pass
def XgmSetSelectBrushToolOption(*args, **kwargs): pass
def saveToolSettings(*args, **kwargs):
    """
    This command causes all the tools not on the shelf to save their settings as
    optionVars.  This is called automatically by the system when Maya exits.
    
    
    Derived from mel command `maya.cmds.saveToolSettings`
    """
    pass
def HideIKHandles(*args, **kwargs): pass
def bifrost(*args, **kwargs):
    """
    Flags:
    - backgroundProcessing : bp      (bool)          []
    
    - containerName : n              (unicode)       []
    
    - create : c                     (bool)          []
    
    - delete : d                     (bool)          []
    
    - dirtyGraphEdit : dge           (bool)          []
    
    - dirtyNode : dnd                (bool)          []
    
    - feature : fe                   (unicode)       []
    
    - flushScratchCache : fm         (bool)          []
    
    - graph : g                      (unicode)       []
    
    - help : h                       (bool)          []
    
    - lastValidCache : lvc           (bool)          []
    
    - overrideDiskLocation : odl     (unicode)       []
    
    - processing : p                 (bool)          []
    
    - refreshUI : rfu                (bool)          []
    
    - resetUI : rsu                  (bool)          []
    
    - runtimeVersion : rv            (unicode)       []
    
    - scratchCache : sc              (bool)          []
    
    - scratchMaxRAMUsage : smr       (float)         []
    
    - stopProcessing : sp            (bool)          []
    
    
    Derived from mel command `maya.cmds.bifrost`
    """
    pass
def polyCrease(*args, **kwargs): pass
def FBXExportInstances(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportInstances`
    """
    pass
def scmh(*args, **kwargs):
    """
    Set the current manipulator handle value(s).  In UI units (where applicable),
    though the syntax is set to handle the unit type of the current manipulator
    handle (if available).
    
    Flags:
    - absolute : a                   (bool)          [create]
        The values are absolute
    
    - ignore : i                     (int)           [create]
        This is a multiuse flag which specifies that the index-th (1-based) entry is to
        be ignored
    
    - quiet : q                      (bool)          [create]
        This flag suppresses all error messages
    
    - relative : r                   (bool)          [create]
        The values are relative                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scmh`
    """
    pass
def texRotateContext(*args, **kwargs):
    """
    This command can be used to create, edit, or query a rotate context for the UV
    Editor. Note that the above flag controls the global behaviour of all texture
    editor rotate contexts.  Changing one context independently is not allowed.
    Changing a context's behaviour using the above flag, will change all existing
    texture editor rotate contexts.
    
    Flags:
    - editPivotMode : epm            (bool)          [query]
        Returns true when the manipulator is in edit pivot mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - position : p                   (bool)          [query]
        Returns the current position of the manipulator.
    
    - snap : s                       (bool)          [query,edit]
        Sets or queries whether snapping is to be used.
    
    - snapRelative : sr              (bool)          [query,edit]
        Sets or queries whether snapping is relative.
    
    - snapValue : sv                 (float)         [query,edit]
        Sets or queries the size of the snapping increment.
    
    - tweakMode : twk                (bool)          [query,edit]
        When true, the manipulator is hidden and highlighted components can be selected
        and rotated in one step using a click-drag interaction.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texRotateContext`
    """
    pass
def LockCurveLength(*args, **kwargs): pass
def SetHairStartPositionFromRest(*args, **kwargs): pass
def hardwareRenderPanel(*args, **kwargs): pass
def colorIndex(*args, **kwargs):
    """
    The index specifies a color index in the color palette. The r, g, and b values
    (between 0-1) specify the RGB values (or the HSV values if the -hsv flag is
    used) for the color.
    
    Flags:
    - hueSaturationValue : hsv       (bool)          [create,query]
        Indicates that rgb values are really hsv values. Upon query, returns the HSV
        valuses as an array of 3 floats.
    
    - resetToFactory : rf            (bool)          [create]
        Resets all color index palette entries to their factory defaults.
    
    - resetToSaved : rs              (bool)          [create]
        Resets all color palette entries to their saved values.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorIndex`
    """
    pass
def polyOutput(*args, **kwargs):
    """
    Dumps a description of internal memory representation of poly objects. If no
    objects are specified in the command line, then the objects from the active list
    are used. If information on the geometry in the history of a poly shape is
    desired, then the plug of interest needs to be specified in the command line.
    Default behaviour is to print only a summary. Use the flags above to get more
    details on a specific part of the object.
    
    Flags:
    - allValues : a                  (bool)          [create]
        Shortcut for setting all the flags above
    
    - color : c                      (bool)          [create]
        Prints the color per vertex. In case of multiple sets, all sets are printed.
    
    - colorDesc : cd                 (bool)          [create]
        Print the color per vertex description. Each integer is an entry in the color
        array.
    
    - edge : e                       (bool)          [create]
        Print the edge description.
    
    - edgeFace : ef                  (bool)          [create]
        Prints the edge to face adjascency list. Only available if the information is
        already computed on the object.
    
    - face : f                       (bool)          [create]
        Print the faces description
    
    - faceNorm : fn                  (bool)          [create]
        Prints the normals per face. Only available if the information is already
        computed on the object.
    
    - force : fo                     (bool)          [create]
        Force evaluation of missing pieces before printing.
    
    - group : g                      (bool)          [create]
        Print the groups of the object.
    
    - noOutput : no                  (bool)          [create]
        Dont output any data.  Would be useful if you want to just evaluate the data,
        for testing purposes.
    
    - normDesc : nd                  (bool)          [create]
        Prints the normals per vertex description. Each integer is an entry in the
        vertNorm array. Only available if the information is already computed on the
        object.
    
    - outputFile : of                (unicode)       [create]
        Location of the output file.
    
    - triangle : t                   (bool)          [create]
        Prints the triangles per face. Only available if the information is already
        computed on the object.
    
    - uvDesc : uvd                   (bool)          [create]
        Print the UV description. Each integer is an entry in the uvValue array.
    
    - uvValue : uv                   (bool)          [create]
        Prints the UV positions. In case of multiple UV sets, all sets are printed.
    
    - vert : v                       (bool)          [create]
        Prints the vertex positions.
    
    - vertEdge : ve                  (bool)          [create]
        Prints the vertex to edge adjascency list. Only available if the information is
        already computed on the object.
    
    - vertNorm : vn                  (bool)          [create]
        Prints the normals per vertex. Only available if the information is already
        computed on the object.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyOutput`
    """
    pass
def HypershadeRemoveAsset(*args, **kwargs): pass
def ToggleSelectDetails(*args, **kwargs): pass
def ThreeBottomSplitViewArrangement(*args, **kwargs): pass
def ikHandle(*args, **kwargs): pass
def PencilCurveToolOptions(*args, **kwargs): pass
def roll(*args, **kwargs):
    """
    The roll command rotates a camera about its viewing direction, a positive angle
    produces clockwise camera rotation, while a negative angle produces counter-
    clockwise camera rotation. The default mode is relative and the rotation is
    applied with respect to the current orientation of the camera. When mode is set
    to absolute, the rotation is applied with respect to the plane constructed from
    the following three vectors in the world space: the world up vector, the camera
    view vector, and the camera up vector. The rotation angle is specified in
    degrees. The roll command can be applied to either a perspective or an
    orthographic camera. This command may be applied to more than one camera;
    objects that are not cameras are ignored. When no camera name supplied, this
    command is applied to all currently active cameras.
    
    Flags:
    - absolute : abs                 (bool)          [create]
        Set to absolute mode.
    
    - degree : d                     (float)         [create]
        Set the amount of the rotation angle.
    
    - relative : rel                 (bool)          [create]
        Set to relative mode.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.roll`
    """
    pass
def AssignOfflineFileOptions(*args, **kwargs): pass
def ConformPolygon(*args, **kwargs): pass
def dR_softSelDistanceTypeSurface(*args, **kwargs): pass
def spotLight(*args, **kwargs): pass
def PlaybackFree(*args, **kwargs): pass
def hikRigAlign(*args, **kwargs):
    """
    Flags:
    - enable : en                    (bool)          []
    
    - engage : eng                   (bool)          []
    
    
    Derived from mel command `maya.cmds.hikRigAlign`
    """
    pass
def imageWindowEditor(*args, **kwargs): pass
def BridgeOrFill(*args, **kwargs): pass
def xgmSmoothBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - curvatureFactor : cf           (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - flood : f                      (bool)          []
    
    - freezeMode : frm               (int)           []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - orientationFactor : of         (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - preserveLength : pl            (bool)          []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmSmoothBrushContext`
    """
    pass
def license(*args, **kwargs):
    """
    This command displays version information about the application if it is
    executed without flags.  If one of the above flags is specified then the
    specified version information is returned.
    
    Flags:
    - borrow : b                     (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - info : i                       (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - isBorrowed : ib                (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - isExported : ie                (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - isTrial : it                   (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - licenseMethod : lm             (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - productChoice : pc             (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - r : r                          (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - showBorrowInfo : sbi           (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - showProductInfoDialog : spi    (bool)          [create]
        Show the Product Information Dialog
    
    - status : s                     (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - usage : u                      (bool)          [create]
        This flag is obsolete and no longer supported.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.license`
    """
    pass
def DynamicRelationshipEditor(*args, **kwargs): pass
def xgmDensityBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - density : d                    (float)         []
    
    - exists : ex                    (bool)          []
    
    - flood : f                      (bool)          []
    
    - floodMode : fm                 (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - initLength : l                 (float)         []
    
    - interpSmoothness : ism         (float)         []
    
    - interpolate : i                (bool)          []
    
    - interpolateFrom : interpolateFrom (int)           []
    
    - maxDensity : md                (float)         []
    
    - paintOp : po                   (int)           []
    
    - radius : r                     (float)         []
    
    - strength : s                   (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmDensityBrushContext`
    """
    pass
def CreateSpringConstraint(*args, **kwargs): pass
def HypershadeShapeMenuStateAll(*args, **kwargs): pass
def TogglePolyDisplayEdges(*args, **kwargs): pass
def OffsetCurveOptions(*args, **kwargs): pass
def PaintEffectsTool(*args, **kwargs): pass
def ArtPaintSelectTool(*args, **kwargs): pass
def SnapToGridPress(*args, **kwargs): pass
def align(*args, **kwargs):
    """
    Align or spread objects along X Y and Z axis.
    
    Flags:
    - alignToLead : atl              (bool)          [create]
        When set, the min, center or max values are computed from the lead object.
        Otherwise, the values are averaged for all objects. Default is false
    
    - coordinateSystem : cs          (PyNode)        [create]
        Defines the X, Y, and Z coordinates. Default is the world coordinates
    
    - xAxis : x                      (unicode)       [create]
        Any of none, min, mid, max, dist, stack. This defines the kind of alignment to
        perfom, default is none.
    
    - yAxis : y                      (unicode)       [create]
        Any of none, min, mid, max, dist, stack. This defines the kind of alignment to
        perfom, default is none.
    
    - zAxis : z                      (unicode)       [create]
        Any of none, min, mid, max, dist, stack. This defines the kind of alignment to
        perfom, default is none.                                    Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.align`
    """
    pass
def sculptMeshCacheCtx(*args, **kwargs):
    """
    This is a tool context command for mesh cache sculpting tool.            In
    query mode, return type is based on queried flag.
    
    Flags:
    - adjustSize : asz               (bool)          [edit]
        If true, puts the tool into the mode where dragging the mouse will edit the
        brush size. If false, puts the tool back into the previous sculpt mode.
    
    - adjustStrength : ast           (bool)          [edit]
        If true, puts the tool into the mode where dragging the mouse will edit the
        brush strength. If false, puts the tool back into the previous sculpt mode.
    
    - affectAllLayers : aal          (bool)          [create,query,edit]
        If true, the brush affects all layers at once.
    
    - brushDirection : bd            (int)           [query,edit]
        Specifies the direction of the named brush.
    
    - brushSize : bsz                (float)         [query,edit]
        Specifies the world-space size of the named brush.
    
    - brushStrength : bst            (float)         [query,edit]
        Specifies the world-space strength of the named brush.
    
    - buildUpRate : bur              (float)         [query,edit]
        Specifies the brush strength increasing along the stroke.
    
    - cloneHideSource : chs          (bool)          [create,query,edit]
        True if the cloned source should be hidden.
    
    - cloneMethod : cm               (int)           [create,query,edit]
        Controls how the source delta vectors should change the target. 0=copy 1=add
    
    - cloneShapeSource : css         (unicode)       [create,query,edit]
        Name of the shape source to clone.
    
    - cloneTargetSource : cas        (unicode)       [create,query,edit]
        Name of the target source of the clone.
    
    - constrainToSurface : cts       (bool)          [create,query,edit]
        If true, the modification keeps the surface curvature.
    
    - direction : d                  (int)           [query,edit]
        Specifies the direction in which the vertices are moved.
    
    - displayFrozen : df             (bool)          [create,query,edit]
        If false, turns off the display of frozen area on the object.
    
    - displayMask : dm               (bool)          [create,query,edit]
        If false, turns off the display of masked area on the object.
    
    - displayWireframe : dw          (bool)          [create,query,edit]
        If false, turns off the wireframe display of the object.
    
    - exists : ex                    (bool)          []
    
    - falloffType : ft               (int)           [query,edit]
        Specifies how the brush determines which vertices to affect.
    
    - flood : fl                     (float)         [create,edit]
        Sets the brush effect for each vertex to the given value.
    
    - floodFreeze : ff               (float)         [create,edit]
        Sets the freeze value for each vertex to the given value.
    
    - frame : frm                    (bool)          [create,edit]
        Frames on the sculpted area.
    
    - freezeSelection : fsl          (bool)          [create,edit]
        Freezes selected components.
    
    - freezesmooth : fs              (bool)          []
    
    - freezesmoothandpaint : fsp     (bool)          []
    
    - grabFollowPath : gfp           (bool)          [create,query,edit]
        If true, the grab brush effect follows mouse movement.
    
    - grabSilhouette : gs            (bool)          [create,query,edit]
        If true, the grab brush uses paint-through mode.
    
    - grabTwist : gtw                (bool)          [create,query,edit]
        If true, the grab brush twists the vertices.
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - inverted : inv                 (bool)          [create,query,edit]
        If true, inverts the effect of the brush.
    
    - lastMode : lm                  (unicode)       [query,edit]
        Specifies the type of the last active sculpting brush.
    
    - lockShellBorder : lsb          (bool)          [create,query,edit]
        Lock the shell borders so that they won't be moved by a UV texture brush.
    
    - makeStroke : mt                (int, int, int, float, float) [edit]
        Specify a surface point patch for a brush stroke. Multiple patches can be
        specified to form a brush stroke. The first argument is the mesh index. The
        second argument is the side index. use 0 for the original side, and 1 for the
        mirrored side The third argument is the face index within the specified mesh.
        The fourth and fifth arguments are the face coordinates within the specified
        face.
    
    - minSize : msz                  (float)         [query,edit]
        Specifies the minimum size percentage of the current brush.
    
    - minStrength : mst              (float)         [query,edit]
        Specifies the minimum strength percentage of the current brush.
    
    - mirror : mr                    (int)           [query,edit]
        Specifies the mirror mode of the brush.
    
    - mode : m                       (unicode)       [query,edit]
        Specifies the type of sculpting effect the brush will perform.
    
    - name : n                       (unicode)       []
    
    - orientToSurface : ots          (bool)          [create,query,edit]
        If true, aligns the brush display to the surface of the mesh.
    
    - recordStroke : rcs             (bool)          [query,edit]
        Set this flag to true to enable stroke recording that can be later played back
        with the makeStroke flag.
    
    - sculptFalloffCurve : sfc       (unicode)       [query,edit]
        Specifies the falloff curve of sculpting effect the brush will perform.
    
    - size : sz                      (float)         [query,edit]
        Specifies the world-space size of the current brush.
    
    - stampDistance : s              (float)         [query,edit]
        Specifies the stamping distance of the brush.
    
    - stampFile : stp                (unicode)       [query,edit]
        Specifies an image file to use as stamp.
    
    - stampFlipX : sfx               (bool)          [create,query,edit]
        Specifies if the brush stamp is flipped on the X axis.
    
    - stampFlipY : sfy               (bool)          [create,query,edit]
        Specifies if the brush stamp is flipped on the Y axis.
    
    - stampOrientToStroke : sos      (bool)          [create,query,edit]
        Specifies if the brush stamp is aligned to the stroke direction.
    
    - stampPlacement : sp            (int)           [query,edit]
        Specifies the placement mode of the stamp image.
    
    - stampRandomization : srd       (bool)          [create,query,edit]
        Specifies if the brush stamp is randomized.
    
    - stampRandomizationSeed : sre   (int)           [edit]
        Specifies the stamp randomization seed value. Use a value of 0 to generate a
        random seed value.
    
    - stampRandomizeFlipX : srx      (bool)          [create,query,edit]
        Specifies if the brush stamp flipping is randomized on the X axis.
    
    - stampRandomizeFlipY : sry      (bool)          [create,query,edit]
        Specifies if the brush stamp flipping is randomized on the Y axis.
    
    - stampRandomizePosX : spx       (float)         [query,edit]
        Specifies the stamp X position value is randomized.
    
    - stampRandomizePosY : spy       (float)         [query,edit]
        Specifies the stamp Y position value is randomized.
    
    - stampRandomizeRotation : srr   (float)         [query,edit]
        Specifies the stamp rotation value is randomized.
    
    - stampRandomizeScale : src      (float)         [query,edit]
        Specifies the stamp scale value is randomized.
    
    - stampRandomizeStrength : srs   (float)         [query,edit]
        Specifies the stamp strength value is randomized.
    
    - stampRotation : sr             (float)         [query,edit]
        Specifies the rotation value of the stamp image.
    
    - steadyStrokeDistance : ssd     (float)         [query,edit]
        Specifies the distance for the steady stroke.
    
    - strength : st                  (float)         [query,edit]
        Specifies the world-space strength of the current brush.
    
    - updatePlane : upl              (bool)          [create,query,edit]
        Recalculates the underlying tool plane for each stamp in a stroke.
    
    - useGlobalSize : ugs            (bool)          [create,query,edit]
        If true, all the brushes have a shared size property; otherwise size is local.
    
    - useScreenSpace : ssp           (bool)          [create,query,edit]
        If true, the brush size is in screen space pixels.
    
    - useStampDistance : usd         (bool)          [create,query,edit]
        Force the stamps to be spread out along the stroke, rather than building up
        continually.
    
    - useStampImage : usi            (bool)          [create,query,edit]
        Specifies if the brush uses a stamp image.
    
    - useSteadyStroke : uss          (bool)          [create,query,edit]
        Turns using steady stroke on/off.
    
    - wholeStroke : wst              (bool)          [create,query,edit]
        Continuously recalculates the underlying tool plane from all the vertices
        affected during the stroke.
    
    - wireframeAlpha : wa            (float)         [create,query,edit]
        Sets the alpha value of the wireframe for the object that is being sculpted.
    
    - wireframeColor : wc            (float, float, float) [create,query,edit]
        Sets the color of the wireframe for the object that is being sculpted. Values
        should be 0-1 RGB.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sculptMeshCacheCtx`
    """
    pass
def clipSchedulerOutliner(*args, **kwargs): pass
def ExtendSurfaces(*args, **kwargs): pass
def RemoveSubdivProxyMirror(*args, **kwargs): pass
def polySplitVertex(*args, **kwargs):
    """
    Use this command to split one or more vertices.A mesh is made up of one or more
    faces.  The faces are defined by edges which connect vertices together.
    Typically a face will share vertices and edges with adjacent faces in the same
    mesh.  Sharing vertices and edges helps reduce the amount of memory used by a
    mesh.  It also ensures that when a face is moved, all the connected faces move
    together.Sometimes you may want to separate a face from its connected faces so
    that it may be moved in isolation.  There are three ways to accomplish this
    depending upon which parts of the face you want to extract:polySplitVertexsplit
    one or more vertices so that each face that shared the vertex acquires its own
    copy of the vertexpolySplitEdgesplit one or more edges so that each face that
    shared the vertex acquires its own copy of the edgepolyChipOffcompletely extract
    the face so that it has its own vertices and edgesNotice that the area of affect
    of each operation is different.  polySplitVertex will affect all the edges and
    faces that shared the vertex.  This is the broadest effect.  polySplitEdge will
    only affect the faces which shared the edge and polyChipOff will affect a
    specific face.  If we just count vertices to measure the effect of each command
    when splitting all components of a face, starting from a 3x3 plane which has 16
    vertices and we were to split the middle face:polySplitVertex applied to the
    four vertices would end up creating 12 new verticespolySplitEdge applied to the
    four edges would end up creating 4 new verticespolyChipOff applied to the middle
    face would end up creating 4 new verticesNote that polySplitVertex may create
    non-manifold geometry as a part of this operation. You can use Polygons-Cleanup
    afterwards to to clean up any non-manifold geometry.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySplitVertex`
    """
    pass
def confirmDialog(*args, **kwargs): pass
def PaintGrid(*args, **kwargs): pass
def PfxMakeCollide(*args, **kwargs): pass
def DeleteCurrentUVSet(*args, **kwargs): pass
def CreateNailConstraintOptions(*args, **kwargs): pass
def setEditCtx(*args, **kwargs):
    """
    This command creates a tool that can be used to modify set membership.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setEditCtx`
    """
    pass
def IntersectSurfacesOptions(*args, **kwargs): pass
def SelectSharedColorInstances(*args, **kwargs): pass
def NodeEditorAddOnNodeCreate(*args, **kwargs): pass
def BreakLightLinks(*args, **kwargs): pass
def buildKeyframeMenu(*args, **kwargs):
    """
    This command handles building the dynamicKeyframe menu, to show attributes of
    currently selected objects, filtered by the current manipulator. menuName is the
    string returned by the menucommand. The target menu will entries appended to it
    (and deleted from it) to always show what's currently keyframable.
    
    
    Derived from mel command `maya.cmds.buildKeyframeMenu`
    """
    pass
def polyUniteSkinned(*args, **kwargs):
    """
    Command to combine poly mesh objects (as polyUnite) while retaining the smooth
    skinning setup on the combined object.            In query mode, return type is
    based on queried flag.
    
    Flags:
    - centerPivot : cp               (bool)          [create,query,edit]
        Set the resulting object's pivot to the center of the selected objects bounding
        box.
    
    - constructionHistory : ch       (bool)          [create,query,edit]
        Turn the construction history on or off.
    
    - mergeUVSets : muv              (int)           [create,query,edit]
        Specify how UV sets will be merged on the output mesh. The choices are 0 | 1 |
        2. 0 = Do not merge. Each UV set on each mesh will become a new UV set in the
        output. 1 = Merge by name. UV sets with the same name will be merged. 2 = Merge
        by UV links. UV sets will be merged so that UV linking on the input meshes
        continues to work. The default is 1 (merge by name).
    
    - objectPivot : op               (bool)          [create,query,edit]
        Set the resulting object's pivot to last selected object's pivot.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyUniteSkinned`
    """
    pass
def cmdLightPortal(*args, **kwargs): pass
def HIKLiveConnectionTool(*args, **kwargs): pass
def clearCache(*args, **kwargs):
    """
    Even though dependency graph values are computed or dirty they may still occupy
    space temporarily within the nodes.  This command goes in to all of the data
    that can be regenerated if required and removes it from the caches (datablocks),
    thus clearing up space in memory.
    
    Flags:
    - allNodes : all                 (bool)          [create]
        If toggled then all nodes in the graph are cleared.  Otherwise only those nodes
        that are selected are cleared.
    
    - computed : c                   (bool)          [create]
        If toggled then remove all data that is computable.  (Warning: If the data is
        requested for redraw then the recompute will immediately fill the data back in.)
    
    - dirty : d                      (bool)          [create]
        If toggled then remove all heavy data that is dirty.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clearCache`
    """
    pass
def CustomPolygonDisplayOptions(*args, **kwargs): pass
def CreateAreaLight(*args, **kwargs): pass
def findKeyframe(*args, **kwargs): pass
def SplitMeshWithProjectedCurveOptions(*args, **kwargs): pass
def OpenContentBrowser(*args, **kwargs): pass
def AutobindContainerOptions(*args, **kwargs): pass
def AssignToonShaderCircleHighlight(*args, **kwargs): pass
def createPolyCylinderCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAxis : asa (bool)          []
    
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - roundCap : rc                  (bool)          []
    
    - subdivisionsAxis : sa          (int)           []
    
    - subdivisionsCap : sc           (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    
    Derived from mel command `maya.cmds.createPolyCylinderCtx`
    """
    pass
def renderThumbnailUpdate(*args, **kwargs):
    """
    Toggle the updating of object thumbnails. These are visible in tools like the
    Attribute Editor and Hypershade. All thumbnails everywhere will not update to
    reflect changes to the object until this command is used to toggle to true
    unless a specific thumbnail is forced to render using the -forceUpdate flag. In
    query mode, return type is based on queried flag.
    
    Flags:
    - forceUpdate : fu               (unicode)       [create]
        Force the thumbnail to update.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderThumbnailUpdate`
    """
    pass
def scrollLayout(*args, **kwargs): pass
def polyCutCtx(*args, **kwargs):
    """
    Create a new context to cut facets on polygonal objects                  In
    query mode, return type is based on queried flag.
    
    Flags:
    - deleteFaces : df               (bool)          [create,query,edit]
        whether to delete the one-half of the cut-faces of the poly.  If true, they are
        deleted. Default:false
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - extractFaces : ef              (bool)          [create,query,edit]
        whether to extract the cut-faces of the poly into a separate shell.  If true,
        they are extracted. Default:false
    
    - extractOffset : eo             (float, float, float) [create,query,edit]
        The displacement offset of the cut faces. Default:0.5, 0.5, 0.5
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCutCtx`
    """
    pass
def PolyConvertToRingAndCollapse(*args, **kwargs): pass
def CameraModePerspective(*args, **kwargs): pass
def GetFluidExample(*args, **kwargs): pass
def trim(*args, **kwargs): pass
def marker(*args, **kwargs):
    """
    The marker command creates one or two markers, on a motion path curve, at the
    specified time and location. The optionnal string argument is the parent object
    name.One can specify -pm -omoption to create both, a position marker and an
    orientation marker.Since there is only one keyframe for each marker of the same
    type, no more than one marker of the same type with the same time value can
    exist.The default marker type is the position marker. The default time is the
    current time.
    
    Flags:
    - attach : a                     (bool)          [create]
        This flag specifies to attach the selected 3D position markers to their parent
        geometry.
    
    - detach : d                     (bool)          [create]
        This flag specifies to detach the selected position markers from their parent
        geometry to the 3D space.
    
    - frontTwist : ft                (float)         [query]
        This flag specifies the amount of twist angle about the front vector for the
        marker.Default is 0.When queried, this flag returns a angle.
    
    - orientationMarker : om         (bool)          [query]
        This flag specifies creation of an orientation marker.Default is not set..When
        queried, this flag returns a boolean.
    
    - positionMarker : pm            (bool)          [query]
        This flag specifies creation of a position marker.Default is set.When queried,
        this flag returns a boolean.
    
    - sideTwist : st                 (float)         [query]
        This flag specifies  the amount of twist angle about the side vector for the
        marker.Default is 0.When queried, this flag returns a angle.
    
    - time : t                       (time)          [query]
        This flag specifies the time for the marker.Default is the current time.When
        queried, this flag returns a time.
    
    - upTwist : ut                   (float)         [query]
        This flag specifies the amount of twist angle about the up vector for the
        marker.Default is 0.When queried, this flag returns a angle.
    
    - valueU : u                     (float)         [query]
        This flag specifies the location of the position marker w.r.t. the parent
        geometry u parameterization.Default is the value at current time.When queried,
        this flag returns a linear.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.marker`
    """
    pass
def UnmirrorSmoothProxyOptions(*args, **kwargs): pass
def PaintEffectsGlobalSettings(*args, **kwargs): pass
def AddPfxToHairSystem(*args, **kwargs): pass
def alignCurve(*args, **kwargs): pass
def xgmBakeGuideVertices(*args, **kwargs):
    """
    Flags:
    - useOrigin : uo                 (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmBakeGuideVertices`
    """
    pass
def DeleteAllCameras(*args, **kwargs): pass
def CreateConstraintClipOptions(*args, **kwargs): pass
def SetFocusToNumericInputLine(*args, **kwargs): pass
def artPuttyCtx(*args, **kwargs):
    """
    This is a context command to set the flags on the artAttrContext, which is the
    base context for attribute painting operations. All commands require the name of
    the context as the last argument as this provides the name of the context to
    create, edit or query. This command is used to modify NURBS surfaces using a
    brush based interface (Maya Artisan). This is accomplished by moving the control
    vertices (CVs) under the brush in the specified direction. In query mode, return
    type is based on queried flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - activeListChangedProc : alp    (unicode)       [create,query,edit]
        Accepts a string that contains a MEL command that is invoked whenever the active
        list changes. There may be some situations where the UI, for example, needs to
        be updated, when objects are selected/deselected in the scene. In query mode,
        the name of the currently registered MEL command is returned and this will be an
        empty string if none is defined.
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - alphaclamp : alc               (unicode)       [create,query,edit]
        Specifies if the weight value should be alpha clamped to the lower and upper
        bounds. There are four options here: none- no clamping is performed, lower-
        clamps only to the lower bound, upper- clamps only to the upper bounds, both-
        clamps to the lower and upper bounds. C: Default is none.  Q: When queried, it
        returns a string.
    
    - alphaclamplower : acl          (float)         [create,query,edit]
        Specifies the lower bound for the alpha values. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - alphaclampupper : acu          (float)         [create,query,edit]
        Specifies the upper bound for the alpha values. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - attrSelected : asl             (unicode)       [query]
        Returns a name of the currently selected attribute. Q: When queried, it returns
        a string.
    
    - autosmooth : asm               (bool)          [create,query,edit]
        Sets up the auto smoothing option. When the brush is in the smooth mode,
        adjusting the strength will adjust how fast the surfaces is smoothed out. C:
        Default is FALSE.  Q: When queried, it returns a boolean.
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushStrength : bs             (float)         [create,query,edit]
        Sets the strength of the brush. Brush strength is supported by the pinch and
        slide brushes. In pinch mode, adjusting the strength will adjust how quickly the
        surface converges on the brush center. In slide mode, the strength scales the
        motion of the brush. C: Default is 1.0.  Q: When queried, it returns a float.
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clamp : cl                     (unicode)       [create,query,edit]
        Specifies if the weight value should be clamped to the lower and upper bounds.
        There are four options here: none- no clamping is performed, lower- clamps only
        to the lower bound, upper- clamps only to the upper bounds, both- clamps to the
        lower and upper bounds. C: Default is none.  Q: When queried, it returns a
        string.
    
    - clamplower : cll               (float)         [create,query,edit]
        Specifies the lower bound for the values. C: Default is 0.0.  Q: When queried,
        it returns a float.
    
    - clampupper : clu               (float)         [create,query,edit]
        Specifies the upper bound for the values. C: Default is 1.0.  Q: When queried,
        it returns a float.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - collapsecvtol : clc            (float)         [create,query,edit]
        Specifies the tolerance for the collapse cv detection. C: Default is 0.005 cm.
        Q: When queried, it returns a float.
    
    - colorAlphaValue : cl1          (float)         [create,query,edit]
        The Alpha value of the color.
    
    - colorRGBAValue : cl4           (float, float, float, float) [create,query,edit]
        The RGBA value of the color.
    
    - colorRGBValue : cl3            (float, float, float) [create,query,edit]
        The RGB value of the color.
    
    - colorRamp : cr                 (unicode)       [create,query,edit]
        Allows a user defined color ramp to be used to map values to colors.
    
    - colorfeedback : cf             (bool)          [create,query,edit]
        Sets on/off the color feedback display. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorfeedbackOverride : cfo    (bool)          [create,query,edit]
        Sets on/off the color feedback override. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorrangelower : crl          (float)         [create,query,edit]
        Specifies the value that maps to black when color feedback mode is on. C:
        Default is 0.0.  Q: When queried, it returns a float.
    
    - colorrangeupper : cru          (float)         [create,query,edit]
        Specifies the value that maps to the maximum color when color feedback mode is
        on. C: Default is 1.0.  Q: When queried, it returns a float.
    
    - dataTypeIndex : dti            (int)           [query,edit]
        When the selected paintable attribute is a vectorArray, it specifies which field
        to paint on.
    
    - disablelighting : dl           (bool)          [create,query,edit]
        If color feedback is on, this flag determines whether lighting is disabled or
        not for the surfaces that are affected. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - dispdecr : dde                 (bool)          [create,edit]
        Decreases a maximum displacement by 10%.
    
    - dispincr : din                 (bool)          [create,edit]
        Increases a maximum displacement by 10%.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - duringStrokeCmd : dsk          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command during the stroke, each time the
        mouse is dragged. C: Default is no command. Q: When queried, it returns the
        current command
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - erasesrfupd : eut              (bool)          [create,query,edit]
        Toggles the update for the erase surface
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - filterNodes : fon              (bool)          [edit]
        Sets the node filter.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - interactiveUpdate : iu         (bool)          [create,query,edit]
        Specifies how often to transfer the painted values into the attribute. TRUE:
        transfer them continuously(many times per stroke) FALSE: transfer them only at
        the end of a stroke (on mouse button release). C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - invertrefvector : irv          (bool)          [create,query,edit]
        Sets the invert of the reference vector option when the reflection is ON. If it
        is true, the reference vector for the reflected stroke is negated with respect
        to the original one. C: Default is FALSE. Q: When queried, it returns a boolean.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - maxdisp : md                   (float)         [create,query,edit]
        Defines a maximum displacement ( maxDisp in [0.0..5.0] ). C: Default is 1.0.  Q:
        When queried, it returns a float.
    
    - maxvalue : mxv                 (float)         [create,query,edit]
        Specifies the maximum value for each attribute. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - minvalue : miv                 (float)         [create,query,edit]
        Specifies the minimum value for each attribute. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - mouldtypehead : mth            (unicode)       [create,query,edit]
        Type of type mould to use
    
    - mouldtypemouse : mtm           (unicode)       [create,query,edit]
        Specifies the putty operations/mode (push- pushes CVs along the given direction
        (see refvector flag), pull- pulls CVs along the specified direction, smooth-
        smooths the sculpt, erase- erases the paint). C: Default is push.  Q: When
        queried, it returns a string.
    
    - mouldtypetail : mtt            (unicode)       [create,query,edit]
        Type of eraser mould to use
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objattrArray : oaa             (unicode)       [query]
        An array of all paintable attributes. Each element of the array is a string with
        the following information: NodeType.NodeName.AttributeName.MenuType. \*MenuType:
        type (level) of the item in the Menu (UI). Q: When queried, it returns a string.
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintNodeArray : pna           (unicode)       [query]
        An array of paintable nodes. Q: When queried, it returns a string.
    
    - paintattrselected : pas        (unicode)       [edit]
        An array of selected paintable attributes. Each element of the array is a string
        with the following information: NodeType.NodeName.AttributeName.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - polecv : pcv                   (bool)          [create,query,edit]
        Pull all the pole CVs to the same position.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - rampMaxColor : rxc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is greater than or equal to
        the maximum value.
    
    - rampMinColor : rmc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is less than or equal to the
        minimum value.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - refsurface : rs                (bool)          [create,query,edit]
        Sets on/off the update of the reference surface. If it is true the reference
        surface is automatically updated on the per stroke bases. If it is false, the
        user has to update the reference surface explicitly by pressing the update
        button (see updaterefsrf). C: Default is TRUE.  Q: When queried, it returns a
        boolean.
    
    - refvector : rv                 (unicode)       [create,query,edit]
        Specifies the direction of the push/pull operation (normal- sculpt along
        normals, firstnormal- sculpt along the first normal of the stroke, view- sculpt
        along the view direction, xaxis, yaxis, zaxis- sculpt along a given axis
        directions, uisoparm, visoparm- sculpt along U or V isoparametric lines),
        uvvector- sculpt along an arbitrary vector in UV space. C: Default is normal.
        Q: When queried, it returns a string.
    
    - refvectoru : rvu               (float)         [create,query,edit]
        Specifies the U component of the UV vector to be used when -refVector is set to
        uvvector.
    
    - refvectorv : rvv               (float)         [create,query,edit]
        Specifies the V component of the UV vector to be used when -refVector is set to
        uvvector.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - selectedattroper : sao         (unicode)       [create,query,edit]
        Sets the edit weight operation. Four edit weights operations are provided :
        absolute- the value of the weight is replaced by the current one, additive- the
        value of the weight is added to the current one, scale- the value of the weight
        is multiplied by the current one, smooth- the value of the weight is divided by
        the current one. C: Default is absolute.  Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - smoothiters : si               (int)           [create,query,edit]
        Sets the quality of the smoothing operation (number of iterations). C: Default
        is 3.  Q: When queried, it returns an int.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - stitchcorner : stc             (bool)          [create,query,edit]
        Sets on/off the stitching corner mode C: Default is off.  Q: When queried, it
        returns a boolean.
    
    - stitchedgeflood : sef          (bool)          [edit]
        Triggers postprocessing stitching edge procedure.
    
    - stitchtype : stt               (unicode)       [create,query,edit]
        Sets on/off the stitching mode ( off- stitching is turned off, position-
        position stitching is done without taking care about the tangent continuity C0,
        tan- C1 continuity is preserved). C: Default is position.  Q: When queried, it
        returns a string.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - toolOffProc : tfp              (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned off. For example, cloth invokes
        clothPaintToolOffwhen the cloth paint tool is turned on. Define this callback if
        your tool requires special functionality when your tool is deactivated. It is
        typical that if you implement a toolOffProc you will want to implement a
        toolOnProc as well (see the -toolOnProc flag. In query mode, the name of the
        currently registered MEL command is returned and this will be an empty string if
        none is defined.
    
    - toolOnProc : top               (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned on. For example, cloth invokes clothPaintToolOnwhen
        the cloth paint tool is turned on. Define this callback if your tool requires
        special functionality when your tool is activated. It is typical that if you
        implement a toolOnProc you will want to implement a toolOffProc as well (see the
        -toolOffProc flag. In query mode, the name of the currently registered MEL
        command is returned and this will be an empty string if none is defined.
    
    - updateerasesrf : ues           (bool)          [create,edit]
        Updates the erase surface.
    
    - updaterefsrf : urs             (bool)          [create,edit]
        Updates the reference surface.
    
    - useColorRamp : ucr             (bool)          [create,query,edit]
        Specifies whether the user defined color ramp should be used to map values from
        to colors.  If this is turned off, the default greyscale feedback will be used.
    
    - useMaxMinColor : umc           (bool)          [create,query,edit]
        Specifies whether the out of range colors should be used.  See rampMinColor and
        rampMaxColor flags for further details.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - value : val                    (float)         [create,query,edit]
        Specifies the value for each attribute. C: Default is 0.0.  Q: When queried, it
        returns a float.
    
    - whichTool : wst                (unicode)       [create,query,edit]
        The string defines the name of the tool to be used for the Artisan context. An
        example is artClothPaint. In query mode, the tool name for the given context is
        returned. Note: due to the way MEL works, always specify the -query flag last
        when specifying a flag that takes arguments.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artPuttyCtx`
    """
    pass
def nClothDisplayInputMesh(*args, **kwargs): pass
def NodeEditorSetLargeNodeSwatchSize(*args, **kwargs): pass
def CreateNURBSPlane(*args, **kwargs): pass
def cacheAppendOpt(*args, **kwargs): pass
def prepareRender(*args, **kwargs): pass
def namespace(*args, **kwargs):
    """
    This command allows a namespace to be created, set or removed. A namespace is a
    simple grouping of objects under a given name. Namespaces are primarily used to
    resolve name-clash issues in Maya, where a new object has the same name as an
    existing object (from importing a file, for example).  Using namespaces, you can
    have two objects with the same name, as long as they are contained in differenct
    namespaces. Namespaces are reminiscent of hierarchical structures like file
    systems where namespaces are analogous to directories and objects are analogous
    to files. The colon (':') character is the separator used to separate the names
    of namespaces and nodes instead of the slash ('/') or backslash ('\') character.
    Namespaces can contain other namespaces as well as objects.  Like objects, the
    names of namespaces must be unique within another namespace. Objects and
    namespaces can be in only one namespace. Namespace names and object names don't
    clash so a namespace and an object contained in another namespace can have the
    same name. There is an unnamed root namespace specified with a leading colon
    (':').  Any object not in a named namespace is in the root namespace. Normally,
    the leading colon is omitted from the name of an object as it's presence is
    implied. The presence of a leading colon is important when moving objects
    between namespaces using the 'rename' command.  For the 'rename' command, the
    new name is relative to the current namespace unless the new name is fully
    qualified with a leading colon. Namespaces are created using the
    'add/addNamespace' flag. By default they are created under the current
    namespace. Changing the current namespace is done with the 'set/setNamespace'
    flag. To reset the current namespace to the root namespace, use 'namespace -set
    :;'. Whenever an object is created, it is added by default to the current
    namespace. When creating a new namespace using a qualified name, any intervening
    namespaces which do not yet exist will be automatically created. For example, if
    the name of the new namespace is specified as A:Band the current namespace
    already has a child namespace named Athen a new child namespace named Bwill be
    created under A. But if the current namespace does not yet have a child named
    Athen it will be created automatically. This applies regardless of the number of
    levels in the provided name (e.g. A:B:C:D). The 'p/parent' flag can be used to
    explicitly specify the parent namespace under which the new one should be
    created, rather than just defaulting to the current namespace. If the name given
    for the new namespace is absolute (i.e. it begins with a colon, as in :A:B) then
    both the current namespace and the 'parent' flag will be ignored and the new
    namespace will be created under the root namespace. The relativeNamespace flag
    can be used to change the way node names are displayed in the UI and returned by
    the 'ls' command. Here are some specific details on how the return from the 'ls'
    command works in relativeNamespace mode: List all mesh objects in the scene:ls
    -type mesh;The above command lists all mesh objects in the root and any child
    namespaces. In relative name lookup mode, all names will be displayed relative
    to the current namespace. When not in relative name lookup mode (the default
    behaviour in Maya), results are printed relative to the root namespace. Using a
    \*wildcard:namespace -set myNS;ls -type mesh \*;In relative name lookup mode,
    the \*will match to the current namespace and thus the ls command will list only
    those meshes defined within the current namespace (i.e. myNs). If relative name
    lookup is off (the default behaviour in Maya), names are root-relative and thus
    \*matches the root namespace, with the net result being that only thoses meshes
    defined in the root namespace will be listed. You can force the root namespace
    to be listed when in relative name lookup mode by specifying :\*as your search
    pattern (i.e. ls -type mesh :\*which lists those meshes defined in the root
    namespace only). Note that you can also use :\*when relative name lookup mode is
    off to match the root if you want a consistent way to list the root. Listing
    child namespace contents:ls -type mesh \*:\*;For an example to list all meshes
    in immediate child namespaces, use \*:\*. In relative name lookup mode
    \*:\*lists those meshes in immediate child namespaces of the current namespaces.
    When not in relative name lookup mode, \*:\*lists meshes in namespaces one level
    below the root. Recursive listing of namespace contents:Example: ls -type mesh
    -recurse on \*The 'recurse' flag is provided on the lscommand to recursively
    traverse any child namespaces. In relative name lookup mode, the above example
    command will list all meshes in the current and any child namespaces of current.
    When not in relative name lookup mode, the above example command works from the
    root downwards and is thus equivalent to ls -type mesh.
    
    Flags:
    - absoluteName : an              (bool)          [create,query]
        This is a general flag which can be used to specify the desired format for the
        namespace(s) returned by the command. The absolute name of the namespace is a
        full namespace path, starting from the root namespace :and including all parent
        namespaces.  For example :ns:ballis an absolute namespace name while ns:ballis
        not.
    
    - addNamespace : add             (unicode)       [create]
        Create a new namespace with the given name. Both qualified names (A:B) and
        unqualified names (A) are acceptable. If any of the higher-level namespaces in a
        qualified name do not yet exist, they will be created. If the supplied name
        contains invalid characters it will first be modified as per the validateName
        flag.
    
    - collapseAncestors : ch         (unicode)       [create]
        Delete all empty ancestors of the given namespace. An empty namespace is a a
        namespace that does not contain any objects or other nested namespaces
    
    - deleteNamespaceContent : dnc   (bool)          [create]
        Used with the 'rm/removeNamespace' flag to indicate that when removing a
        namespace the contents of the namespace will also be removed.
    
    - exists : ex                    (unicode)       [query]
        Returns true if the specified namespace exists, false if not.
    
    - force : f                      (bool)          [create]
        Used with 'mv/moveNamespace' to force the move operation to ignore name clashes.
    
    - isRootNamespace : ir           (unicode)       [query]
        Returns true if the specified namespace is root, false if not.
    
    - mergeNamespaceWithParent : mnp (bool)          [create]
        Used with the 'rm/removeNamespace' flag. When removing a namespace, move the
        rest of the namespace content to the parent namespace.
    
    - mergeNamespaceWithRoot : mnr   (bool)          [create]
        Used with the 'rm/removeNamespace' flag. When removing a namespace, move the
        rest of the namespace content to the root namespace.
    
    - moveNamespace : mv             (unicode, unicode) [create]
        Move the contents of the first namespace into the second namespace. Child
        namespaces will also be moved. Attempting to move a namespace containing
        referenced nodes will result in an error; use the 'file' command ('file -edit
        -namespace') to change a reference namespace. If there are objects in the source
        namespace with the same name as objects in the destination namespace, an error
        will be issued. Use the 'force' flag to override this error - name clashes will
        be resolved by renaming the objects to ensure uniqueness.
    
    - parent : p                     (unicode)       [create]
        Used with the 'addNamespace' or 'rename' flags to specifiy the parent of the new
        namespace. The full namespace parent path is required. When using 'addNamespace'
        with an absolute name, the 'parent' will be ignored and the command will display
        a warning
    
    - recurse : r                    (bool)          [query]
        Can be used with the 'exists' flag to recursively look for the specified
        namespace
    
    - relativeNames : rel            (bool)          [create,query]
        Turns on relative name lookup, which causes name lookups within Maya to be
        relative to the current namespace. By default this is off, meaning that name
        lookups are always relative to the root namespace. Be careful turning this
        feature on since commands such as setAttr will behave differently. It is wise to
        only turn this feature on while executing custom procedures that you have
        written to be namespace independent and turning relativeNames off when returning
        control from your custom procedures. Note that Maya will turn on relative naming
        during file I/O. Although it is not recommended to leave relativeNames turned
        on, if you try to toggle the value during file I/O you may notice that the value
        stays onbecause Maya has already temporarily enabled it internally. When
        relativeNames are enabled, the returns provided by the 'ls' command will be
        relative to the current namespace. See the main description of this command for
        more details.
    
    - removeNamespace : rm           (unicode)       [create]
        Deletes the given namespace.  The namespace must be empty for it to be deleted.
    
    - rename : ren                   (unicode, unicode) [create]
        Rename the first namespace to second namespace name. Child namespaces will also
        be renamed. Both names are relative to the current namespace. Use the 'parent'
        flag to specify a parent namespace for the renamed namespace. An error is issued
        if the second namespace name already exists. If the supplied name contains
        invalid characters it will first be modified as per the validateName flag.
    
    - setNamespace : set             (unicode)       [create]
        Sets the current namespace.
    
    - validateName : vn              (unicode)       [create]
        Convert the specified name to a valid name to make it contain no illegal
        characters. The leading illegal characters will be removed and other illegal
        characters will be converted to '_'. Specially, the leading numeric characters
        and trailing space characters will be also removed.  Full name path can be
        validated as well. However, if the namespace of the path does not exist, command
        will only return the base name. For example, :nonExistentNS:namewill be
        converted to name.  If the entire name consists solely of illegal characters,
        e.g. 123which contains only leading digits, then the returned string will be
        empty.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.namespace`
    """
    pass
def particleFill(*args, **kwargs):
    """
    This command generates an nParticle system that fills the selected object with a
    grid of particles.
    
    Flags:
    - closePacking : cp              (bool)          [create]
        If this is on then the particles are positioned as closely as possible in a
        hexagonal close packing arrangement. Otherwise particles are packed in a uniform
        grid lattice.
    
    - doubleWalled : dw              (bool)          [create]
        This flag should be used if the thickness of the object to fill has been
        modeled( for example a mug ). Otherwise the particles will be created inside the
        wall. Note that doubleWalled will not handle some cases very well. For example a
        double walled donut shape may get the center region of the donut filled. In
        cases like this it may be better to make the internal wall a separate mesh then
        fill that without using doubleWalled.
    
    - maxX : mxx                     (float)         [create]
        The fill max bounds of the particles in X relative to the X bounds of the
        object. A value of zero is totally empty and one is totally full. The default
        value is 1, or fully filled.
    
    - maxY : mxy                     (float)         [create]
        The fill max bounds of the particles in Y relative to the Y bounds of the
        object. A value of zero is totally empty and one is totally full. The default
        value is 1, or fully filled.
    
    - maxZ : mxz                     (float)         [create]
        The fill max bounds of the particles in Z relative to the Z bounds of the
        object. A value of zero is totally empty and one is totally full. The default
        value is 1, or fully filled.
    
    - minX : mnx                     (float)         [create]
        The fill lower bounds of the particles in X relative to the X bounds of the
        object. A value of zero is totally full and one is totally empty. The default
        value is 0, or fully filled.
    
    - minY : mny                     (float)         [create]
        The fill lower bounds of the particles in Y relative to the Y bounds of the
        object. A value of zero is totally full and one is totally empty. The default
        value is 0, or fully filled.
    
    - minZ : mnz                     (float)         [create]
        The fill lower bounds of the particles in Z relative to the Z bounds of the
        object. A value of zero is totally full and one is totally empty. The default
        value is 0, or fully filled.
    
    - particleDensity : pd           (float)         [create]
        This controls the size of the particles. At a value of 1.0 the particle size
        will exactly match the grid spacing determined by the resolution parameter and
        the object bounds. Particles which overlap the surface will be rejected even if
        the center of the particle is inside.
    
    - resolution : rs                (int)           [create]
        This determines the total number of particles generated. It represent the
        resolution along the largest axis of the object's bounding box. For a cube shape
        the total potential particles will be the cube of the resolution. For other
        shapes it will be less. The default value for this flag is 10, so 1000 particles
        could be generated for a cube shape.                               Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.particleFill`
    """
    pass
def DisplayViewport(*args, **kwargs): pass
def RebuildSurfaces(*args, **kwargs): pass
def rehash(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.rehash`
    """
    pass
def GetHIKChildCount(*args, **kwargs):
    """
    Flags:
    - nodeid : nid                   (int)           []
    
    
    Derived from mel command `maya.cmds.GetHIKChildCount`
    """
    pass
def ToggleFullScreenMode(*args, **kwargs): pass
def ikSystem(*args, **kwargs): pass
def PickWalkLeftSelect(*args, **kwargs): pass
def NodeEditorToggleConsistentNodeNameSize(*args, **kwargs): pass
def WhatsNewStartupDialogOn(*args, **kwargs): pass
def waitCursor(*args, **kwargs):
    """
    This command sets/resets a wait cursor for the entire Maya application. This
    works as a stack, such that for each waitCursor -state oncommand executed there
    should be a matching waitCursor -state offcommand pending. Warning:If a script
    fails that has turned the wait cursor on, the wait cursor may be left on. You
    need to turn it off manually from the command line by entering and executing the
    command 'waitCursor -state off'.
    
    Flags:
    - state : st                     (bool)          [create,query]
        Set or reset the wait cursor for the entire Maya application.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.waitCursor`
    """
    pass
def setInfinity(*args, **kwargs):
    """
    Set the infinity type before (after) a paramCurve's first (last) keyframe. In
    query mode, return type is based on queried flag.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        List of attributes to select
    
    - controlPoints : cp             (bool)          [create]
        This flag explicitly specifies whether or not to include the control points of a
        shape (see -sflag) in the list of attributes. Default: false.  (Not valid for
        pasteKeycmd.)
    
    - hierarchy : hi                 (unicode)       [create]
        Hierarchy expansion options.  Valid values are above,below,both,and none.(Not
        valid for pasteKeycmd.)
    
    - postInfinite : poi             (unicode)       [create,query]
        Set the infinity type after a paramCurve's last keyframe. Valid values are
        constant, linear, cycle, cycleRelative, oscillate.
    
    - preInfinite : pri              (unicode)       [create,query]
        Set the infinity type before a paramCurve's first keyframe. Valid values are
        constant, linear, cycle, cycleRelative, oscillate.
    
    - shape : s                      (bool)          [create]
        Consider attributes of shapes below transforms as well, except controlPoints.
        Default: true.  (Not valid for pasteKeycmd.)Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setInfinity`
    """
    pass
def meshRemap(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.meshRemap`
    """
    pass
def createSubdivRegion(*args, **kwargs):
    """
    Creates a subdivision surface region based on the selection list. Once a
    selection region is created, only the components in the selection list or
    converted from the selection list will be displayed and selectible through the
    UI.
    
    
    Derived from mel command `maya.cmds.createSubdivRegion`
    """
    pass
def AlignObjects(*args, **kwargs): pass
def FBXImportCacheFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportCacheFile`
    """
    pass
def CameraSetEditor(*args, **kwargs): pass
def SnapToGrid(*args, **kwargs): pass
def xgmPresetSnapshotContext(*args, **kwargs):
    """
    Flags:
    - callback : cb                  (unicode)       []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmPresetSnapshotContext`
    """
    pass
def dR_setRelaxAffectsBorders(*args, **kwargs): pass
def mouse(*args, **kwargs):
    """
    This command allows to configure mouse.
    
    Flags:
    - enableScrollWheel : esw        (bool)          [create]
        Enable or disable scroll wheel support.
    
    - mouseButtonTracking : mbt      (int)           [create]
        Set the number (1, 2 or 3) of mouse buttons to track.Note: this is only
        supported on Macintosh
    
    - mouseButtonTrackingStatus : mbs (bool)          [create]
        returns the current number of mouse buttons being tracked.
    
    - scrollWheelStatus : sws        (bool)          [create]
        returns the current status of scroll wheel support.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.mouse`
    """
    pass
def UpdateBindingSet(*args, **kwargs): pass
def NodeEditorGraphRemoveUnselected(*args, **kwargs): pass
def OutTangentPlateau(*args, **kwargs): pass
def IncreaseGammaCoarse(*args, **kwargs): pass
def attrColorSliderGrp(*args, **kwargs): pass
def setParticleAttr(*args, **kwargs):
    """
    This action will set the value of the chosen attribute for every particle or
    selected component in the selected or passed particle object. Components should
    not be passed to the command line. For setting the values of components, the
    components must be selected and only the particle object's names should be
    passed to this action. If the attribute is a vector attribute and the -vv flag
    is passed, then the three floats passed will be used to set the values.  If the
    attribute is a vector and the -fv flag is pass and the -vv flag is not passed,
    then the float will be repeated for each of the X, Y, and Z values of the
    attribute.  Similarly, if the attribute is a float attribute and a vector value
    is passed, then the length of the vector passed will be used for the value.
    Note:  The attribute passed must be a Per-Particle attribute.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Tells the action which attribute you want to set
    
    - floatValue : fv                (float)         [create]
        Tells what you want the value to be set to of a float attribute
    
    - object : o                     (unicode)       [create]
        If this flag is passed and the STRING is the name of a particle object's
        transform or shape, then ONLY that object will be edited, ignoring the selection
        list or command line, and ALL of its particles' values will be changed for the
        specified attribute.
    
    - randomFloat : rf               (float)         [create]
        Tells the command to add a random value from -FLOAT to +FLOAT to the results of
        each particle.  The default is 0.0.
    
    - randomVector : rv              (float, float, float) [create]
        Tells the command to add a random value from -x,-y,-zto x,y,zto the results of
        each particle. The default 0 0 0.
    
    - relative : r                   (bool)          [create]
        If this is set to TRUE (the default is FALSE), then the float or vector value
        will be added to the current value for each particle.
    
    - vectorValue : vv               (float, float, float) [create]
        Tells what you want the value to be set to of a vector attribute
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setParticleAttr`
    """
    pass
def nodeType(*args, **kwargs): pass
def PreviousKey(*args, **kwargs): pass
def HypershadeOpenRenderViewWindow(*args, **kwargs): pass
def ToggleViewportRenderer(*args, **kwargs): pass
def dR_alwaysOnTopTGL(*args, **kwargs): pass
def ModifyPaintValuePress(*args, **kwargs): pass
def ArtPaintBlendShapeWeightsToolOptions(*args, **kwargs): pass
def revolve(*args, **kwargs): pass
def UVCameraBasedProjectionOptions(*args, **kwargs): pass
def createPolyHelixCtx(*args, **kwargs):
    """
    Flags:
    - attachToNumberCoils : anc      (bool)          []
    
    - attachToRadius : atr           (bool)          []
    
    - attachToSubdivisionsAxis : asa (bool)          []
    
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsCoil : aso (bool)          []
    
    - axis : ax                      (int)           []
    
    - coils : c                      (float)         []
    
    - createUVs : cuv                (int)           []
    
    - direction : dir                (bool)          []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - roundCap : rc                  (bool)          []
    
    - subdivisionsAxis : sa          (int)           []
    
    - subdivisionsCap : sc           (int)           []
    
    - subdivisionsCoil : sl          (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createPolyHelixCtx`
    """
    pass
def dR_loadRecentFile2(*args, **kwargs): pass
def CopyKeys(*args, **kwargs): pass
def MakePondBoats(*args, **kwargs): pass
def SelectAllMarkingMenuPopDown(*args, **kwargs): pass
def subdToNurbs(*args, **kwargs):
    """
    Flags:
    - addUnderTransform : aut        (bool)          []
    
    - applyMatrixToResult : amr      (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - outputType : ot                (int)           []
    
    
    Derived from mel command `maya.cmds.subdToNurbs`
    """
    pass
def keyframeRegionMoveKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to move keyframes within the
    keyframe region of the dope sheet editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - option : o                     (unicode)       [create,query,edit]
        Valid values are move,insert,over,and segmentOver. Specifies the keyframe
        -option to use.  When you movea key, the key will not cross over (in time) any
        keys before or after it. When you inserta key, all keys before or after
        (depending upon the -timeChange value) will be moved an equivalent amount. When
        you overa key, the key is allowed to move to any time (as long as a key is not
        there already). When you segmentOvera set of keys (this option only has a
        noticeable effect when more than one key is being moved) the first key (in time)
        and last key define a segment (unless you specify a time range). That segment is
        then allowed to move over other keys, and keys will be moved to make room for
        the segment.                  Flag can have multiple arguments, passed either as
        a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionMoveKeyCtx`
    """
    pass
def DollyTool(*args, **kwargs): pass
def SelectNextIntermediatObject(*args, **kwargs): pass
def viewLookAt(*args, **kwargs):
    """
    The viewLookAt command positions the specified camera so it is looking at the
    centroid of all selected objects. If no objects are specified the camera will
    look at the ground plane.
    
    Flags:
    - position : pos                 (float, float, float) [create]
        Position in world space to make the camera look at.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewLookAt`
    """
    pass
def ExportAnim(*args, **kwargs): pass
def PolygonClearClipboard(*args, **kwargs): pass
def toggleWindowVisibility(*args, **kwargs):
    """
    Toggle the visibility of a window. If no window is specified then the current
    window (most recently created) is used. See also the windowcommand's
    vis/visibleflag.
    
    
    Derived from mel command `maya.cmds.toggleWindowVisibility`
    """
    pass
def MoveSkinJointsToolOptions(*args, **kwargs): pass
def NodeEditorToggleZoomIn(*args, **kwargs): pass
def floatScrollBar(*args, **kwargs): pass
def loadUI(*args, **kwargs):
    """
    loadUI command allows loading of a user interface created in Trolltech Qt
    Designer. Some Qt classes have equivalents in Maya.  If a widget's class is
    recognized, the Maya-equivelent will be created instead. Any dynamic properties
    on a widget which start with a '-' character will be treated as a MEL flag/value
    pair.  Similarly, any which start with a '+' will be treated as a Python
    flag/value pair.  Such pairs will be applied to the widget upon creation.
    
    Flags:
    - listTypes : lt                 (bool)          [create]
        Returns the list of recognized UI types and their associated Maya command.
    
    - uiFile : f                     (unicode)       [create]
        Full path to a user interface file to load.
    
    - uiString : s                   (unicode)       [create]
        Load UI from a formated string.
    
    - verbose : v                    (bool)          [create]
        Extra information about created controls will be printed.
    
    - workingDirectory : wd          (unicode)       [create]
        Sets the working directory, the loader looks for resources such as icons and
        resouce files in paths relative to this directory.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.loadUI`
    """
    pass
def HypergraphDGWindow(*args, **kwargs): pass
def HIKGetRemoteCharacterList(*args, **kwargs):
    """
    Flags:
    - server : s                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.HIKGetRemoteCharacterList`
    """
    pass
def GraphEditorAbsoluteView(*args, **kwargs): pass
def TranslateToolWithSnapMarkingMenu(*args, **kwargs): pass
def convertUnit(*args, **kwargs):
    """
    This command converts values between different units of measure.  The command
    takes a string, because a string can incorporate unit names as well as values
    (see examples).
    
    Flags:
    - fromUnit : f                   (unicode)       [create]
        The unit to convert from.  If not supplied, it is assumed to be the system
        default.  The from unit may also be supplied as part of the value e.g. 11.2m
        (11.2 meters).
    
    - toUnit : t                     (unicode)       [create]
        The unit to convert to.  If not supplied, it is assumed to be the system default
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.convertUnit`
    """
    pass
def xgmBrushManip(*args, **kwargs):
    """
    Flags:
    - segment : se                   (int)           []
    
    - stroke : st                    (int, int, int, int) []
    
    
    Derived from mel command `maya.cmds.xgmBrushManip`
    """
    pass
def FBXExportSkins(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportSkins`
    """
    pass
def DeleteAllNonLinearDeformers(*args, **kwargs): pass
def RenderViewWindow(*args, **kwargs): pass
def dR_coordSpaceLocal(*args, **kwargs): pass
def SelectCurveCVsLast(*args, **kwargs): pass
def PaintSoftWeightsOptions(*args, **kwargs): pass
def PublishConnectionsOptions(*args, **kwargs): pass
def InsertIsoparms(*args, **kwargs): pass
def MatchUVsOptions(*args, **kwargs): pass
def RotateUVs(*args, **kwargs): pass
def shapeCompare(*args, **kwargs):
    """
    Compares two shapes. If no shapes are specified in the command line, then the
    shapes from the active list are used.
    
    
    Derived from mel command `maya.cmds.shapeCompare`
    """
    pass
def HypershadeOpenBinsWindow(*args, **kwargs): pass
def NURBSSmoothnessRoughOptions(*args, **kwargs): pass
def SelectCVsMask(*args, **kwargs): pass
def ExtendCurveOnSurfaceOptions(*args, **kwargs): pass
def HypershadeDeleteAllUtilities(*args, **kwargs): pass
def ToggleFastInteraction(*args, **kwargs): pass
def iconTextStaticLabel(*args, **kwargs): pass
def TimeEditorUnsoloAllTracks(*args, **kwargs): pass
def xgmSculptLayerInit(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmSculptLayerInit`
    """
    pass
def sbs_GetEditionModeScale(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetEditionModeScale`
    """
    pass
def AddInfluence(*args, **kwargs): pass
def CurlCurvesOptions(*args, **kwargs): pass
def insertListItem(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.insertListItem`
    """
    pass
def extendFluid(*args, **kwargs):
    """
    Flags:
    - endD : ed                      (int)           []
    
    - endH : eh                      (int)           []
    
    - endW : ew                      (int)           []
    
    - startD : sd                    (int)           []
    
    - startH : sh                    (int)           []
    
    - startW : sw                    (int)           []
    
    
    Derived from mel command `maya.cmds.extendFluid`
    """
    pass
def SmoothSkinWeightsOptions(*args, **kwargs): pass
def dollyCtx(*args, **kwargs):
    """
    This command can be used to create, edit, or query a dolly context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - boxDollyType : bdt             (unicode)       [create,query,edit]
        Set the behavior of where the camera's center of interest is set to after the
        box dolly. In surfacemode, the center of interest will be snapped to the surface
        point at the center of the marquee. In bboxmode, the closest bounding box to the
        camera will be used. Bounding box mode will use the selection mask to determine
        which objects to include into the calculation.
    
    - centerOfInterestDolly : cd     (bool)          [create,query,edit]
        Set the translate the camera's center of interest. Left and right drag movements
        with the mouse will translate the center of interest towards or away
        respectively from the camera. The center of interest can be snapped to objects
        by using the left mouse button for selection. The default select mask will be
        used.
    
    - dollyTowardsCenter : dtc       (bool)          [create,query,edit]
        Dolly towards center (if true), else dolly towards point where user clicks in
        the view.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - localDolly : ld                (bool)          [create,query,edit]
        Dolly with respect to the camera's center of interest. The camera will not pass
        through the center of interest. Local dolly only applies to perspective cameras.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - orthoZoom : oz                 (bool)          [create,query,edit]
        Zoom orthographic view (if true), else dolly orthographic camera. Default value
        is true.
    
    - scale : s                      (float)         [create,query,edit]
        The sensitivity for dollying the camera.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dollyCtx`
    """
    pass
def AttachCurveOptions(*args, **kwargs): pass
def fluidReplaceFrames(*args, **kwargs): pass
def polyCylinder(*args, **kwargs): pass
def SubdivSmoothnessHull(*args, **kwargs): pass
def detachSurface(*args, **kwargs): pass
def PointConstraintOptions(*args, **kwargs): pass
def dR_multiCutTool(*args, **kwargs): pass
def createNurbsCylinderCtx(*args, **kwargs):
    """
    Flags:
    - attachToHeightRatio : ahr      (bool)          []
    
    - attachToSections : attachToSections (bool)          []
    
    - attachToSpans : asp            (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - caps : cp                      (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - endSweep : esw                 (float)         []
    
    - exists : ex                    (bool)          []
    
    - extraTransformOnCaps : xtc     (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sections : sc                  (int)           []
    
    - spans : sp                     (int)           []
    
    - startSweep : ssw               (float)         []
    
    - surfaceDegree : sd             (int)           []
    
    - tolerance : tol                (float)         []
    
    - toleranceType : tlt            (int)           []
    
    - useTolerance : ut              (bool)          []
    
    
    Derived from mel command `maya.cmds.createNurbsCylinderCtx`
    """
    pass
def rotate(*args, **kwargs): pass
def SetMeshAmplifyTool(*args, **kwargs): pass
def OutlinerToggleReferenceMembers(*args, **kwargs): pass
def ResetWeightsToDefault(*args, **kwargs): pass
def colorEditor(*args, **kwargs): pass
def ToggleUVEditorUVStatisticsHUD(*args, **kwargs): pass
def CutUVs3D(*args, **kwargs): pass
def dR_setExtendEdge(*args, **kwargs): pass
def polyDelEdge(*args, **kwargs): pass
def uvLink(*args, **kwargs):
    """
    This command is used to make, break and query UV linking relationships between
    UV sets on objects and textures that use those UV sets. If no make, break or
    query flag is specified and both uvSet and texture flags are present, the make
    flag is assumed to be specified. If no make, break or query flag is specified
    and only one of the uvSet and texture flags is present, the query flag is
    assumed to be specified. The term texturein the context of UV linking is a bit
    of an oversimplification. In fact, UV sets can be linked to any node which takes
    UV coordinates as input. However in most cases it will be a texture to which you
    wish to link a UV set.
    
    Flags:
    - b : b                          (bool)          [create]
        The presence of this flag on the command indicates that the command is being
        invoked to break links between UV sets and textures.
    
    - isValid : iv                   (bool)          [create]
        This flag is used to verify whether or not a texture or UV set is valid for the
        purposes of UV linking. It should be used in conjunction with either the
        -texture flag or the -uvSet flag, but not both at the same time.
    
    - make : m                       (bool)          [create]
        The presence of this flag on the command indicates that the command is being
        invoked to make links between UV sets and textures.
    
    - queryObject : qo               (PyNode)        [create]
        This flag should only be used in conjunction with a query of a texture. This
        flag is used to indicate that the results of the query should be limited to UV
        sets of the object specified by this flag.
    
    - texture : t                    (PyNode)        [create]
        The argument to the texture flag specifies the texture to be used by the command
        in performing the action.
    
    - uvSet : uvs                    (PyNode)        [create]
        The argument to the uvSet flag specifies the UV set to be used by the command in
        performing the action.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.uvLink`
    """
    pass
def ConvertHairSelectionToStartCurves(*args, **kwargs): pass
def CreateLocator(*args, **kwargs): pass
def TimeEditorFbxExportAll(*args, **kwargs): pass
def ToggleLatticePoints(*args, **kwargs): pass
def attrNavigationControlGrp(*args, **kwargs): pass
def xgmSplineSetCurrentDescription(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmSplineSetCurrentDescription`
    """
    pass
def intersect(*args, **kwargs):
    """
    The intersect command creates a curve on surface where all surfaces intersect
    with each other. By default, the curve on surface is created for both surfaces.
    However, by using the -fs flag, only the first surface will have a curve on
    surface. Also, the intersection curve can be created as a 3D curve rather than a
    curve on surface.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - curveOnSurface : cos           (bool)          [create]
        If possible, create 2D curve as a result.
    
    - firstSurface : fs              (bool)          [query,edit]
        Creates a curve-on-surface on the first surface only or on all surfaces
        (default).
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - tolerance : tol                (float)         [create,query,edit]
        Tolerance to fit to. Default:0.01                  Common flags
    
    
    Derived from mel command `maya.cmds.intersect`
    """
    pass
def DisplayBifrostHUD(*args, **kwargs): pass
def ToggleCommandLine(*args, **kwargs): pass
def OpenStereoRigManager(*args, **kwargs): pass
def ShowMeshSprayToolOptions(*args, **kwargs): pass
def nucleusDisplayDynamicConstraintNodes(*args, **kwargs): pass
def BevelOptions(*args, **kwargs): pass
def SmoothHairCurvesOptions(*args, **kwargs): pass
def HypershadeToggleZoomOut(*args, **kwargs): pass
def NodeEditorRenderSwatches(*args, **kwargs): pass
def nConstraintSelectMembers(*args, **kwargs): pass
def SurfaceBooleanSubtractToolOptions(*args, **kwargs): pass
def PaintOperationMarkingMenuPress(*args, **kwargs): pass
def AimConstraint(*args, **kwargs): pass
def polySetVertices(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.polySetVertices`
    """
    pass
def licenseCheck(*args, **kwargs):
    """
    Flags:
    - mode : m                       (unicode)       []
    
    - type : typ                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.licenseCheck`
    """
    pass
def Fire(*args, **kwargs): pass
def undoInfo(*args, **kwargs):
    """
    This command controls the undo/redo parameters. In query mode, if invoked
    without flags (other than the query flag), this command will return the number
    of items currently on the undo queue.
    
    Flags:
    - chunkName : cn                 (unicode)       [create,query]
        Sets the name used to identify a chunk for undo/redo purposes when opening a
        chunk.
    
    - closeChunk : cck               (bool)          [create]
        Closes the chunk that was opened earlier by openChunk. Once close chunk is
        called, all undoable operations in the chunk will undo as a single undo
        operation. Use with CAUTION!! Improper use of this command can leave the undo
        queue in a bad state.
    
    - infinity : infinity            (bool)          [create,query]
        Set the queue length to infinity.
    
    - length : l                     (int)           [create,query]
        Specifies the maximum number of items in the undo queue. The infinity flag
        overrides this one.
    
    - openChunk : ock                (bool)          [create]
        Opens a chunk so that all undoable operations after this call will fall into the
        newly opened chunk, until close chunk is called. Once close chunk is called, all
        undoable operations in the chunk will undo as a single undo operation. Use with
        CAUTION!! Improper use of this command can leave the undo queue in a bad state.
    
    - printQueue : pq                (bool)          [query]
        Prints to the Script Editor the contents of the undo queue.
    
    - printRedoQueue : prq           (bool)          [query]
        Prints to the Script Editor the contents of the redo queue.
    
    - redoName : rn                  (unicode)       [query]
        Returns what will be redone (if anything)
    
    - redoQueueEmpty : rqe           (bool)          [query]
        Return true if the redo queue is empty. Return false if there is at least one
        command in the queue to be redone.
    
    - state : st                     (bool)          [create,query]
        Turns undo/redo on or off.
    
    - stateWithoutFlush : swf        (bool)          [create,query]
        Turns undo/redo on or off without flushing the queue. Use with CAUTION!! Note
        that if you  perform destructive operations while stateWithoutFlush is disabled,
        and you then enable it again, subsequent undo operations that try to go past the
        destructive operations may be unstable since undo will not be able to properly
        reconstruct the former state of the scene.
    
    - undoName : un                  (unicode)       [query]
        Returns what will be undone (if anything)
    
    - undoQueueEmpty : uqe           (bool)          [query]
        Return true if the undo queue is empty. Return false if there is at least one
        command in the queue to be undone.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.undoInfo`
    """
    pass
def CreatePolygonCube(*args, **kwargs): pass
def Import(*args, **kwargs): pass
def sbs_GetGlobalTextureWidth(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetGlobalTextureWidth`
    """
    pass
def colorIndexSliderGrp(*args, **kwargs): pass
def TimeEditorToggleMuteSelectedTracks(*args, **kwargs): pass
def SelectUVNonOverlappingComponentsPerObject(*args, **kwargs): pass
def PostInfinityOscillate(*args, **kwargs): pass
def ShowLattices(*args, **kwargs): pass
def OutTangentFixed(*args, **kwargs): pass
def CVHardness(*args, **kwargs): pass
def MirrorPolygonGeometry(*args, **kwargs): pass
def SetAsCombinationTargetOptions(*args, **kwargs): pass
def nodeEditor(*args, **kwargs): pass
def ShowStrokeControlCurves(*args, **kwargs): pass
def HideDynamicConstraints(*args, **kwargs): pass
def ConvertSelectionToFaces(*args, **kwargs): pass
def polyContourProjection(*args, **kwargs):
    """
    Performs a contour stretch UV projection onto an object.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createNewMap : cm              (bool)          [create]
        Set to true if a new map should be created
    
    - flipRails : fr                 (bool)          [create,query,edit]
        If true, flip which curves are the rails of the birail surface.
    
    - frozen : fzn                   (bool)          []
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        Set to true if the new node created should inserted before any deformer nodes.
    
    - method : m                     (int)           [create,query,edit]
        Sets which projection method to use. Valid values are 0: Walk Contours 1: NURBS
        Projection
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - offset0 : o0                   (float)         [create,query,edit]
        Sets the offset on edge 0 of the NURBS surface.
    
    - offset1 : o1                   (float)         [create,query,edit]
        Sets the offset on edge 1 of the NURBS surface.
    
    - offset2 : o2                   (float)         [create,query,edit]
        Sets the offset on edge 2 of the NURBS surface.
    
    - offset3 : o3                   (float)         [create,query,edit]
        Sets the offset on edge 3 of the NURBS surface.
    
    - reduceShear : rs               (float)         [create,query,edit]
        Sets the 'reduce shear' parameter of the projection.
    
    - smoothness0 : s0               (float)         [create,query,edit]
        Sets the smoothness of edge 0 of the NURBS surface.
    
    - smoothness1 : s1               (float)         [create,query,edit]
        Sets the smoothness of edge 1 of the NURBS surface.
    
    - smoothness2 : s2               (float)         [create,query,edit]
        Sets the smoothness of edge 2 of the NURBS surface.
    
    - smoothness3 : s3               (float)         [create,query,edit]
        Sets the smoothness of edge 3 of the NURBS surface.
    
    - userDefinedCorners : udc       (bool)          [create,query,edit]
        If true, the four vertices specified by user will be taken as corners to do the
        projection.
    
    - uvSetName : uvs                (unicode)       [create]
        Name of the UV set to be created
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyContourProjection`
    """
    pass
def SnapPointToPointOptions(*args, **kwargs): pass
def cMuscleRayIntersect(*args, **kwargs):
    """
    Flags:
    - boneangle : ba                 (float)         []
    
    - bonepoint1 : bp1               (float, float, float) []
    
    - bonepoint2 : bp2               (float, float, float) []
    
    - help : h                       (bool)          []
    
    - local : loc                    (bool)          []
    
    - mult : mlt                     (float)         []
    
    - offset : off                   (float)         []
    
    - point1 : pt1                   (float, float, float) []
    
    - point2 : pt2                   (float, float, float) []
    
    
    Derived from mel command `maya.cmds.cMuscleRayIntersect`
    """
    pass
def itemFilterAttr(*args, **kwargs):
    """
    This command creates a named itemFilterAttr object.  This object can be attached
    to editors, in order to filter the attributes going through them. Using union
    and intersection filters, complex composite filters can be created.
    
    Flags:
    - byName : bn                    (unicode)       [create,query,edit]
        The filter will only pass items whose names match the given regular expression
        string.  This string can contain the special characters \* and ?.  '?' matches
        any one character, and '\*' matches any substring. This flag cannot be used in
        conjunction with the -byScript or -secondScript flags.
    
    - byNameString : bns             (unicode)       [create,query,edit]
        The filter will only pass items whose names match the given string. This is a
        multi-use flag which allows the user to specify several strings. The filter will
        pass items that match any of the strings. This flag cannot be used in
        conjunction with the -byScript or -secondScript flags.
    
    - byScript : bs                  (unicode)       [create,query,edit]
        The filter will run a MEL script named by the given string on each attribute
        name.  Attributes will pass the filter if the script returns a non-zero value.
        The script name string must be the name of a proc whose signature is:global proc
        int procName( string $nodeName string $attrName )This flag cannot be used in
        conjunction with the -byName or -byNameString flags.
    
    - classification : cls           (unicode)       [create,query,edit]
        Indicates whether the filter is a built-in or user filter. The string argument
        must be either builtInor user. The otherfilter classification is deprecated. Use
        userinstead.  Filters created by Maya should be classified as builtIn. Filters
        created by plugins or user scripts should be classified as user.  Filters will
        not be deleted by a file new. Filter nodes will be hidden from the UI (ex:
        Attribute Editor, Hypergraph etc) and will not be accessible from the command-
        line.
    
    - dynamic : dy                   (bool)          [create,query,edit]
        The filter will only pass dynamic attributes
    
    - exists : ex                    (bool)          [create,query,edit]
        The filter will only pass attributs that exist
    
    - hasCurve : hc                  (bool)          [create,query,edit]
        The filter will only pass attributes that are driven by animation curves.
    
    - hasDrivenKey : hdk             (bool)          [create,query,edit]
        The filter will only pass attributes that are driven by driven keys
    
    - hasExpression : he             (bool)          [create,query,edit]
        The filter will only pass attributes that are driven by expressions
    
    - hidden : h                     (bool)          [create,query,edit]
        The filter will only pass attributes that are hidden to the user
    
    - intersect : intersect          (unicode, unicode) [create,query,edit]
        The filter will consist of the intersection of two other filters, whose names
        are the given strings. Attributes will pass this filter if and only if they pass
        both of the contained filters.
    
    - keyable : k                    (bool)          [create,query,edit]
        The filter will only pass attributes that are keyable
    
    - listBuiltInFilters : lbf       (bool)          [query]
        Returns an array of all attribute filters with classification builtIn.
    
    - listOtherFilters : lof         (bool)          [query]
        The otherclassification has been deprecated. Use userinstead. Returns an array
        of all attribute filters with classification other.
    
    - listUserFilters : luf          (bool)          [query]
        Returns an array of all attribute filters with classification user.
    
    - negate : neg                   (bool)          [create,query,edit]
        This flag can be used to cause the filter to invert itself, and reverse what
        passes and what fails.
    
    - parent : p                     (unicode)       []
        This flag is no longer supported.
    
    - published : pub                (bool)          [create,query,edit]
        The filter will only pass attributes that are published on the container.
    
    - readable : r                   (bool)          [create,query,edit]
        The filter will only pass attributes that are readable (outputs)
    
    - scaleRotateTranslate : srt     (bool)          [create,query,edit]
        The filter will show only SRT attributes: scale, rotate, translate and their
        children
    
    - secondScript : ss              (unicode)       [create,query,edit]
        Can be used in conjunction with the -bs flag.  The second script is for
        filtering whole lists at once, rather than individually.  Its signature must
        be:global proc string[] procName( string[] $nodeName string[] $attrName )It
        should take in a list of attributes, and return a filtered list of attributes.
        This flag cannot be used in conjunction with the -byName or -byNameString flags.
    
    - text : t                       (unicode)       [create,query,edit]
        Defines an annotation string to be stored with the filter
    
    - union : un                     (unicode, unicode) [create,query,edit]
        The filter will consist of the union of two other filters, whose names are the
        given strings. Attributes will pass this filter if they pass at least one of the
        contained filters.
    
    - writable : w                   (bool)          [create,query,edit]
        The filter will only pass attributes that are writable (inputs)
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.itemFilterAttr`
    """
    pass
def repeatLast(*args, **kwargs): pass
def UniformOptions(*args, **kwargs): pass
def polyTorus(*args, **kwargs): pass
def UpdateCurrentSceneMudbox(*args, **kwargs): pass
def SculptSurfacesTool(*args, **kwargs): pass
def EnableNucleuses(*args, **kwargs): pass
def movieCompressor(*args, **kwargs):
    """
    Flags:
    - hardwareOptions : ho           (bool)          []
    
    - softwareOptions : so           (bool)          []
    
    
    Derived from mel command `maya.cmds.movieCompressor`
    """
    pass
def SetMeshSmearTool(*args, **kwargs): pass
def CharacterSetEditor(*args, **kwargs): pass
def MoveCurveSeam(*args, **kwargs): pass
def symmetrizeUV(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.symmetrizeUV`
    """
    pass
def about(*args, **kwargs):
    """
    This command displays version information about the application if it is
    executed without flags.  If one of the above flags is specified then the
    specified version information is returned.
    
    Flags:
    - apiVersion : api               (bool)          [create]
        Returns the api version.
    
    - application : a                (bool)          [create]
        Returns the application name string.
    
    - batch : b                      (bool)          [create]
        Returns true if application is in batch mode.
    
    - buildDirectory : bd            (bool)          [create]
        Returns the build directory string.
    
    - buildVariant : bv              (bool)          [create]
        Returns the build variant string.
    
    - codeset : cs                   (bool)          [create]
        Returns a string identifying the codeset (codepage) of the locale that Maya is
        running in. Example return values include UTF-8, ISO-8859-1, 1252. Note that the
        codeset values and naming conventions are highly platform dependent.  They may
        differ in format even if they have the same meaning (e.g. utf8vs. UTF-8).
    
    - compositingManager : cm        (bool)          [create]
        On Linux, returns true if there is a compositing manager running; on all other
        platforms, it always returns true.
    
    - connected : cnt                (bool)          [create]
        Return whether the user is connected or not to the Internet.
    
    - ctime : cti                    (bool)          [create]
        Returns the current time in the format Wed Jan 02 02:03:55 1980\n\0
    
    - currentDate : cd               (bool)          [create]
        Returns the current date in the format yyyy/mm/dd, e.g. 2003/05/04.
    
    - currentTime : ct               (bool)          [create]
        Returns the current time in the format hh:mm:ss, e.g. 14:27:53.
    
    - cutIdentifier : c              (bool)          [create]
        Returns the cut string.
    
    - date : d                       (bool)          [create]
        Returns the build date string.
    
    - environmentFile : env          (bool)          [create]
        Returns the location of the application defaults file.
    
    - evalVersion : ev               (bool)          [create]
        This flag is now deprecated. Always returns false, as the eval version is no
        longer supported.
    
    - file : f                       (bool)          [create]
        Returns the file version string.
    
    - fontInfo : foi                 (bool)          [create]
        Returns a string of the specifications of the fonts requested, and the
        specifications of the fonts that are actually being used.
    
    - helpDataDirectory : hdd        (bool)          [create]
        Returns the help data directory.
    
    - installedVersion : iv          (bool)          [create]
        Returns the product version string.
    
    - ioVersion : io                 (bool)          [create]
        Returns true if this is the Maya IO version of the application.
    
    - irix : ir                      (bool)          [create]
        Returns true if the operating system is Irix. Always false with support for Irix
        removed.
    
    - is64 : x64                     (bool)          [create]
        Returns true if the application is 64 bit.
    
    - languageResources : lr         (bool)          [create]
        Returns a string array of the currently installed language resources. Each
        string entry consists of three elements delimited with a colon (':'). The first
        token is the locale code (ISO 639-1 language code followed by ISO 3166-1 country
        code).  The second token is the language name in English. This third token is
        the alpha-3 code (ISO 639-2).  For example English is represented as
        en_US:English:enu.
    
    - linux : li                     (bool)          [create]
        Returns true if the operating system is Linux.
    
    - linux64 : l64                  (bool)          [create]
        Returns true if the operating system is Linux 64 bit.
    
    - liveUpdate : lu                (bool)          [create]
        This flag is deprecated(2019) and may be removed in future releases of Maya.
        Returns Autodesk formatted product information.
    
    - localizedResourceLocation : lrl (bool)          [create]
        Returns the path to the top level of the localized resource directory, if we are
        running in an alternate language. Returns an empty string if we are running in
        the default language.
    
    - ltVersion : lt                 (bool)          [create]
        Returns true if this is the Maya LT version of the application.
    
    - macOS : mac                    (bool)          [create]
        Returns true if the operating system is Macintosh.
    
    - macOSppc : ppc                 (bool)          [create]
        Returns true if the operating system is a PowerPC Macintosh.
    
    - macOSx86 : x86                 (bool)          [create]
        Returns true if the operating system is an Intel Macintosh.
    
    - ntOS : nt                      (bool)          [create]
        Returns true if the operating system is Windows.
    
    - operatingSystem : os           (bool)          [create]
        Returns the operating system type. Valid return types are nt, win64, mac,
        linuxand linux64
    
    - operatingSystemVersion : osv   (bool)          [create]
        Returns the operating system version. on Linux this returns the equivalent of
        uname -srvm
    
    - preferences : pd               (bool)          [create]
        Returns the location of the preferences directory.
    
    - product : p                    (bool)          [create]
        Returns the license product name.
    
    - qtVersion : qt                 (bool)          [create]
        Returns Qt version string.
    
    - tablet : tab                   (bool)          [create]
        Windows only.  Returns true if the PC is a Tablet PC.
    
    - tabletMode : tm                (bool)          [create]
        Windows 8 (and above) only.  If your device is a Tablet PC, then the convertible
        mode the device is currently running in.  Returns  either: tablet or laptop
        (keyboard attached). See the tabletflag.
    
    - uiLanguage : uil               (bool)          [create]
        Returns the language that Maya's running in.  Example return values include
        en_USfor English and ja_JPfor Japanese.
    
    - uiLanguageForStartup : uis     (bool)          [create]
        Returns the language that is used for Maya's next start up. This is read from
        config file and is rewritten after setting ui language in preference.
    
    - uiLanguageIsLocalized : uii    (bool)          [create]
        Returns true if we are running in an alternate language, not the default
        (English).
    
    - uiLocaleLanguage : ull         (bool)          [create]
        Returns the language locale of the OS. English is default.
    
    - version : v                    (bool)          [create]
        Returns the version string.
    
    - win64 : w64                    (bool)          [create]
        Returns true if the operating system is Windows x64 based.
    
    - windowManager : wm             (bool)          [create]
        Returns the name of the Window Manager that is assumed to be running.
    
    - windows : win                  (bool)          [create]
        Returns true if the operating system is Windows based.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.about`
    """
    pass
def polyInfo(*args, **kwargs):
    """
    Command queries topological information on polygonal objects and components. So,
    the command will require the following to be specified:         - selection list
    to query
    
    Flags:
    - edgeToFace : ef                (bool)          [create]
        Returns the faces that share the specified edge. Requires edges to be selected.
    
    - edgeToVertex : ev              (bool)          [create]
        Returns the vertices defining an edge. Requires edges to be selected.
    
    - faceNormals : fn               (bool)          [create]
        Returns face normals of the specified object. If faces are selected the command
        returns the face normals of selected faces. Else it returns the face normals of
        all the faces of the object.
    
    - faceToEdge : fe                (bool)          [create]
        Returns the edges defining a face. Requires faces to be selected.
    
    - faceToVertex : fv              (bool)          [create]
        Returns the vertices defining a face. Requires faces to be selected.
    
    - invalidEdges : ie              (bool)          [create]
        Find all edges that are not associated with any face in the mesh.
    
    - invalidVertices : iv           (bool)          [create]
        Find all vertices that are not associated with any face in the mesh.
    
    - laminaFaces : lf               (bool)          [create]
        Find all lamina faces in the specified objects.
    
    - nonManifoldEdges : nme         (bool)          [create]
        Find all non-manifold edges in the specified objects.
    
    - nonManifoldUVEdges : nue       (bool)          [create]
        Find all non-manifold UV edges in the specified objects.
    
    - nonManifoldUVs : nuv           (bool)          [create]
        Find all non-manifold UVs in the specified objects.
    
    - nonManifoldVertices : nmv      (bool)          [create]
        Find all non-manifold vertices in the specified objects.
    
    - vertexToEdge : ve              (bool)          [create]
        Returns the Edges connected to a vertex. Requires vertices to be selected.
    
    - vertexToFace : vf              (bool)          [create]
        Returns the faces that share the specified vertex. Requires vertices to be
        selected.                               Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyInfo`
    """
    pass
def XgmSetCutBrushToolOption(*args, **kwargs): pass
def AddToContainerOptions(*args, **kwargs): pass
def HideSelectedObjects(*args, **kwargs): pass
def dR_selConstraintBorder(*args, **kwargs): pass
def ShowMeshPinchToolOptions(*args, **kwargs): pass
def hwRender(*args, **kwargs):
    """
    Renders an image or a sequence using the hardware rendering engine
    
    Flags:
    - acceleratedMultiSampleSupport : ams (bool)          [query]
        This flag when used with query will return whether the graphics supports
        hardware accelerated multi-sampling.
    
    - activeTextureCount : atc       (bool)          [query]
        This flag when used with query will return the number of textures that     have
        been bound to the graphics by the hardware renderer.
    
    - camera : cam                   (unicode)       [create,query]
        Specify the camera to use.  Use the first available camera if the camera
        given is not found.
    
    - currentFrame : cf              (bool)          [create,query]
        Render the current frame.
    
    - currentView : cv               (bool)          [create,query]
        When turned on, only the current view will be rendered.
    
    - edgeAntiAliasing : eaa         (int, int)      [create,query]
        Enables multipass rendering. Controls for the number of exposures rendered per
        frame are provided in the form of two associated flag arguments. The first
        specifies the sampling algorithm: 0 - Uniform Weighted Grid Sampling1 - Rotated
        Grid Super Sampling (RGSS)2 - Gaussian Weighted SamplingUse of a sampling method
        other than the others listed above, will result in use of the default sample
        method of Uniform Weighted Grid Sampling. The second argument specifies a number
        of samples to use. For each sampling algorithm there is a fixed set of sample
        counts available: 0 - Uniform Weighted Grid Sampling1 Sample3 Samples4 Samples5
        Samples7 Samples9 Samples16 Samples25 Samples36 Samples1 - Rotated Grid Super
        Sampling (RGSS)1 Sample4 Samples5 Samples2 - Gaussian Weighted Sampling1 Sample3
        Samples4 Samples5 Samples7 Samples9 Samples16 Samples25 Samples36 SamplesUsing a
        sampling count other than the allowable options for the given sampling method
        will result in using the default sample count of 5. The values passed via the
        command will override settings stored in the hardwareRenderGlobals node.
    
    - fixFileNameNumberPattern : fnp (bool)          [create,query]
        This flag allows the user to take the hardwareRenderGlobals     filename as the
        initial filename pattern,     fix the frame number pattern in the filename in a
        unique way,     returns the new filename pattern.  This does not change the
        hardwareRenderGlobals's filename.
    
    - frame : f                      (float)         [create]
        Specify the frame to render.
    
    - fullRenderSupport : frs        (bool)          [create,query]
        This flag may be used in the create or query context.     In the create context,
        it will force the renderer to abort and not     render any frames if the
        hardware is not fully supported.         In the query context, it will return
        whether full quality rendering     is supported on the current graphics system.
        Please see the graphics     card qualification charts for an explanation of
        limited support.
    
    - height : h                     (int)           [create,query]
        Height. If not used, the height is taken from the render globals settings.
    
    - imageFileName : ifn            (bool)          [create,query]
        This flag let people query the image name for a specified frame.     The frame
        can be specified using the -frameflag.     When no -frameis used, the
        current frame number is used.
    
    - layer : l                      (PyNode)        [create,query]
        Render the specified render layer.         Only this render layer will be
        rendered,         regardless of the renderable attribute value of the render
        layer.         The layer name will be appended to the output image file name.
        The specified render layer becomes the current render layer before rendering,
        and remains as current render layer after the rendering.
    
    - limitedRenderSupport : lrs     (bool)          [query]
        This flag when used with query will return whether limited rendering is
        supported         on the current graphics system. Please see the graphics card
        qualification         charts for the current definition of limited support.
    
    - lowQualityLighting : lql       (bool)          [create,query]
        Disable lighting evaluation per pixel (fragment).         Note: The values
        passed via the command will override settings stored in     the hardware render
        globals node.
    
    - noRenderView : nrv             (bool)          [create,query]
        When turned on, the render view is not updated after image computation
    
    - notWriteToFile : nwf           (bool)          [create,query]
        This flag is set to true if the user does not want to write     the image to a
        file.  It is set to false, otherwise.     The default value of the flag is
        false.
    
    - printGeometry : pg             (bool)          [create,query]
        Print the geomety objects as they get translated.
    
    - renderHardwareName : rhw       (bool)          [query]
        This flag will create a graphics context and return the name of the     graphics
        hardware being used. The graphics hardware is determined by     creating an off
        screen buffer and querying the GL_RENDERER string     from OpenGL. If the off
        screen buffer cannot be created an empty     string is returned.
    
    - renderRegion : reg             (int, int, int, int) [create,query]
        Render region. The parameters are 4 integers, indicating             left right
        bottom top     of the region.
    
    - renderSelected : rs            (bool)          [create,query]
        Only renders the selected objects.
    
    - textureResolution : res        (int)           [create,query]
        Specify the desired resolution of baked textures.
    
    - width : w                      (int)           [create,query]
        Width. If not used, the width is taken from the render globals settings.
    
    - writeAlpha : a                 (bool)          [create,query]
        Read the alpha channel of color buffer and return as tif file.
    
    - writeDepth : d                 (bool)          [create,query]
        Read the depth buffer and return as tif file.                              Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hwRender`
    """
    pass
def CreateEmptySetOptions(*args, **kwargs): pass
def CreateShotOptions(*args, **kwargs): pass
def xgmSplinePreset(*args, **kwargs):
    """
    Flags:
    - alignToNormal : atn            (bool)          []
    
    - export : e                     (bool)          []
    
    - i : i                          (bool)          []
    
    - mappingType : mt               (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmSplinePreset`
    """
    pass
def sbs_EditSubstance(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_EditSubstance`
    """
    pass
def renderGlobalsNode(*args, **kwargs):
    """
    This command creates a new node in the dependency graph of the specified type.
    The renderGlobalsNode creates a render globals node and registers it with the
    model. The createNode command will not register nodes of this type correctly.
    
    Flags:
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace doesn't
        exist, we will create the namespace.
    
    - parent : p                     (unicode)       [create]
        Specifies the parent in the DAG under which the new node belongs.
    
    - renderQuality : rq             (unicode)       [create]
        Set the quality to be the renderQuality node with the given name.
    
    - renderResolution : rr          (unicode)       [create]
        Set the resolution to be the resolution node with the given name.
    
    - shared : s                     (bool)          [create]
        This node is shared across multiple files, so only create it if it does not
        already exist.
    
    - skipSelect : ss                (bool)          [create]
        This node is not to be selected after creation, the original selection will be
        preserved.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderGlobalsNode`
    """
    pass
def ConvertInstanceToObject(*args, **kwargs): pass
def SelectAllNURBSSurfaces(*args, **kwargs): pass
def ProjectCurveOnSurface(*args, **kwargs): pass
def dR_symmetryFlip(*args, **kwargs): pass
def FilletBlendTool(*args, **kwargs): pass
def RemoveBifrostFoam(*args, **kwargs): pass
def HypershadeGraphMaterialsOnSelectedObjects(*args, **kwargs): pass
def OpenVisorForMeshes(*args, **kwargs): pass
def polySetToFaceNormal(*args, **kwargs):
    """
    This command takes selected polygonal vertices or vertex-faces and changes their
    normals. If the option userNormal is used, the new normal values will be the
    face normals arround the vertices/vertex-faces. Otherwise the new normal values
    will be default values according to the internal calculation.
    
    Flags:
    - setUserNormal : su             (bool)          [create]
        when this flag is presented, user normals will be created on each vertex face
        and the values will be the face normal value. Otherwise the normal values will
        be the internal computing results. Default is false.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySetToFaceNormal`
    """
    pass
def SplitMeshWithProjectedCurve(*args, **kwargs): pass
def GoalOptions(*args, **kwargs): pass
def HypershadeCloseAllTabs(*args, **kwargs): pass
def xgmParticleRender(*args, **kwargs):
    """
    Flags:
    - progress : pb                  (bool)          []
    
    - visibleOnly : vo               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmParticleRender`
    """
    pass
def NCreateEmitter(*args, **kwargs): pass
def XgImportPreset(*args, **kwargs): pass
def AddCombinationTarget(*args, **kwargs): pass
def xgmPolyToGuide(*args, **kwargs):
    """
    Flags:
    - createAll : ca                 (bool)          []
    
    - createLocators : cl            (bool)          []
    
    - cutParam : cp                  (unicode)       []
    
    - cvFrequency : cf               (float)         []
    
    - deleteLocators : dl            (bool)          []
    
    - description : d                (unicode)       []
    
    - distance : di                  (float)         []
    
    - guideMask : gm                 (unicode)       []
    
    - regionMapDir : rmd             (unicode)       []
    
    - testMap : tm                   (bool)          []
    
    - texelsPerUnit : tpu            (float)         []
    
    
    Derived from mel command `maya.cmds.xgmPolyToGuide`
    """
    pass
def SetStrokeControlCurves(*args, **kwargs): pass
def geometryAppendCache(*args, **kwargs): pass
def meshRemapContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.meshRemapContext`
    """
    pass
def dR_hypergraphTGL(*args, **kwargs): pass
def FBXImportScaleFactor(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportScaleFactor`
    """
    pass
def dispatchGenericCommand(*args, **kwargs):
    """
    generic command dispatch function used for API commands
    
    
    Derived from mel command `maya.cmds.dispatchGenericCommand`
    """
    pass
def XgmSetSmoothBrushTool(*args, **kwargs): pass
def ToggleMeshUVBorders(*args, **kwargs): pass
def FBXProperty(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXProperty`
    """
    pass
def defaultNavigation(*args, **kwargs):
    """
    The defaultNavigation command defines default behaviours when creating or
    manipulating connections between nodes and when navigating between nodes via
    those connections. This command is primarily used by attribute editors.
    
    Flags:
    - connectToExisting : ce         (bool)          [create]
        Connect the destination (which is a node.attribute or simply node) to an
        existing source. If the source is specified (as node.attribute or simply as
        node), the command will proceed immediately. If the source is not specified, the
        user will be prompted to specify one. Once a source has been specified, a best
        guess will be made about what the user is trying to accomplish by connecting the
        two, based on the type of source and type of destination. The command will
        connect the nodes/attributes according to the best guess. The destination is
        specified using the destinationflag and the source specified using the
        sourceflag.
    
    - createNew : cn                 (bool)          [create]
        Create a new node and connect it to the node.attribute specified using the
        destinationflag.
    
    - defaultAttribute : da          (bool)          [create]
        Returns the name of the attribute to which a connectNodeToNode would connect,
        given the source(attribute) and destination(node) flags. Returns a string.
    
    - defaultTraversal : dtv         (bool)          [create]
        Returns the name of the node to which it would make the most sense to navigate
        to from the destination node.attribute specified. The destination is specified
        using the destinationflag. Returns a string.
    
    - defaultWorkingNode : dwn       (bool)          [create]
        Returns the name of the node which the user is most likely to want to work with
        if they are interested in the attributes of the destination node. The
        destination is specified using the destinationflag. Returns a string.
    
    - delete : delete                (bool)          [create]
        Delete nodes with connections flowing into the node.attribute specified by the
        destinationflag.
    
    - destination : d                (PyNode)        [create]
        Specifies an existing destination attribute for a createNew or
        connectToExisting.
    
    - disconnect : dis               (bool)          [create]
        If used then disconnect the destination if it exists.
    
    - force : f                      (bool)          [create]
        If set to true, then an attempt to connect a source attribute to a destination
        attribute which already has a source will cause the existing source to be
        disconnected and the new source to be connected in its place. Default value is
        true.
    
    - ignore : i                     (bool)          [create]
        Ignore any connections flowing into the node.attribute specified by the
        destinationflag.
    
    - navigatorDecisionString : nds  (unicode)       [create]
        This is your opportunity to pass the navigator a string that can help it decide
        what behaviour to execute.
    
    - quiet : qt                     (bool)          [create]
        If set to true, then under no circumstances should the user be prompted for more
        information. Default value is false.
    
    - relatedNodes : ren             (bool)          [create]
        List nodes which are conceptually related to the node.attribute specified by the
        destination. Related nodes may include, but are not limited to, nodes which are
        directly or indirectly connected to the destination. The destination is
        specified using the destinationflag. Returns an array of strings.
    
    - source : s                     (PyNode)        [create]
        Specifies an existing source attribute for a connectToExisting.
    
    - unignore : u                   (bool)          [create]
        Stop ignoring any connections flowing into the node.attribute specified by the
        destinationflag.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.defaultNavigation`
    """
    pass
def sbs_GetGraphsNamesFromSubstanceNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetGraphsNamesFromSubstanceNode`
    """
    pass
def SetKey(*args, **kwargs): pass
def LockNormals(*args, **kwargs): pass
def polyMoveFacetUV(*args, **kwargs): pass
def hasMetadata(*args, **kwargs):
    """
    This command is used to query for the presence of metadata elements on a node,
    components, or scene. The command works at all levels of metadata presence, from
    the existence of any metadata at all on a node or scene right down to the
    presence of metadata values set on a particular metadata Stream index.  Filter
    FlagschannelName- Only look for metadata on one particular Channel
    typestreamName- Only look for metadata on one particular named Stream. When used
    in conjunction with channelNamethen ignore Streams with a matching name but a
    different Channel typeindex- Only look for metadata on one or more specific
    Index values of a Stream. Requires use of the streamNameflag. Does not require
    the indexTypeflag as that will be inferred by the
    streamName.startIndex/endIndex- Same as indexbut using an entire range of Index
    values rather than a single oneindexType- Only look for metadata using a
    particular Index type. Can have its scope narrowed by other filter flags as
    well.ignoreDefault- Treat any metadata that still has the default value (e.g. 0
    for numerics, for strings) the same as metadata that isn't present. This means
    that any metadata with default values will not be reported. It is useful for
    quickly finding values that you have changed. When this flag is set you can also
    use the memberNamefilter to narrow down the check to a particular member of the
    metadata Structure. Without that filter it will only skip over metadata where
    every member of the Structure has a non-default value.memberName- Only look at
    one particular Member in the metadata in a Structure. Only used when checking
    for non-default values as existence is based on the entire Structure, not any
    particular Member.Operation Flagsnormal mode- Return True for every specified
    location containing metadata. This combines with the filter flags as follows:no
    flag- True if there is any metadata at all on the node or scenechannelName- True
    if there is any metadata at all on the Channel         with the given
    namestreamName- True if there is any metadata at all on the Stream         with
    the given nameindex/startIndex/endIndex- An array of booleans ordered the same
    as the natural ordering of the Index values (i.e. specifying index 3, 2, and 4
    in that order will still return booleans in the order for indices 2,3,4)
    where True means that there is metadata assigned at that Index. This form is
    better suited with the asListmodification since with that variation it
    is easier to tell exactly which indices have the metadata.asList- Adding this
    flag switches the return values from a single boolean or array of booleans to an
    array of strings indicating exactly which metadata elements have values. The
    return values of the command are changed to be the following:no flag- List of
    Channel names with metadatachannelName- List of Stream names in the Channel with
    metadatastreamName- List of Index values on the Stream with
    metadataindex/startIndex/endIndex- List of Index values with metadata,
    restricted to the set of specified Index values.
    
    Flags:
    - asList : al                    (bool)          [create]
        Use this flag when you want to return string values indicating where the
        metadata lives rather than boolean values. See the command description for more
        details on what this flag will return.
    
    - channelName : cn               (unicode)       [create,query]
        Filter the metadata selection to only recognize metadata belonging to the
        specified named Channel (e.g. vertex). This flag is ignored if the components on
        the selection list are being used to specify the metadata of interest. In query
        mode, this flag can accept a value.
    
    - channelType : cht              (unicode)       [create,query]
        Obsolete - use the 'channelName' flag instead. In query mode, this flag can
        accept a value.
    
    - endIndex : eix                 (unicode)       [create]
        The metadata is stored in a Stream, which is an indexed list. If you have mesh
        components selected then the metadata indices are implicit in the list of
        selected components. If you select only the node or scene then this flag may be
        used in conjunction with the startIndexflag to specify a range of indices from
        which to retrieve the metadata. It is an error to have the value of startIndexbe
        greater than that of endIndex.  See also the indexflag for an alternate way to
        specify multiple indices. This flag can only be used on index types that support
        a range (e.g. integer values - it makes no sense to request a range between two
        strings)  In query mode, this flag can accept a value.
    
    - ignoreDefault : id             (bool)          [create]
        Use this flag when you want to skip over any metadata that has only default
        values. i.e. the metadata may exist but it hasn't had a new value set yet (non-
        zero for numerics, non-empty strings, etc.) See the command description for more
        details on how this flag filters the search.
    
    - index : idx                    (unicode)       [create,query]
        In the typical case metadata is indexed using a simple integer value. Certain
        types of data may use other index types. e.g. a vertexFacecomponent will use a
        pairindex type, which is two integer values; one for the face ID of the
        component and the second for the vertex ID.  The indexflag takes a string,
        formatted in the way the specified indexTyperequires. All uses of the indexflag
        have the same indexType. If the type was not specified it is assumed to be a
        simple integer value.  In query mode, this flag can accept a value.
    
    - indexType : idt                (unicode)       [create,query]
        Name of the index type the new Channel should be using. If not specified this
        defaults to a simple integer index. Of the native types only a mesh
        vertexFacechannel is different, using a pairindex type. In query mode, this flag
        can accept a value.
    
    - memberName : mn                (unicode)       [create]
        Name of the Structure member being checked. The names of the members are set up
        in the Structure definition, either through the description passed in through
        the dataStructurecommand or via the API used to create that Structure. As the
        assignment of metadata is on a per-structure basis this flag only needs to be
        specified when querying for non-default values. If you query for non-default
        values and omit this flag then it checks that any of the members have a non-
        default value.
    
    - scene : scn                    (bool)          [create,query]
        Use this flag when you want to add metadata to the scene as a whole rather than
        to any individual nodes. If you use this flag and have nodes selected the nodes
        will be ignored and a warning will be displayed.
    
    - startIndex : six               (unicode)       [create]
        The metadata is stored in a Stream, which is an indexed list. If you have mesh
        components selected then the metadata indices are implicit in the list of
        selected components. If you select only the node or scene then this flag may be
        used in conjunction with the endIndexflag to specify a range of indices from
        which to retrieve the metadata. It is an error to have the value of startIndexbe
        greater than that of endIndex.  See also the indexflag for an alternate way to
        specify multiple indices. This flag can only be used on index types that support
        a range (e.g. integer values - it makes no sense to request a range between two
        strings)  In query mode, this flag can accept a value.
    
    - streamName : stn               (unicode)       [create,query]
        Name of the metadata Stream. Depending on context it could be the name of a
        Stream to be created, or the name of the Stream to pass through the filter. In
        query mode, this flag can accept a value.Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hasMetadata`
    """
    pass
def HypershadeRenderTextureRange(*args, **kwargs): pass
def ThreeLeftSplitViewArrangement(*args, **kwargs): pass
def PerPointEmissionRates(*args, **kwargs): pass
def listCameras(*args, **kwargs):
    """
    Command to list all cameras. If no flags are given, both perspective and
    orthographic cameras will be displayed. This command returns an array of camera
    names. When the transform name uniquely identifies the camera it is used,
    otherwise the shape name will be returned.
    
    Flags:
    - orthographic : o               (bool)          [create]
        Display all orthographic cameras.
    
    - perspective : p                (bool)          [create]
        Display all perspective cameras.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.listCameras`
    """
    pass
def FloatSelectedPondObjectsOptions(*args, **kwargs): pass
def ikHandleCtx(*args, **kwargs):
    """
    The ikHandle context command (ikHandleCtx) updates parameters of ikHandle tool.
    The options for the tool will be set to the flags that the user specifies.
    
    Flags:
    - autoPriorityH : apH            (bool)          [create,query,edit]
        Specifies that this handle's priority is assigned automatically.C: The default
        is off.Q: When queried, this flag returns an int.
    
    - createCurve : ccv              (bool)          [create,query,edit]
        Specifies if a curve should be automatically created for the ikSplineHandle. The
        flag is ignored in the ikHandleCtx.C: The default is on. Q: When queried, this
        flag returns an int.
    
    - createRootAxis : cra           (bool)          [edit]
        Specifies if a root transform should automatically be created above the joints
        affected by the ikSplineHandle. This option is used to prevent the root flipping
        singularity on a motion path. This flag is ignored in the ikHandleCtx.C: The
        default is off. Q: When queried, this flag returns an int.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - forceSolverH : fsH             (bool)          [create,query,edit]
        Specifies if the ikSolver is enabled for the ikHandle.C: The default is on. Q:
        When queried, this flag returns an int.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - numSpans : ns                  (int)           [edit]
        Specifies the number of spans in the automatically generated curve of the
        ikSplineHandle. This flag is ignored in the ikHandleCtx.C: The default is 1. Q:
        When queried, this flag returns an int.
    
    - parentCurve : pcv              (bool)          [edit]
        Specifies if the curve should automatically be parented to the parent of the
        first joint affected by the ikSplineHandle. The flag is ignored in the
        ikHandleCtx.C: The default is on. Q: When queried, this flag returns an int.
    
    - poWeightH : pwH                (float)         [create,query,edit]
        Specifies the position/orientation weight of the ikHandle.C: The default is 1.Q:
        When queried, this flag returns a float.
    
    - priorityH : pH                 (int)           [create,query,edit]
        Specifies the priority of the ikHandle.C: The default is 1.Q: When queried, this
        flag returns an int.
    
    - rootOnCurve : roc              (bool)          [edit]
        Specifies if the root is locked onto the curve of the ikSplineHandle. This flag
        is ignored in the ikHandleCtx. C: The default is on. Q: When queried, this flag
        returns an int.
    
    - rootTwistMode : rtm            (bool)          [edit]
        Specifies whether the start joint is allowed to twist or not. If not, then the
        required twist is distributed over the remaining joints. This applies to all the
        twist types. This flag is ignored in the ikHandleCtx. C: The default is off. Q:
        When queried, this flag returns an int.
    
    - simplifyCurve : scv            (bool)          [edit]
        Specifies if the ikSplineHandle curve should be simplified. This flag is ignored
        in the ikHandleCtx.C: The default is on. Q: When queried, this returns an int.
    
    - snapCurve : snc                (bool)          [edit]
        Specifies if the curve should automatically snap to the first joint affected by
        the ikSplineHandle. This flag is ignored in the ikHandleCtx.C: The default is
        off. Q: When queried, this flag returns an int.
    
    - snapHandleH : snH              (bool)          [create,query,edit]
        Specifies if the ikHandle snapping is on.C: The default is on.Q: When queried,
        this flag returns an int.
    
    - solverTypeH : stH              (unicode)       [create,query,edit]
        Lists what ikSolver is being used. The ikSplineSolver may not be selected. To
        use an ikSplineSolver use the ikSplineHandleCtx command. C: The default solver
        is the default set by the user preferences.Q: When queried, this flag returns a
        string.
    
    - stickyH : sH                   (unicode)       [create,query,edit]
        Specifies if the ikHandle is sticky or not. Valid strings are stickyand off.C:
        The default is off.Q: When queried, this flag returns a string.
    
    - twistType : tws                (unicode)       [edit]
        Specifies the type of interpolation to be used by the ikSplineHandle. This flag
        is ignored in the ikHandleCtx. The interpolation options are linear, easeIn,
        easeOut, and easeInOut. C: The default is linear. Q: When queried, this flag
        returns a string.
    
    - weightH : wH                   (float)         [create,query,edit]
        Specifies the weight of the ikHandle.C: The default is 1.Q: When queried, this
        flag returns a float.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ikHandleCtx`
    """
    pass
def ConnectJoint(*args, **kwargs): pass
def CreateGhostOptions(*args, **kwargs): pass
def PlaybackLoopContinuous(*args, **kwargs): pass
def SculptReferenceVectorMarkingMenuPress(*args, **kwargs): pass
def runTimeCommand(*args, **kwargs): pass
def insertJoint(*args, **kwargs):
    """
    This command will insert a new joint under the given or selected joint. If the
    given joint has child joints, they will be reparented under the new inserted
    joint. The given joint(or selected joint) should not have skin attached. The
    command works on the selected joint. No options or flags are necessary.
    
    
    Derived from mel command `maya.cmds.insertJoint`
    """
    pass
def ToggleRangeSlider(*args, **kwargs): pass
def dR_meshAlphaTGL(*args, **kwargs): pass
def getFileList(*args, **kwargs):
    """
    Returns a list of files matching an optional wildcard pattern. Note that this
    command works directly on raw system files and does not go through standard Maya
    file path resolution.
    
    Flags:
    - filespec : fs                  (unicode)       [create]
        wildcard specifier for search.
    
    - folder : fld                   (unicode)       [create]
        return a directory listing                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getFileList`
    """
    pass
def EditFluidResolution(*args, **kwargs): pass
def CreatePolygonPlatonicOptions(*args, **kwargs): pass
def AddOceanSurfaceLocator(*args, **kwargs): pass
def ShowCameras(*args, **kwargs): pass
def HypershadeShowCustomAttrs(*args, **kwargs): pass
def extendSurface(*args, **kwargs): pass
def TogglePolyDisplayHardEdges(*args, **kwargs): pass
def OneClickMotionBuilderSendToCurrentScene(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickMotionBuilderSendToCurrentScene`
    """
    pass
def OpenAELiveLink(*args, **kwargs): pass
def texSelectContext(*args, **kwargs):
    """
    Command used to register the texSelectCtx tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texSelectContext`
    """
    pass
def PreloadReferenceEditor(*args, **kwargs): pass
def ExtractSubdivSurfaceVerticesOptions(*args, **kwargs): pass
def FBXImportGenerateLog(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportGenerateLog`
    """
    pass
def nClothMakeCollideOptions(*args, **kwargs): pass
def polySelect(*args, **kwargs):
    """
    This command makes different types of poly component selections.  The return
    value is an integer array containing the id's of the components in the selection
    in order. If a given type of selection loops back on itself then this is
    indicated by the start id appearing twice, once at the start and once at the
    end.
    
    Flags:
    - add : add                      (bool)          [create,query]
        Indicates that the specified items should be added to the active list without
        removing existing items from the active list.
    
    - addFirst : af                  (bool)          [create,query]
        Indicates that the specified items should be added to the front of the active
        list without removing existing items from the active list.
    
    - asSelectString : ass           (bool)          [create,query]
        Changes the return type from an integer array to a string array which can be
        used as a selection string.
    
    - deselect : d                   (bool)          [create,query]
        Indicates that the specified items should be removed from the active list if
        they are on the active list.
    
    - edgeBorder : eb                (int)           [create,query]
        Select all conected border edges starting at the given edge.
    
    - edgeBorderPath : ebp           (int, int)      [create,query]
        Given two edges on the same border, this will select the edges on the border in
        the path between them.
    
    - edgeBorderPattern : bpt        (int, int)      [create,query]
        Given two edges on the same border, this will check how many edges there are
        between the given edges and then continue that pattern of selection around the
        border.
    
    - edgeLoop : el                  (int)           [create,query]
        Select an edge loop starting at the given edge.
    
    - edgeLoopOrBorder : elb         (int)           [create,query]
        Select an edge loop or all conected border edges, depending on whether the edge
        is on a border or not, starting at the given edge.
    
    - edgeLoopOrBorderPattern : lbp  (int, int)      [create,query]
        Given two edges either on the same edge loop or on the same edge border, this
        will check how many edges there are between the given edges and then continue
        that pattern of selection around the edge loop or edge border.
    
    - edgeLoopPath : elp             (int, int)      [create,query]
        Given two edges that are on the same edge loop, this will select the shortest
        path between them on the loop.
    
    - edgeLoopPattern : lpt          (int, int)      [create,query]
        Given two edges on the same edge loop, this will check how many edges there are
        between the given edges and then continue that pattern of selection around the
        edge loop.
    
    - edgeRing : er                  (int)           [create,query]
        Select an edge ring starting at the given edge.
    
    - edgeRingPath : erp             (int, int)      [create,query]
        Given two edges that are on the same edge ring, this will select the shortest
        path between them on the ring.
    
    - edgeRingPattern : rpt          (int, int)      [create,query]
        Given two edges on the same edge ring, this will check how many edges there are
        between the given edges and then continue that pattern of selection around the
        edge ring.
    
    - edgeUVLoopOrBorder : euv       (int)           [create,query]
        Select an edge loop or border, terminating at UV borders.
    
    - everyN : en                    (int)           [create]
        Number of elements to stride over. If less than 1 then use 1, meaning every
        element. 2 means every second one, etc.
    
    - extendToShell : ets            (int)           [create,query]
        Select the poly shell given a face id.
    
    - noSelection : ns               (bool)          [create,query]
        If this flag is used then the selection is not changed at all.
    
    - replace : r                    (bool)          [create,query]
        Indicates that the specified items should replace the existing items on the
        active list.
    
    - shortestEdgePath : sep         (int, int)      [create,query]
        Given two vertices, this will select the shortest path between them in the 3d
        object space.
    
    - shortestEdgePathUV : spu       (int, int)      [create,query]
        Given two UVs, this will select the shortest path between them in the 2d texture
        space.
    
    - shortestFacePath : sfp         (int, int)      [create,query]
        Given two faces, this will select the shortest path between them in the 3d
        object space.
    
    - toggle : tgl                   (bool)          [create,query]
        Indicates that those items on the given list which are on the active list should
        be removed from the active list and those items on the given list which are not
        on the active list should be added to the active list.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySelect`
    """
    pass
def RemoveSubdivProxyMirrorOptions(*args, **kwargs): pass
def objectCenter(*args, **kwargs):
    """
    This command returns the coordinates of the center of the bounding box of the
    specified object. If one coordinate only is specified, it will be returned as a
    float. If no coordinates are specified, an array of floats is returned,
    containing x, y, and z. If you specify multiple coordinates, only one will be
    returned.
    
    Flags:
    - gl : gl                        (bool)          [create]
        Return positional values in global coordinates (default).
    
    - local : l                      (bool)          [create]
        Return positional values in local coordinates.
    
    - x : x                          (bool)          [create]
        Return X value only
    
    - y : y                          (bool)          [create]
        Return Y value only
    
    - z : z                          (bool)          [create]
        Return Z value only                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.objectCenter`
    """
    pass
def DeleteExpressionsOptions(*args, **kwargs): pass
def CreateOceanWakeOptions(*args, **kwargs): pass
def setFluidAttr(*args, **kwargs):
    """
    Sets values of built-in fluid attributes such as density, velocity, etc., for
    individual grid cells or for all cells in the grid.
    
    Flags:
    - addValue : ad                  (bool)          []
        Add specified value to attribute
    
    - attribute : at                 (unicode)       [create]
        Specifies the fluid attribute for which to set values.  Valid attributes are
        velocity, density, fuel, color, falloff, and temperature.
    
    - clear : cl                     (bool)          []
        Set this attribute to 0
    
    - floatRandom : fr               (float)         []
        If this was a scalar (e.g. density) attribute, use a random value in +-VALUE If
        fv is specified, it is used as the base value and combined with the random
        value. If the fv flag is not specified, the  base is assumed to be 0.
    
    - floatValue : fv                (float)         []
        If this was a scalar (e.g. density) attribute, use this value
    
    - lowerFace : lf                 (bool)          [create]
        Only valid with -at velocity.  Since velocity values are stored on the edges of
        each voxel and not at the center, using voxel based indices to set velocity
        necessarily affects neighboring voxels.  Use this flag to only set velocity
        components on the lower left three faces of a voxel, rather than all six.
    
    - reset : re                     (bool)          []
        Set this attribute to default value
    
    - vectorRandom : vr              (float, float, float) []
        If this was a vector (e.g. velocity) attribute, use a random value in +-VALUE If
        vv is specified, it is used as the base value and combined with the random
        value. If the vv flag is not specified, the  base is assumed to be 0,0,0.
    
    - vectorValue : vv               (float, float, float) []
        If this was a vector (e.g. velocity) attribute, use this value
    
    - xIndex : xi                    (int)           [create]
        Only return values for cells with this X index
    
    - xvalue : x                     (bool)          []
        Only set the first component of the vector-valued attribute specified by the
        -at/attributeflag.
    
    - yIndex : yi                    (int)           [create]
        Only return values for cells with this Y index
    
    - yvalue : y                     (bool)          []
        Only set the second component of the vector-valued attribute specified by the
        -at/attributeflag.
    
    - zIndex : zi                    (int)           [create]
        Only return values for cells with this Z index
    
    - zvalue : z                     (bool)          []
        Only set the third component of the vector-valued attribute specified by the
        -at/attributeflag.                                    Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setFluidAttr`
    """
    pass
def polyPipe(*args, **kwargs): pass
def KeyBlendShapeTargetsWeight(*args, **kwargs): pass
def AverageVertex(*args, **kwargs): pass
def dR_softSelToolTGL(*args, **kwargs): pass
def BakeMashToParticles(*args, **kwargs): pass
def NodeEditorCloseAllTabs(*args, **kwargs): pass
def BreakTangents(*args, **kwargs): pass
def NEmitFromObjectOptions(*args, **kwargs): pass
def buildSendToBackburnerDialog(*args, **kwargs): pass
def WhatsNewHighlightingOn(*args, **kwargs): pass
def HIKSetFullBodyKey(*args, **kwargs): pass
def paintEffectsDisplay(*args, **kwargs):
    """
    Command to set the global display methods for paint effects items
    In query mode, return type is based on queried flag.
    
    Flags:
    - meshDrawEnable : me            (bool)          [create,query]
        Set whether mesh draw is enabled on objects                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.paintEffectsDisplay`
    """
    pass
def editDisplayLayerMembers(*args, **kwargs):
    """
    This command is used to query and edit membership of display layers.  No
    equivalent 'remove' command is necessary since all objects must be in exactly
    one display layer.  Removing an object from a layer can be accomplished by
    adding it to a different layer.
    
    Flags:
    - fullNames : fn                 (bool)          [query]
        (Query only.) If set then return the full DAG paths of the objects in the layer.
        Otherwise return just the name of the object.
    
    - noRecurse : nr                 (bool)          [create,query]
        If set then only add selected objects to the display layer.  Otherwise all
        descendants of the selected objects will also be added.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editDisplayLayerMembers`
    """
    pass
def findType(*args, **kwargs):
    """
    The findTypecommand is used to search through a dependency subgraph on a certain
    node to find all nodes of the given type. The search can go either upstream
    (input connections) or downstream (output connections). The plug/attribute
    dependencies are not taken into account when searching for matching nodes, only
    the connections.
    
    Flags:
    - deep : d                       (bool)          [create]
        Find all nodes of the given type instead of just the first.
    
    - exact : e                      (bool)          [create]
        Match node types exactly instead of any in a node hierarchy.
    
    - forward : f                    (bool)          [create]
        Look forwards (downstream) through the graph rather than backwards (upstream)
        for matching nodes.
    
    - type : t                       (unicode)       [create]
        Type of node to look for (e.g. transform). This flag is mandatory.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.findType`
    """
    pass
def CreateBezierCurveToolOptions(*args, **kwargs): pass
def unknownPlugin(*args, **kwargs):
    """
    Allows querying of the unknown plug-ins used by the scene, and provides a means
    to remove them.
    
    Flags:
    - dataTypes : dt                 (bool)          [query]
        Returns the data types associated with the given unknown plug-in. This will
        always be empty for pre-Maya 2014 files.
    
    - list : l                       (bool)          [query]
        Lists the unknown plug-ins in the scene.
    
    - nodeTypes : nt                 (bool)          [query]
        Returns the node types associated with the given unknown plug-in. This will
        always be empty for pre-Maya 2014 files.
    
    - remove : r                     (bool)          [create]
        Removes the given unknown plug-in from the scene. For Maya 2014 files and
        onwards, this will fail if node or data types defined by the plug-in are still
        in use.
    
    - version : v                    (bool)          [query]
        Returns the version string of the given unknown plug-in.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.unknownPlugin`
    """
    pass
def OpenCreaseEditor(*args, **kwargs): pass
def sbs_SetGlobalTextureWidth(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetGlobalTextureWidth`
    """
    pass
def SubdivToNURBS(*args, **kwargs): pass
def AssignToonShaderDarkProfile(*args, **kwargs): pass
def BakeChannel(*args, **kwargs): pass
def ScriptPaintTool(*args, **kwargs): pass
def renderWindowEditor(*args, **kwargs): pass
def polyCutUVCtx(*args, **kwargs):
    """
    Create a new context to cut UVs on polygonal objects
    
    Flags:
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - loopSpeed : ls                 (int)           [query,edit]
        Edit the speed of loop cutting.
    
    - mapBordersColor : mbc          (float, float, float) [query,edit]
        Color of UV map border edges in 3d view.
    
    - name : n                       (unicode)       []
    
    - showCheckerMap : scm           (bool)          [query,edit]
        Display checker map.
    
    - showTextureBorders : stb       (bool)          [query,edit]
        Display texture border edges.
    
    - showUVShellColoring : ssc      (bool)          [query,edit]
        Turn on UV shell coloring or not.
    
    - steadyStroke : ss              (bool)          [query,edit]
        Turn on steady stroke or not.
    
    - steadyStrokeDistance : ssd     (float)         [query,edit]
        The distance for steady stroke.
    
    - symmetry : sym                 (int)           [query,edit]
        Symmetric modeling.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCutUVCtx`
    """
    pass
def selectContext(*args, **kwargs):
    """
    Creates a context to perform selection.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectContext`
    """
    pass
def PolyEditEdgeFlow(*args, **kwargs): pass
def CameraRemoveFromHidden(*args, **kwargs): pass
def polySuperCtx(*args, **kwargs):
    """
    Flags:
    - attach : a                     (unicode)       []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.polySuperCtx`
    """
    pass
def PaintEffectsToNurbs(*args, **kwargs): pass
def FreeTangentWeight(*args, **kwargs): pass
def dR_selConstraintOff(*args, **kwargs): pass
def lassoContext(*args, **kwargs):
    """
    Creates a context to perform selection via a lasso.  Use for irregular selection
    regions, where the marquee-styleselect of the selectContextis inappropriate.
    
    Flags:
    - drawClosed : dc                (bool)          [create,query,edit]
        Turns the closed display of the lasso on/off.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - fastComponents : fc            (bool)          []
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.lassoContext`
    """
    pass
def alignSurface(*args, **kwargs): pass
def NodeEditorCreateForEachCompound(*args, **kwargs): pass
def DeleteAllContainers(*args, **kwargs): pass
def CreateContainerOptions(*args, **kwargs): pass
def dR_vertUnlockAll(*args, **kwargs): pass
def artSelect(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.artSelect`
    """
    pass
def dR_vertSelectLocked(*args, **kwargs): pass
def DeleteRigidBodies(*args, **kwargs): pass
def hilite(*args, **kwargs):
    """
    Hilites/Unhilites the specified object(s).  Hiliting an object makes it possible
    to select the components of the object.  If no objects are specified then the
    selection list is used.
    
    Flags:
    - replace : r                    (bool)          [create]
        Hilite the specified objects.  Any objects previously hilited will no longer be
        hilited.
    
    - toggle : tgl                   (bool)          [create]
        Toggle the hilite state of the specified objects.
    
    - unHilite : u                   (bool)          [create]
        Remove the specified objects from the hilite list.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hilite`
    """
    pass
def nClothDeleteHistoryOpt(*args, **kwargs): pass
def DistributeUVs(*args, **kwargs): pass
def RedoPreviousRender(*args, **kwargs): pass
def dR_extrudeRelease(*args, **kwargs): pass
def FBXImportCameras(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportCameras`
    """
    pass
def GetHairExample(*args, **kwargs): pass
def textCurves(*args, **kwargs):
    """
    The textCurves command creates NURBS curves from a text string using the
    specified font. A single letter can be made up of more than one NURBS curve. The
    number of curves per letter varies with the font.
    
    Flags:
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - deprecatedFontName : dfn       (bool)          []
    
    - font : f                       (unicode)       [create]
        The font to use.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - text : t                       (unicode)       [create]
        The string to create the curves for.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textCurves`
    """
    pass
def WrinkleTool(*args, **kwargs): pass
def AddBifrostAccelerator(*args, **kwargs): pass
def invertShape(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.invertShape`
    """
    pass
def AnimLayerRelationshipEditor(*args, **kwargs): pass
def FBXImportUnlockNormals(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportUnlockNormals`
    """
    pass
def texCutContext(*args, **kwargs):
    """
    This command creates a context for cut uv tool.  This context only works in the
    UV editor.
    
    Flags:
    - adjustSize : asz               (bool)          [edit]
        If true, puts the tool into the mode where dragging the mouse will edit the
        brush size. If false, puts the tool back into the previous mode.
    
    - displayShellBorders : dsb      (bool)          [query,edit]
        Toggle the display of shell borders.
    
    - edgeSelectSensitive : ess      (float)         [query,edit]
        Set the value of the edge selection sensitivity.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - mode : m                       (unicode)       [query,edit]
        Specifies the type of effect the brush will perform, Cut or Sew.
    
    - moveRatio : mvr                (float)         [query,edit]
        The cut open ratio relative to edge length.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - size : sz                      (float)         [query,edit]
        Brush size value of the brush ring.
    
    - steadyStroke : ss              (bool)          [query,edit]
        Turn on steady stroke or not.
    
    - steadyStrokeDistance : ssd     (float)         [query,edit]
        The distance for steady stroke.
    
    - touchToSew : tts               (bool)          [query,edit]
        Toggle the touch to sew mode.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texCutContext`
    """
    pass
def PolyMergeEdgesOptions(*args, **kwargs): pass
def arnoldRenderView(*args, **kwargs):
    """
    Flags:
    - camera : cam                   (PyNode)        []
    
    - getoption : get                (unicode)       []
    
    - height : h                     (int)           []
    
    - mode : m                       (unicode)       []
    
    - option : opt                   (unicode, unicode) []
    
    - region : r                     (int, int, int, int) []
    
    - status : st                    (unicode)       []
    
    - width : w                      (int)           []
    
    
    Derived from mel command `maya.cmds.arnoldRenderView`
    """
    pass
def polyShortestPathCtx(*args, **kwargs):
    """
    Creates a new context to select shortest edge path between two vertices or UVs
    in the 3d viewport. In query mode, return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyShortestPathCtx`
    """
    pass
def NodeEditorGraphRemoveUpstream(*args, **kwargs): pass
def FBXExportBakeComplexAnimation(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportBakeComplexAnimation`
    """
    pass
def date(*args, **kwargs):
    """
    Returns information about current time and date. Use the predefined formats, or
    the -formatflag to specify the output format.
    
    Flags:
    - date : d                       (bool)          [create]
        Returns the current date. Format is YYYY/MM/DD
    
    - format : f                     (unicode)       [create]
        Specifies a string defining how the date and time should be represented. All
        occurences of the keywords below will be replaced with the corresponding values:
        KeywordBecomesYYYYCurrent year, using 4 digitsYYLast two digits of the current
        yearMMCurrent month, with leading 0 if necessaryDDCurrent day, with leading 0 if
        necessaryhhCurrent hour, with leading 0 if necessarymmCurrent minute, with
        leading 0 if necessaryssCurrent second, with leading 0 if necessary
    
    - shortDate : sd                 (bool)          [create]
        Returns the current date. Format is MM/DD
    
    - shortTime : st                 (bool)          [create]
        Returns the current time. Format is hh:mm
    
    - time : t                       (bool)          [create]
        Returns the current time. Format is hh:mm:ss                               Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.date`
    """
    pass
def UVStackSimilarShellsOptions(*args, **kwargs): pass
def InitialFluidStates(*args, **kwargs): pass
def nConstraintComponent(*args, **kwargs): pass
def LoftOptions(*args, **kwargs): pass
def nameCommand(*args, **kwargs): pass
def ikSplineHandleCtx(*args, **kwargs):
    """
    The ikSplineHandle context command (ikSplineHandleCtx) updates parameters of
    ikSplineHandle tool.  The options for the tool will be set to the flags the user
    specifies.
    
    Flags:
    - autoPriorityH : apH            (bool)          [create,query,edit]
        Specifies that this handle's priority is assigned automatically.C: The default
        is off.Q: When queried, this flag returns an int.
    
    - createCurve : ccv              (bool)          [create,query,edit]
        Specifies if a curve should be automatically created for the ikSplineHandle. C:
        The default is on. Q: When queried, this flag returns an int.
    
    - createRootAxis : cra           (bool)          [edit]
        Specifies if a root transform should automatically be created above the joints
        affected by the ikSplineHandle. This option is used to prevent the root flipping
        singularity on a motion path. C: The default is off. Q: When queried, this flag
        returns an int.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - forceSolverH : fsH             (bool)          [create,query,edit]
        Specifies if the ikSolver is enabled for the ikHandle.C: The default is on. Q:
        When queried, this flag returns an int.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - numSpans : ns                  (int)           [edit]
        Specifies the number of spans in the automatically generated curve of the
        ikSplineHandle. C: The default is 1. Q: When queried, this flag returns an int.
    
    - parentCurve : pcv              (bool)          [edit]
        Specifies if the curve should automatically be parented to the parent of the
        first joint affected by the ikSplineHandle. C: The default is on. Q: When
        queried, this flag returns an int.
    
    - poWeightH : pwH                (float)         [create,query,edit]
        Specifies the position/orientation weight of the ikHandle.C: The default is 1.Q:
        When queried, this flag returns a float.
    
    - priorityH : pH                 (int)           [create,query,edit]
        Specifies the priority of the ikHandle.C: The default is 1.Q: When queried, this
        flag returns an int.
    
    - rootOnCurve : roc              (bool)          [edit]
        Specifies if the root is locked onto the curve of the ikSplineHandle. C: The
        default is on. Q: When queried, this flag returns an int.
    
    - rootTwistMode : rtm            (bool)          [edit]
        Specifies whether the start joint is allowed to twist or not. If not, then the
        required twist is distributed over the remaining joints. This applies to all the
        twist types. C: The default is off. Q: When queried, this flag returns an int.
    
    - simplifyCurve : scv            (bool)          [edit]
        Specifies if the ikSplineHandle curve should be simplified. C: The default is
        on. Q: When queried, this returns an int.
    
    - snapCurve : snc                (bool)          [edit]
        Specifies if the curve should automatically snap to the first joint affected by
        the ikSplineHandle. C: The default is off. Q: When queried, this flag returns an
        int.
    
    - snapHandleH : snH              (bool)          [create,query,edit]
        Specifies if the ikHandle snapping is on. This flag is ignored for the
        ikSplineSolver.C: The default is on.Q: When queried, this flag returns an int.
    
    - solverTypeH : stH              (unicode)       [create,query,edit]
        Lists what ikSolver is being used. For the ikSplineContext the solver can only
        be the ikSplineSolver and this flag is ignored. C: The default solver is the
        ikSplineSolver.Q: When queried, this flag returns a string.
    
    - stickyH : sH                   (unicode)       [create,query,edit]
        Specifies if the ikHandle is sticky or not. Valid strings are stickyand off.
        This flag is ignored for the ikSplineSolver.C: The default is off.Q: When
        queried, this flag returns a string.
    
    - twistType : tws                (unicode)       [edit]
        Specifies the type of interpolation to be used by the ikSplineHandle. The
        interpolation options are linear, easeIn, easeOut, and easeInOut.C: The default
        is linear. Q: When queried, this flag returns a string.
    
    - weightH : wH                   (float)         [create,query,edit]
        Specifies the weight of the ikHandle. This flag is ignored in the
        ikSplineHandleCtx.C: The default is 1.Q: When queried, this flag returns a
        float.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.ikSplineHandleCtx`
    """
    pass
def ProfilerToolCategoryView(*args, **kwargs): pass
def HypershadePickWalkDown(*args, **kwargs): pass
def SelectAllOutput(*args, **kwargs): pass
def curveBezierCtx(*args, **kwargs):
    """
    Flags:
    - degree : d                     (int)           []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - manipMode : mm                 (unicode)       []
    
    - name : n                       (unicode)       []
    
    - preserveShape : ps             (bool)          []
    
    - preserveShapeFraction : pf     (float)         []
    
    - refit : rf                     (bool)          []
    
    - selectMode : slm               (unicode)       []
    
    - uniform : un                   (bool)          []
    
    
    Derived from mel command `maya.cmds.curveBezierCtx`
    """
    pass
def GraphPaste(*args, **kwargs): pass
def CoarseLevelComponentDisplay(*args, **kwargs): pass
def BakeNonDefHistory(*args, **kwargs): pass
def createPolyPipeCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAxis : asa (bool)          []
    
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - attachToThickness : att        (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - roundCap : rc                  (bool)          []
    
    - subdivisionsAxis : sa          (int)           []
    
    - subdivisionsCap : sc           (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    - thickness : th                 (float)         []
    
    
    Derived from mel command `maya.cmds.createPolyPipeCtx`
    """
    pass
def MakePondBoatsOptions(*args, **kwargs): pass
def CopySkinWeightsOptions(*args, **kwargs): pass
def subdToPoly(*args, **kwargs):
    """
    This command tessellates a subdivision surface and produces polygon. The name of
    the new polygon is returned. If construction history is ON, then the name of the
    new dependency node is returned as well.
    
    Flags:
    - addUnderTransform : aut        (bool)          [create,query]
        If true then add the result underneath a transform node
    
    - applyMatrixToResult : amr      (bool)          [create,query,edit]
        If true, the matrix on the input geometry is applied to the object and the
        resulting geometry will have identity matrix on it.  If false the conversion is
        done on the local space object and the resulting geometry has the input object's
        matrix on it. Default:true
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - connectShaders : cs            (bool)          [create]
        If true, all shader assignment will be copied from the original subdiv surface
        to the converted polygonal surface. Default:true
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - copyUVTopology : cut           (bool)          [create,query,edit]
        Copy over uv topology (shared/unshared) from the original subdivision surface to
        the converted polygonal mesh. Default:false
    
    - depth : d                      (int)           [create,query,edit]
        The depth at which constant-depth tessellates the surface Default:0
    
    - extractPointPosition : epp     (bool)          [create,query,edit]
        Determines how the position of a mesh point is calculated If on the position of
        the mesh point is returned. If off the position of the point of the surface is
        returned. Default:false
    
    - format : f                     (int)           [create,query,edit]
        Format: 0 - Uniform1 - Adaptive2 - Polygon Count3 - VerticesDefault:0
    
    - frozen : fzn                   (bool)          []
    
    - inSubdCVId : inSubdCVId        (int, int)      [create,query,edit]
        Input CV Id
    
    - inSubdCVIdLeft : isl           (int)           [create,query,edit]
        Higher 32 bit integer of the input CV Id
    
    - inSubdCVIdRight : isr          (int)           [create,query,edit]
        Lower 32 bit integer of the input CV Id
    
    - maxPolys : mp                  (int)           [create,query,edit]
        The maximum number of polygons at which by polygons tessellates. If this
        attribute is greater than zero, it will override the sample count and depth
        attributes. Default:0
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - outSubdCVId : os               (int, int)      [create,query,edit]
        Output CV Id
    
    - outSubdCVIdLeft : osl          (int)           [create,query,edit]
        Higher 32 bit integer of the output CV Id
    
    - outSubdCVIdRight : osr         (int)           [create,query,edit]
        Lower 32 bit integer of the output CV Id
    
    - outv : ov                      (int)           [create,query,edit]
        Out Vertices corresponding to the inSubDCVs.
    
    - preserveVertexOrdering : pvo   (bool)          [create,query,edit]
        Preserve vertex ordering in conversion Default:true
    
    - sampleCount : sc               (int)           [create,query,edit]
        The number of samples per face Default:1
    
    - shareUVs : suv                 (bool)          [create,query,edit]
        Force sharing of uvs on all common vertices - the value of this attribute gets
        overridden by the value of the copyUVTopology attribute. Default:false
    
    - subdNormals : un               (bool)          [create,query,edit]
        Keep subdiv surface normals Default:false                  Common flags
    
    
    Derived from mel command `maya.cmds.subdToPoly`
    """
    pass
def dR_convertSelectionToFace(*args, **kwargs): pass
def SelectAllNCloths(*args, **kwargs): pass
def ModelingPanelRedoViewChange(*args, **kwargs): pass
def Duplicate(*args, **kwargs): pass
def viewManip(*args, **kwargs): pass
def textFieldGrp(*args, **kwargs): pass
def PolygonClearClipboardOptions(*args, **kwargs): pass
def ctxEditMode(*args, **kwargs):
    """
    This command tells the current context to switch edit modes.It acts as a toggle.
    
    Flags:
    - buttonDown : btd               (bool)          [create]
        Edit mode is being invoked from a hotkey press event.
    
    - buttonUp : btu                 (bool)          [create]
        Edit mode is being invoked from a hotkey release event.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ctxEditMode`
    """
    pass
def ExportOfflineFileFromRefEdOptions(*args, **kwargs): pass
def Shatter(*args, **kwargs): pass
def xgmSetAttr(*args, **kwargs):
    """
    Flags:
    - attribute : a                  (unicode)       []
    
    - description : d                (unicode)       []
    
    - object : o                     (unicode)       []
    
    - palette : p                    (unicode)       []
    
    - value : v                      (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmSetAttr`
    """
    pass
def MoveUp(*args, **kwargs): pass
def NonSacredTool(*args, **kwargs): pass
def floatSlider(*args, **kwargs): pass
def choice(*args, **kwargs): pass
def CreatePolygonHelixOptions(*args, **kwargs): pass
def CreateSubdivSurfacePoly(*args, **kwargs): pass
def DeleteAllSculptObjects(*args, **kwargs): pass
def dR_coordSpaceObject(*args, **kwargs): pass
def SwapBufferCurve(*args, **kwargs): pass
def PaintTensionWeightsTool(*args, **kwargs): pass
def ReorderVertex(*args, **kwargs): pass
def PublishRootTransformOptions(*args, **kwargs): pass
def InsertKeysTool(*args, **kwargs): pass
def shapeEditor(*args, **kwargs):
    """
    This command creates an editor that derives from the base editor class that has
    controls for deformer, control nodes.
    
    Flags:
    - clearSelection : cs            (bool)          [edit]
        Clear the shape editor selection.
    
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - lowestSelection : ls           (bool)          [query]
        Query the lowest selection item.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - targetControlList : tcl        (bool)          [query]
        Query the target control list.
    
    - targetList : tl                (bool)          [query]
        Query the target list.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
    
    - verticalSliders : vs           (bool)          [create,query,edit]
        Should the sliders be vertical?                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shapeEditor`
    """
    pass
def MediumPolygonNormals(*args, **kwargs): pass
def HypershadeOpenMaterialViewerWindow(*args, **kwargs): pass
def NamespaceEditor(*args, **kwargs): pass
def u3dUnfold(*args, **kwargs):
    """
    Flags:
    - borderintersection : bi        (bool)          []
    
    - iterations : ite               (int)           []
    
    - mapsize : ms                   (int)           []
    
    - pack : p                       (bool)          []
    
    - roomspace : rs                 (int)           []
    
    - triangleflip : tf              (bool)          []
    
    
    Derived from mel command `maya.cmds.u3dUnfold`
    """
    pass
def syncSculptCache(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.syncSculptCache`
    """
    pass
def ToggleFkIk(*args, **kwargs): pass
def HypershadeDisplayAllShapes(*args, **kwargs): pass
def cmdArnoldFlushSelectedTextures(*args, **kwargs): pass
def workspace(*args, **kwargs): pass
def ExtendSurfacesOptions(*args, **kwargs): pass
def TimeEditorWindow(*args, **kwargs): pass
def CurveFlowOptions(*args, **kwargs): pass
def Create2DContainerEmitter(*args, **kwargs): pass
def toolCollection(*args, **kwargs): pass
def resetTool(*args, **kwargs):
    """
    This command resets a tool back to its factory settings
    
    
    Derived from mel command `maya.cmds.resetTool`
    """
    pass
def ungroup(*args, **kwargs):
    """
    This command ungroups the specified objects. The objects will be placed at the
    same level in the hierarchy the group node occupied unless the -w flag is
    specified, in which case they will be placed under the world. If an object is
    ungrouped and there is an object in the new group with the same name then this
    command will rename the ungrouped object. See also:group, parent, instance,
    duplicate
    
    Flags:
    - absolute : a                   (bool)          [create]
        preserve existing world object transformations (overall object transformation is
        preserved by modifying the objects local transformation) [default]
    
    - parent : p                     (unicode)       [create]
        put the ungrouped objects under the given parent
    
    - relative : r                   (bool)          [create]
        preserve existing local object transformations (don't modify local
        transformation)
    
    - world : w                      (bool)          [create]
        put the ungrouped objects under the world                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ungroup`
    """
    pass
def dragAttrContext(*args, **kwargs):
    """
    The dragAttrContext allows a user to manipulate the attributes of an object by
    using a virtual slider within the viewport.  The virtual slider is used by
    dragging in a viewport with the middle mouse button.  The speed at which the
    attributes are changed can be controlled by holding down the Ctrl key to slow it
    down and the Shift key to speed it up.
    
    Flags:
    - connectTo : ct                 (PyNode)        [create,query,edit]
        Specifies an attribute to which to connect the context. This is a multi-use
        flag, but all attributes used must be from one object.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - reset : r                      (bool)          [create,edit]
        Resets the list of attributes to which the context is connected.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dragAttrContext`
    """
    pass
def AttachSurfaces(*args, **kwargs): pass
def propMove(*args, **kwargs):
    """
    Performs a proportional translate, scale or rotate operation on any number of
    objects. The percentages to rotate, scale or translate by can be specified using
    either the -p flags or -px, -py, -pz flags. Each selected object must have a
    corresponding -p or -px, -py, -pz flag. The rotate, scale or translate performed
    is relative.
    
    Flags:
    - percent : p                    (float)         [create]
        The percentage effect that the specified x,y,z has on an object. This flag must
        be specified once for each object, ie. if there are 4 objects specified, there
        must be 4 -pflags, (otherwise a percentage of 1.0 will be used).  This flag
        generally has a range between 0.0 and 1.0, but can be any float value.
    
    - percentX : px                  (float)         [create]
        The percentage effect that the specified x has on an object. This flag is
        specified one per object. The value ranges between 0.0 and 1.0, but can be any
        float value. If the -p flag has been specified, this flag usage is invalid.
    
    - percentY : py                  (float)         [create]
        The percentage effect that the specified y has on an object. This flag is
        specified one per object. The value ranges between 0.0 and 1.0, but can be any
        float value. If the -p flag has been specified, this flag usage is invalid.
    
    - percentZ : pz                  (float)         [create]
        The percentage effect that the specified z has on an object. This flag is
        specified one per object. The value ranges between 0.0 and 1.0, but can be any
        float value. If the -p flag has been specified, this flag usage is invalid.
    
    - pivot : pi                     (float, float, float) [create]
        Specify the pivot about which a rotation or scale will occur. The change in
        pivot lasts only as long as the current 'propMove' command, and so must be used
        in conjunction with one of the above move flags for any effect to be noticeable.
    
    - rotate : r                     (float, float, float) [create]
        Proportionally rotate each object by the given angles. The rotation values are
        scaled by the percentage specified by that object's corresponding -percentflag.
        All angles are in degrees. The rotation is about the pivot specified by the
        -pivotflag, or (0, 0, 0) if the -pivotflag is not present.
    
    - scale : s                      (float, float, float) [create]
        Proportionally scale each object by the given amounts. The scale values are
        scaled by the percentage specified by that object's corresponding -percentflag.
        The position and size of each object is measured relative to the pivot specified
        by the -pivotflag, and defaults to each object's individual pivot. In the case
        of control vertices, or some other object component, the default is the parent
        object's pivot.
    
    - translate : t                  (float, float, float) [create]
        Proportionally translate each object by the given amounts. The translation
        values are scaled by the percentage specified by that object's corresponding
        -percentflag. The -pivotflag has no effect on translation.
    
    - worldSpace : ws                (bool)          [create]
        Use worldspace for the calculations.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.propMove`
    """
    pass
def deviceEditor(*args, **kwargs):
    """
    This creates an editor for creating/modifying attachments to input devices.
    
    Dynamic library stub function 
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - takePath : tp                  (unicode)       [query,edit]
        The path used for writing/reading take data through the editor.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deviceEditor`
    """
    pass
def GraphPasteOptions(*args, **kwargs): pass
def PokePolygon(*args, **kwargs): pass
def createNurbsPlaneCtx(*args, **kwargs):
    """
    Flags:
    - attachToPatchesU : apu         (bool)          []
    
    - attachToPatchesV : apv         (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - surfaceDegree : sd             (int)           []
    
    - uPatches : up                  (int)           []
    
    - vPatches : vp                  (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createNurbsPlaneCtx`
    """
    pass
def rotationInterpolation(*args, **kwargs):
    """
    The rotationInterpolation command converts the rotation curves to the
    desired rotation interpolation representation. For example, an         Euler-
    angled representation can be converted to Quaternion.                 In query
    mode, return type is based on queried flag.
    
    Flags:
    - convert : c                    (unicode)       [create,query]
        Specifies the rotation interpolation mode for the curves after converting.
        Possible choices are none(unsynchronized Euler-angled curves which are
        compatible with pre-4.0 Maya curves), euler(Euler-angled curves with keyframes
        kept synchronized), quaternion(quaternion curves with keyframes kept
        synchronized, but the exact interpolation depends on individual tangents),
        quaternionSlerp(applies quaternion slerp interpolation to the curve, ignoring
        tangent settings), quaternionSquad(applied cubic interpolation to the curve in
        quaternion space, ignoring tangent settings)                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.rotationInterpolation`
    """
    pass
def pickWalk(*args, **kwargs):
    """
    The pickWalk command allows you to quickly change the selection list relative to
    the nodes that are currently selected. It is called pickWalk, because it walks
    from one selection list to another by unselecting what's currently selected, and
    selecting nodes that are in the specified direction from the currently selected
    list. If you specify objects on the command line, the pickWalk command will walk
    from those objects instead of the selected list. If the -type flag is instances,
    then the left and right direction will walk to the previous or next instance of
    the same selected dag node.
    
    Flags:
    - direction : d                  (unicode)       [create]
        The direction to walk from the node. The choices are up | down | left | right |
        in | out. up walks to the parent node, down to the child node, and left and
        right to the sibling nodes. If a CV on a surface is selected, the left and right
        directions walk in the U parameter direction of the surface, and the up and down
        directions walk in the V parameter direction. In and out are only used if the
        type flag is 'latticepoints'. Default is right.
    
    - recurse : r                    (bool)          [create]
        If specified then recurse down when walking
    
    - type : typ                     (unicode)       [create]
        The choices are nodes | instances | edgeloop | edgering | faceloop | keys |
        latticepoints | motiontrailpoints. If type is nodes, then the left and right
        direction walk to the next dag siblings. If type is instances, the left and
        right direction walk to the previous or next instance of the same dag node. If
        type is edgeloop, then the edge loop starting at the first selected edge will be
        selected. If type is edgering, then the edge ring starting at the first selected
        edge will be selected. If type is faceloop, and there are two connected quad
        faces selected which define a face loop, then that face loop will be selected.
        edgeloop, edgering and faceloop all remember which was the first edge or faces
        selected for as long as consecutive selections are made by this command.  They
        use this information to determine what the nextloop or ring selection should be.
        Users can make selections forwards and backwards by using the direction flag
        with leftor right.  If type is motiontrailpoints, then the left and right
        direction walk to the previous or next motion trail points respectively.
        Default is nodes.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pickWalk`
    """
    pass
def polyLayoutUV(*args, **kwargs): pass
def ResetWire(*args, **kwargs): pass
def OutlinerToggleTimeEditor(*args, **kwargs): pass
def AddKeyToolActivate(*args, **kwargs): pass
def Parent(*args, **kwargs): pass
def ToggleUVs(*args, **kwargs): pass
def DeactivateGlobalScreenSlider(*args, **kwargs): pass
def skinCluster(*args, **kwargs): pass
def uvSnapshot(*args, **kwargs):
    """
    Builds an image containg the UVs of the selected objects.
    
    Flags:
    - antiAliased : aa               (bool)          [create]
        When this flag is set, lines are antialiased.
    
    - blueColor : b                  (int)           [create]
        Blue component of line drawing. Default is 255.
    
    - entireUVRange : euv            (bool)          [create]
        When this flag is set, the generated image will contain the entire uv range.
        Default is UV in 0-1 range.
    
    - fileFormat : ff                (unicode)       [create]
        Output file format. Any of those keyword:                                 iff,
        sgi, pic, tif, als, gif, rla, jpgDefault is iff.
    
    - greenColor : g                 (int)           [create]
        Green component of line drawing. Default is 255.
    
    - name : n                       (unicode)       [create]
        Name of the file to be created.
    
    - overwrite : o                  (bool)          [create]
        When this flag is set, existing file can be ovewritten.
    
    - redColor : r                   (int)           [create]
        Red component of line drawing. Default is 255.
    
    - uMax : umx                     (float)         [create]
        Optional User Specified Max value for U. Default value is 1. This will take
        precedence over the entire range-euv flag.
    
    - uMin : umn                     (float)         [create]
        Optional User Specified Min value for U. Default value is 0. This will take
        precedence over the entire range-euv flag.
    
    - uvSetName : uvs                (unicode)       [create]
        Name of the uv set to use. Default is the current one.
    
    - vMax : vmx                     (float)         [create]
        Optional User Specified Max value for V. Default value is 1. This will take
        precedence over the entire range-euv flag.
    
    - vMin : vmn                     (float)         [create]
        Optional User Specified Min value for V. Default value is 0. This will take
        precedence over the entire range-euv flag.
    
    - xResolution : xr               (int)           [create]
        Horizontal size of the image. Default is 512.
    
    - yResolution : yr               (int)           [create]
        Vertical size of the image. Default is 512.                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.uvSnapshot`
    """
    pass
def help(*args, **kwargs): pass
def TimeEditorFrameAll(*args, **kwargs): pass
def CreateMotionTrailOptions(*args, **kwargs): pass
def viewPlace(*args, **kwargs):
    """
    This command positions the camera as specified. The lookAt and viewDirection
    flags are mutually exclusive, as are the ortho and perspective flags. If this
    command switches a camera from ortho to perspective or the other way around
    without specifying a new field of view, then one is calculated based on a
    heuristic involving the selected objects. If the camera is not specified on the
    command line, the command will check to see if there is a camera on the active
    list. The user should be aware that some positions will be unattainable. For
    example, using a new camera located at the origin and specifying a lookAt of [0
    0 -5] and an up of [1 1 1]. In these cases, the camera will always aim at the
    lookAt, and the new up direction will be determined by transforming the
    specified up into camera space and then projecting this vector onto a plane
    defined by the camera's up and right vectors. Using the example above, the new
    up vector will be [1 1 0].
    
    Flags:
    - animate : an                   (bool)          [create]
        If set to true then animate the camera transition from current position to the
        final one.
    
    - eyePoint : eye                 (float, float, float) [create]
        The new eye point in world coordinates.
    
    - fieldOfView : fov              (float)         [create]
        The new field of view (in degrees, for perspective cameras, and in world
        distance for ortho cameras)
    
    - lookAt : la                    (float, float, float) [create]
        The new look-at point in world coordinates.
    
    - ortho : o                      (bool)          [create]
        Sets the camera to be orthgraphic.
    
    - perspective : p                (bool)          [create]
        Sets the camera to be perspective.
    
    - upDirection : up               (float, float, float) [create]
        The new up direction vector.
    
    - viewDirection : vd             (float, float, float) [create]
        The new view direction vector.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewPlace`
    """
    pass
def adskRepresentation(*args, **kwargs):
    """
    Flags:
    - listRepTypes : lrt             (unicode)       []
    
    - typeLabel : tl                 (unicode)       []
    
    - updateAERepresentationProc : rcp (unicode)       []
    
    
    Derived from mel command `maya.cmds.adskRepresentation`
    """
    pass
def ToggleLatticeShape(*args, **kwargs): pass
def RebuildCurve(*args, **kwargs): pass
def attributeInfo(*args, **kwargs):
    """
    This command lists all of the attributes that are marked with certain flags.
    Combinations of flags may be specified and all will be considered. (The method
    of combination depends on the state of the logicalAnd/andflag.) When the
    allAttributes/allflag is specified, attributes of all types will be listed.
    
    Flags:
    - allAttributes : all            (bool)          [create]
        Show all attributes associated with the node regardless of type. Use of this
        flag overrides any other attribute type flags and logical operation that may be
        specified on the command.
    
    - bool : b                       (bool)          [create]
        Show the attributes that are of type boolean. Use the 'on' state to get only
        boolean attributes; the 'off' state to ignore boolean attributes.
    
    - enumerated : e                 (bool)          [create]
        Show the attributes that are of type enumerated. Use the 'on' state to get only
        enumerated attributes; the 'off' state to ignore enumerated attributes.
    
    - hidden : h                     (bool)          [create]
        Show the attributes that are marked as hidden. Use the 'on' state to get hidden
        attributes; the 'off' state to get non-hidden attributes.
    
    - inherited : inherited          (bool)          [create]
        Filter the attributes based on whether they belong to the node type directly or
        have been inherited from a root type (e.g. meshShape/direct or
        dagObject/inherited). Use the 'on' state to get only inherited attributes, the
        'off' state to get only directly owned attributes, and leave the flag
        unspecified to get both.
    
    - internal : i                   (bool)          [create]
        Show the attributes that are marked as internal to the node. Use the 'on' state
        to get internal attributes; the 'off' state to get non-internal attributes.
    
    - leaf : l                       (bool)          [create]
        Show the attributes that are complex leaves (ie. that have parent attributes and
        have no children themselves). Use the 'on' state to get leaf attributes; the
        'off' state to get non-leaf attributes.
    
    - logicalAnd : logicalAnd        (bool)          [create]
        The default is to take the logical 'or' of the above conditions. Specifying this
        flag switches to the logical 'and' instead.
    
    - multi : m                      (bool)          [create]
        Show the attributes that are multis. Use the 'on' state to get multi attributes;
        the 'off' state to get non-multi attributes.
    
    - short : s                      (bool)          [create]
        Show the short attribute names instead of the long names.
    
    - type : t                       (unicode)       [create]
        static node type from which to get 'affects' information
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    - userInterface : ui             (bool)          [create]
        Show the UI-friendly attribute names instead of the Maya ASCII names. Takes
        precedence over the -s/-short flag if both are specified.
    
    - writable : w                   (bool)          [create]
        Show the attributes that are writable (ie. can have input connections). Use the
        'on' state to get writable attributes; the 'off' state to get non-writable
        attributes.
    
    
    Derived from mel command `maya.cmds.attributeInfo`
    """
    pass
def ConvertSelectionToContainedEdges(*args, **kwargs): pass
def OpenSupportCenter(*args, **kwargs): pass
def nucleusDisplayMaterialNodes(*args, **kwargs): pass
def ptexBake(*args, **kwargs):
    """
    Flags:
    - bakeAttribute : ba             (unicode)       []
    
    - bakeColorSet : bc              (unicode)       []
    
    - bakeTexture : bt               (unicode)       []
    
    - bakeUV : buv                   (unicode)       []
    
    - clearMeshMetaDataCache : cmc   (bool)          []
    
    - fixMeshMetaData : fmm          (bool)          []
    
    - inMesh : im                    (unicode)       []
    
    - outPtex : o                    (unicode)       []
    
    - texelsPerUnit : tpu            (float)         []
    
    
    Derived from mel command `maya.cmds.ptexBake`
    """
    pass
def BezierCurveToNurbs(*args, **kwargs): pass
def showManipCtx(*args, **kwargs): pass
def falloffCurveAttr(*args, **kwargs): pass
def HIKComputeReference(*args, **kwargs):
    """
    Flags:
    - character : ch                 (unicode)       []
    
    - ctrlreference : cr             (unicode)       []
    
    - resetctrlrig : rcr             (bool)          []
    
    - resetskref : rsk               (bool)          []
    
    - setctrlrigref : scr            (bool)          []
    
    - setskref : ssk                 (bool)          []
    
    - skeletonreference : sk         (unicode)       []
    
    
    Derived from mel command `maya.cmds.HIKComputeReference`
    """
    pass
def SmoothPolygon(*args, **kwargs): pass
def SurfaceBooleanUnionTool(*args, **kwargs): pass
def polyAppend(*args, **kwargs): pass
def PaintReduceWeightsToolOptions(*args, **kwargs): pass
def AlembicExportAllOptions(*args, **kwargs): pass
def sbs_GetSubstanceBuildVersion(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetSubstanceBuildVersion`
    """
    pass
def lightList(*args, **kwargs): pass
def dR_viewBack(*args, **kwargs): pass
def FitBSplineOptions(*args, **kwargs): pass
def Wave(*args, **kwargs): pass
def CreatePolygonDiscOptions(*args, **kwargs): pass
def ImportSkinWeightMaps(*args, **kwargs): pass
def fluidReplaceFramesOpt(*args, **kwargs): pass
def xgmGroomConvert(*args, **kwargs):
    """
    Flags:
    - prefix : px                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmGroomConvert`
    """
    pass
def TimeEditorToggleSnapToClipPress(*args, **kwargs): pass
def SelectUnmappedFaces(*args, **kwargs): pass
def PreInfinityOscillate(*args, **kwargs): pass
def ReversePolygonNormalsOptions(*args, **kwargs): pass
def MirrorSubdivSurfaceOptions(*args, **kwargs): pass
def AppendToPolygonTool(*args, **kwargs): pass
def nurbsToSubdiv(*args, **kwargs): pass
def SetBifrostInitialState(*args, **kwargs): pass
def HideHairSystems(*args, **kwargs): pass
def ConvertSelectionToUVPerimeter(*args, **kwargs): pass
def SnapRotation(*args, **kwargs): pass
def meshIntersectTest(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.meshIntersectTest`
    """
    pass
def jointCluster(*args, **kwargs): pass
def UpdateEraseSurface(*args, **kwargs): pass
def SelectAllBrushes(*args, **kwargs): pass
def EnableSnapshots(*args, **kwargs): pass
def dataStructure(*args, **kwargs):
    """
    Takes in a description of the structure and creates it, adding it to the list of
    available data structures. The structure definition can either be supplied in
    the asStringflag or exist in a file that is referenced by the asFileflag.  If
    the removeflag is specified with a nameflag then the data structure will be
    removed. This is to keep all structure operations in a single command rather
    than create separate commands to create, remove, and query the data structures.
    When you use the removeAllflag then every existing metadata structure is
    removed. Use with care! Note that removed structures may still be in use in
    metadata Streams after removal, they are just no longer available for the
    creation of new Streams.  Both the creation modes and the remove mode are
    undoable.  Creation of an exact duplicate of an existing structure (including
    name) will succeed silently without actually creating a new structure.
    Attempting to create a new non-duplicate structure with the same name as an
    existing structure will fail as there is no way to disambiguate two structures
    with the same name.  Querying modes are defined to show information both on the
    created structures and the structure serialization formats that have been
    registered. The serialization formats preserve the structure information as text
    (e.g. raw, XML, JSON). Since the rawstructure type is built in it will be
    assumed when none are specified.  General query with no flags will return the
    list of names of all currently existing structures.  Querying the formatflag
    will return the list of all registered structure serialization formats.
    Querying with the formatsupplied before the queryflag will show the detailed
    description of that particular structure serialization format.  Querying the
    asStringflag with a structure name and serialization format supplied before the
    queryflag will return a string representing the named data structure in the
    serialization format specified by the formatflag. Even if the format is the same
    as the one that created the structure the query return string may not be
    identical since the queried value is formatted in a standard way - original
    formatting is not preserved.  Querying the asFileflag with a structure name
    supplied before the queryflag will return the original file from which the
    structure was generated. If the structure was created using the asStringflag or
    through the API then an empty string will be returned.  Querying the nameflag
    returns the list of all structures created so far.
    
    Flags:
    - asFile : af                    (unicode)       [create,query]
        Specify a file that contains the serialized data which describes the structure.
        The format of the data is specified by the 'format' flag.
    
    - asString : asString            (unicode)       [create,query]
        Specify the string containing the serialized data which describes the structure.
        The format of the data is specified by the 'format' flag.
    
    - dataType : dt                  (bool)          [create,query]
        Used with the flag 'listMemberNames' to query the type of the member. The type
        is appended after each relative member in the array. For example, if the format
        is name=idStructure:int32=id:string=namethe returned array is id int32 name
        string.
    
    - format : fmt                   (unicode)       [create,query]
        Format of data to expect in the structure description. rawis supported natively
        and will be assumed if the format type is omitted. Others are available via
        plug-in. You can query the available formats by using this flag in query mode.
        In query mode, this flag can accept a value.
    
    - listMemberNames : lmn          (unicode)       [create,query]
        Query the member names in the dataStructure. The member names will be returned
        in an array. The name of the data structure will not be returned. To get the
        type of each member, use 'dataType' together. Then the type of the member will
        be appended in the array after their relative member. For example, if the format
        is name=idStructure:int32=id:string=namethe returned array is id int32 name
        string.
    
    - name : n                       (unicode)       [query]
        Query mode only.  Name of the data structure to be queried, or set to list the
        available names. In query mode, this flag can accept a value.
    
    - remove : rem                   (bool)          [create]
        Remove the named data structure. It's an error if it doesn't exist.
    
    - removeAll : ral                (bool)          [create]
        Remove all metadata structures. This flag can not be used in conjunction with
        any other flags.                             Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dataStructure`
    """
    pass
def SetMeshSmoothTargetTool(*args, **kwargs): pass
def ClearBifrostInitialState(*args, **kwargs): pass
def MoveNearestPickedKeyToolActivate(*args, **kwargs): pass
def polyPyramid(*args, **kwargs): pass
def bakeSimulation(*args, **kwargs): pass
def ShowAllLabels(*args, **kwargs): pass
def HideSubdivSurfaces(*args, **kwargs): pass
def callbacks(*args, **kwargs): pass
def Uniform(*args, **kwargs): pass
def CreateFlexorWindow(*args, **kwargs): pass
def FBIKLabelPinkyToe(*args, **kwargs): pass
def gravity(*args, **kwargs): pass
def xform(*args, **kwargs):
    """
    This command can be used query/set any element in a transformation node. It can
    also be used to query some values that cannot be set directly such as the
    transformation matrix or the bounding box. It can also set both pivot points to
    convenient values. All values are specified in transformation coordinates.
    (attribute-space) In addition, the attributes are applied/returned in the order
    in which they appear in the flags section. (which corresponds to the order they
    appear in the transformation matrix as given below) See also:move, rotate, scale
    where: [sp] = |  1      0        0       0 | = scale pivot matrix |  0      1
    0       0 | |  0      0        1       0 | | -spx   -spy     -spz     1 | [s]  =
    |  sx     0        0       0 | = scale matrix |  0      sy       0       0 | |
    0      0        sz      0 | |  0      0        0       1 | [sh] = |  1      0
    0       0 | = shear matrix |  xy     1        0       0 | |  xz     yz       1
    0 | |  0      0        0       1 | -1 [sp] = |  1       0       0       0 | =
    scale pivot inverse matrix |  0       1       0       0 | |  0       0       1
    0 | |  spx     spy     spz     1 | [st] = |  1       0       0       0 | = scale
    translate matrix |  0       1       0       0 | |  0       0       1       0 | |
    stx     sty     stz     1 | [rp] = |  1       0       0       0 | = rotate pivot
    matrix |  0       1       0       0 | |  0       0       1       0 | | -rpx
    -rpy    -rpz     1 | [ar] = |  \*       \*       \*       0 | = axis rotation
    matrix |  \*       \*       \*       0 |   (composite rotation, |  \*       \*
    \*       0 |    see [rx], [ry], [rz] |  0       0       0       1 |    below for
    details) [rx] = |  1       0       0       0 | = rotate X matrix |  0
    cos(x)  sin(x)  0 | |  0      -sin(x)  cos(x)  0 | |  0       0       0       1
    | [ry] = |  cos(y)  0      -sin(y)  0 | = rotate Y matrix |  0       1       0
    0 | |  sin(y)  0       cos(y)  0 | |  0       0       0       1 | [rz] = |
    cos(z)  sin(z)  0       0 | = rotate Z matrix | -sin(z)  cos(z)  0       0 | |
    0       0       1       0 | |  0       0       0       1 | -1 [rp] = |  1
    0       0       0 | = rotate pivot matrix |  0       1       0       0 | |  0
    0       1       0 | |  rpx     rpy     rpz     1 | [rt] = |  1       0       0
    0 | = rotate translate matrix |  0       1       0       0 | |  0       0
    1       0 | |  rtx     rty     rtz     1 | [t]  = |  1       0       0       0 |
    = translation matrix |  0       1       0       0 | |  0       0       1       0
    | |  tx      ty      tz      1 | In query mode, return type is based on queried
    flag.
    
    Flags:
    - absolute : a                   (bool)          [create]
        perform absolute transformation (default)
    
    - boundingBox : bb               (bool)          [query]
        Returns the bounding box of an object. The values returned are in the following
        order: xmin ymin zmin xmax ymax zmax.
    
    - boundingBoxInvisible : bbi     (bool)          [query]
        Returns the bounding box of an object. This includes the bounding boxes of all
        invisible children which are not included using the boundingBox flag. The values
        returned are in following order: xmin ymin zmin xmax ymax zmax.
    
    - centerPivots : cp              (bool)          [create]
        Set pivot points to the center of the object's bounding box. (see -p flag)
    
    - centerPivotsOnComponents : cpc (bool)          [create]
        Set pivot points to the center of the component's bounding box. (see -p flag)
    
    - deletePriorHistory : dph       (bool)          [create]
        If true then delete the construction history before the operation is performed.
    
    - euler : eu                     (bool)          [create]
        modifer for -relative flag that specifies rotation values should be added to
        current XYZ rotation values.
    
    - matrix : m                     (float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float) [create,query]
        Sets/returns the composite transformation matrix. \*Note\* the matrix is
        represented by 16 double arguments that are specified in row order.
    
    - objectSpace : os               (bool)          [create,query]
        treat values as object-space transformation values (only works for pivots,
        translations, rotation, rotation axis, matrix, and bounding box flags)
    
    - pivots : piv                   (float, float, float) [create,query]
        convenience method that changes both the rotate and scale pivots simultaneously.
        (see -rp -sp flags for more info)
    
    - preserve : p                   (bool)          [create]
        preserve overall transformation. used to prevent object from jumpingwhen
        changing pivots or rotation order. the default value is true. (used with -sp,
        -rp, -roo, -cp, -ra)
    
    - preserveUV : puv               (bool)          [create]
        When true, UV values on rotated components are projected across the rotation in
        3d space. For small edits, this will freeze the world space texture mapping on
        the object. When false, the UV values will not change for a selected vertices.
        Default is false.
    
    - reflection : rfl               (bool)          [create]
        To move the corresponding symmetric components also.
    
    - reflectionAboutBBox : rab      (bool)          [create]
        Sets the position of the reflection axis  at the geometry bounding box
    
    - reflectionAboutOrigin : rao    (bool)          [create]
        Sets the position of the reflection axis  at the origin
    
    - reflectionAboutX : rax         (bool)          [create]
        Specifies the X=0 as reflection plane
    
    - reflectionAboutY : ray         (bool)          [create]
        Specifies the Y=0 as reflection plane
    
    - reflectionAboutZ : raz         (bool)          [create]
        Specifies the Z=0 as reflection plane
    
    - reflectionTolerance : rft      (float)         [create]
        Specifies the tolerance to findout the corresponding reflected components
    
    - relative : r                   (bool)          [create]
        perform relative transformation
    
    - rotateAxis : ra                (float, float, float) [create,query]
        rotation axis orientation (when used with the -p flag the overall rotation is
        preserved by modifying the rotation to compensate for the axis rotation)
    
    - rotateOrder : roo              (unicode)       [create,query]
        rotation order (when used with the -p flag the overall rotation is preserved by
        modifying the local rotation to be quivalent to the old one) Valid values for
        this flag are xyz | yzx | zxy | xzy | yxz | zyx
    
    - rotatePivot : rp               (float, float, float) [create,query]
        rotate pivot point transformation (when used with the -p flag the overall
        transformation is preserved by modifying the rotation translation)
    
    - rotateTranslation : rt         (float, float, float) [create,query]
        rotation translation
    
    - rotation : ro                  (float, float, float) [create,query]
        rotation transformation
    
    - scale : s                      (float, float, float) [create,query]
        scale transformation
    
    - scalePivot : sp                (float, float, float) [create,query]
        scale pivot point transformation (when used with the -p flag the overall
        transformation is preserved by modifying the scale translation)
    
    - scaleTranslation : st          (float, float, float) [create,query]
        scale translation
    
    - shear : sh                     (float, float, float) [create,query]
        shear transformation. The values represent the shear xy,xz,yz
    
    - translation : t                (float, float, float) [create,query]
        translation
    
    - worldSpace : ws                (bool)          [create,query]
        (works for pivots, translations, rotation, rotation axis, matrix, and bounding
        box flags). Note that, when querying the scale, that this calculation is
        cumulative and is only valid if there are all uniform scales and no rotation. In
        a hierarchy with non-uniform scale and rotation, this value may not correspond
        entirely with the perceived global scale.
    
    - worldSpaceDistance : wd        (bool)          [create,query]
        Values for -sp, -rp, -st, -rt, -t, -piv flags are treated as world space
        distances to move along the local axis. (where the local axis depends on whether
        the command is operating in local-space or object-space. This flag has no effect
        for world space.
    
    - zeroTransformPivots : ztp      (bool)          [create]
        reset pivot points and pivot translations without changing the overall matrix by
        applying these values into the translation channel.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.xform`
    """
    pass
def LayoutUV(*args, **kwargs): pass
def DetachSurfaces(*args, **kwargs): pass
def ProportionalModificationTool(*args, **kwargs): pass
def nodePreset(*args, **kwargs):
    """
    Command to save and load preset settings for a node. This command allows you to
    take a snapshot of the values of all attributes of a node and save it to disk as
    a preset with user specified name. Later the saved preset can be loaded and
    applied onto a different node of the same type. The end result is that the node
    to which the preset is applied takes on the same values as the node from which
    the preset was generated had at the time of the snapshot.
    
    Flags:
    - attributes : atr               (unicode)       [create]
        A white space separated string of the named attributes to save to the preset
        file. If not specified, all attributes will be stored.
    
    - custom : ctm                   (unicode)       [create]
        Specifies a MEL script for custom handling of node attributes that are not
        handled by the general save preset mechanism (ie. multis, dynamic attributes, or
        connections). The identifiers #presetName and #nodeName will be expanded before
        the script is run. The script must return an array of strings which will be
        saved to the preset file and issued as commands when the preset is applied to
        another node. The custom script can query #nodeName in determining what should
        be saved to the preset, or issue commands to query the selected node in deciding
        how the preset should be applied.
    
    - delete : delete                (PyNode, <type 'unicode'>) [create]
        Deletes the existing preset for the node specified by the first argument with
        the name specified by the second argument.
    
    - exists : ex                    (PyNode, <type 'unicode'>) [create]
        Returns true if the node specified by the first argument already has a preset
        with a name specified by the second argument. This flag can be used to check if
        the user is about to overwrite an existing preset and thereby provide the user
        with an opportunity to choose a different name.
    
    - isValidName : ivn              (unicode)       [create]
        Returns true if the name consists entirely of valid characters for a preset
        name. Returns false if not. Because the preset name will become part of a file
        name and part of a MEL procedure name, some characters must be disallowed. Only
        alphanumeric characters and underscore are valid characters for the preset name.
    
    - list : ls                      (PyNode)        [create]
        Lists the names of all presets which can be loaded onto the specified node.
    
    - load : ld                      (PyNode, <type 'unicode'>) [create]
        Sets the settings of the node specified by the first argument according to the
        preset specified by the second argument. Any attributes on the node which are
        the destinations of connections or whose children (multi children or compound
        children) are destinations of connections will not be changed by the preset.
    
    - save : sv                      (PyNode, <type 'unicode'>) [create]
        Saves the current settings of the node specified by the first argument to a
        preset of the name specified by the second argument. If a preset for that node
        with that name already exists, it will be overwritten with no warning. You can
        use the -exists flag to check if the preset already exists. If an attribute of
        the node is the destination of a connection, the value of the attribute will not
        be written as part of the preset.                                Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nodePreset`
    """
    pass
def HypershadeGraphRemoveUpstream(*args, **kwargs): pass
def NParticleStyleThickCloud(*args, **kwargs): pass
def ShowMeshSmoothToolOptions(*args, **kwargs): pass
def createMeshFromPoints(*args, **kwargs):
    """
    Flags:
    - help : h                       (bool)          []
    
    - waiter : w                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.createMeshFromPoints`
    """
    pass
def FBIKLabelIndex(*args, **kwargs): pass
def GpuCacheImport(*args, **kwargs): pass
def HypershadeConvertToFileTexture(*args, **kwargs): pass
def xgmUISelectionSync(*args, **kwargs):
    """
    Flags:
    - fromSelection : fsl            (bool)          []
    
    - toSelection : tsl              (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmUISelectionSync`
    """
    pass
def VolumeAxisOptions(*args, **kwargs): pass
def SetTimecode(*args, **kwargs): pass
def AddDynamicBuoy(*args, **kwargs): pass
def CreateUVsBasedOnCamera(*args, **kwargs): pass
def xgmWidthBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - flood : f                      (bool)          []
    
    - freezeMode : frm               (int)           []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - increment : inc                (float)         []
    
    - maxWidth : max                 (float)         []
    
    - minWidth : min                 (float)         []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmWidthBrushContext`
    """
    pass
def dR_scaleTweakTool(*args, **kwargs): pass
def FBXImportMergeAnimationLayers(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportMergeAnimationLayers`
    """
    pass
def displayLevelOfDetail(*args, **kwargs):
    """
    This command is responsible for setting the display level-of-detail for edit
    refreshes.  If enabled, objects will draw with lower detail based on their
    distance from the camera. When disabled objects will display at full resolution
    at all times.  This is not an undoable command In query mode, return type is
    based on queried flag.
    
    Flags:
    - levelOfDetail : lod            (bool)          []
        Enable/disable level of detail.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayLevelOfDetail`
    """
    pass
def XgmSetSmoothBrushToolOption(*args, **kwargs): pass
def CreateQuickSelectSet(*args, **kwargs): pass
def editRenderLayerAdjustment(*args, **kwargs):
    """
    This command is used to create, edit, and query adjustments to render layers. An
    adjustment allows different attribute values or connections to be used depending
    on the active render layer.
    
    Flags:
    - attributeLog : alg             (bool)          [query]
        Output all adjustments for the specified layer sorted by attribute name.
    
    - layer : lyr                    (PyNode)        [create,query]
        Specified layer in which the adjustments will be modified. If not specified the
        active render layer will be used.
    
    - nodeLog : nlg                  (bool)          [query]
        Output all adjustments for the specified layer sorted by node name.
    
    - remove : r                     (bool)          [create]
        Remove the specified adjustments from the render layer. If an adjustment is
        removed from the current layer, the specified plug will revert back to it's
        master value determined by the default render layer.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editRenderLayerAdjustment`
    """
    pass
def FBXExportFinestSubdivLevel(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportFinestSubdivLevel`
    """
    pass
def ToggleMetadata(*args, **kwargs): pass
def LockTangentWeight(*args, **kwargs): pass
def SetKeyScale(*args, **kwargs): pass
def OutlinerRenameSelectedItem(*args, **kwargs): pass
def headsUpDisplay(*args, **kwargs): pass
def getCmdName(inFunc):
    """
    Use in place of inFunc.__name__ when inFunc could be a maya.cmds cmd
    
    handles stubFuncs
    """
    pass
def colorInputWidgetGrp(*args, **kwargs): pass
def cutKey(*args, **kwargs): pass
def HypershadeSaveSwatchesToDisk(*args, **kwargs): pass
def ToggleSurfaceOrigin(*args, **kwargs): pass
def OptimzeUVs(*args, **kwargs): pass
def PerformBifrostOptionsChange(*args, **kwargs): pass
def selectKeyframe(*args, **kwargs): pass
def ConnectToTime(*args, **kwargs): pass
def CreateHingeConstraint(*args, **kwargs): pass
def radioCollection(*args, **kwargs): pass
def polyFlipUV(*args, **kwargs): pass
def spreadSheetEditor(*args, **kwargs):
    """
    This command creates a new spread sheet editor in the current layout.
    
    Flags:
    - allAttr : aa                   (bool)          [query]
        Returns a list of all the attribute names currently being displayed.  This flag
        is ignored when not being queried.
    
    - attrRegExp : are               (unicode)       [create,query,edit]
        Filter the current displayed attribute names. This expression matches the case-
        insensitive substring of attribute names.
    
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - execute : exe                  (unicode)       [edit]
        Immediately executes the command string once for every selected cell in the
        spreadSheet.  Before the command is executed, #Ais substituted with the name of
        the cell's attribute, #Nis substituted with the name of the cell's node, and
        #Pis substituted with the full path name of the node.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - fixedAttrList : fal            (unicode)       [create,query,edit]
        Forces the editor to only display attributes with the specified names.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - keyableOnly : ko               (bool)          [create,query,edit]
        Limits the displayed attributes to be those that are keyable. True by default
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - longNames : ln                 (bool)          [create,query,edit]
        Controls whether the attributes are displayed using their long names or their
        short names.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - niceNames : nn                 (bool)          [create,query,edit]
        Controls whether the attribute names will be displayed in a more user-friendly,
        readable way.  When this is on, the longNames flag is ignored.  When this is
        off, attribute names will be displayed either long or short, according to the
        longNames flag. Default is on. Queried, returns a boolean.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - precision : pre                (int)           [create,query,edit]
        Specifies the maximum number of digits displayed to the right of the decimal
        place.  Can be 0 to 20.
    
    - selectedAttr : sla             (bool)          [query]
        Returns a list of all the attribute names that are selected.  This flag is
        ignored when not being queried.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - showShapes : ss                (bool)          [create,query,edit]
        If true, when transforms are selected their shapes will be displayed instead.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.spreadSheetEditor`
    """
    pass
def PlaybackLoopOnce(*args, **kwargs): pass
def appendListItem(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.appendListItem`
    """
    pass
def moveKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to move keyframes within the
    graph editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - moveFunction : mf              (unicode)       [query,edit]
        linear | power | constant. Specifies how the keys are dragged. The default move
        type is constant where all keys move the same amount as controlled by user
        movement. Power provides a fall-off function where the center of the drag moves
        the most and the keys around the drag move less.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - option : o                     (unicode)       [create,query,edit]
        Valid values are move,insert,over,and segmentOver.When you movea key, the key
        will not cross over (in time) any keys before or after it. When you inserta key,
        all keys before or after (depending upon the -timeChange value) will be moved an
        equivalent amount. When you overa key, the key is allowed to move to any time
        (as long as a key is not there already). When you segmentOvera set of keys (this
        option only has a noticeable effect when more than one key is being moved) the
        first key (in time) and last key define a segment (unless you specify a time
        range). That segment is then allowed to move over other keys, and keys will be
        moved to make room for the segment.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.moveKeyCtx`
    """
    pass
def ThreePointArcTool(*args, **kwargs): pass
def EditPSDTextureItem(*args, **kwargs): pass
def BakeTopologyToTargets(*args, **kwargs): pass
def ShowMeshFillToolOptions(*args, **kwargs): pass
def CreateSpringOptions(*args, **kwargs): pass
def HypershadeSortByType(*args, **kwargs): pass
def NodeEditorLayout(*args, **kwargs): pass
def TogglePolyDisplayHardEdgesColor(*args, **kwargs): pass
def OpenAREACommunity(*args, **kwargs): pass
def UVPlanarProjectionOptions(*args, **kwargs): pass
def PaintHairColor(*args, **kwargs): pass
def ArtPaintSkinWeightsTool(*args, **kwargs): pass
def SnapToMeshCenter(*args, **kwargs): pass
def polyColorBlindData(*args, **kwargs):
    """
    This command applies false color to the selected polygonal components and
    objects, depending on whether or not blind data exists for the selected
    components (or, in the case of poly objects, dynamic attributes), and, depending
    on the color mode indicated, what the values are. It is possible to color
    objects based on whether or not the data exists, if the data matches a specific
    value or range of values, or grayscale color the data according to what the
    actual value is in relation to the specified min and max. This command also has
    a query mode in which the components and/or objects are returned in a string
    array to allow for selection filtering.
    
    Flags:
    - aboveMaxColorBlue : amb        (float)         [create]
        Specifies blue component of color to use for data that is above max
    
    - aboveMaxColorGreen : amg       (float)         [create]
        Specifies green component of color to use for data that is above max
    
    - aboveMaxColorRed : amr         (float)         [create]
        Specifies red component of color to use for data that is above max
    
    - attrName : n                   (unicode)       [create]
        Specifies the name of the data that is being examined by this command.
    
    - belowMinColorBlue : bmb        (float)         [create]
        Specifies blue component of color to use for data that is below min
    
    - belowMinColorGreen : bmg       (float)         [create]
        Specifies green component of color to use for data that is below min
    
    - belowMinColorRed : bmr         (float)         [create]
        Specifies red component of color to use for data that is below min
    
    - clashColorBlue : ccb           (float)         [create]
        Specifies blue component color to use for data which clashes
    
    - clashColorGreen : ccg          (float)         [create]
        Specifies green component color to use for data which clashes
    
    - clashColorRed : ccr            (float)         [create]
        Specifies red component color to use for data which clashes
    
    - colorBlue : cb                 (float)         [create]
        Specifies blue component of color to use for given data
    
    - colorGreen : cg                (float)         [create]
        Specifies green component of color to use for given data
    
    - colorRed : cr                  (float)         [create]
        Specifies red component of color to use for given data
    
    - dataType : dt                  (unicode)       [create]
        Specifies the type for this id
    
    - enableFalseColor : efc         (bool)          [create]
        Turns false coloring on or off for all poly objects in the scene
    
    - maxColorBlue : mxb             (float)         [create]
        Specifies blue component of color to use for max value for grayscale
    
    - maxColorGreen : mxg            (float)         [create]
        Specifies green component of color to use for max value for grayscale
    
    - maxColorRed : mxr              (float)         [create]
        Specifies red component of color to use for max value for grayscale
    
    - maxValue : mxv                 (float)         [create]
        Specifies the max value for grayscale or discrete range data
    
    - minColorBlue : mnb             (float)         [create]
        Specifies blue component of color to use for min value for grayscale
    
    - minColorGreen : mng            (float)         [create]
        Specifies green component of color to use for min value for grayscale
    
    - minColorRed : mnr              (float)         [create]
        Specifies red component of color to use for min value for grayscale
    
    - minValue : mnv                 (float)         [create]
        Specifies the min value for grayscale or discrete range data
    
    - mode : m                       (int)           [create]
        Specifies the mode: 0 : binary - only components and objects that have the data
        will be colored1 : discrete value - a value is specified. Data that matches this
        value will be colored2 : discrete range - values that fall within the given
        range will be colored3 : unsigned set mode - if ( givenValue actualValue ) then
        data will be colored4 : unsigned not set mode - if ( !(givenValue actualValue) )
        then data will be colored5 : unsigned equal mode - if ( givenValue ==
        actualValue ) then data will be colored6 : grayscale mode - a min value, max
        value, min color, max color, below min color, and     above max color are given.
        Data is colored according to how it relates to these values.7 : as color mode -
        if the blind data consists of 3 doubles, ranged 0-1, the components are colored
        as the data specifies
    
    - noColorBlue : ncb              (float)         [create]
        Specifies blue component of color to use for no data assigned
    
    - noColorGreen : ncg             (float)         [create]
        Specifies green component of color to use for no data assigned
    
    - noColorRed : ncr               (float)         [create]
        Specifies red component of color to use for no data assigned
    
    - numIdTypes : num               (int)           [create]
        Specifies how many attrs are in this id type
    
    - queryMode : q                  (bool)          [create]
        If on, do not color and return selection as string array instead. Any data that
        would be colored normally (except for 'no color' and out of range colors) is
        returned
    
    - typeId : id                    (int)           [create]
        Specifies the typeId of the BlindData type being created
    
    - useMax : umx                   (bool)          [create]
        Specifies whether the max should be used for discrete ranges
    
    - useMin : umn                   (bool)          [create]
        Specifies whether the min should be used for discrete ranges
    
    - value : v                      (unicode)       [create]
        The value of the data                              Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyColorBlindData`
    """
    pass
def ExtrudeFaceOptions(*args, **kwargs): pass
def FBXLoadImportPresetFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXLoadImportPresetFile`
    """
    pass
def scale(*args, **kwargs): pass
def TimeEditorCreateAnimTracksAtEnd(*args, **kwargs): pass
def PfxSetLineModifierObject(*args, **kwargs): pass
def DeleteKeysOptions(*args, **kwargs): pass
def CreatePartitionOptions(*args, **kwargs): pass
def PublishChildAnchor(*args, **kwargs): pass
def toolDropped(*args, **kwargs):
    """
    This command builds and executes the commands necessary to recreate the
    specified tool button.  It is invoked when a tool is dropped on the shelf.
    
    
    Derived from mel command `maya.cmds.toolDropped`
    """
    pass
def LabelBasedOnJointNames(*args, **kwargs): pass
def SelectToggleMode(*args, **kwargs): pass
def BrushAnimationMarkingMenuPopDown(*args, **kwargs): pass
def MergeUVOptions(*args, **kwargs): pass
def button(*args, **kwargs): pass
def CreatePolygonUltraShapeOptions(*args, **kwargs): pass
def cmdaiMerge(*args, **kwargs): pass
def HairUVSetLinkingEditor(*args, **kwargs): pass
def CutUVs(*args, **kwargs): pass
def bakeClip(*args, **kwargs):
    """
    This command is used to bake clips and blends into a single clip.
    
    Flags:
    - blend : b                      (int, int)      [create]
        Specify the indices of the clips being blended.
    
    - clipIndex : ci                 (int)           [create]
        Specify the index of the clip to bake.
    
    - keepOriginals : k              (bool)          [create]
        Keep original clips in the trax editor and place the merged clip into the visor.
        The default is to schedule the merged clip, and to keep the original clips in
        the visor.
    
    - name : n                       (unicode)       [create]
        Specify the name of the new clip to create.                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.bakeClip`
    """
    pass
def CreateBlendShapeOptions(*args, **kwargs): pass
def ShowMeshScrapeToolOptions(*args, **kwargs): pass
def fitBspline(*args, **kwargs): pass
def rampWidget(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.rampWidget`
    """
    pass
def SplitPolygonToolOptions(*args, **kwargs): pass
def OpenDGProfiler(*args, **kwargs): pass
def SculptMeshActivateBrushStrength(*args, **kwargs): pass
def EnableAllCaches(*args, **kwargs): pass
def renderWindowSelectContext(*args, **kwargs):
    """
    Set the selection context for the render view panel.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderWindowSelectContext`
    """
    pass
def dR_viewTop(*args, **kwargs): pass
def TimeEditorCreateClipOptions(*args, **kwargs): pass
def PolyExtrudeFaces(*args, **kwargs): pass
def ChamferVertex(*args, **kwargs): pass
def mateCtx(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.mateCtx`
    """
    pass
def offsetCurveOnSurface(*args, **kwargs):
    """
    The offsetCurveOnSurface command offsets a curve on surface resulting in another
    curve on surface. The connecting type for breaks in offsets is off (no
    connection), circular (connect with an arc) or linear (connect linearly
    resulting in a sharp corner). If loop cutting is on then any loops in the offset
    curves are trimmed away and a sharp corner is created at each intersection. The
    subdivisionDensity flag is the maximum number of times the offset object can be
    subdivided (i.e. calculate the offset until the offset comes within tolerance or
    the iteration reaches this maximum.) The checkPoints flag sets the number of
    points per span at which the distance of the offset curve from the original
    curve is determined. The tolerance flag determines how accurately the offset
    curve should satisfy the required offset distance. A satisfactory offset curve
    is one for which all of the checkpoints are within the given tolerance of the
    required offset.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - checkPoints : cp               (int)           [create,query,edit]
        Checkpoints for fit quality per span. Not advisable to change this value.
        Default:3
    
    - connectBreaks : cb             (int)           [create,query,edit]
        Connect breaks method (between gaps): 0 - off, 1 - circular, 2 - linear
        Default:2
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - cutLoop : cl                   (bool)          [create,query,edit]
        Do loop cutting. Default:false
    
    - distance : d                   (float)         [create,query,edit]
        Offset distance Default:1.0
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - range : rn                     (bool)          [create]
        Force a curve range on complete input curve.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - stitch : st                    (bool)          [create,query,edit]
        Stitch curve segments together. Not advisable to change this value. Default:true
    
    - subdivisionDensity : sd        (int)           [create,query,edit]
        Maximum subdivision density per span Default:5
    
    - tolerance : tol                (float)         [create,query,edit]
        Tolerance Default:0.01                  Common flags
    
    
    Derived from mel command `maya.cmds.offsetCurveOnSurface`
    """
    pass
def dR_selConstraintUVEdgeLoop(*args, **kwargs): pass
def FrontPerspViewLayout(*args, **kwargs): pass
def HideManipulators(*args, **kwargs): pass
def NodeEditorCreateIterateCompound(*args, **kwargs): pass
def DeleteAllFurs(*args, **kwargs): pass
def CreateCurveFromPoly(*args, **kwargs): pass
def artSelectCtx(*args, **kwargs):
    """
    This command is used to select/deselect/toggle components on selected surfaces
    using a brush interface (Maya Artisan). Since, it selects components of the
    surface, it only works in the component mode. In query mode, return type is
    based on queried flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - addselection : ads             (bool)          [create,query,edit]
        If true, each new stroke adds cvs to the active list. If false, each stroke
        replaces the previous selection. C: Default is true. Q: When queried, it returns
        a boole
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - importthreshold : ift          (float)         [create,query,edit]
        Specifies the threshold for the import of the attribute maps. C: Default is 0.5.
        Q: When queried, it returns a float.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectall : sal                (bool)          [create,edit]
        Selects all vertices/egdes/faces/uvs.
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - selectop : sop                 (unicode)       [create,query,edit]
        Specifies the selection operation (select, unselect, toggle). C: Default is
        select. Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - toggleall : tal                (bool)          [create,edit]
        Toggle all vertices/egdes/faces/uvs.
    
    - unselectall : ual              (bool)          [create,edit]
        Unselects all vertices/egdes/faces/uvs.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artSelectCtx`
    """
    pass
def nClothMakeCollide(*args, **kwargs): pass
def skeletonEmbed(*args, **kwargs):
    """
    This command is used to embed a skeleton inside meshes.                  In
    query mode, return type is based on queried flag.
    
    Flags:
    - mergedMesh : mm                (bool)          [query]
        When specified, the query command merges selected meshes together and returns a
        Python object representing the merged mesh.
    
    - segmentationMethod : sm        (int)           [create]
        Specifies which segmentation algorithm to use to determine what is inside the
        mesh and what is outside the mesh.  By default, boundary-and-fill-and-grow
        voxelization will be used. Available algorithms are: 0  : Perfect mesh (no
        voxelization). This method works for perfect meshes, i.e. meshes that are
        closed, watertight, 2-manifold and without self-intersection or interior/hidden
        geometry.  It segments the interior region of the mesh from the exterior using a
        pseudo-normal test. It does not use voxelization.  If mesh conditions are not
        respected, the segmentation is likely to be wrong.  This can make the
        segmentation process significantly longer and prevent successful skeleton
        embedding. 1 : Watertight mesh (flood fill). This method works for watertight
        meshes, i.e. meshes for which faces completely separate the interior region of
        the mesh from the exterior.  The mesh can have degenerated faces, wrong face
        orientation, self-intersection, etc.  The method uses surface voxelization to
        classify as part of the interior region all voxels intersecting with a mesh
        face.  It then performs flood-filling from the outside, marking all reached
        voxels as part of the exterior region of the model.  Finally, all unreached
        voxels are marked as part of the interior region.  This method works so long as
        the mesh is watertight, i.e. without holes up to the voxelization resolution.
        Otherwise, flood-filling reaches the interior region and creates inaccurate
        segmentation. 2 : Imperfect mesh (flood fill + growing). This method works for
        meshes where holes could make the flood-filling step reach the interior region
        of the mesh, but that have face orientation consistent enough so filling them is
        possible.  First, it uses surface voxelization to classify as part of the
        interior region all voxels intersecting with a mesh face.  It then alternates
        flood-filling and growing steps.  The flood-filling tries to reach all voxels
        from the outside so that unreached voxels are marked as part of the interior
        region.  The growing step uses a relatively computation-intensive process to
        check for interior voxels in all neighbors to those already identified.  Any
        voxel identified as interior is likely to fill holes, allowing subsequent flood-
        filling steps to identify more interior voxels. 3 : Polygon soup (repair). This
        method has no manifold or face orientation requirements.  It reconstructs a mesh
        that wraps the input mesh with a given offset (3 times the voxel size) and uses
        this perfect 2-manifold mesh to segment the interior region from the exterior
        region of the model. Because of the offset, it might lose some of the details
        and merge parts that are proximal. However, this usually is not an issue with
        common models where body parts are not too close to one another. 99 : Direct
        skeleton (no embedding). This method does not try to perform embedding.  It
        simply returns the skeleton in its initial pose without any attempt at embedding
        inside the meshes, other than placing it in the meshes bounding box.
    
    - segmentationResolution : sr    (int)           [create]
        Specifies which segmentation resolution to use for the voxel grid.  By default,
        256x256x256 voxels will be used.                                   Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.skeletonEmbed`
    """
    pass
def DeleteSurfaceFlowOptions(*args, **kwargs): pass
def profiler(*args, **kwargs):
    """
    The profiler is used to record timing information from key events within Maya,
    as an aid in tuning the performance of scenes, scripts and plug-ins. User
    written plug-ins and Python scripts can also generate profiling information for
    their own code through the MProfilingScope (C++), MProfilingContextManager
    (Python) and MProfiler classes in the API. This command provides the ability to
    control the collection of profiling data and to query information about the
    recorded events. The recorded information can also be viewed graphically in the
    Profiler window. The buffer size cannot be changed while sampling is active, it
    will return an error The reset flag cannot be called while sampling is active,
    it will return an error. Any changes to the buffer size will only be applied on
    start of the next recording. You can't save and load in the same command, save
    has priority, load would be ignored.               In query mode, return type is
    based on queried flag.
    
    Flags:
    - addCategory : a                (unicode)       [create]
        Add a new category for the profiler. Returns the index of the new category.
    
    - allCategories : ac             (bool)          [query]
        Query the names of all categories. If the categoryInfoflag is set then alternate
        the name of the category with the description of the category.
    
    - bufferSize : b                 (int)           [create,query]
        Toggled : change the buffer size to fit the specified number of events (requires
        that sampling is off) Query : return the current buffer size The new buffer size
        will only take effect when next sampling starts. When the buffer is full, the
        recording stops.
    
    - categoryIndex : ci             (int)           [create,query]
        Used in conjunction with other flags, to indicate the index of the category.
    
    - categoryIndexToName : cin      (int)           [create,query]
        Returns the name of the category with a given index.
    
    - categoryInfo : cf              (unicode)       [create,query]
        When used with the addCategoryflag set the description of the added profiler
        category. In query mode return the description of the category referenced by
        either the categoryIndexor categoryNameflags. In query mode, this flag can
        accept a value.
    
    - categoryName : cn              (unicode)       [query]
        Used in conjunction with other flags, to indicate the name of the category.
    
    - categoryNameToIndex : cni      (unicode)       [create,query]
        Returns the index of the category with a given name.
    
    - categoryRecording : cr         (bool)          [create,query]
        Toggled : Enable/disable the recording of the category. Query : return if the
        recording of the category is On. Requires the -categoryIndex or -categoryName
        flag to specify the category to be queried.
    
    - clearAllMelInstrumentation : cam (bool)          [create]
        Clear all MEL command or procedure instrumentation.
    
    - colorIndex : coi               (int)           [create]
        Used with -instrumentMel trueto specify the color index to show the profiling
        result.
    
    - eventCPUId : eci               (bool)          [query]
        Query the CPU ID of the event at the given index. Requires the -eventIndex flag
        to specify the event to be queried.
    
    - eventCategory : eca            (bool)          [query]
        Query the category index the event at the given index belongs to. Requires the
        -eventIndex flag to specify the event to be queried.
    
    - eventColor : eco               (bool)          [query]
        Query the color of the event at the given index. Requires the -eventIndex flag
        to specify the event to be queried.
    
    - eventCount : ec                (bool)          [query]
        Query the number of events in the buffer
    
    - eventDescription : ed          (bool)          [query]
        Query the description of the event at the given index. Requires the -eventIndex
        flag to specify the event to be queried.
    
    - eventDuration : edu            (bool)          [query]
        Query the duration of the event at the given index, the time unit is
        microsecond. Note that a signal event has a 0 duration. Requires the -eventIndex
        flag to specify the event to be queried.
    
    - eventIndex : ei                (int)           [query]
        Used usually in conjunction with other flags, to indicate the index of the
        event.
    
    - eventName : en                 (bool)          [query]
        Query the name of the event at the given index. Requires the -eventIndex flag to
        specify the event to be queried.
    
    - eventStartTime : et            (bool)          [query]
        Query the time of the event at the given index, the time unit is microsecond.
        Requires the -eventIndex flag to specify the event to be queried.
    
    - eventThreadId : eti            (bool)          [query]
        Query the thread ID of the event at the given index. Requires the -eventIndex
        flag to specify the event to be queried.
    
    - instrumentMel : instrumentMel  (bool)          [create]
        Enable/Diable the instrumentation of a MEL command or procedure. When the
        instrumentation is enabled, the execution of MEL command or procedure can be
        profiled and shown in the Profiler window. To enable the instrumentation
        requires the -procedureName, -colorIndex and -categoryIndex flags. To disable
        the instrumentation requires the -procedureName flag.
    
    - load : l                       (unicode)       [create,query]
        Read the recorded events from the specified file
    
    - output : o                     (unicode)       [create,query]
        Output the recorded events to the specified file
    
    - procedureDescription : pd      (unicode)       [create]
        Used with -instrumentMel trueto provide a description of the MEL command or
        procedure being instrumented. This description can be viewed in the Profiler
        Tool window.
    
    - procedureName : pn             (unicode)       [create]
        Used with -instrumentMel to specify the name of the procedure to be
        enabled/disabled the instrumentation.
    
    - removeCategory : rc            (unicode)       [create]
        Remove an existing category for the profiler. Returns the index of the removed
        category.
    
    - reset : r                      (bool)          [create,query]
        reset the profiler's data (requires that sampling is off)
    
    - sampling : s                   (bool)          [create,query]
        Toggled : Enable/disable the recording of events Query : return if the recording
        of events is On.
    
    - signalEvent : sig              (bool)          [query]
        Query if the event at the given index is a signal event. Requires the
        -eventIndex flag to specify the event to be queried. A Signal Event only
        remembers the start moment and has no knowledge about duration. It can be used
        in cases when the user does not care about the duration but only cares if this
        event does happen.
    
    - signalMelEvent : sim           (bool)          [create]
        Used with -instrumentMel true, inform profiler that this instrumented MEL
        command or procedure will be taken as a signal event during profiling. A Signal
        Event only remembers the start moment and has no knowledge about duration. It
        can be used in cases when the user does not care about the duration but only
        cares if this event does happen.                              Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.profiler`
    """
    pass
def evalNoSelectNotify(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.evalNoSelectNotify`
    """
    pass
def particleRenderInfo(*args, **kwargs):
    """
    This action provides information access to the particle render subclasses. These
    are derived from TdynRenderBase. This action is used primarily by the Attribute
    Editor to gather information about attributes used for rendering. In query mode,
    return type is based on queried flag.
    
    Flags:
    - attrList : al                  (int)           [query]
        Return the list of attributes used by this render type.
    
    - attrListAll : ala              (bool)          [query]
        Return a complete list of all render attributes used by the particle object.
        This also includes the per particle attributes.
    
    - name : n                       (int)           [query]
        Return the name of the render subclass using the render type.
    
    - renderTypeCount : rtc          (bool)          [query]
        Return the count of registered render classes for particle.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.particleRenderInfo`
    """
    pass
def shaderfx(*args, **kwargs):
    """
    Flags:
    - acquireMTextureFromSwatch : amt (int, int, float, unicode) []
    
    - addGroup : ag                  (unicode)       []
    
    - addNode : an                   (int)           []
    
    - breakConnection : bc           (int, int, int, int) []
    
    - buildInfo : b                  (bool)          []
    
    - changeGroup : cgp              (int)           []
    
    - createGroupNode : cgn          (bool)          []
    
    - deleteNode : dn                (int)           []
    
    - edit_action : ea               (int, unicode)  []
    
    - edit_bool : eb                 (int, unicode, bool) []
    
    - edit_exposeGrp : eeg           (int, unicode, int) []
    
    - edit_float : ef                (int, unicode, float) []
    
    - edit_float2 : ef2              (int, unicode, float) []
    
    - edit_float3 : ef3              (int, unicode, float, float, float) []
    
    - edit_float4 : ef4              (int, unicode, float, float, float, float) []
    
    - edit_int : ei                  (int, unicode, int) []
    
    - edit_string : es               (int, unicode, unicode) []
    
    - edit_stringPath : esp          (int, unicode, unicode) []
    
    - edit_stringlist : esl          (int, unicode, int) []
    
    - getAttributeNodeID : ga        (unicode)       []
    
    - getCode : gc                   (bool)          []
    
    - getConnectedNodeID : gid       (int, int, int, int, bool) []
    
    - getConnectedSocketCount : gcc  (int, int, int) []
    
    - getConnectedSocketIndex : gci  (int, int, int, int, bool) []
    
    - getGroupEndUID : gge           (int)           []
    
    - getGroupUID : ggi              (int)           []
    
    - getHwShaderNodeID : rhw        (bool)          []
    
    - getHwShaderNodeRootGrpID : rhg (bool)          []
    
    - getNodeClassName : gcn         (int)           []
    
    - getNodeCount : gnc             (bool)          []
    
    - getNodeIDByName : gnn          (unicode)       []
    
    - getNodeTypeByClassName : gtc   (unicode)       []
    
    - getNodeUIDFromIndex : gni      (int)           []
    
    - getPropertyType : gpt          (int, unicode)  []
    
    - getPropertyValue : gpv         (int, unicode)  []
    
    - getSettingNodeID : gs          (unicode)       []
    
    - getSocketCount : gsc           (int, int)      []
    
    - getSocketIndexByName : gsi     (int, unicode, int, int) []
    
    - getSocketName : gsn            (int, int, int) []
    
    - getSocketType : gst            (int, int, int) []
    
    - getTextureResolution : gtr     (int)           []
    
    - help : h                       (bool)          []
    
    - initShaderAttributes : isa     (bool)          []
    
    - isGroupEnd : ige               (int)           []
    
    - isGroupFromDisk : igd          (int)           []
    
    - isGroupStart : igs             (int)           []
    
    - listProperties : lp            (int)           []
    
    - loadGraph : lg                 (unicode)       []
    
    - loadSjsonMaterial : lsm        (unicode)       []
    
    - makeConnection : mc            (int, int, int, int) []
    
    - manualUpdate : mu              (bool)          []
    
    - moveNodeInGroup : ang          (int, int)      []
    
    - nodeUI : nui                   (bool)          []
    
    - redraw : r                     (bool)          []
    
    - renderSwatchToDisk : rsd       (int, int, float, unicode) []
    
    - renderSwatchToDiskUV : ruv     (int, int, float, unicode) []
    
    - replaceUI : rui                (bool)          []
    
    - saveGroupNode : sgn            (int)           []
    
    - selectNode : sel               (int)           []
    
    - setAdvancedMode : sam          (bool)          []
    
    - setUserPath : sup              (unicode)       []
    
    - sfxnode : n                    (unicode)       []
    
    - start : s                      (bool)          []
    
    - swatchCamera : swc             (unicode)       []
    
    - swatchGeom : swg               (unicode)       []
    
    - undoStack : us                 (bool)          []
    
    - update : u                     (bool)          []
    
    - write_float2_x : wfx           (bool)          []
    
    - write_float2_y : wfy           (bool)          []
    
    
    Derived from mel command `maya.cmds.shaderfx`
    """
    pass
def RefineSelectedComponents(*args, **kwargs): pass
def HypershadeDuplicateShadingNetwork(*args, **kwargs): pass
def ToggleHoleFaces(*args, **kwargs): pass
def reloadImage(*args, **kwargs):
    """
    This command reloads an xpm image from disk. This can be used when the file has
    changed on disk and needs to be reloaded. The first string argument is the file
    name of the .xpm file. The second string argument is the name of a control using
    the specified pixmap.
    
    
    Derived from mel command `maya.cmds.reloadImage`
    """
    pass
def ShowMeshSculptToolOptions(*args, **kwargs): pass
def GhostObject(*args, **kwargs): pass
def TransformPolygonComponentOptions(*args, **kwargs): pass
def dR_decreaseManipSize(*args, **kwargs): pass
def setDynamicsInitialState(*args, **kwargs):
    """
    Flags:
    - clearState : cs                (bool)          []
    
    - name : n                       (unicode)       []
    
    - setState : ss                  (bool)          []
    
    
    Derived from mel command `maya.cmds.setDynamicsInitialState`
    """
    pass
def expandedSelection(*args, **kwargs):
    """
    Examines the current selection list and returns that list, expanded to meet
    certain criteria. See the command flags for the exact criteria that will be
    used.
    
    Flags:
    - depth : d                      (int)           [create]
        Number of steps away from current selection to expand to. A value of 0 will not
        expand the selection at all.
    
    - expansionType : et             (unicode)       [create]
        The type of graph along which to expand the selection. Legal values are:DG : Use
        the normal DG connectionsEG : Use the evaluation graph connectionsSG : Use the
        scheduling graph connections within the evaluation graphIf the actual selected
        node is not included in the graph being expanded on, e.g. there is no evaluation
        node when using the EGtype, then the selected node will not appear in the
        output. If this flag is not specified then the type defaults to DG.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.expandedSelection`
    """
    pass
def XgConvertToInteractiveGroom(*args, **kwargs): pass
def AddBifrostEmissionRegion(*args, **kwargs): pass
def ScaleToolOptions(*args, **kwargs): pass
def meshReorder(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.meshReorder`
    """
    pass
def AnimationTurntable(*args, **kwargs): pass
def FBXImportProtectDrivenKeys(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportProtectDrivenKeys`
    """
    pass
def SelectEdgeLoop(*args, **kwargs): pass
def xgmPoints(*args, **kwargs):
    """
    Flags:
    - addPoint : ap                  (int, float, float, unicode) []
    
    - clearPoints : cp               (bool)          []
    
    - generatePoints : gp            (float, unicode) []
    
    - guidePoints : bp               (bool)          []
    
    - loadPoints : lp                (unicode)       []
    
    - module : fx                    (unicode)       []
    
    - removePoints : rp              (int, float, float, unicode, float) []
    
    - savePoints : sp                (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmPoints`
    """
    pass
def dR_showAbout(*args, **kwargs): pass
def FBXExportIncludeChildren(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportIncludeChildren`
    """
    pass
def NodeEditorGraphUpDownstream(*args, **kwargs): pass
def nConstraintComponentOptions(*args, **kwargs): pass
def dbcount(*args, **kwargs):
    """
    The dbcountcommand is used to print and manage a list of statistics collected
    for counting operations.  These statistics are displayed as a list of hits on a
    particular location in code, with added reference information for
    pointers/strings/whatever. If -reset is not specified then statistics are
    printed.
    
    Flags:
    - enabled : e                    (bool)          [create]
        Set the enabled state of the counters ('on' to enable, 'off' to disable).
        Returns the list of all counters affected.
    
    - file : f                       (unicode)       [create]
        Destination file of the enabled count objects.  Use the special names stdoutand
        stderrto redirect to your command window.  As well, the special name msdevis
        available on NT to direct your output to the debug tab in the output window of
        Developer Studio.
    
    - keyword : k                    (unicode)       [create]
        Print only the counters whose name matches this keyword (default is all).
    
    - list : l                       (bool)          [create]
        List all available counters and their current enabled status. (The only thing
        you can do when counters are disabled.)
    
    - maxdepth : md                  (int)           [create]
        Maximum number of levels down to traverse and report. 0 is the default and it
        means continue recursing as many times as are requested.
    
    - quick : q                      (bool)          [create]
        Display only a summary for each counter type instead of the full details.
    
    - reset : r                      (bool)          [create]
        Reset all counters back to 0 and remove all but the top level counters. Returns
        the list of all counters affected.
    
    - spreadsheet : s                (bool)          [create]
        Display in spreadsheet format instead of the usual nested braces. This will
        include a header row that contains 'Count Level1 Level2 Level3...', making the
        data suitable for opening directly in a spreadsheet table.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dbcount`
    """
    pass
def SetFullBodyIKKeysBodyPart(*args, **kwargs): pass
def notifyDecorator(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.notifyDecorator`
    """
    pass
def dR_viewFront(*args, **kwargs): pass
def ProfilerToolShowAll(*args, **kwargs): pass
def HypershadePinSelected(*args, **kwargs): pass
def xgmLengthBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmLengthBrushToolCmd`
    """
    pass
def ToggleVisibilityAndKeepSelectionOptions(*args, **kwargs): pass
def dR_bevelPress(*args, **kwargs): pass
def AssignMashBulletSolver(*args, **kwargs): pass
def ColorPreferencesWindow(*args, **kwargs): pass
def UVContourStretchProjection(*args, **kwargs): pass
def dR_loadRecentFile4(*args, **kwargs): pass
def CopyVertexWeights(*args, **kwargs): pass
def xgmRebuildSplineDescription(*args, **kwargs):
    """
    Flags:
    - cvCount : cv                   (int)           []
    
    - cvMode : m                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmRebuildSplineDescription`
    """
    pass
def MakePondMotorBoats(*args, **kwargs): pass
def ReversePolygonNormals(*args, **kwargs): pass
def SelectAllNParticles(*args, **kwargs): pass
def subdTransferUVsToCache(*args, **kwargs):
    """
    The subdivision surface finer level uvs will get copied to the polygonToSubd
    node sent in as argument. The command takes a single subdivision surface and a
    single polygonToSubd node as input. Additional inputs will be ignored. Please
    note that this command is an internal command and is to be used with care,
    directly by the user
    
    
    Derived from mel command `maya.cmds.subdTransferUVsToCache`
    """
    pass
def launch(*args, **kwargs):
    """
    Launch the appropriate application to open the document, web page or directory
    specified.
    
    Flags:
    - directory : dir                (unicode)       [create]
        A directory.
    
    - movie : mov                    (unicode)       [create]
        A movie file. The only acceptable movie file formats are MPEG, Quicktime, and
        Windows Media file. The file's name must end with .mpg, .mpeg, .mp4, .wmv, .mov,
        or .qt.
    
    - pdfFile : pdf                  (unicode)       [create]
        A PDF (Portable Document Format) document. The file's name must end with .pdf.
    
    - webPage : web                  (unicode)       [create]
        A web page.                  Flag can have multiple arguments, passed either as
        a tuple or a list.
    
    
    Derived from mel command `maya.cmds.launch`
    """
    pass
def DuplicateFace(*args, **kwargs): pass
def CreatePolygonPlaneOptions(*args, **kwargs): pass
def SelectObjectsIlluminatedByLight(*args, **kwargs): pass
def currentTimeCtx(*args, **kwargs):
    """
    This command creates a context which may be used to change current time within
    the graph editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.currentTimeCtx`
    """
    pass
def textManip(*args, **kwargs):
    """
    Shows/hides the text manip.              In query mode, return type is based on
    queried flag.
    
    Flags:
    - visible : v                    (bool)          [create,query]
        Shows/hides the text manip.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.textManip`
    """
    pass
def PolygonCollapse(*args, **kwargs): pass
def HypershadeSelectTextures(*args, **kwargs): pass
def ActivateViewport20(*args, **kwargs): pass
def NormalizeUVsOptions(*args, **kwargs): pass
def floatSlider2(*args, **kwargs): pass
def sbs_AffectedByAllInputs(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_AffectedByAllInputs`
    """
    pass
def clearNClothStartState(*args, **kwargs): pass
def CreatePolygonPlatonic(*args, **kwargs): pass
def GraphEditorDisableCurveSelection(*args, **kwargs): pass
def TransplantHair(*args, **kwargs): pass
def DeleteAllWires(*args, **kwargs): pass
def CreateNURBSSphere(*args, **kwargs): pass
def RepeatLast(*args, **kwargs): pass
def dR_coordSpaceWorld(*args, **kwargs): pass
def HardwareRenderBuffer(*args, **kwargs): pass
def PaintTensionWeightsToolOptions(*args, **kwargs): pass
def QualityDisplayMarkingMenuPopDown(*args, **kwargs): pass
def InteractiveBindSkinOptions(*args, **kwargs): pass
def buttonManip(*args, **kwargs):
    """
    This creates a button manipulator. This manipulator has a position in space and
    a triad manip for positioning. When you click on the top part of the manip, the
    command defined by the first argument is executed. The command is associated
    with the manipulator when it is created. If a dag object is included on the
    command line, the manip will be parented to the object. This means moving the
    object will move the manip. You can move the manip independently of the object
    using its triad. Note that a buttonManip may not be parented to more than one
    object.
    
    Flags:
    - icon : i                       (unicode)       [create]
        Specify an icon to represent the manipulator.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.buttonManip`
    """
    pass
def MediumQualityDisplay(*args, **kwargs): pass
def shapePanel(*args, **kwargs): pass
def sysFile(*args, **kwargs):
    """
    This command provides a system independent way to create a directory or to
    rename or delete a file.
    
    Flags:
    - copy : cp                      (unicode)       [create]
        Copy the file to the name given by the newFileName paramter.
    
    - delete : delete                (bool)          [create]
        Deletes the file.
    
    - makeDir : md                   (bool)          [create]
        Create the directory path given in the parameter. This will create the entire
        path if more than one directory needs to be created.
    
    - move : mov                     (unicode)       [create]
        Behaves identically to the -rename flag and remains for compatibility with old
        scripts
    
    - removeEmptyDir : red           (bool)          [create]
        Delete the directory path given in the parameter if the directory is empty. The
        command will not delete a directory which is not empty.
    
    - rename : ren                   (unicode)       [create]
        Rename the file to the name given by the newFileName parameter.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sysFile`
    """
    pass
def NextFrame(*args, **kwargs): pass
def Birail3(*args, **kwargs): pass
def HypershadeDisplayAsMediumSwatches(*args, **kwargs): pass
def ToggleFocalLength(*args, **kwargs): pass
def xgmCopyDescription(*args, **kwargs):
    """
    Flags:
    - descriptionOnly : deo          (bool)          []
    
    - name : n                       (unicode)       []
    
    - palette : p                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmCopyDescription`
    """
    pass
def ToggleAnimationDetails(*args, **kwargs): pass
def arnoldListAttributes(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.arnoldListAttributes`
    """
    pass
def Create3DContainerEmitterOptions(*args, **kwargs): pass
def cmdArnoldRender(*args, **kwargs): pass
def dynExpression(*args, **kwargs):
    """
    This command describes an expression that belongs to the specified particle
    shape.  The expression is a block of code of unlimited length with a C-like
    syntax that can perform conversions, mathematical operations, and logical
    decision making on any numeric attribute(s) or per-particle attribute(s) in the
    scene.  One expression can read and alter any number of these attributes.  Every
    particle shape in your scene has three expressions, one for the
    runtimeBeforeDynamics, one for the runtimeAfterDynamics and one for creation
    time.  The create expression gets executed for every particle in the object
    whose age is 0.0.  The runtime expression gets executed for each particle with
    an age greater then 0.0.  Unlike expressions created with the expressioncommand,
    particle expressions always exist and are a part of the owning particle object's
    shape.  They default to empty strings, but they are always there.  Because of
    this, there is no need to use the '-e' flag.  Every call to the dynExpression
    command is considered an edit by default.  Per-particle attributes are those
    attributes of a particle shape that have a potentially different value for each
    particle in the object.  Examples of these include positionand velocity. If this
    command is being sent by the command line or in a script, then the user should
    be sure to embed escaped newlines (\n), tabs (\t) for clarity when reading them
    in the expression editor.  Also, quotes in an expression must be escaped (\) so
    that they are not confused by the system as the end of your string.  When using
    the expression editor, these characters are escaped for you unless they are
    already within quotes. This type of expression is executed during the evaluation
    of the dynamics.  If an output of the expression is requested before that, then
    the dynamics will be force to compute at that time.  If dynamics is disabled,
    then these expressions will have no effect.
    
    Flags:
    - creation : c                   (bool)          [create,query,edit]
        Tells the command that the string passed will be a creation expression for the
        particle shape.  This means that this expression will be executed when a
        particle is emitted or at the beginning of the scene for existing particles.
    
    - name : n                       (unicode)       [create,query,edit]
        Name to use for this command
    
    - runtime : r                    (bool)          [create,query,edit]
        Tells the command that the string passed will be a runtime expression for the
        particle shape.  This expression will be executed at the beginning of runtime.
    
    - runtimeAfterDynamics : rad     (bool)          [create,query,edit]
        Tells the command that the string passed will be a runtime expression for the
        particle shape.  This expression will be executed after dynamics whenever a
        particle's age is greater then zero (0).
    
    - runtimeBeforeDynamics : rbd    (bool)          [create,query,edit]
        Tells the command that the string passed will be a runtime expression for the
        particle shape.  This expression will be executed before dynamics whenever a
        particle's age is greater then zero (0).
    
    - string : s                     (unicode)       [create,edit]
        Set the expression string. This is queriable with the -q/query flag and the
        -rbd/runtimeBeforeDynamics, the -rab/runtimeAfterDynamics or the -c/creation
        flag.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.dynExpression`
    """
    pass
def AutoPaintMarkingMenu(*args, **kwargs): pass
def ScaleCurvature(*args, **kwargs): pass
def colorManagementConvert(*args, **kwargs):
    """
    This command can be used to convert rendering (a.k.a. working) space color
    values to display space color values. This is useful if you create custom UI
    with colors painted to screen, where you need to handle color management
    yourself. The current view transform set in the Color Management user
    preferences will be used.
    
    Flags:
    - toDisplaySpace : tds           (float, float, float) [create]
        Converts the given RGB value to display space.                             Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorManagementConvert`
    """
    pass
def fluidVoxelInfo(*args, **kwargs):
    """
    Provides basic information about the mapping of a fluid voxel grid into world-
    or object space of the fluid.  Use this command to determine the center point of
    a voxel, or to find the voxel containing a given point, among other things.
    
    Flags:
    - checkBounds : cb               (bool)          [create]
        If this flag is on, and the voxel index of a point that is out of bounds is
        requested, then we return nothing.
    
    - inBounds : ib                  (int, int, int) [create]
        Are the three ints representing the x, y, z indices of a voxel within the bounds
        of the fluid's voxel grid?  True if yes, false if not.  (For 2D fluids, pass in
        z=0 for the third argument.  See examples.)
    
    - objectSpace : os               (bool)          [create]
        Whether the queried value should be returned in object space (TRUE), or world
        space (FALSE, the default).
    
    - radius : r                     (float)         [create]
        Modifier for the -voxel flag.  Returns a list of index triples identifying
        voxels that fall within the given radius of the point specified by the -voxel
        flag.
    
    - voxel : v                      (float, float, float) [create]
        Returns array of three ints representing the x, y, z indices of the voxel within
        which the given point position is contained. If the checkBounds flag is on, and
        the point is out of bounds, we return nothing. Otherwise, even if the point is
        out of bounds, index values are returned. When combined with the -radius flag,
        returns an array of index triples representing a list of voxels within a given
        radius of the given point position.
    
    - voxelCenter : vc               (bool)          [create]
        The center position of the specified voxels.  Returns an array of floats (three
        for each of the indices in the query).  (Valid only with the -xIndex, -yIndex,
        and -zIndex flags.)
    
    - xIndex : xi                    (int)           [create]
        Only return values for cells with this X index
    
    - yIndex : yi                    (int)           [create]
        Only return values for cells with this Y index
    
    - zIndex : zi                    (int)           [create]
        Only return values for cells with this Z index                             Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.fluidVoxelInfo`
    """
    pass
def SubdivSmoothnessMedium(*args, **kwargs): pass
def shadingConnection(*args, **kwargs):
    """
    Sets the connection state of a connection between nodes that are used in
    shading. Specify the destination attribute of the connection. In query mode,
    return type is based on queried flag.
    
    Flags:
    - connectionState : cs           (bool)          [create,query,edit]
        Specifies the state of the connection. On/True/1 means the connection is still
        active. Off/False/0 means the connection is inactive.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shadingConnection`
    """
    pass
def dgdirty(*args, **kwargs):
    """
    The dgdirtycommand is used to force a dependency graph dirty message on a node
    or plug.  Used for debugging to find evaluation problems.  If no nodes are
    specified then the current selection list is used. If the listflag is used it
    will return the list of things currently marked as dirty (or clean if the
    cleanflag was also used). The returned values will be the names of plugs either
    clean/dirty themselves, at both ends of a clean/dirty connection, or
    representing the location of clean/dirty data on the node. Be careful using this
    option in conjunction with the allflag, the list could be huge.
    
    Flags:
    - allPlugs : a                   (bool)          [create,query]
        Ignore the selected or specified objects and dirty (or clean) all plugs.
    
    - clean : c                      (bool)          [create,query]
        If this flag is set then the attributes are cleaned.  Otherwise they are set to
        dirty.
    
    - implicit : i                   (bool)          [create,query]
        If this flag is set then allow the implicit or default nodes to be processed as
        well. Otherwise they will be skipped for efficiency.
    
    - list : l                       (unicode)       [create,query]
        When this flag is specified then instead of sending out dirty/clean messages the
        list of currently dirty/clean objects will be returned. The allPlugsand
        cleanflags are respected to narrow guide the values to be returned. The value of
        the flag tells what will be reported. dataor d= show plugs that have dirty/clean
        dataplugor p= show plugs that have dirty/clean statesconnectionor c= show plugs
        with connections that have dirty/clean statesQuery this flag to find all legal
        values of the flag. Query this flag with its value already set to get a
        description of what that value means. Note that pand cmodes are restricted to
        plugs that have connections or non-standard state information. Other attributes
        will not have state information to check, though they will have data. In the
        case of array attributes only the children that have values currently set will
        be considered. No attempt will be made to evaluate them in order to update the
        available child lists. e.g. if you have a DAG with transform T1 and shape S1 the
        instanced attribute S1.wm[0] will be reported. If in a script you create a
        second instance T2-S1 and immediately list the plugs again before evaluation you
        will still only see S1.wm[0]. The new S1.wm[1] won't be reported until it is
        created through an evaluation, usually caused by refresh, a specific getAttr
        command, or an editor update. Note that the list is only for selected nodes.
        Unlike when dirty messages are sent this does not travel downstream.
    
    - propagation : p                (bool)          [create,query]
        If this flag is set then the ability of dirty messages to flow through the graph
        is left enabled.
    
    - showTiming : st                (bool)          [create,query]
        If this flag is used then show how long the dirty messages took to propagate.
    
    - verbose : v                    (bool)          [create,query]
        Prints out all of the plugs being set dirty on stdout.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgdirty`
    """
    pass
def PolyAssignSubdivHoleOptions(*args, **kwargs): pass
def GravityOptions(*args, **kwargs): pass
def createNurbsSphereCtx(*args, **kwargs):
    """
    Flags:
    - attachToHeightRatio : ahr      (bool)          []
    
    - attachToSections : attachToSections (bool)          []
    
    - attachToSpans : asp            (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - degree : d                     (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - endSweep : esw                 (float)         []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sections : sc                  (int)           []
    
    - spans : sp                     (int)           []
    
    - startSweep : ssw               (float)         []
    
    - tolerance : tol                (float)         []
    
    - toleranceType : tlt            (int)           []
    
    - useTolerance : ut              (bool)          []
    
    
    Derived from mel command `maya.cmds.createNurbsSphereCtx`
    """
    pass
def roundCRCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - append : a                     (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - currentEdge : ce               (bool)          []
    
    - currentEdgeRadius : cer        (bool)          []
    
    - exists : ex                    (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - radius : r                     (float)         []
    
    - radiusToUse : rtu              (float)         []
    
    - reset : rs                     (bool)          []
    
    - tolerance : tol                (float)         []
    
    - toolNode : tnq                 (bool)          []
    
    - useGlobalTolerance : ugt       (bool)          []
    
    
    Derived from mel command `maya.cmds.roundCRCtx`
    """
    pass
def TangentsSpline(*args, **kwargs): pass
def PaintCacheToolOptions(*args, **kwargs): pass
def AddMashBulletSolver(*args, **kwargs): pass
def ResetWireOptions(*args, **kwargs): pass
def stitchSurface(*args, **kwargs):
    """
    The stitchSurface command aligns two surfaces together to be G(0) and/or G(1)
    continuous by ajusting only the Control Vertices of the surfaces. The two
    surfaces can be stitched by specifying the two isoparm boundary edges that are
    to stitched together. The edge to which the two surfaces are stitched together
    is obtained by doing a weighted average of the two edges. The weights for the
    two edges is specified using the flags -wt0, -wt1 respectively.
    
    Flags:
    - bias : b                       (float)         [create,query,edit]
        Blend CVs in between input surface and result from stitch. A value of 0.0
        returns the input surface. Default:1.0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - cascade : c                    (bool)          [create]
        Cascade the created stitch node. (Only if the surface has a stitch history)
        Default is 'false'.
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - cvIthIndex : ci                (int)           [create,query,edit]
        The ith boundary CV index on the input surface. Default:-1
    
    - cvJthIndex : cj                (int)           [create,query,edit]
        The jth boundary CV index on the input surface. Default:-1
    
    - fixBoundary : fb               (bool)          [create,query,edit]
        Fix Boundary CVs while solving for any G1 constraints. Default:false
    
    - frozen : fzn                   (bool)          []
    
    - keepG0Continuity : kg0         (bool)          [create]
        Stitch together with positional continuity. Default is 'true'.
    
    - keepG1Continuity : kg1         (bool)          [create]
        Stitch together with tangent continuity. Default is 'false'.
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - numberOfSamples : ns           (int)           [create]
        The number of samples on the edge. Default is 20.
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - parameterU : u                 (float)         [create,query,edit]
        The U parameter value on surface for a point constraint. Default:-10000
    
    - parameterV : v                 (float)         [create,query,edit]
        The V parameter value on surface for a point constraint. Default:-10000
    
    - positionalContinuity : pc      (bool)          [create,query,edit]
        Toggle on (off) G0 continuity at edge corresponding to multi index. Default:true
    
    - replaceOriginal : rpo          (bool)          [create]
        Create in place(i.e., replace).
    
    - stepCount : sc                 (int)           [create,query,edit]
        Step count for the number of discretizations. Default:20
    
    - tangentialContinuity : tc      (bool)          [create,query,edit]
        Toggle on (off) G1 continuity across edge corresponding to multi index.
        Default:false
    
    - togglePointNormals : tpn       (bool)          [create,query,edit]
        Toggle on (off) normal point constraints on the surface. Default:false
    
    - togglePointPosition : tpp      (bool)          [create,query,edit]
        Toggle on (off) position point constraints on the surface. Default:true
    
    - toggleTolerance : tt           (bool)          [create,query,edit]
        Toggle on (off) so as to use Tolerance or specified steps for discretization.
        Default:false
    
    - tolerance : tol                (float)         [create,query,edit]
        Tolerance to use while discretizing the edge. Default:0.1
        Common flags
    
    - weight0 : wt0                  (float)         [create]
        The weighting factor for the first edge. Default is 0.5.
    
    - weight1 : wt1                  (float)         [create]
        The weighting factor for the second edge. Default is 0.5.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.stitchSurface`
    """
    pass
def ToggleVertexNormalDisplay(*args, **kwargs): pass
def DecreaseGammaCoarse(*args, **kwargs): pass
def u3dTopoValid(*args, **kwargs):
    """
    Flags:
    - type : t                       (bool)          []
    
    
    Derived from mel command `maya.cmds.u3dTopoValid`
    """
    pass
def CreateNURBSCircleOptions(*args, **kwargs): pass
def moduleInfo(*args, **kwargs):
    """
    Returns information on modules found by Maya.
    
    Flags:
    - definition : d                 (bool)          [create]
        Returns module definition file name for the module specified by the -moduleName
        parameter.
    
    - listModules : lm               (bool)          [create]
        Returns an array containing the names of all currently loaded modules.
    
    - moduleName : mn                (unicode)       [create]
        The name of the module whose information you want to retrieve. Has to be used
        with either -definition / -path / -version flags.
    
    - path : p                       (bool)          [create]
        Returns the module path for the module specified by the -moduleName parameter.
    
    - version : v                    (bool)          [create]
        Returns the module version for the module specified by the -moduleName
        parameter.                                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.moduleInfo`
    """
    pass
def TimeEditorFrameCenterView(*args, **kwargs): pass
def ToggleLayerBar(*args, **kwargs): pass
def attributeMenu(*args, **kwargs): pass
def dR_viewLightsTGL(*args, **kwargs): pass
def DisplayShaded(*args, **kwargs): pass
def FBIKLabelFoot(*args, **kwargs): pass
def ToggleContainerCentric(*args, **kwargs): pass
def OpenTimeSliderPrefs(*args, **kwargs): pass
def ShowModelingUI(*args, **kwargs): pass
def NodeEditorCreateTab(*args, **kwargs): pass
def BezierSetAnchorEven(*args, **kwargs): pass
def makeLive(*args, **kwargs):
    """
    This commmand makes an object live.  A live object defines the surface on which
    to create objects and to move object relative to.  Only construction planes,
    nurbs surfaces and polygon meshes can be made live. The makeLive command expects
    one of these types of objects as an explicit argument.  If no argument is
    explicitly specified, then there are a number of default behaviours based on
    what is currently active.  The command will fail if there is more than one
    object active or the active object is not one of the valid types of objects.  If
    there is nothing active, the current live object will become dormant. Otherwise,
    the active object will become the live object.
    
    Flags:
    - none : n                       (bool)          [create]
        If the -n/none flag, the live object will become dormant. Use of this flag
        causes any arguments to be ignored.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.makeLive`
    """
    pass
def cmdaiSetTransform(*args, **kwargs): pass
def SmoothPolygonOptions(*args, **kwargs): pass
def CreateSetOptions(*args, **kwargs): pass
def WedgePolygon(*args, **kwargs): pass
def SurfaceBooleanUnionToolOptions(*args, **kwargs): pass
def PaintSoftWeights(*args, **kwargs): pass
def AlembicImportOptions(*args, **kwargs): pass
def renderInfo(*args, **kwargs):
    """
    The renderInfo commands sets geometric properties of surfaces of the selected
    object. In query mode, return type is based on queried flag.
    
    Flags:
    - castShadows : cs               (bool)          [create]
        Determines if object casts shadow or not.
    
    - chordHeight : ch               (float)         [create]
        Tessellation subdivision criteria.
    
    - chordHeightRatio : chr         (float)         [create]
        Tessellation subdivision criteria.
    
    - doubleSided : ds               (bool)          [create]
        Determines if object double or single sided.
    
    - edgeSwap : es                  (bool)          [create]
        Tessellation subdivision criteria.
    
    - minScreen : ms                 (float)         [create]
        Tessellation subdivision criteria.
    
    - name : n                       (unicode)       [create]
        Namespace to use.
    
    - opposite : o                   (bool)          [create]
        Determines if the normals of the object is to be reversed.
    
    - smoothShading : ss             (bool)          [create]
        Determines if smooth shaded, or flat shaded - applies only to polysets.
    
    - unum : un                      (int)           [create]
        Tessellation subdivision criteria.
    
    - useChordHeight : uch           (bool)          [create]
        Tessellation subdivision criteria.
    
    - useChordHeightRatio : ucr      (bool)          [create]
        Tessellation subdivision criteria.
    
    - useDefaultLights : udl         (bool)          [create]
        Obsolete flag.
    
    - useMinScreen : ums             (bool)          [create]
        Tessellation subdivision criteria.
    
    - utype : ut                     (int)           [create]
        Tessellation subdivision criteria.
    
    - vnum : vn                      (int)           [create]
        Tessellation subdivision criteria.
    
    - vtype : vt                     (int)           [create]
        Tessellation subdivision criteria.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderInfo`
    """
    pass
def nurbsPlane(*args, **kwargs): pass
def lightlink(*args, **kwargs):
    """
    This command is used to make, break and query light linking relationships
    between lights/sets of lights and objects/sets of objects. If no make, break or
    query flag is specified and both lights and objects flags are present, the make
    flag is assumed to be specified. If no make, break or query flag is specified
    and only one of the lights and objects flags is present, the query flag is
    assumed to be specified. You can specify as many lights and objects as you like,
    using the multiuse -light and -object flags. A better way to perform light
    linking is to make sets of lights and sets of geometry. If you create a set
    which contains lights (such as the ceiling lights in your scene) and a set which
    contains geometry (such as the geometry of your character), you can then link
    the setcontaining lights with the setcontaining geometry in order to get those
    lights to illuminate those pieces of geometry. In addition, you can add and
    remove lights and geometry from their respective sets without having to make and
    break light links.
    
    Flags:
    - b : b                          (bool)          [create]
        The presence of this flag on the command indicates that the command is being
        invoked to break links between lights and renderable objects.
    
    - hierarchy : h                  (bool)          [create]
        When querying, specifies whether the result should include the hierarchy of
        transforms above shapes linked to the queried light/object. The transforms
        considered part of the hierarchy do not include the transform immediately above
        the shape. Default is true.
    
    - light : l                      (PyNode)        [create]
        The argument to the light flag specifies a node to be used by the command in
        performing the action as if the node is a light. This is a multiuse flag -- many
        light nodes can be specified in a single invocation of the lightlink command.
    
    - make : m                       (bool)          [create]
        The presence of this flag on the command indicates that the command is being
        invoked to make links between lights and renderable objects.
    
    - object : o                     (PyNode)        [create]
        The argument to the object flag specifies a node to be used by the command in
        performing the action as if the node is an object. This is a multiuse flag --
        many object nodes can be specified in a single invocation of the lightlink
        command.
    
    - sets : set                     (bool)          [create]
        When querying, specifies whether the result should include sets linked to the
        queried light/object. Default is true.
    
    - shadow : shd                   (bool)          [create]
        Specify that shadows are to be linked.
    
    - shapes : shp                   (bool)          [create]
        When querying, specifies whether the result should include shapes linked to the
        queried light/object. Default is true.
    
    - transforms : t                 (bool)          [create]
        When querying, specifies whether the result should include transforms
        immediately above shapes linked to the queried light/object. Default is true.
    
    - useActiveLights : ual          (bool)          [create]
        Specify that active lights are to be used.
    
    - useActiveObjects : uao         (bool)          [create]
        Specify that active objects are to be used.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.lightlink`
    """
    pass
def FlipTubeDirection(*args, **kwargs): pass
def scaleComponents(*args, **kwargs):
    """
    This is a limited version of the scale command.  First, it only works on
    selected components. You provide a pivot in world space, and you can provide a
    rotation.  This rotation affects the scaling, so that rather than scaling in X,
    Y, Z, this is scaling in X, Y, and Z after they have been rotated by the given
    rotation. This allows selected components to be scaled in any arbitrary space,
    not just object or world space as the regular scale allows. Scale values are
    always relative, not absolute.
    
    Flags:
    - pivot : p                      (float, float, float) [create]
        The pivot position in world space (default is origin)
    
    - rotation : ro                  (float, float, float) [create]
        The rotational offset for the scaling (default is none)                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scaleComponents`
    """
    pass
def xgmCache(*args, **kwargs):
    """
    Flags:
    - clearPtexCache : cpt           (bool)          []
    
    - ptexCacheSize : ptx            (int)           []
    
    - xpdCacheSize : xpd             (int)           []
    
    
    Derived from mel command `maya.cmds.xgmCache`
    """
    pass
def InTangentFlat(*args, **kwargs): pass
def bindSkin(*args, **kwargs):
    """
    This command binds the currently selected objects to the currently selected
    skeletons.  Shapes which can be bound are: meshes, nurbs curves, nurbs surfaces,
    lattices, subdivision surfaces, and API shapes. Multiple shapes and multiple
    skeletons can be bound at once by selecting them or specifying them on the
    command line. Selection order is not important.The skin is bound using the so-
    called rigidbind, in which the components are rigidly attached to the closest
    bone in the skeleton. Flexors can later be added to the skeleton to smooth out
    the skinning around joints.The skin(s) can be bound either to the entire
    skeleton hierarchy of the selected joint(s), or to only the selected joints. The
    entire hierarchy is the default. The -tsb/-toSelectedBones flag allows binding
    to only the selected bones.This command can also be used to detach the skin from
    the skeleton. Detaching the skin is useful in a variety of situations, such as:
    inserting additional bones, deleting bones, changing the bind position of the
    skeleton or skin, or simply getting rid of the skinning nodes altogether. The
    options to use when detaching the skin depend on how much of the skinning info
    you want to get rid of. Namely: (1) -delete or -unbind: remove all skinning
    nodes, (2) -unbindKeepHistory: remove the skinning sets, but keep the weights,
    (3) -disable: disable the skinning but keep the skinning sets and the weights.
    
    Flags:
    - byClosestPoint : bcp           (bool)          [create]
        bind each point in the object to the segment closest to the point. The
        byClosestPoint and byPartition flags are mutually exclusive.  The byClosestPoint
        flag is the default.
    
    - byPartition : bp               (bool)          [create]
        bind each group in the partition to the segment closest to the group's centroid.
        A partition must be specified with the -p/-partition flag
    
    - colorJoints : cj               (bool)          [create]
        In bind mode, this flag assigns colors to the joints based on the colors
        assigned to the joint's skin set. In delete and unlock mode, this flag removes
        the colors from joints that are no longer bound as skin. In disable and
        unbindKeepHistory mode, this flag does nothing.
    
    - delete : d                     (bool)          [create]
        Detach the skin on the selected skeletons and remove all bind- related
        construction history.
    
    - doNotDescend : dnd             (bool)          [create]
        Do not descend to shapes that are parented below the selected object(s). Bind
        only the selected objects.
    
    - enable : en                    (bool)          [create]
        Enable or disable a bind that has been disabled on the selected skeletons. To
        enable the bind on selected bones only, select the bones and use the -tsb flag
        with the -en flag. This flag is used when you want to temporarily disable the
        bind without losing the set information or the weight information of the
        skinning, for example if you want to modify the bindPose.
    
    - name : n                       (unicode)       [create]
        This flag is obsolete.
    
    - partition : p                  (unicode)       [create]
        Specify a partition to bind by. This is only valid when used with the
        -bp/-byPartition flag.
    
    - toAll : ta                     (bool)          [create]
        objects will be bound to the entire selected skeletons. Even bones with zero
        influence will be bound, whereas the toSkeleton will only bind non-zero
        influences.
    
    - toSelectedBones : tsb          (bool)          [create]
        objects will be bound to the selected bones only.
    
    - toSkeleton : ts                (bool)          [create]
        objects will be bound to the selected skeletons. The toSkeleton, toAll and
        toSelectedBones flags are mutually exclusive. The toSkeleton flag is the
        default.
    
    - unbind : ub                    (bool)          [create]
        unbind the selected objects. They will no longer move with the skeleton. Any
        bindSkin history that is no longer used will be deleted.
    
    - unbindKeepHistory : ubk        (bool)          [create]
        unbind the selected objects. They will no longer move with the skeleton.
        However, existing weights on the skin will be kept for use the next time the
        skin is bound. This option is appropriate if you want to modify the skeleton
        without losing the weighting information on the skin.
    
    - unlock : ul                    (bool)          [create]
        unlock the selected objects. Since bindSkin will no longer give normal results
        if bound objects are moved away from the skeleton, bindSkin locks translate,
        rotate and scale. This command unlocks the selected objects translate, rotate
        and scale.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.bindSkin`
    """
    pass
def TimeEditorToggleSnapToClipRelease(*args, **kwargs): pass
def uiTemplate(*args, **kwargs): pass
def SelectSharedUVInstances(*args, **kwargs): pass
def PrelightPolygon(*args, **kwargs): pass
def ShowLights(*args, **kwargs): pass
def OutTangentLinear(*args, **kwargs): pass
def ModifyCurrentSet(*args, **kwargs): pass
def GraphEditorDisplayValues(*args, **kwargs): pass
def TimeEditorKeepTransitionsToggleRelease(*args, **kwargs): pass
def ShowStrokes(*args, **kwargs): pass
def XgBatchExportArchive(*args, **kwargs): pass
def ConvertSelectionToVertexPerimeter(*args, **kwargs): pass
def UVStraightenOptions(*args, **kwargs): pass
def keyTangent(*args, **kwargs): pass
def xgmFreezeBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmFreezeBrushToolCmd`
    """
    pass
def UpdatePSDTextureItem(*args, **kwargs): pass
def EnterConnectTool(*args, **kwargs): pass
def SetupAnimatedDisplacement(*args, **kwargs): pass
def SetMeshSmoothTool(*args, **kwargs): pass
def xgmGuideSculptToolCmd(*args, **kwargs):
    """
    Flags:
    - lockLength : l                 (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmGuideSculptToolCmd`
    """
    pass
def CloseFrontWindow(*args, **kwargs): pass
def MovePolygonComponentOptions(*args, **kwargs): pass
def addDynamic(*args, **kwargs): pass
def FBXExportAnimationOnly(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportAnimationOnly`
    """
    pass
def XgmSetDensityBrushToolOption(*args, **kwargs): pass
def RemoveWireOptions(*args, **kwargs): pass
def HideWrapInfluences(*args, **kwargs): pass
def canCreateManip(*args, **kwargs):
    """
    This command returns true if there can be a manipulator made for the specified
    selection, false otherwise.
    
    
    Derived from mel command `maya.cmds.canCreateManip`
    """
    pass
def ShowMeshRepeatToolOptions(*args, **kwargs): pass
def FBIKLabelShoulder(*args, **kwargs): pass
def DeleteAllJoints(*args, **kwargs): pass
def LayoutUVAlong(*args, **kwargs): pass
def gradientControl(*args, **kwargs): pass
def DisableAllCaches(*args, **kwargs): pass
def PruneSmallWeightsOptions(*args, **kwargs): pass
def ParticleToolOptions(*args, **kwargs): pass
def HypershadeHideAttributes(*args, **kwargs): pass
def NURBSSmoothnessFine(*args, **kwargs): pass
def polySewEdge(*args, **kwargs): pass
def GraphCut(*args, **kwargs): pass
def HypershadeCreatePSDFile(*args, **kwargs): pass
def AddFaceDivisionsOptions(*args, **kwargs): pass
def CreateVolumeLightOptions(*args, **kwargs): pass
def SetToFaceNormals(*args, **kwargs): pass
def dR_selConstraintAngle(*args, **kwargs): pass
def geometryCacheOpt(*args, **kwargs): pass
def GetOceanPondExample(*args, **kwargs): pass
def xgmGuideRender(*args, **kwargs):
    """
    Flags:
    - progress : pb                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmGuideRender`
    """
    pass
def displayString(*args, **kwargs):
    """
    Assign a string value to a string identifier. Allows you define a string in one
    location and then refer to it by its identifier in many other locations.
    Formatted strings are also supported (NOTE however, this functionality is now
    provided in a more general fashion by the format command, use of format is
    recommended). You may embed up to 3 special character sequences ^1s, ^2s, and
    ^3s to perform automatic string replacement. The embedded characters will be
    replaced with the extra command arguments. See example section for more detail.
    Note the extra command arguments do not need to be display string identifiers.
    In query mode, return type is based on queried flag.
    
    Flags:
    - delete : d                     (bool)          [create]
        This flag is used to remove an identifer string. The command will fail if the
        identifier does not exist.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified identifier exists.
    
    - keys : k                       (bool)          [create,query]
        List all displayString keys that match the identifier string. The identifier
        string may be a whole or partial key string. The command will return a list of
        all identifier keys that contain this identifier string as a substring.
    
    - replace : r                    (bool)          [create,query]
        Since a displayString command will fail if it tries to assign a new value to an
        existing identifer, this flag is required to allow updates to the value of an
        already-existing identifier.  If the identifier does not already exist, a new
        identifier is added as if the -replace flag were not present.
    
    - value : v                      (unicode)       [create,query]
        The display string\'s value. If you do not specify this flag when creating a
        display string then the value will be the same as the identifier.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayString`
    """
    pass
def AssignToonShaderShadedBrightness(*args, **kwargs): pass
def CreateReference(*args, **kwargs): pass
def XgmSetWidthBrushTool(*args, **kwargs): pass
def polyPoke(*args, **kwargs): pass
def ToggleModelEditorBars(*args, **kwargs): pass
def FBXProperties(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXProperties`
    """
    pass
def deleteGeometryCache(*args, **kwargs): pass
def UnitizeUVsOptions(*args, **kwargs): pass
def SetMBSAverage(*args, **kwargs): pass
def Loft(*args, **kwargs): pass
def nop(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.nop`
    """
    pass
def headsUpMessage(*args, **kwargs):
    """
    This command draws a message in the 3d view.  The message is automatically
    erased at the next screen refresh.
    
    Flags:
    - horizontalOffset : ho          (int)           [create]
        If this flag is specified, the message will appear the specified distance (in
        pixels) to the right of the point.  Otherwise, a default horizontal offset of 0
        pixels is used.
    
    - object : o                     (unicode)       [create]
        If an object is specified, then the message is drawn just above the object's
        bounding-box centre point. If this flag is not specified, or the object is not
        found, then the message is centred in the current view.
    
    - selection : s                  (bool)          [create]
        If this flag is specified, the message will be centred among the currently
        selected objects.  This flag does nothing if the object flag is also specified.
    
    - time : t                       (float)         [create]
        If this flag is specified, the message will be displayed for a minimum of the
        given amount of time (in seconds).  Otherwise a default time of 1.0 seconds is
        used.
    
    - uvTextureEditor : uve          (bool)          [create]
        Should the HUD be shown in the UV Texture Editor?
    
    - verticalOffset : vo            (int)           [create]
        If this flag is specified, the message will appear the specified distance (in
        pixels) above the point. Otherwise, a default vertical offset of 0 pixels is
        used.
    
    - viewport : vp                  (bool)          [create]
        Should the HUD be shown in the viewport?                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.headsUpMessage`
    """
    pass
def HypershadeSelectLights(*args, **kwargs): pass
def ThreePointArcToolOptions(*args, **kwargs): pass
def PerformCreateBifrostCache(*args, **kwargs): pass
def fluidDeleteCache(*args, **kwargs): pass
def geoUtils(*args, **kwargs):
    """
    Flags:
    - buildSubdCache : bsc           (bool)          []
    
    - closestObject : co             (bool)          []
    
    - closestPoint : cp              (float, float, float) []
    
    - deleteSubdCache : dsc          (bool)          []
    
    - evalVertex : ev                (bool)          []
    
    - faceIndex : fi                 (bool)          []
    
    - faceUVPoint : fuv              (int, float, float) []
    
    - facesToConsider : ftc          (int)           []
    
    - help : h                       (bool)          []
    
    - localSpace : ls                (bool)          []
    
    - meshSubdLevel : msl            (int)           []
    
    - normal : n                     (bool)          []
    
    - objectIndex : oi               (bool)          []
    
    - pointDirection : pd            (float, float, float, float, float, float) []
    
    - position : p                   (bool)          []
    
    - screenPoint : sp               (int, int)      []
    
    - subdLevel : sl                 (int)           []
    
    - useSubdCache : usc             (bool)          []
    
    - uvParameter : uv               (bool)          []
    
    - uvPoint : uvp                  (float, float)  []
    
    - vertexIndex : vi               (int)           []
    
    - worldSpace : ws                (bool)          []
    
    
    Derived from mel command `maya.cmds.geoUtils`
    """
    pass
def ikSolver(*args, **kwargs): pass
def ConvertHairSelectionToCurrentPositions(*args, **kwargs): pass
def CreateImagePlaneOptions(*args, **kwargs): pass
def PlaybackLoopOscillate(*args, **kwargs): pass
def intField(*args, **kwargs): pass
def DisableRigidBodies(*args, **kwargs): pass
def polyTestPop(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.polyTestPop`
    """
    pass
def EmitFromObject(*args, **kwargs): pass
def RemoveShrinkWrapInnerObject(*args, **kwargs): pass
def duplicateCurve(*args, **kwargs):
    """
    The duplicateCurve command takes a curve on a surface and and returns the 3D
    curve. The curve on a surface could be isoparam component, trimmed edge or curve
    on surface object.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - local : l                      (bool)          [create]
        Copy the transform of the surface and connect to the local space version
        instead.
    
    - maxValue : max                 (float)         [create,query,edit]
        Maximum parameter value for the curve segment.  Must be greater than or equal to
        the minValue attribute. If relative is true, then this attribute has maximum
        value of 1.0. Default:-1.0
    
    - mergeItems : mi                (bool)          [create]
        Merge component results where possible. For example, instead of returning a[1]
        and a[2], return a[1:2].
    
    - minValue : min                 (float)         [create,query,edit]
        Minimum parameter value for the curve segment If relative is true, then this
        attribute has minimum value of 0.0. Default:1.0
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          []
    
    - range : rn                     (bool)          [create]
        Force a curve range on complete input curve.
    
    - relative : r                   (bool)          [create,query,edit]
        True means use a relative parameter range, from 0.0 to 1.0. Otherwise, the
        parameter values are absolute values. Default:false                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.duplicateCurve`
    """
    pass
def HypershadeToggleCrosshairOnEdgeDragging(*args, **kwargs): pass
def NodeEditorPickWalkUp(*args, **kwargs): pass
def CreateStereoRig(*args, **kwargs): pass
def Vortex(*args, **kwargs): pass
def TogglePolyDisplayLimitToSelected(*args, **kwargs): pass
def editorTemplate(*args, **kwargs):
    """
    The editorTemplate command allows the user to specify the conceptual layout of
    an attribute editor and leave the details of exactly which UI elements are used
    in the final result to the automatic dialog generation mechanism.
    
    Flags:
    - addAdskAssetControls : aac     (bool)          [create]
        Adds controls for dynamic attributes of adskMaterial nodes and organizes them in
        a layout according to the XML ui description specified in the asset library.
    
    - addComponents : acp            (bool)          [create]
        This flag will add a frameLayout with a channel box which will display any
        selected components for the object.
    
    - addControl : ac                (bool)          [create]
        The first argument is the name of the attribute for which you wish to add a
        control. You can assume that when the editor is created from the template, an
        appropriate type of control will be used. The second string argument is
        optional, and can be used to specify a command (or script) to be executed when
        the attribute is changed.
    
    - addDynamicControl : adc        (bool)          [create]
        As -addControl with the exception that the attribute for which the control is to
        be created/attached is dynamic. [Note: -addControl will also work for dynamic
        attributes, but will not preserve their order in the attribute editor].
    
    - addExtraControls : aec         (bool)          [create]
        By default, if there are attributes of a node which you do not -addControl or
        -suppress, then controls will be created automatically and appended to the end
        of editor created from the template. This flag allows you to specify a
        particular place in the template for such controls to be automatically inserted.
        If dynamic attributes have not already been addressed with -addControl, they
        will also be placed here.  A frameLayout will automatically be generated for you
        when you use this flag.
    
    - addSeparator : addSeparator    (bool)          [create]
        Adds a separator to the template.
    
    - annotateFieldOnly : afo        (bool)          [create]
        This flag can only be used with the -annotation flag.  By default, for any
        Attribute Editor controlGroups created by the -addControl flag, the -annotation
        flag displays its annotation string when the mouse hovers over any control that
        is part (the label, the value field, etc.) of the group.  Use this flag to limit
        display of the annotation to only the value field of the controlGroup.  This
        flag is ignored if the controlGroup has no value field (e.g., checkBoxGrp)
    
    - annotation : ann               (unicode)       [create]
        This flag can only be used with the -addControl or the -addDynamicControl flags.
        The string will be used as an annotation on the controls created in the
        attribute editor.
    
    - beginLayout : bl               (unicode)       [create]
        Begins a layout in the template with the title specified by the string argument.
        Items between this flag and    its corresponding -endLayout flag will be
        contained within the layout. You can assume that when the editor is created from
        the template, an appropriate type of layout will be used. (frameLayout).
    
    - beginNoOptimize : bn           (bool)          [create]
        Specifies that the layout of items between this flag and its corresponding
        -endNoOptimize flag is not to be optimized to minimize space.
    
    - beginScrollLayout : bsl        (bool)          [create]
        Begins a scrollLayout.  Items between this flag and its corresponding
        -endScrollLayout flag will be contained within the layout.
    
    - callCustom : ccu               (bool)          [create]
        Specifies that at this point in the template when building the dialog, the
        procedure specified by the first argument is to be called to create some UI
        objects when a new node type is edited. The procedure specified by the second
        argument is to be called if an attribute editor already exists and another node
        of the same type is now to be edited. The replacing procedure should connect any
        controls created by the creating procedure to the equivalent attributes in the
        new node. A list of zero or more attributes specifies the attributes which the
        two procedures will involve. The procedures should have the signature: proc
        AEcustomNew(string attributeName1, string attributeName2) The number of
        attributes specified in the call should correspond to the number of attributes
        in the procedure signature.
    
    - collapse : cl                  (bool)          [create]
        This flag is only valid when used in conjunction with a -bl/beginLayout flag.
        It is used to specify the initial expand/collapse state of the layout.  A true
        value will cause the layout to be collapsed upon creation, while a false value
        will expand the layout.  The default is true (ie. collapsed).
    
    - debugMode : dbm                (bool)          [create]
        Set debugging mode for the template
    
    - dimControl : dc                (unicode, unicode, bool) [create]
        This flag is only useful AFTER a control has already been created (using the
        -addControl flag).  The first argument is the node name and the second is the
        attribute whose control you wish to affect.  The third argument is a boolean
        which specifies whether to dim (true) or undim (false) the associated control.
    
    - endLayout : el                 (bool)          [create]
        Ends a layout in the template started by -beginLayout.
    
    - endNoOptimize : en             (bool)          [create]
        Ends a set of non-optimized items.
    
    - endScrollLayout : esl          (bool)          [create]
        Ends a scrollLayout.
    
    - extraControlsLabel : ecl       (unicode)       [create]
        By default the label is Extra Attributes. Specify an alternate label or an empty
        string to hide the label. This flag must be used in conjuction with the
        -aec/addExtraControls flag.
    
    - interruptOptimize : io         (bool)          [create]
        Enforces a division between two sets of items whose layouts may be optimized.
    
    - label : l                      (unicode)       [create]
        This flag can only be used with the -addControl or the -addDynamicControl flags.
        And it must be specified FIRST. The string will override the name of the
        attribute that will be displayed in the attribute editor.
    
    - listExtraAttributes : lea      (unicode)       [create]
        List extra attributes.This flag is only useful AFTER a control has already been
        created (using the -addControl flag). The first argument is the node name.
    
    - preventOverride : po           (bool)          [create]
        If true, this flag disallows overriding the control's attribute via the
        control's right mouse button menu.
    
    - queryControl : qc              (unicode, unicode) [create]
        This flag is only useful AFTER a control has already been created (using the
        -addControl flag).  The first argument is the node name and the second is the
        attribute whose control you wish to query.  Note that in most cases, using this
        flag is identical to issuing a getAttr command, however, in the case of
        textFields (e.g. for message attributes), the text value currently being
        displayed will be returned, NOT the actual attribute value.
    
    - queryLabel : ql                (unicode, unicode) [create]
        This flag is only useful AFTER a control has already been created (using the
        -addControl flag).  The first argument is the node name and the second is the
        attribute whose control label you wish to query.  In most cases this flag
        returns the same value as the attribute's nice name, but when a -label flag was
        present on the -addControl command that created the control, -queryLabel will
        return that value instead
    
    - queryName : qn                 (unicode, unicode) [create]
        This flag is only useful AFTER a control has already been created (using the
        -addControl flag).  The first argument is the node name and the second is the
        attribute whose control name you wish to query.
    
    - removeControl : rc             (unicode, unicode) [create]
        This flag is obsolete and should no longer be used.
    
    - suppress : s                   (unicode)       [create]
        Prevent a control for the attribute specified by the string argument from
        appearing in the editor created from the template.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editorTemplate`
    """
    pass
def SnapToMeshCenterPress(*args, **kwargs): pass
def PaintJiggleWeightsToolOptions(*args, **kwargs): pass
def AddToCurrentSceneMotionBuilder(*args, **kwargs): pass
def getLastError(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.getLastError`
    """
    pass
def FBIKLabelBigToe(*args, **kwargs): pass
def connectDynamic(*args, **kwargs): pass
def polyColorDel(*args, **kwargs): pass
def polySelectConstraintMonitor(*args, **kwargs): pass
def RemoveWire(*args, **kwargs): pass
def texSmoothContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - pinBorder : pb                 (bool)          []
    
    - space : sp                     (int)           []
    
    
    Derived from mel command `maya.cmds.texSmoothContext`
    """
    pass
def TimeEditorCreateAudioClip(*args, **kwargs): pass
def CreatePlatonicSolid(*args, **kwargs): pass
def IKSplineHandleTool(*args, **kwargs): pass
def OrientJoint(*args, **kwargs): pass
def rampWidgetAttrless(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.rampWidgetAttrless`
    """
    pass
def LatticeUVTool(*args, **kwargs): pass
def SelectToolOptionsMarkingMenuPopDown(*args, **kwargs): pass
def CharacterAnimationEditor(*args, **kwargs): pass
def adskAssetLibrary(*args, **kwargs):
    """
    Flags:
    - unload : ul                    (bool)          []
    
    - unloadAll : ua                 (bool)          []
    
    
    Derived from mel command `maya.cmds.adskAssetLibrary`
    """
    pass
def BrushPresetBlendShape(*args, **kwargs): pass
def MinimizeApplication(*args, **kwargs): pass
def CreatePond(*args, **kwargs): pass
def AddPondDynamicBuoyOptions(*args, **kwargs): pass
def PolyMergeVerticesOptions(*args, **kwargs): pass
def ShowMeshGrabToolOptions(*args, **kwargs): pass
def HideBoundingBox(*args, **kwargs): pass
def ConvertPaintEffectsToPoly(*args, **kwargs): pass
def editMetadata(*args, **kwargs): pass
def flagTest(*args, **kwargs): pass
def CreateCameraFromView(*args, **kwargs): pass
def OpenDesktopAnalytics(*args, **kwargs): pass
def SplitUV(*args, **kwargs): pass
def SculptMeshUnfreezeAll(*args, **kwargs): pass
def EnableFluids(*args, **kwargs): pass
def SetMBSModulate2(*args, **kwargs): pass
def ExtendCurveOnSurface(*args, **kwargs): pass
def getProcArguments(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.getProcArguments`
    """
    pass
def nClothReplaceCacheOpt(*args, **kwargs): pass
def PolyMerge(*args, **kwargs): pass
def ChangeNormalSize(*args, **kwargs): pass
def renderer(*args, **kwargs): pass
def listNodesWithIncorrectNames(*args, **kwargs):
    """
    List all nodes with incorrect names in the Script Editor.
    
    
    Derived from mel command `maya.cmds.listNodesWithIncorrectNames`
    """
    pass
def disableIncorrectNameWarning(*args, **kwargs):
    """
    Disable the warning dialog which complains about incorrect node names when
    opening Maya files.
    
    
    Derived from mel command `maya.cmds.disableIncorrectNameWarning`
    """
    pass
def AddShellDynamics(*args, **kwargs): pass
def HideNURBSCurves(*args, **kwargs): pass
def dR_selectAll(*args, **kwargs): pass
def ambientLight(*args, **kwargs): pass
def NodeEditorCreateNodePopup(*args, **kwargs): pass
def CreateDirectionalLightOptions(*args, **kwargs): pass
def FBIKLabelHead(*args, **kwargs): pass
def dR_viewBottom(*args, **kwargs): pass
def artSetPaint(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.artSetPaint`
    """
    pass
def cacheFileCombine(*args, **kwargs):
    """
    Creates a cacheBlend node that can be used to combine, layer or blend multiple
    cacheFiles for a given object.
    
    Flags:
    - cacheIndex : ci                (bool)          [query]
        A query only flag that returns the index related to the cache specified with the
        connectCache flag.
    
    - channelName : cnm              (unicode)       [edit]
        Used in conjunction with the connectCache flag to indicate the channel(s) that
        should be connected.  If not specified, the first channel in the file is used.
    
    - connectCache : cc              (unicode)       [query,edit]
        An edit flag that specifies a cacheFile node that should be connected to the
        next available index on the specified cacheBlend node. As a query flag, it
        returns a string array containing the cacheFiles that feed into the specified
        cacheBlend node. In query mode, this flag can accept a value.
    
    - keepWeights : kw               (bool)          [edit]
        This is a flag for use in combination with the connectCache flag only. By
        default, the connectCache flag will set all weights other than the newly added
        cacheWeight to 0 so that the new cache gets complete control. This flag disables
        that behavior so that all existing blend weights are retained.
    
    - layerNode : ln                 (bool)          [query]
        A query flag that returns a string array of the existing cacheBlends on the
        selected object(s). Returns an empty string array if no cacheBlends are found.
    
    - nextAvailable : na             (bool)          [query]
        A query flag that returns the next available index on the selected cacheBlend
        node.
    
    - object : obj                   (unicode)       [query]
        This flag is used in combination with the objectIndex flag. It is used to
        specify the object whose index you wish to query.
    
    - objectIndex : oi               (int)           [query,edit]
        In edit mode, used in conjunction with the connectCache flag to indicate the
        objectIndex to be connected. In query mode, returns the index related to the
        object specified with the object flag.                                   Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cacheFileCombine`
    """
    pass
def arnoldPlugins(*args, **kwargs):
    """
    Flags:
    - getAttrData : gad              (unicode)       []
    
    - getBuildDate : gbd             (bool)          []
    
    - getBuildID : gbi               (bool)          []
    
    - getClmVersion : gcv            (bool)          []
    
    - getExtensionApiVersion : gev   (unicode)       []
    
    - listAOVNodeTypes : lnt         (bool)          []
    
    - listAOVShaders : las           (bool)          []
    
    - listAOVs : aov                 (bool)          []
    
    - listCustomShapes : lcs         (bool)          []
    
    - listLoadedExtensions : llx     (bool)          []
    
    - listOperators : lop            (bool)          []
    
    - listPlugins : lsp              (unicode)       []
    
    - listTranslators : lst          (unicode)       []
    
    - loadExtension : le             (unicode)       []
    
    - nodePlug : n                   (PyNode)        []
    
    - nodeType : nt                  (unicode)       []
    
    - setDefaultTranslator : sdt     (unicode, unicode) []
    
    - unloadExtension : ule          (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldPlugins`
    """
    pass
def DeleteUnknownNodes(*args, **kwargs): pass
def ShowTexturePlacements(*args, **kwargs): pass
def profilerTool(*args, **kwargs):
    """
    This script is intended to be used by the profilerPanel to interact with the
    profiler tool's view (draw region). It can be used to control some behaviors
    about the profiler Tool.               In query mode, return type is based on
    queried flag.
    
    Flags:
    - categoryView : cat             (bool)          [edit]
        Change view mode to category view
    
    - collapseSelectedEvents : cs    (bool)          [edit]
        Hide all sub-events of selected events so that only top-level events show
    
    - collapseSelectedEventsRepetition : csr (bool)          [edit]
        Hide all sub-events repetition of selected events based on their comment
    
    - cpuView : cpu                  (bool)          [edit]
        Change view mode to cpu view
    
    - destroy : dtr                  (bool)          [create]
        Destroy the profiler tool Internal flag. Should not be used by user.
    
    - eventTypes : et                (bool)          [query]
        Return JSON data containing the list of event types on currently existing
        events. If the value of the flag is true then show only event types for selected
        events, otherwise show them for all events.  The JSON return string will contain
        the event type information in the following format:      eventSummary: [
        { type: EVENT_TYPE_NAME,         , description: EVENT_TYPE_DESCRIPTION,
        , color: [ RED_AS_FLOAT, GREEN_AS_FLOAT, BLUE_AS_FLOAT ]         , category:
        CATEGORY_NAME         , count: EVENT_TYPE_COUNT         }     ] } typeand
        descriptionmay be omitted, indicating that the results correspond to anonymous
        events.
    
    - exists : ex                    (bool)          [query]
        Query if the profiler tool view exists. Profiler tool can only exist after
        profilerTool -makeis called.
    
    - expandSelectedEvents : es      (bool)          [edit]
        Show all sub-events of selected events
    
    - expandSelectedEventsRepetition : esr (bool)          [edit]
        Show all sub-events repetition of selected events based on their comment
    
    - findNext : fn                  (bool)          [query]
        This flag is used along with flag -searchEvent.
    
    - findPrevious : fp              (bool)          [query]
        This flag is used along with flag -searchEvent.
    
    - frameAll : fa                  (bool)          [edit]
        Frame on all events in the profilerToolView
    
    - frameSelected : fs             (bool)          [edit]
        Frame on all selected events in the profilerToolView
    
    - isolateSegment : isolateSegment (int)           [edit]
        Isolate a specified segment. A segment is a set of events that happened in one
        animation frame. You can use flag -segmentCount to query the number of segments
        in the event buffer. The segment index starts from 0. If the specified segment
        does not exist, an error will be thrown.
    
    - make : mk                      (bool)          [create]
        Make the profiler tool and parent it to the most recent layout created Internal
        flag. Should not be used by user.
    
    - matchWholeWord : mww           (bool)          [edit]
        Tells profiler tool if it should match whole word when searching event(s). The
        default value is false.
    
    - searchEvent : se               (unicode)       [query]
        Search event(s). You can set -matchWholeWord before you use -searchEvent. If
        -matchWholeWord has been set to true, the profiler tool will search event(s)
        whose name exactly matches with the string. If -matchWholeWord has been set to
        false, the profiler tool will search event(s) whose name contains the string. If
        -findNext is also used along with this flag, the profiler tool will find the
        first event next to the current selected event. If -findPrevious is also used
        along with this flag, the profiler tool will find the first event previous to
        the current selected event. If currently don't have a selected event or there
        are multiple selected events, the search will start at the first event in
        profiler buffer. If -findNext and -findPrevious are not used along with this
        flag, the profiler tool will find all events.
    
    - segmentCount : sc              (bool)          [query]
        Returns the number of segments in the event buffer.
    
    - showAllEvent : sa              (bool)          [edit]
        Show all events (if events were hidden by filtering) (true) or Hide all events
        (false)
    
    - showCriticalPath : scp         (bool)          [edit]
        Show critical path of selected frame
    
    - showSelectedEvents : ss        (bool)          [edit]
        Show only the selected events (true) or hide all selected events (false)
    
    - showSelectedEventsRepetition : ssr (bool)          [edit]
        Show only the selected events repetition based on their comment (true) or Hide
        all selected events repetition based on their comment (false)
    
    - threadView : thd               (bool)          [edit]
        Change view mode to thread view
    
    - unisolateSegment : uis         (bool)          [edit]
        Unisolate current isolated segment. If no segment is currently isolated, nothing
        will happen.                              Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.profilerTool`
    """
    pass
def RelaxUVShellOptions(*args, **kwargs): pass
def HypershadeExpandAsset(*args, **kwargs): pass
def ExportSelection(*args, **kwargs): pass
def removeJoint(*args, **kwargs):
    """
    This command will remove the selected joint or the joint given at the command
    line from the skeleton. The given (or selected) joint should not be the root
    joint of the skeleton, and not have skin attached. The command works on the
    given (or selected) joint. No options or flags are necessary.
    
    
    Derived from mel command `maya.cmds.removeJoint`
    """
    pass
def GoToDefaultView(*args, **kwargs): pass
def dR_defLightTGL(*args, **kwargs): pass
def XgExportArchive(*args, **kwargs): pass
def AddBifrostKillField(*args, **kwargs): pass
def xgmPlaceBrushContext(*args, **kwargs):
    """
    Flags:
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - clearAll : ca                  (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - initLength : l                 (float)         []
    
    - interpSmoothness : ism         (float)         []
    
    - interpolate : i                (bool)          []
    
    - interpolateFrom : interpolateFrom (int)           []
    
    - opMode : om                    (int)           []
    
    - radius : r                     (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmPlaceBrushContext`
    """
    pass
def TimeEditorCreatePoseClipOptions(*args, **kwargs): pass
def FBXPopSettings(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXPopSettings`
    """
    pass
def directionalLight(*args, **kwargs): pass
def texManipContext(*args, **kwargs):
    """
    Command used to register the texSelectCtx tool. Command used to register the
    texManipCtx tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texManipContext`
    """
    pass
def PolyMergeVertices(*args, **kwargs): pass
def objectTypeUI(*args, **kwargs):
    """
    This command returns the type of UI element such as button, sliders, etc.
    
    Flags:
    - isType : i                     (unicode)       [create]
        Returns true|false if the object is of the specified type.
    
    - listAll : la                   (bool)          [create]
        Returns a list of all known UI commands and their respective types. Each entry
        contains three strings which are the command name, ui type and class name. Note
        that the class name is internal and is subject to change.
    
    - superClasses : sc              (bool)          [create]
        Returns a list of the names of all super classes for the given object. Note that
        all class names are internal and are subject to change.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.objectTypeUI`
    """
    pass
def arnoldRenderToTexture(*args, **kwargs):
    """
    Flags:
    - aa_samples : aa_samples        (int)           []
    
    - all_udims : aud                (bool)          []
    
    - enable_aovs : aov              (bool)          []
    
    - extend_edges : ee              (bool)          []
    
    - filter : af                    (unicode)       []
    
    - filter_width : afw             (float)         []
    
    - folder : f                     (unicode)       []
    
    - frame_end : fen                (float)         []
    
    - frame_padding : pad            (int)           []
    
    - frame_start : fst              (float)         []
    
    - frame_step : sst               (float)         []
    
    - normal_offset : nof            (float)         []
    
    - resolution : r                 (int)           []
    
    - sequence : seq                 (bool)          []
    
    - shader : s                     (unicode)       []
    
    - u_scale : usc                  (float)         []
    
    - u_start : ust                  (float)         []
    
    - udims : ud                     (unicode)       []
    
    - uv_set : uvs                   (unicode)       []
    
    - v_scale : vsc                  (float)         []
    
    - v_start : vst                  (float)         []
    
    
    Derived from mel command `maya.cmds.arnoldRenderToTexture`
    """
    pass
def dR_rotateRelease(*args, **kwargs): pass
def FBXExportConstraints(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportConstraints`
    """
    pass
def dbfootprint(*args, **kwargs):
    """
    This command lets you explore the memory usage of specific parts of the scene.
    Query the 'type' flag to see what all of the different types are, and query a
    specific type to get a description of what information it will provide. All
    output is in JSON format so that it can easily be processed and formatted to
    highlight areas of interest.
    
    Flags:
    - allObjects : all               (bool)          [create]
        Ignore any specified or selected objects and measure all applicable objects. The
        definition of allObjectswill vary based on the type of objects being measured -
        see the type documentation for details on what it means for that type. By
        default if no objects are selected or specified then it will behave as though
        this flag were set.
    
    - outputFile : of                (unicode)       [create]
        Specify the location of a file to which the information is to be dumped. Default
        will return the value from the command.  Use the special names stdout, cout,
        stderr, or cerrto redirect to the standard output or error locations.
    
    - type : t                       (unicode)       [create,query]
        Specify the type of object footprint to measure. The various types are
        registered at run time and can be listed by querying this flag without a value.
        If you query it with a value then you get a description of what that particular
        type is going to measure. In query mode, this flag can accept a value.Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dbfootprint`
    """
    pass
def intScrollBar(*args, **kwargs): pass
def nConstraintComponentToComponent(*args, **kwargs): pass
def SetHairRestPositionFromStart(*args, **kwargs): pass
def removeWrappedCmd(cmdname): pass
def HypershadeRefreshSelectedSwatches(*args, **kwargs): pass
def ToggleScalePivots(*args, **kwargs): pass
def exactWorldBoundingBox(*args, **kwargs):
    """
    This command figures out an exact-fit bounding box for the specified objects (or
    selected objects if none are specified) This bounding box is always in world
    space.
    
    Flags:
    - calculateExactly : ce          (bool)          [create]
        Should the bounding box calculation be exact?
    
    - ignoreInvisible : ii           (bool)          [create]
        Should the bounding box calculation include or exclude invisible objects?
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.exactWorldBoundingBox`
    """
    pass
def FBIKLabelPinky(*args, **kwargs): pass
def autoKeyframe(*args, **kwargs):
    """
    With no flags, this command will set keyframes on all attributes that have been
    modified since an autoKeyframe -state oncommand was issued.  To stop keeping
    track of modified attributes, use autoKeyframe -state offautoKeyframe does not
    create new animation curves.  An attribute must have already been keyframed
    (with the setKeyframe command) for autoKeyframe to  add new keyframes for
    modified attributes. You can also query the current state of autoKeyframing with
    autoKeyframe -query -state.
    
    Flags:
    - addAttr : aa                   (PyNode)        [edit]
        Add to the list of plugs (node.attribute) that autoKeyframe is currently
        considering for auto keying.  This list is transient and short-lived, and is
        reset as soon as autoKeyframe sets the keyframe or decides that no keyframe is
        to be set, on completion of the next set attribute.
    
    - characterOption : co           (unicode)       [create,query,edit]
        Valid options are: standard, all. Dictates whether when auto-keying characters
        the auto-key works as usual or whether it keys all of the character attributes.
        Default is standard.
    
    - listAttr : lsa                 (bool)          [query]
        Returns the list of plugs (node.attribute) that autoKeyframe is currently
        considering for auto keying.  This list is transient and short-lived, and is
        reset as soon as autoKeyframe sets the keyframe or decides that no keyframe is
        to be set, on completion of the next set attribute.
    
    - noReset : nr                   (bool)          [create,edit]
        Must be used in conjunction with the state/st flag. When noReset/nr is
        specified, the list of plugs to be autokeyed is not cleared when the state
        changes
    
    - state : st                     (bool)          [create,query,edit]
        turns on/off remembering of modified attributes                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.autoKeyframe`
    """
    pass
def ToggleIKSolvers(*args, **kwargs): pass
def rowColumnLayout(*args, **kwargs): pass
def MakePondMotorBoatsOptions(*args, **kwargs): pass
def dR_lockSelTGL(*args, **kwargs): pass
def image(*args, **kwargs): pass
def subdiv(*args, **kwargs): pass
def SelectAllNRigids(*args, **kwargs): pass
def layout(*args, **kwargs): pass
def DuplicateSpecialOptions(*args, **kwargs): pass
def layeredTexturePort(*args, **kwargs): pass
def ParameterTool(*args, **kwargs): pass
def GraphEditorFrameAll(*args, **kwargs): pass
def PolygonCollapseEdges(*args, **kwargs): pass
def modelingToolkitSuperCtx(*args, **kwargs):
    """
    Flags:
    - attach : a                     (unicode)       []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.modelingToolkitSuperCtx`
    """
    pass
def SelectObjectsShadowedByLight(*args, **kwargs): pass
def ShowAllUI(*args, **kwargs): pass
def HypershadeSetTraversalDepthUnlim(*args, **kwargs): pass
def xgmWrapXGen(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    - grooming : g                   (bool)          []
    
    - groomingImplicit : gi          (bool)          []
    
    - hairPhysicalShader : hp        (bool)          []
    
    - palette : pal                  (unicode)       []
    
    - patch : p                      (unicode)       []
    
    - positionBasedGuideTransfer : pgt (bool)          []
    
    - rotateGuideToAlignWithNewNormal : rgn (bool)          []
    
    - transferGuideRootBySnapping : tgs (bool)          []
    
    - transferGuideRootByXDirectionProjection : tgx (bool)          []
    
    - transferGuideRootByYDirectionProjection : tgy (bool)          []
    
    - transferGuideRootByZDirectionProjection : tgz (bool)          []
    
    - translateFaceIds : tf          (bool)          []
    
    - uvBasedGuideTransfer : ugt     (bool)          []
    
    - wrapGuides : wg                (bool)          []
    
    - wrapLocalGuides : wlg          (bool)          []
    
    - wrapPatches : wp               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmWrapXGen`
    """
    pass
def OffsetCurveOnSurface(*args, **kwargs): pass
def PaintEffectsToPoly(*args, **kwargs): pass
def CycleThroughCameras(*args, **kwargs): pass
def FBIKLabelLeg(*args, **kwargs): pass
def scrollField(*args, **kwargs): pass
def floatSliderButtonGrp(*args, **kwargs): pass
def clipMatching(*args, **kwargs):
    """
    This command is used to compute an offset to apply on a source clip in order to
    automatically align it to a destination clip at a specified match element. For
    this command to work, offset objects must be specified for the character.
    
    Flags:
    - clipDst : cd                   (unicode, float) [create]
        The clip to match so that the source clip can be offsetted correctly.  This flag
        takes in a clip name and the percentage value ranging from 0.0 to 1.0 in order
        to have the source clip match at a certain time in the destination clip.
    
    - clipSrc : cs                   (unicode, float) [create]
        The clip to offset so that it aligns with the destination clip.  This flag takes
        in a clip name and the percentage value ranging from 0.0 to 1.0 in order to have
        it match at a certain time in the clip.
    
    - matchRotation : mr             (int)           [create]
        This flag sets the rotation match type. By default, it is set to not match the
        rotation. 0 - None 1 - Match full rotation 2 - Match projected rotation on
        ground plane
    
    - matchTranslation : mt          (int)           [create]
        This flag sets the translation match type. By default, it is set to not match
        the translation. 0 - None 1 - Match full translation 2 - Match projected
        translation on ground plane                                 Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipMatching`
    """
    pass
def ExtendFluid(*args, **kwargs): pass
def SetRigidBodyInterpenetration(*args, **kwargs): pass
def GraphEditorDisplayTangentActive(*args, **kwargs): pass
def DeleteCurrentColorSet(*args, **kwargs): pass
def CreateNURBSTorusOptions(*args, **kwargs): pass
def Symmetrize(*args, **kwargs): pass
def PaintTextureDeformerWeightsTool(*args, **kwargs): pass
def subdivCrease(*args, **kwargs):
    """
    Set the creasing on subdivision mesh edges or mesh points that are on the
    selection list.
    
    Flags:
    - sharpness : sh                 (bool)          [create]
        Specifies the sharpness value to set the crease to
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdivCrease`
    """
    pass
def RepeatLastActionAtMousePosition(*args, **kwargs): pass
def RaiseApplicationWindows(*args, **kwargs): pass
def IntersectCurveOptions(*args, **kwargs): pass
def curveAddPtCtx(*args, **kwargs):
    """
    The curveAddPtCtx command creates a new curve add points context, which adds
    either control vertices (CVs) or edit points to an existing curve.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveAddPtCtx`
    """
    pass
def shelfButton(*args, **kwargs): pass
def hudButton(*args, **kwargs): pass
def MergeCharacterSet(*args, **kwargs): pass
def NextViewArrangement(*args, **kwargs): pass
def Boundary(*args, **kwargs): pass
def tabLayout(*args, **kwargs): pass
def ikSpringSolverRestPose(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.ikSpringSolverRestPose`
    """
    pass
def ToggleFrameRate(*args, **kwargs): pass
def cmdCurveCollector(*args, **kwargs): pass
def hikCustomRigToolWidget(*args, **kwargs):
    """
    Flags:
    - aspectRatio : ar               (bool)          []
    
    - assigned : assigned            (float)         []
    
    - backgroundSize : bsz           (bool)          []
    
    - configFilename : cf            (unicode)       []
    
    - identifiers : ids              (bool)          []
    
    - layoutParentName : lpn         (unicode)       []
    
    - minimumSize : msz              (int, int)      []
    
    - navigationPostCallback : npo   (unicode)       []
    
    - popupMenuItem : pmi            (int, unicode, unicode) []
    
    - popupMenuState : pms           (bool)          []
    
    - refreshScale : rs              (bool)          []
    
    - selected : sl                  (float)         []
    
    - setupCharacter : sc            (unicode)       []
    
    - types : ts                     (bool)          []
    
    - updateCallback : upc           (unicode)       []
    
    - visible : vis                  (float, bool)   []
    
    
    Derived from mel command `maya.cmds.hikCustomRigToolWidget`
    """
    pass
def workspaceControlState(*args, **kwargs):
    """
    Create or modify preferred window attributes for workspace controls. The size
    and position of a workspace control is retained during application sessions
    (although position only applies to workspace controls that are alone in a
    floating workspace docking panel). A default workspace control state is created
    when a workspace control is closed. Workspace control states must be named and,
    consequently, only affect the workspace control with a matching name. In query
    mode, return type is based on queried flag.
    
    Flags:
    - defaultTopLeftCorner : dc      (int, int)      [create,query,edit]
        Top and left edge position that the window will have when Remember size and
        positionis off and when the panel is first opened. The values will be DPI scaled
        on edit and the value in query is returned unscaled. This value will only be
        used if the default width and height are also valid.
    
    - defaultWidthHeight : dwh       (int, int)      [create,query,edit]
        Width and height that the window will have when Remember size and positionis off
        and when the panel is first opened. The values will be DPI scaled on edit and
        the value in query is returned unscaled. The position used in that case is
        defaultTopLeftCorner.
    
    - exists : ex                    (bool)          [create]
        Returns true|false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - height : h                     (int)           [create,query,edit]
        Height of the window.
    
    - leftEdge : le                  (int)           [create,query,edit]
        Left edge position of the window.
    
    - maximized : max                (bool)          [create,query,edit]
        Maximize the window.
    
    - remove : r                     (bool)          [create]
        Remove a window preference.
    
    - topEdge : te                   (int)           [create,query,edit]
        Top edge position of the window.
    
    - topLeftCorner : tlc            (int, int)      [create,query,edit]
        Top and left edge position of the window.
    
    - width : w                      (int)           [create,query,edit]
        Width of the window.
    
    - widthHeight : wh               (int, int)      [create,query,edit]
        Width and height of the window.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspaceControlState`
    """
    pass
def ExtractFaceOptions(*args, **kwargs): pass
def FluidGradientsOptions(*args, **kwargs): pass
def CustomNURBSSmoothnessOptions(*args, **kwargs): pass
def CreateAmbientLightOptions(*args, **kwargs): pass
def BevelPolygon(*args, **kwargs): pass
def FBXExportReferencedContainersContent(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportReferencedContainersContent`
    """
    pass
def cmdArnoldRenderToTexture(*args, **kwargs): pass
def AutoSeamUVsOptions(*args, **kwargs): pass
def ScaleToolMarkingMenu(*args, **kwargs): pass
def dgtimer(*args, **kwargs):
    """
    This command measures dependency graph node performance by managing timers on a
    per-node basis. Logically, each DG node has a timer associated with it which
    records the amount of real time spent in various operations on its plugs. The
    time measurement includes the cost of copying data to the node on behalf of the
    operation, MEL commands executed by an expression contained in an expression
    invoked by the node, and includes any wait time such as when a fileTexture node
    loads an image file from disk. Most DG operations are reported including
    compute, draw, and dirty propagation. The various operations we measure are
    called metricsand the types of timers are called timer types. The various
    metrics are always measured when timing is on, but are only queried when
    specified via the -show and -hide flags. The metrics currently supported are
    listed in detail under the -show flag below. For each metric we support a
    standard set of timer types. There are three of these: selffor self time (the
    time specific to the node and not its children), inclusive(time including
    children of the node), and count(number of operations of the given metric on the
    node). The timing mechanism which is used by dgtimeris built into the DG itself,
    thus ALL depend nodes can be timed and there is no need for programmers writing
    plug-ins using the OpenMaya API to add any special code in order for their nodes
    to be timed -- its all handled transparently. The dgtimercommand allows node
    timers to be turned on, off, reset to zero, and have their current value
    displayed, and these operations can be performed globally on all nodes or on a
    specific set of nodes defined by name, type or parentage. Note that all timer
    measurements are computed in real time(the same time measurement you get from a
    wristwatch) as opposed to CPU time(which only measures time when the processor
    is executing your code). All times are displayed in seconds. Use the -query flag
    to display the current timer values on a node, use -on to turn on timing, use
    -off to turn off timing, and -reset to reset timers to zero. To display the
    values measured during timing, there are two approaches. The first method is to
    use the -query flag can be used to report the information which has been
    measured. The second method is to use the query methods available on the
    OpenMaya class MFnDependencyNode (see the OpenMaya documentation for details).
    What follows is a description of what is generated via -query. The output is
    broken out into several sections and these are described as follows: SECTION
    1:Section 1 of the dgtimer output contains global information. This section can
    be disabled via the -hoHeader flag. These values are reset whenever a global
    timer reset occurs (i.e. dgtimer -reset;is specified). The global values which
    are reported are: Total real time:the total wall-clock time since the last
    global timer reset. This is the actual time which has been spent as you might
    measure it measure it with your watch. On a multi-processing system, this value
    will always remain true to to real time (unlike userand systime).Total user
    time:the total time the CPU(s) spent processing Maya not including any system
    time since the last global timer reset.Total sys time:the total time the CPU(s)
    spent in operating system calls on behalf of Maya since the last global timer
    reset. Summary of each metric for all nodes:a summary of self and count for each
    metric that we measure:Real time in callbacksreports the self time and count for
    the callbackmetric.Real time in computereports the self time and count for the
    computemetric.Real time in dirty propagationreports the self time and count for
    the dirtymetric.Real time in drawingreports the self time and count for the
    drawmetric.Real time fetching data from plugsreports the self time and count for
    the fetchmetric.Breakdown of select metrics in greater detail:a reporting of
    certain combinations of metrics that we measure:Real time in compute invoked
    from callbackreports the self time spent in compute when invoked either directly
    or indirectly by a callback.Real time in compute not invoked from
    callbackreports the self time spent in compute not invoked either directly or
    indirectly by a callback.SECTION 2:Section 2 of the dgtimer -query output
    contains per-node information. There is a header which describes the meaning of
    each column, followed by the actual per-node data, and this is ultimately
    followed by a footer which summarises the totals per column. Note that the data
    contained in the footer is the global total for each metric and will include any
    nodes that have been deleted since the last reset, so the value in the footer
    MAY exceed what you get when you total the individual values in the column. To
    prevent the header and footer from appearing, use the -noHeader flag to just
    display the per-node data. The columns which are displayed are as follows:
    Rank:The order of this node in the sorted list of all nodes, where the list is
    sorted by -sortMetric and -sortType flag values (if these are omitted the
    default is to sort by self compute time).ON:Tells you if the timer for that node
    is currently on or off. (With dgtimer, you have the ability to turn timing on
    and off on a per-node basis).Per-metric information:various columns are reported
    for each metric. The name of the metric is reported at in the header in capital
    letters (e.g. DRAW). The standard columns for each metric are:Self:The amount of
    real time (i.e. elapsed time as you might measure it with a stopwatch) spent
    performing the operation (thus if the metric is DRAW, then this will be time
    spent drawing the node).Inclusive:The amount of real time (i.e. elapsed time as
    you might measure it with a stopwatch) spent performing the operation including
    any child operations that were invoked on behalf of the operation (thus if the
    metric is DRAW, then this will be the total time taken to draw the node
    including any child operations).Count:The number of operations that occued on
    this node (thus if the metric is DRAW, then the number of draw operations on the
    node will be reported).Sort informationif a column is the one being used to sort
    all the per-node dgtimer information, then that column is followed by a
    Percentand Cumulativecolumn which describe a running total through the listing.
    Note that -sortType noneprevents these two columns from appearing and
    implicitely sorts on selftime.After the per-metric columns, the node name and
    type are reported:TypeThe node type.NameThe name of the node. If the node is
    file referenced and you are using namespaces, the namespace will be included.
    You can also force the dagpath to be displayed by specifying the -uniqueName
    flag.Plug-in nameIf the node was implemented in an OpenMaya plug-in, the name of
    that plug-in is reported.SECTION 3:Section 3 of the dgtimer -query output
    describes time spent in callbacks. Note that section 3 only appears when the
    CALLBACK metric is shown (see the -show flag). The first part is SECTION 3.1
    lists the time per callback with each entry comprising: The name of the
    callback, such as attributeChangedMsg. These names are internal Maya names, and
    in the cases where the callback is available through the OpenMaya API, the API
    access to the callback is similarly named.The name is followed by a breakdown
    per callbackId. The callbackId is an identifying number which is unique to each
    client that is registered to a callback and can be deduced by the user, such as
    through the OpenMaya API. You can cross-reference by finding the same callbackId
    value listed in SECTIONs 3.1 and 3.3.Self time (i.e. real time spent within that
    callbackId type not including any child operations which occur while processing
    the callback).Percent (see the -sortType flag). Note that the percent values are
    listed to sum up to 100% for that callback. This is not a global
    percent.Cumulative (see the -sortType flag).Inclusive time (i.e. real time spent
    within that callbackId including any child operations).Count (number of times
    the callbackId was invoked).API lists Yif the callbackId was defined through the
    OpenMaya API, and Nif the callbackId was defined internally within Maya.Node
    lists the name of the node this callbackId was associated with. If the
    callbackId was associated with more than one node, the string \*multiple\*is
    printed. If there was no node associated with the callbackId (or its a callback
    type in which the node is hard to deduce), the entry is blank.After the
    callbackId entries are listed, a dashed line is printed followed by a single
    line listing the self, inclusive and count values for the callback. Note that
    the percent is relative to the global callback time.At the bottom of SECTION 3.1
    is the per-column total. The values printed match the summation at the bottom of
    the listing in section 2. Note that the values from SECTION 3.1 include any
    nodes that have been deleted since the last reset. The thresholding parameters
    (-threshold, -rangeLower, -rangeUpper and -maxDisplay) are honoured when
    generating the listing. The sorting of the rows and display of the Percent and
    Cumulative columns obeys the -sortType flag. As the listing can be long, zero
    entries are not displayed. The second part is SECTION 3.2 which lists the data
    per callbackId. As noted earlier, the callbackId is an identifying number which
    is unique to each client that is registered to a callback and can be deduced by
    the user, such as through the OpenMaya API. The entries in SECTION 3.2 appear as
    follows: CallbackId the numeric identifier for the callback. You can cross
    reference by finding the same callbackId value listed in SECTIONs 3.1 and
    3.3.For each callbackId, the data is broken down per-callback:Callback the name
    of the callback, e.g. attributeChangedMsg.Percent, Cumulative, Inclusive, Count,
    API and Node entries as described in SECTION 3.1.After the callback entries are
    listed for the callbackId, a dashed followed by a summary line is printed. The
    summary line lists the self, inclusive and count values for the callback. Note
    that the percent is relative to the global callback time.The third part is
    SECTION 3.3 which lists data per-callback per-node. The nodes are sorted based
    on the -sortType flag, and for each node, the callbacks are listed, also sorted
    based on the -sortType flag. As this listing can be long, zero entries are not
    displayed. An important note for SECTION 3.3 is that only nodes which still
    exist are displayed. If a node has been deleted, no infromation is listed.
    
    Flags:
    - combineType : ct               (bool)          [query]
        Causes all nodes of the same type (e.g. animCurveTA) to be combined in the
        output display.
    
    - hide : hi                      (unicode)       [create,query]
        This flag is the converse of -show. As with -show, it is a query-only flag which
        can be specified multiple times. If you do specify -hide, we display all columns
        except those listed by the -hide flags.
    
    - hierarchy : h                  (bool)          [create,query]
        Used to specify that a hierarchy of the dependency graph be affected, thus
        -reset -hierarchy -name ballwill reset the timers on the node named balland all
        of its descendents in the dependency graph.
    
    - maxDisplay : m                 (int)           [query]
        Truncates the display so that only the most expenive nentries are printed in the
        output display.
    
    - name : n                       (unicode)       [create,query]
        Used in conjunction with -reset or -query to specify the name of the node to
        reset or print timer values for. When querying a single timer, only a single
        line of output is generated (i.e. the global timers and header information is
        omitted). Note that one can force output to the script editor window via the
        -outputFile MELoption to make it easy to grab the values in a MEL script. Note:
        the -name and -type flag cannot be used together.
    
    - noHeader : nh                  (bool)          [create,query]
        Used in conjunction with -query to prevent any header or footer information from
        being printed. All that will be output is the per-node timing data. This option
        makes it easier to parse the output such as when you output the query to a file
        on disk using the -outputFileoption.
    
    - outputFile : o                 (unicode)       [query]
        Specifies where the output of timing or tracing is displayed. The flag takes a
        string argument which accepts three possible values: The name of a file on
        disk.Or the keyword stdout, which causes output to be displayed on the terminal
        window (Linux and Macintosh), and the status window on Windows.Or the keyword
        MEL, which causes output to be displayed in the Maya Script Editor (only
        supported with -query).The stdoutsetting is the default behaviour. This flag can
        be used with the -query flag as well as the -trace flag. When used with the
        -trace flag, any tracing output will be displayed on the destination specified
        by the -outputFile (or stdout if -outputFile is omitted). Tracing operations
        will continue to output to the destination until you specify the -trace and
        -outputFile flags again. When used with the -query flag, timing output will be
        displayed to the destination specified by the -outputFile (or stdoutif
        -outputFile is omitted). Here are some examples of how to use the -query, -trace
        and -outputFile flags: Example: output the timing information to a single file
        on disk:dgtimer -on;                                       // Turn on timing
        create some animated scene content; play -wait;
        // Play the scene through dgtimer -query -outputFile /tmp/timing.txt// Output
        node timing information to a file on disk Example: output the tracing
        information to a single file on disk:dgtimer -on;
        // Turn on timing create some animated scene content; dgtimer -trace on
        -outputFile /tmp/trace.txt// Turn on tracing and output the results to file play
        -wait;                                        // Play the scene through; trace
        info goes to /tmp/trace.txt dgtimer -query;
        // But the timing info goes to the terminal window play -wait;
        // Play the scene again, trace info still goes to /tmp/trace.txt Example: two
        runs, outputting the trace information and timing information to separate
        files:dgtimer -on;                                       // Turn on timing
        create some animated scene content; dgtimer -trace on -outputFile
        /tmp/trace1.txt// Turn on tracing and output the results to file play -wait;
        // Play the scene through dgtimer -query -outputFile /tmp/query1.txt// Output
        node timing information to another file dgtimer -reset; dgtimer -trace on
        -outputFile /tmp/trace2.txt// Output tracing results to different file play
        -wait;                                        // Play the scene through dgtimer
        -query -outputFile /tmp/query2.txt// Output node timing information to another
        file Tips and tricks:Outputting the timing results to the script editor makes it
        easy to use the results in MEL e.g. string $timing[] = `dgtimer -query
        -outputFile MEL`.It is important to note that the -outputFile you specify with
        -trace is totally independent from the one you specify with -query.If the file
        you specify already exists, Maya will empty the file first before outputting
        data to it (and if the file is not writable, an error is generated instead).
    
    - overhead : oh                  (bool)          [create,query]
        Turns on and off the measurement of timing overhead. Under ordinary
        circumstances the amount of timing overhead is minimal compared with the events
        being measured, but in complex scenes, one might find the overhead to be
        measurable. By default this option is turned off. To enable it, specify dgtimer
        -overhead trueprior to starting timing. When querying timing, the overhead is
        reported in SECTION 1.2 of the dgtimer output and is not factored out of each
        individual operation.
    
    - rangeLower : rgl               (float)         [create]
        This flag can be specified to limit the range of nodes which are displayed in a
        query, or the limits of the heat map with -updateHeatMap. The value is the lower
        percentage cutoff for the nodes which are processed. There is also a -rangeLower
        flag which sets the lower range limit. The default value is 0, meaning that all
        nodes with timing value below the upper range limit are considered.
    
    - rangeUpper : rgu               (float)         [create]
        This flag can be specified to limit the range of nodes which are displayed in a
        query, or the limits of the heat map with -updateHeatMap. The value is the upper
        percentage cutoff for the nodes which are processed. There is also a -rangeLower
        flag which sets the lower range limit. The default value is 100, meaning that
        all nodes with timing value above the lower range limit are considered.
    
    - reset : r                      (bool)          [create]
        Resets the node timers to zero. By default, the timers on all nodes as well as
        the global timers are reset, but if specified with the -name or -type flags,
        only the timers on specified nodes are reset.
    
    - returnCode : rc                (unicode)       [create,query]
        This flag has been replaced by the more general -returnType flag. The
        -returnCode flag was unfortunately specific to the compute metric only. It
        exists only for backwards compatability purposes. It will be removed altogether
        in a future release. Here are some handy equivalences: To get the total number
        of nodes:OLD WAY: dgtimer -rc nodecount -q;// Result:325//NEW WAY: dgtimer
        -returnType total -sortType none -q;// Result:325//OLD WAY: dgtimer -rc count
        -q;// Result:1270//To get the sum of the compute count column:NEW WAY: dgtimer
        -returnType total -sortMetric compute -sortType count -q;// Result:1270//OLD
        WAY: dgtimer -rc selftime -q;// Result:0.112898//To get the sum of the compute
        self column:NEW WAY: dgtimer -returnType total -sortMetric compute -sortType
        self -q;// Result:0.112898//
    
    - returnType : rt                (unicode)       [query]
        This flag specifies what the double value returned by the dgtimer command
        represents. By default, the value returned is the global total as displayed in
        SECTION 1 for the column we are sorting on in the per-node output (the sort
        column can be specified via the -sortMetric and -sortType flags). However,
        instead of the total being returned, the user can instead request the individual
        entries for the column. This flag is useful mainly for querying without forcing
        any output. The flag accepts the values total, to just display the column total,
        or allto display all entries individually. For example, if you want to get the
        total of draw self time without any other output simply specify the following:
        dgtimer -returnType total -sortMetric draw -sortType self -threshold 100
        -noHeader -query;// Result: 7718.01 // To instead get each individual entry,
        change the above query to: dgtimer -returnType all -sortMetric draw -sortType
        self -threshold 100 -noHeader -query;// Result: 6576.01 21.91 11.17 1108.92 //
        To get the inclusive dirty time for a specific node, use -name as well as
        -returnType all: dgtimer -name virginia-returnType all -sortMetric dirty
        -sortType inclusive -threshold 100 -noHeader -query;Note: to get the total
        number of nodes, use -sortType none -returnType total.  To get the on/off status
        for each node, use -sortType none -returnType all.
    
    - show : sh                      (unicode)       [create,query]
        Used in conjunction with -query to specify which columns are to be displayed in
        the per-node section of the output. -show takes an argument, which can be all(to
        display all columns), callback(to display the time spent during any callback
        processing on the node not due to evaluation), compute(to display the time spent
        in the node's compute methods), dirty(to display time spent propagating
        dirtiness on behalf of the node), draw(to display time spent drawing the node),
        compcb(to display time spent during callback processing on node due to compute),
        and compncb(to display time spent during callback processing on node NOT due to
        compute). The -show flag can be used multiple times, but cannot be specified
        with -hide. By default, if neither -show, -hide, or -sort are given, the
        effective display mode is: dgtimer -show compute -query.
    
    - sortMetric : sm                (unicode)       [create,query]
        Used in conjunction with -query to specify which metric is to be sorted on when
        the per-node section of the output is generated, for example drawtime. Note that
        the -sortType flag can also be specified to define which timer is sorted on: for
        example dgtimer -sortMetric draw -sortType count -querywill sort the output by
        the number of times each node was drawn. Both -sortMetric and -sortType are
        optional and you can specify one without the other. The -sortMetric flag can
        only be specified at most once. The flag takes the following arguments:
        callback(to sort on time spent during any callback processing on the node),
        compute(to sort on the time spent in the node's compute methods), dirty(to sort
        on the time spent propagating dirtiness on behalf of the node), draw(to sort on
        time spent drawing the node), fetch(to sort on time spent copying data from the
        datablock), The default, if -sortMetric is omitted, is to sort on the first
        displayed column. Note that the sortMetric is independent of which columns are
        displayed via -show and -hide. Sort on a hidden column is allowed. The column
        selected by -sortMetric and -sortType specifies which total is returned by the
        dgtimer command on the MEL command line. This flag is also used with
        -updateHeatMap to specify which metric to build the heat map for.
    
    - sortType : st                  (unicode)       [create,query]
        Used in conjunction with -query to specify which timer is to be sorted on when
        the per-node section of the output is generated, for example selftime. Note that
        the -sortMetric flag can also be specified to define which metric is sorted on:
        for example dgtimer -sortMetric draw -sortType count -querywill sort the output
        by the number of times each node was drawn. Both -sortMetric and -sortType are
        optional and you can specify one without the other. The -sortType flag can be
        specified at most once. The flag takes the following arguments: self(to sort on
        self time, which is the time specific to the node and not its children),
        inclusive(to sort on the time including children of the node), count(to sort on
        the number of times the node was invoked). and none(to sort on self time, but do
        not display the Percent and Cumulative columns in the per-node display, as well
        as cause the total number of nodes in Maya to be returned on the command line).
        The default, if -sortType is omitted, is to sort on self time. The column
        selected by -sortMetric and -sortType specifies which total is returned by the
        dgtimer command on the MEL command line. The global total as displayed in
        SECTION 1 of the listing is returned. The special case of -sortType nonecauses
        the number of nodes in Maya to instead be returned. This flag is also used with
        -updateHeatMap to specify which metric to build the heat map for.
    
    - threshold : th                 (float)         [query]
        Truncates the display once the value falls below the threshold value. The
        threshold applies to whatever timer is being used for sorting. For example, if
        our sort key is self compute time (i.e. -sortMetric is computeand -sortType is
        self) and the threshold parameter is 20.0, then only nodes with a compute self-
        time of 20.0 or higher will be displayed. (Note that -threshold uses absolute
        time. There are the similar -rangeUpper and -rangeLower parameters which specify
        a range using percentage).
    
    - timerOff : off                 (bool)          [create,query]
        Turns off node timing. By default, the timers on all nodes are turned off, but
        if specified with the -name or -type flags, only the timers on specified nodes
        are turned off. If the timers on all nodes become turned off, then global timing
        is also turned off as well.
    
    - timerOn : on                   (bool)          [create,query]
        Turns on node timing. By default, the timers on all nodes are turned on, but if
        specified with the -name or -type flags, only the timers on specified nodes are
        turned on. The global timers are also turned on by this command. Note that
        turning on timing does NOT reset the timers to zero. Use the -reset flag to
        reset the timers. The idea for NOT resetting the timers is to allow the user to
        arbitrarily turn timing on and off and continue to add to the existing timer
        values.
    
    - trace : tr                     (bool)          [create]
        Turns on or off detailed execution tracing. By default, tracing is off. If
        enabled, each timeable operation is logged when it starts and again when it
        ends. This flag can be used in conjunction with -outputFile to specify where the
        output is generated to. The following example shows how the output is
        formatted:dgtimer:begin: compute 3 particleShape1Deformed
        particleShape1Deformed.lastPosition The above is an example of the output when
        -trace is true that marks the start of an operation. For specific details on
        each field: the dgtimer:begin:string is an identifying marker to flag that this
        is a begin operation record. The second argument, computein our example, is the
        operation metric. You can view the output of each given metric via dgtimer -qby
        specifying the -show flag. The integer which follows (3 in this case) is the
        depth in the operation stack, and the third argument is the name of the node
        (particleShape1Deformed). The fourth argument is specific to the metric. For
        compute, it gives the name of the plug being computed. For callback, its the
        internal Maya name of the callback. For dirty, its the name of the plug that
        dirtiness is being propagated from.dgtimer:end: compute 3 particleShape1Deformed
        0.000305685 0.000305685 The above is the end operation record. The compute, 3and
        particleShapeDeformedarguments were described in the dgtimer:beginoverview
        earlier. The two floating-point arguments are self time and inclusive time for
        the operation measured in seconds. The inclusive measure lists the total time
        since the matching dgtimer:begin:entry for this operation, while the self
        measure lists the inclusive time minus any time consumed by child operations
        which may have occurred during execution of the current operation. As noted
        elsewhere in this document, these two times are wall clock times, measuring
        elapsed time including any time in which Maya was idle or performing system
        calls. Since dgtimer can measure some non-node qualities in Maya, such as global
        message callbacks, a -is displayed where the node name would ordinarily be
        displayed. The -means not applicable.
    
    - type : t                       (unicode)       [create,query]
        Used in conjunction with -reset or -query to specify the type of the node(s)
        (e.g. animCurveTA) to reset or print timer values for. When querying, use of the
        -combineType flag will cause all nodes of the same type to be combined into one
        entry, and only one line of output is generated (i.e. the global timers and
        header information is omitted). Note: the -name and -type flag cannot be used
        together.
    
    - uniqueName : un                (bool)          [create,query]
        Used to specify that the DAG nodes listed in the output should be listed by
        their unique names.  The full DAG path to the object will be printed out instead
        of just the node name.
    
    - updateHeatMap : uhm            (int)           [create]
        Forces Maya's heat map to rebuild based on the specified parameters. The heat
        map is an internal dgtimer structure used in mapping intensity values to
        colourmap entries during display by the HyperGraph Editor. There is one heat map
        shared by all editors that are using heat map display mode. Updating the heat
        map causes the timer values on all nodes to be analysed to compose the
        distribution of entries in the heat map. The parameter is the integer number of
        divisions in the map and should equal the number of available colours for
        displaying the heat map. This flag can be specified with the -rangeLower and
        -rangeUpper flags to limit the range of displayable to lie between the
        percentile range. The dgtimer command returns the maximum timing value for all
        nodes in Maya for the specified metric and type. Note: when the display range
        includes 0, the special zeroth (exactly zero) slot in the heat map is avilable.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgtimer`
    """
    pass
def GreasePencilTool(*args, **kwargs): pass
def glRender(*args, **kwargs):
    """
    This command provides access to the Hardware Render Manager (HRM). There is one-
    and-only-one HRM in maya. The HRM controls the rendering performed in the
    hardware render buffer window. This command allows shell scripts, to modify the
    render state, and to initiate a render request. In query mode, return type is
    based on queried flag.
    
    Flags:
    - accumBufferPasses : abp        (int)           [query,edit]
        Set the number of accum buffer render passes.
    
    - alphaSource : alphaSource      (unicode)       [query,edit]
        Control the alpha source when writing image files. Valid values include: off,
        alpha, red, green, blue, luminance, clamp, invClamp.
    
    - antiAliasMethod : aam          (unicode)       [query,edit]
        Set the method used for anti-aliasing polygons: off, uniform, gaussian.
    
    - cameraIcons : ci               (bool)          [query,edit]
        Set display status of camera icons.
    
    - clearClr : cc                  (float, float, float) [query,edit]
        Set the viewport clear color (0 - 1).
    
    - collisionIcons : coi           (bool)          [query,edit]
        Set display status of collison model icons.
    
    - crossingEffect : ce            (bool)          [query,edit]
        Enable/disable image filtering with a convolution filter.
    
    - currentFrame : cf              (bool)          [query]
        Returns the current frame being rendered.
    
    - drawStyle : ds                 (unicode)       [query,edit]
        Set the object drawing style: boundingBox, points, wireframe, flatShaded,
        smoothShaded.
    
    - edgeSmoothness : es            (float)         [query,edit]
        Controls the amount of edge smoothing. A value of 0.0 gives no smoothing, 1.0
        gives default smoothing, and any other value scales the amount of default
        smoothing. Must enable the accumulation buffer.
    
    - emitterIcons : ei              (bool)          [query,edit]
        Set display status of emitter icons.
    
    - fieldIcons : fii               (bool)          [query,edit]
        Set display status of field icons.
    
    - flipbookCallback : fc          (unicode)       [query,edit]
        Register a procedure to be called after the render sequence has completed. Used
        to build the flipbook pulldown menu. See the example section for more details
        about how to build this procedure.
    
    - frameEnd : fe                  (int)           [query,edit]
        Set the last frame to be rendered.
    
    - frameIncrement : fi            (int)           [query,edit]
        Set the frame increment during rendering.
    
    - frameStart : fs                (int)           [query,edit]
        Set the first frame to be rendered.
    
    - fullResolution : fr            (bool)          [query,edit]
        Enable/disable rendering to full image output resolution. Must set a valid image
        output resolution (-is).
    
    - grid : gr                      (bool)          [query,edit]
        Set display status of the grid.
    
    - imageDirectory : id            (unicode)       [query,edit]
        Set the directory for the image files.
    
    - imageName : imageName          (unicode)       [query,edit]
        Set the base name of the image files.
    
    - imageSize : imageSize          (int, int, float) [query,edit]
        Set the image output size. Takes width, height and aspect ratio. Pass 0,0,0 to
        use current port size. The image size must be equal to or greater then the
        viewport size. Large images will be tiled if full resolution rendering has been
        enabled (-fr/fullResolution).
    
    - lightIcons : li                (bool)          [query,edit]
        Set display status of light icons.
    
    - lightingMode : lm              (unicode)       [query,edit]
        Set the lighting mode used for rendering: all, selected, default.
    
    - lineSmoothing : ls             (bool)          [query,edit]
        Enable/disable anti-aliased lines.
    
    - offScreen : os                 (bool)          [query,edit]
        When set, this toggle allow HRM to use an offscreen buffer to render the view.
        This allows HRM to work when the application is iconified, or obscured
    
    - renderFrame : rf               (unicode)       [query,edit]
        Render the current frame. Requires the name of the view in which to render.
    
    - renderSequence : rs            (unicode)       [query,edit]
        Render the current frame sequence. Requires the name of the view in which to
        render.
    
    - sharpness : sh                 (float)         [query,edit]
        Control the sharpness level of the convolution filter.
    
    - shutterAngle : sa              (float)         [query,edit]
        Set the shutter angle used for motion blur (0 - 1). A value of 0.0 gives no
        blurring, 0.5 gives correct blurring, and 1.0 gives continuous blurring. Must
        enable the accumulation buffer.
    
    - textureDisplay : txd           (bool)          [query,edit]
        Enable/disable texture map display.
    
    - transformIcons : ti            (bool)          [query,edit]
        Set display status of transform icons.
    
    - useAccumBuffer : uab           (bool)          [query,edit]
        Enable/disable the accumulation buffer.
    
    - viewport : vp                  (int, int, float) [query,edit]
        Set the viewport size. Pass in the width, height and aspect ratio. This size
        will be used for all test rendering and image output size unless full resolution
        (-fr) has been set and a valid image output size (-is) has been set.
    
    - writeDepthMap : wdm            (bool)          [query,edit]
        Enable/disable writing of zdepth to image files.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.glRender`
    """
    pass
def createNurbsSquareCtx(*args, **kwargs):
    """
    Flags:
    - attachToSpans : asp            (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - spans : sp                     (int)           []
    
    - surfaceDegree : sd             (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createNurbsSquareCtx`
    """
    pass
def pixelMove(*args, **kwargs):
    """
    The pixelMove command moves objects by what appears as pixel units based on the
    current view. It takes two integer arguments which specify the direction in
    screen space an object should appear to move. The vector between the center
    pixel of the view and the specified offset is mapped to some world space vector
    which defines the relative amount to move the selected objects. The mapping is
    dependent upon the view.
    
    
    Derived from mel command `maya.cmds.pixelMove`
    """
    pass
def polyDuplicateEdge(*args, **kwargs): pass
def ResolveInterpenetration(*args, **kwargs): pass
def PaintEffectPanelActivate(*args, **kwargs): pass
def FrameAll(*args, **kwargs): pass
def ParentBaseWireOptions(*args, **kwargs): pass
def xgmExportSplineDataInternal(*args, **kwargs):
    """
    Flags:
    - output : o                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmExportSplineDataInternal`
    """
    pass
def hotkeyEditorPanel(*args, **kwargs): pass
def DeformerSetEditor(*args, **kwargs): pass
def CreateConstraint(*args, **kwargs): pass
def view2dToolCtx(*args, **kwargs):
    """
    This class creates a context for the View Tools track, dolly, and box zoomin the
    Hypergraph.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - boxzoom : bz                   (bool)          [create,query]
        Perform Box Zoom
    
    - dolly : do                     (bool)          [create,query]
        Dollies the view
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - track : tr                     (bool)          [create,query]
        Tracks the view                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.view2dToolCtx`
    """
    pass
def diskCache(*args, **kwargs):
    """
    Command to create, clear, or close disk cache(s).                In query mode,
    return type is based on queried flag.
    
    Flags:
    - append : a                     (bool)          [create,query]
        Append at the end and not to flush the existing cache
    
    - cacheType : ct                 (unicode)       [create,query]
        Specifies the type of cache to overwrite.  mcfpfor particle playback cache,
        mcfifor particle initial cache. mcjfor jiggle cache. This option is only
        activated during the cache creation.
    
    - close : c                      (unicode)       [create,query]
        Close the cache given the disk cache node name.  If -eco/enabledCachesOnly is
        trueonly enabled disk cache nodes are affected.
    
    - closeAll : ca                  (bool)          [create,query]
        Close all disk cache files. If -eco/enabledCachesOnly is trueonly enabled disk
        cache nodes are affected.
    
    - delete : d                     (unicode)       [create,query]
        Delete the cache given the disk cache node name.  If -eco/enabledCachesOnly is
        trueonly enabled disk cache nodes are affected.
    
    - deleteAll : da                 (bool)          [create,query]
        Delete all disk cache files.  If -eco/enabledCachesOnly is trueonly enabled disk
        cache nodes are affected.
    
    - empty : e                      (unicode)       [create,query]
        Clear the content of the disk cache with the given disk cache node name.  If
        -eco/enabledCachesOnly is trueonly enabled disk cache nodes are affected.
    
    - emptyAll : ea                  (bool)          [create,query]
        Clear the content of all disk caches.  If -eco/enabledCachesOnly is trueonly
        enabled disk cache nodes are affected.
    
    - enabledCachesOnly : eco        (bool)          [create,query]
        When present, this flag restricts the -ea/emptyAll, so that only enableddisk
        caches (i.e., disk cache nodes with the .enableattribute set to true) are
        affected.
    
    - endTime : et                   (time)          [create,query]
        Specifies the end frame of the cache range.
    
    - frameRangeType : frt           (unicode)       [create,query]
        Specifies the type of frame range to use, namely Render Globals, Time Slider,
        and Start/End.  In the case of Time Slider, startFrame and endFrame need to be
        specified.  (This flag is now obsolete.  Please use the -startTime and -endTime
        flags to specify the frame range explicitly.)
    
    - overSample : os                (bool)          [create,query]
        Over sample if true. Otherwise, under sample.
    
    - samplingRate : sr              (int)           [create,query]
        Specifies how frequently to sample relative to each frame. When over-sampling
        (-overSample has been specified), this parameter determines how many times per
        frame the runup will be evaluated. When under-sampling (the default, when
        -overSample has not been specified), the runup will evaluate only once per
        srframes, where sris the value specified to this flag.
    
    - startTime : st                 (time)          [create,query]
        Specifies the start frame of the cache range.
    
    - tempDir : tmp                  (bool)          [create,query]
        Query-only flag for the location of temporary diskCache files.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.diskCache`
    """
    pass
def TimeEditorFramePlaybackRange(*args, **kwargs): pass
def CreateNURBSCylinder(*args, **kwargs): pass
def play(*args, **kwargs):
    """
    This command starts and stops playback. In order to change the frame range of
    playback, see the playbackOptions command. In query mode, return type is based
    on queried flag.
    
    Flags:
    - forward : f                    (bool)          [create,query]
        When true, play back the animation from the currentTime to the maximum of the
        playback range. When false, play back from the currentTime to the minimum of the
        playback range.  When queried, returns an int.
    
    - playSound : ps                 (bool)          [create,query]
        Specify whether or not sound should be used during playback
    
    - record : rec                   (bool)          [create,query]
        enable the recording system and start one playback loop
    
    - sound : s                      (unicode)       [create,query]
        Specify the sound node to be used during playback
    
    - state : st                     (bool)          [create,query]
        start or stop playing back
    
    - wait : w                       (bool)          [create]
        Wait till completion before returning control to command Window.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.play`
    """
    pass
def mouldMesh(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.mouldMesh`
    """
    pass
def ToggleLocalRotationAxes(*args, **kwargs): pass
def attributeName(*args, **kwargs):
    """
    This command takes one node.attribute-style specifier on the command line and
    returns either the attribute's long, short, or nice name.  (The nicename, or UI
    name, is the name used to display the attribute in Maya's interface, and may be
    localized when running Maya in a language other than English.) If more than one
    node.attributespecifier is given on the command line, only the first valid
    specifier is processed.
    
    Flags:
    - leaf : lf                      (bool)          [create]
        When false, shows parent multi attributes (like controlPoints[2].xValue).  When
        true, shows only the leaf-level attribute name (like xValue).  Default is true.
        Note that for incomplete attribute strings, like a missing multi-parent index
        (controlPoints.xValue) or an incorrectly named compound (cntrlPnts[2].xValue),
        this flag defaults to true and provides a result as long as the named leaf-level
        attribute is defined for the node.
    
    - long : l                       (bool)          [create]
        Returns names in long nameformat like translateX
    
    - nice : n                       (bool)          [create]
        Returns names in nice nameformat like Translate X
    
    - short : s                      (bool)          [create]
        Returns names in short nameformat like txFlag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attributeName`
    """
    pass
def DisplayUVShaded(*args, **kwargs): pass
def OpenTinkercad(*args, **kwargs): pass
def nucleusDisplayOtherNodes(*args, **kwargs): pass
def FullHotboxDisplay(*args, **kwargs): pass
def SetCMCEmission(*args, **kwargs): pass
def ShowNCloths(*args, **kwargs): pass
def GetFKIdFromEffectorId(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetFKIdFromEffectorId`
    """
    pass
def XgmSplinePresetImport(*args, **kwargs): pass
def NodeEditorShowCustomAttrs(*args, **kwargs): pass
def SmoothProxy(*args, **kwargs): pass
def SurfaceEditingTool(*args, **kwargs): pass
def polyAppendVertex(*args, **kwargs): pass
def shadingNode(*args, **kwargs): pass
def AlignCurve(*args, **kwargs): pass
def FBXResetImport(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXResetImport`
    """
    pass
def linearPrecision(*args, **kwargs):
    """
    This command controls the display of linear strings in the interface. (See the
    linearField command). Setting this affects any linear strings displayed
    afterwards, formatting them so they will show at most the specified number of
    digits after the decimal point. Allowed values are 0 through 6. In query mode,
    return type is based on queried flag.
    
    
    Derived from mel command `maya.cmds.linearPrecision`
    """
    pass
def FloatSelectedPondObjects(*args, **kwargs): pass
def CompleteCurrentTool(*args, **kwargs): pass
def PolygonCollapseFaces(*args, **kwargs): pass
def IncreaseExposureCoarse(*args, **kwargs): pass
def createCurveWarp(*args, **kwargs):
    """
    Flags:
    - curve : c                      (unicode)       []
    
    
    Derived from mel command `maya.cmds.createCurveWarp`
    """
    pass
def dopeSheetEditor(*args, **kwargs):
    """
    Edit a characteristic of a dope sheet editor
    
    Flags:
    - autoFit : af                   (unicode)       [query,edit]
        on | off | tgl Auto fit-to-view.
    
    - autoFitTime : aft              (unicode)       [query,edit]
        on | off | tgl Auto fit-to-view along the time axis, as well.
    
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - displayActiveKeyTangents : dat (unicode)       [edit]
        on | off | tgl Display active key tangents in the editor.
    
    - displayActiveKeys : dak        (unicode)       [edit]
        on | off | tgl Display active keys in the editor.
    
    - displayInfinities : di         (unicode)       [edit]
        on | off | tgl Display infinities in the editor.
    
    - displayKeys : dk               (unicode)       [edit]
        on | off | tgl Display keyframes in the editor.
    
    - displayTangents : dtn          (unicode)       [edit]
        on | off | tgl Display tangents in the editor.
    
    - displayValues : dv             (unicode)       [edit]
        on | off | tgl Display active keys and tangents values in the editor.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - hierarchyBelow : hb            (bool)          [query,edit]
        display animation for objects hierarchically
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - lookAt : la                    (unicode)       [edit]
        all | selected | currentTime FitView helpers.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - outliner : o                   (unicode)       [query,edit]
        the name of the outliner which is associated with the dope sheet
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - selectionWindow : sel          (float, float, float, float) [query,edit]
        The selection area specified as left, right, bottom, top respectively.
    
    - showScene : sc                 (bool)          [query,edit]
        display the scene summary object
    
    - showSummary : ss               (bool)          [query,edit]
        display the summary object
    
    - showTicks : stk                (bool)          [query,edit]
        display per animation tick divider in channel
    
    - snapTime : st                  (unicode)       [query,edit]
        none | integer | keyframe Keyframe move snap in time.
    
    - snapValue : sv                 (unicode)       [query,edit]
        none | integer | keyframe Keyframe move snap in values.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dopeSheetEditor`
    """
    pass
def TimeEditorToggleSoloSelectedTracks(*args, **kwargs): pass
def PreviousFrame(*args, **kwargs): pass
def HypershadeOpenOutlinerWindow(*args, **kwargs): pass
def symmetricModelling(*args, **kwargs):
    """
    This command allows you to change the symmetric modelling options. Symmetric
    modelling is an option that allows for reflection of basic manipulator actions
    such as move, rotate, and scale. In query mode, return type is based on queried
    flag.
    
    Flags:
    - about : a                      (unicode)       [create,query,edit]
        Set the space in which symmetry should be calculated (object or world or topo).
        When queried, returns a string which is the current space being used.
    
    - allowPartial : ap              (bool)          [create,query,edit]
        Specifies whether partial symmetry should be allowed when enabling topological
        symmetry.
    
    - axis : ax                      (unicode)       [create,query,edit]
        Set the current axis to be reflected over. When queried, returns a string which
        is the current axis.
    
    - preserveSeam : ps              (int)           [create,query,edit]
        Controls whether selection or symmetry should take priority on the plane of
        symmetry. When queried, returns an int for the option.
    
    - reset : r                      (bool)          [create,edit]
        Reset the redo information before starting.
    
    - seamFalloffCurve : sf          (unicode)       [create,query,edit]
        Set the seam's falloff curve, used to control the seam strength within the seam
        tolerance. The string is a comma separated list of sets of 3 values for each
        curve point. When queried, returns a string which is the current space being
        used.
    
    - seamTolerance : st             (float)         [create,query,edit]
        Set the seam tolerance used for reflection. When preserveSeam is enabled, this
        tolerance controls the width of the enforced seam. When queried, returns a float
        of the seamTolerance.
    
    - symmetry : s                   (int)           [create,query,edit]
        Set the symmetry option on or off. When queried, returns an int for the option.
    
    - tolerance : t                  (float)         [create,query,edit]
        Set the tolerance of reflection. When queried, returns a float of the tolerance.
    
    - topoSymmetry : ts              (bool)          [create,query,edit]
        Enable/disable topological symmetry. When enabled, the supplied component/active
        list will be used to define the topological symmetry seam. When queried, returns
        the name of the active topological symmetry object.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.symmetricModelling`
    """
    pass
def ModifyOpacityPress(*args, **kwargs): pass
def GraphEditorFrameSelected(*args, **kwargs): pass
def nurbsUVSet(*args, **kwargs):
    """
    Allows user to toggle between implicit and explicit UVs on a NURBS object. Also
    provides a facility to create, delete, rename and set the current explicit
    UVSet. An implicit UVSet is non-editable. It uses the parametric make-up of the
    NURBS object to determine the location of UVs (isoparm intersections). NURBS
    objects also support explicit UVSets which are similar to the UVs of a polygonal
    object. UVs are created at the knots (isoparm intersections) of the object and
    are fully editable. In order to access UV editing capabilities on a NURBS object
    an explicit UVSet must be created and set as the current UVSet.
    
    Flags:
    - create : c                     (bool)          [create,query,edit]
        Creates an explicit UV set on the specified surface. If the surface already has
        an explicit UV set this flag will do nothing. Use the -ue/useExplicit flag to
        set/unset the explicit UV set as the current UV set.
    
    - useExplicit : ue               (bool)          [create,query,edit]
        Toggles the usage of explicit/implicit UVs. When true, explicit UVs will be
        used, otherwise the object will use implicit UVs.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nurbsUVSet`
    """
    pass
def SetBreakdownKey(*args, **kwargs): pass
def objExists(*args, **kwargs):
    """
    This command simply returns true or false depending on whether an object with
    the given name exists.
    
    
    Derived from mel command `maya.cmds.objExists`
    """
    pass
def ConvertTypeCapsToCurves(*args, **kwargs): pass
def UVUnstackShells(*args, **kwargs): pass
def UVNormalBasedProjectionOptions(*args, **kwargs): pass
def keyframeRegionDollyCtx(*args, **kwargs):
    """
    This command can be used to create a dolly context for the dope sheet editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionDollyCtx`
    """
    pass
def detachCurve(*args, **kwargs): pass
def ExpandSelectedComponents(*args, **kwargs): pass
def ShapeEditor(*args, **kwargs): pass
def renderPartition(*args, **kwargs):
    """
    Set or query the model's current partition. When flag qis not used, a partion
    name must be passed as an argument. In this case the current partition is set to
    that name.
    
    
    Derived from mel command `maya.cmds.renderPartition`
    """
    pass
def UVContourStretchProjectionOptions(*args, **kwargs): pass
def sceneEditor(*args, **kwargs): pass
def SetMeshSprayTool(*args, **kwargs): pass
def dR_paintPress(*args, **kwargs): pass
def renderSetup(*args, **kwargs):
    """
    Flags:
    - renderLayers : rl              (bool)          []
    
    
    Derived from mel command `maya.cmds.renderSetup`
    """
    pass
def MoveSewUVs(*args, **kwargs): pass
def NodeEditorToggleSyncedSelection(*args, **kwargs): pass
def HyperGraphPanelRedoViewChange(*args, **kwargs): pass
def character(*args, **kwargs): pass
def NParticleStyleCloud(*args, **kwargs): pass
def nurbsSquare(*args, **kwargs): pass
def xgmSelectBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - deselectAll : dsa              (bool)          []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - hideSelected : hs              (bool)          []
    
    - hideUnselected : hus           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - invert : iv                    (bool)          []
    
    - invertHidden : inh             (bool)          []
    
    - invertSelection : ins          (bool)          []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - unhideAll : uha                (bool)          []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmSelectBrushContext`
    """
    pass
def FBXResetExport(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXResetExport`
    """
    pass
def DeleteAllNParticles(*args, **kwargs): pass
def LayoutUVAlongOptions(*args, **kwargs): pass
def SetExclusiveToCamera(*args, **kwargs): pass
def DisableGlobalStitch(*args, **kwargs): pass
def PublishChildAnchorOptions(*args, **kwargs): pass
def TimeEditorRealTimeRefreshToggle(*args, **kwargs): pass
def filletCurve(*args, **kwargs): pass
def HypershadeMoveTabRight(*args, **kwargs): pass
def NURBSSmoothnessMediumOptions(*args, **kwargs): pass
def UnitizeUVs(*args, **kwargs): pass
def snapshotBeadCtx(*args, **kwargs):
    """
    Creates a context for manipulating in and/or out tangent beads on the motion
    trail
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - inTangent : i                  (bool)          [query,edit]
        Indicates that we will be showing beads for the in tangent when entering the
        context
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - outTangent : o                 (bool)          [query,edit]
        Indicates that we will be showing beads for the out tangent when entering the
        context                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.snapshotBeadCtx`
    """
    pass
def PickWalkRightSelect(*args, **kwargs): pass
def HypershadeDeleteAllShadingGroupsAndMaterials(*args, **kwargs): pass
def cmdArnoldCreateStandInFile(*args, **kwargs): pass
def VolumeSkinBindingOptions(*args, **kwargs): pass
def SetToFaceNormalsOptions(*args, **kwargs): pass
def AddInBetweenTargetShapeOptions(*args, **kwargs): pass
def CreateWrapOptions(*args, **kwargs): pass
def iGroom(*args, **kwargs):
    """
    Flags:
    - autoTwist : at                 (bool)          []
    
    - clearMask : cm                 (bool)          []
    
    - description : d                (unicode)       []
    
    - emptyExport : ex               (bool)          []
    
    - exportAll : xa                 (unicode)       []
    
    - exportMaps : xm                (unicode)       []
    
    - exportMask : xk                (unicode)       []
    
    - exportRegion : xr              (unicode)       []
    
    - flip : fl                      (bool)          []
    
    - forceExport : fx               (bool)          []
    
    - importMaps : im                (unicode)       []
    
    - importMask : ik                (unicode)       []
    
    - importRegion : ir              (unicode)       []
    
    - instanceMethod : instanceMethod (int)           []
    
    - maskToCurves : mc              (float)         []
    
    - noRefresh : nr                 (bool)          []
    
    - setLength : sl                 (unicode)       []
    
    - setWidth : sw                  (unicode)       []
    
    - texelsPerUnit : tpu            (float)         []
    
    - unBindGeometry : ub            (bool)          []
    
    
    Derived from mel command `maya.cmds.iGroom`
    """
    pass
def SingleViewArrangement(*args, **kwargs): pass
def dockControl(*args, **kwargs): pass
def AttachBrushToCurves(*args, **kwargs): pass
def XgmSetWidthBrushToolOption(*args, **kwargs): pass
def FBXExportConvert2Tif(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportConvert2Tif`
    """
    pass
def CreateReferenceOptions(*args, **kwargs): pass
def nexCtx(*args, **kwargs):
    """
    Flags:
    - appendMesh : apm               (unicode)       []
    
    - bevelEdge : bed                (float)         []
    
    - bridgeCurveType : bct          (int)           []
    
    - bugReport : bug                (bool)          []
    
    - cameraToPoly : ctp             (bool)          []
    
    - canDoConnect : cdc             (bool)          []
    
    - cancelManip : cam              (bool)          []
    
    - capslock : cap                 (bool)          []
    
    - connItemSel : cis              (int)           []
    
    - connectMode : sm               (bool)          []
    
    - contextTweakMode : ctm         (bool)          []
    
    - curSlideMesh : csm             (unicode)       []
    
    - debugString : deb              (bool)          []
    
    - extrudePoly : epl              (float)         []
    
    - extrudeVert : evr              (float, float)  []
    
    - extrudeVertDivisions : evd     (int)           []
    
    - getManipVal : gmv              (unicode, unicode) []
    
    - getSplitCmd : gsc              (bool)          []
    
    - hasPolySelection : hps         (bool)          []
    
    - hasValidSel : hs               (bool)          []
    
    - hideManip : hm                 (bool)          []
    
    - hiliteSymmetrize : hsy         (bool)          []
    
    - iconpath : ico                 (unicode)       []
    
    - isGoodForBevel : gbe           (bool)          []
    
    - isGoodForBridge : gfb          (bool)          []
    
    - isGoodForExtrude : gfe         (bool)          []
    
    - keepFacesTogether : kft        (int)           []
    
    - lastSewNode : lsn              (unicode)       []
    
    - lockSelected : ls              (bool)          []
    
    - manipOrientation : mo          (float, float, float) []
    
    - manipOrientationX : mox        (float)         []
    
    - manipOrientationY : moy        (float)         []
    
    - manipOrientationZ : moz        (float)         []
    
    - manipPos : mp                  (float, float, float) []
    
    - manipPosX : mpx                (float)         []
    
    - manipPosY : mpy                (float)         []
    
    - manipPosZ : mpz                (float)         []
    
    - manipScaleX : msx              (float)         []
    
    - manipScaleY : msy              (float)         []
    
    - manipScaleZ : msz              (float)         []
    
    - manipUndoNotify : mun          (bool)          []
    
    - manipVal : mv                  (unicode, unicode, float) []
    
    - modelPanelType : mpt           (unicode, unicode) []
    
    - multiCompMode : mcm            (int)           []
    
    - numConnItems : nci             (bool)          []
    
    - polynames : pn                 (bool)          []
    
    - prevManipVal : pmv             (float)         []
    
    - quadDrawClearDots : qcd        (bool)          []
    
    - resetCustom : rc               (unicode)       []
    
    - resetManip : rm                (bool)          []
    
    - restoreSelection : res         (unicode)       []
    
    - rmbComplete : rmc              (bool)          []
    
    - selCount : cnt                 (unicode)       []
    
    - selFlip : sef                  (bool)          []
    
    - selSym : ses                   (bool)          []
    
    - selectHilite : sh              (bool)          []
    
    - selectLocked : sl              (bool)          []
    
    - skipSelTypeCB : ssc            (bool)          []
    
    - stickyIsDown : sid             (bool)          []
    
    - straighten : str               (bool)          []
    
    - unlockAll : ua                 (bool)          []
    
    - updateManips : upm             (bool)          []
    
    - useRefMesh : urm               (bool)          []
    
    
    Derived from mel command `maya.cmds.nexCtx`
    """
    pass
def ToggleModelingToolkit(*args, **kwargs): pass
def PluginManager(*args, **kwargs): pass
def CreateAmbientLight(*args, **kwargs): pass
def SetMBSSubtract(*args, **kwargs): pass
def FBXImportSetLockedAttribute(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportSetLockedAttribute`
    """
    pass
def ToggleTextureBorderEdges(*args, **kwargs): pass
def addWrappedCmd(cmdname, cmd='None'): pass
def _testDecorator(function): pass
def polyPlane(*args, **kwargs): pass
def nConstraintDisableCollision(*args, **kwargs): pass
def SubdivSmoothnessMediumOptions(*args, **kwargs): pass
def CutSelected(*args, **kwargs): pass
def HideUnselectedObjects(*args, **kwargs): pass
def PerformCreateBifrostCacheOptions(*args, **kwargs): pass
def selectMode(*args, **kwargs):
    """
    The selectModecommand is used to change the selection mode.  Object, component,
    root, leaf and template modes are mutually exclusive.
    
    Flags:
    - component : co                 (bool)          [create,query]
        Set component selection on. Component selection mode allows filtered selection
        based on the component selection mask. The component selection mask is the set
        of selection masks related to objects that indicate which components are
        selectable.
    
    - hierarchical : h               (bool)          [create,query]
        Set hierarchical selection on. There are three types of hierarchical selection:
        root, leaf and template.  Hierarchical mode is set if root, leaf or template
        mode is set. Setting to hierarchical mode will set the mode to whichever of
        root, leaf, or template was last on.
    
    - leaf : l                       (bool)          [create,query]
        Set leaf selection mode on.  This mode allows the leaf level objects to be
        selected.  It is similar to object selection mode but ignores the object
        selection mask.
    
    - object : o                     (bool)          [create,query]
        Set object selection on. Object selection mode allows filtered selection based
        on the object selection mask. The object selection mask is the set of selection
        masks related to objects that indicate which objects are selectable.  The masks
        are controlled by the selectTypecommand.  Object selection mode selects the leaf
        level objects.
    
    - preset : p                     (bool)          [create,query]
        Allow selection of anything with the mask set, independent of it being an object
        or a component.
    
    - root : r                       (bool)          [create,query]
        Set root selection mode on.  This mode allows the root of a hierarchy to be
        selected by selecting any of its descendents.  It ignores the object selection
        mask.
    
    - template : t                   (bool)          [create,query]
        Set template selection mode on.  This mode allows selection of templated
        objects.  It selects the templated object closest to the root of the hierarchy.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectMode`
    """
    pass
def ConvertHairSelectionToStartAndRestCurveEndCVs(*args, **kwargs): pass
def CreateLatticeOptions(*args, **kwargs): pass
def squareSurface(*args, **kwargs):
    """
    This command produces a square surface given 3 or 4 curves. This resulting
    square surface is created within the intersecting region of the selected curves.
    The order of selection is important and the curves must intersect or their ends
    must meet.You must specify one continuity type flag for each selected curve. If
    continuity type is 1 (fixed, no tangent continuity) then the curveFitCheckpoints
    flag (cfc) is not required.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - continuityType1 : ct1          (int)           [create,query,edit]
        Continuity type legal values for curve 1: 1 - fixed boundary 2 - tangent
        continuity 3 - implied tangent continuity Default:2
    
    - continuityType2 : ct2          (int)           [create,query,edit]
        Continuity type legal values for curve 2: 1 - fixed boundary 2 - tangent
        continuity 3 - implied tangent continuity Default:2
    
    - continuityType3 : ct3          (int)           [create,query,edit]
        Continuity type legal values for curve 3: 1 - fixed boundary 2 - tangent
        continuity 3 - implied tangent continuity Default:2
    
    - continuityType4 : ct4          (int)           [create,query,edit]
        Continuity type legal values for curve 4: 1 - fixed boundary 2 - tangent
        continuity 3 - implied tangent continuity Default:2
    
    - curveFitCheckpoints : cfc      (int)           [create,query,edit]
        The number of points per span to check the tangency deviation between the
        boundary curve and the created tangent square surface. Only available for the
        tangent continuity type. Default:5
    
    - endPointTolerance : ept        (float)         [create,query,edit]
        Tolerance for end points, only used if endPoint attribute is true. Default:0.1
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    - rebuildCurve1 : rc1            (bool)          [create,query,edit]
        A boolean to determine if input curve 1 should be rebuilt (with curvature
        continuity). Default:false
    
    - rebuildCurve2 : rc2            (bool)          [create,query,edit]
        A boolean to determine if input curve 2 should be rebuilt (with curvature
        continuity). Default:false
    
    - rebuildCurve3 : rc3            (bool)          [create,query,edit]
        A boolean to determine if input curve 3 should be rebuilt (with curvature
        continuity). Default:false
    
    - rebuildCurve4 : rc4            (bool)          [create,query,edit]
        A boolean to determine if input curve 4 should be rebuilt (with curvature
        continuity). Default:false                  Common flags
    
    
    Derived from mel command `maya.cmds.squareSurface`
    """
    pass
def PlaybackPefRealtime(*args, **kwargs): pass
def PerspTextureLayout(*args, **kwargs): pass
def interactionStyle(*args, **kwargs):
    """
    Flags:
    - style : s                      (unicode)       []
    
    
    Derived from mel command `maya.cmds.interactionStyle`
    """
    pass
def DisconnectJoint(*args, **kwargs): pass
def CreatePolygonPyramid(*args, **kwargs): pass
def BestPlaneTexturingTool(*args, **kwargs): pass
def CreateSubCharacter(*args, **kwargs): pass
def HypershadeToggleUseAssetsAndPublishedAttributes(*args, **kwargs): pass
def NodeEditorReduceTraversalDepth(*args, **kwargs): pass
def TogglePolyDisplaySoftEdges(*args, **kwargs): pass
def OpenAutodeskAccount(*args, **kwargs): pass
def PaintOnPaintableObjects(*args, **kwargs): pass
def AssetEditor(*args, **kwargs): pass
def SnapToMeshCenterRelease(*args, **kwargs): pass
def picture(*args, **kwargs): pass
def TangentsStepped(*args, **kwargs): pass
def FBIKLabelFingerBase(*args, **kwargs): pass
def FilletBlendToolOptions(*args, **kwargs): pass
def connectJoint(*args, **kwargs):
    """
    This command will connect two skeletons based on the two selected joints. The
    first selected joint can be made a child of the parent of the second selected
    joint or a child of the second selected joint, depending on the flags used.
    Note1: The first selected joint must be the root of a skeleton. The second
    selected joint must have a parent. Note2: If a joint name is specified in the
    command line, it is used as the child and the first selected joint will be the
    parent. If no joint name is given at the command line, two joints must be
    selected.
    
    Flags:
    - connectMode : cm               (bool)          [create]
        The first selected joint will be parented under the parent of the second
        selected joint.
    
    - parentMode : pm                (bool)          [create]
        The first selected joint will be parented under the second selected joint. Both
        joints will be in the active list(selection list).                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.connectJoint`
    """
    pass
def TimeEditorCreateAudioTracksAtEnd(*args, **kwargs): pass
def polySelectCtx(*args, **kwargs):
    """
    Create a new context to select polygon components                In query mode,
    return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - mode : m                       (int)           [create,query,edit]
        Edge loop or Edge ring or Border edge mode                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySelectCtx`
    """
    pass
def PickColorDeactivate(*args, **kwargs): pass
def fontDialog(*args, **kwargs): pass
def IkHdsWin(*args, **kwargs): pass
def setInputDeviceMapping(*args, **kwargs):
    """
    The command sets a scale and offset for all attachments made to a specified
    device axis. Any attachment made to a mapped device axis will have the scale and
    offset applied to its values. The value from the device is multiplied by the
    scale and the offset is added to this product. With an absolute mapping, the
    attached attribute gets the resulting value. If the mapping is relative, the
    final value is the offset added to the scaled difference between the current
    device value and the previous device value. This mapping will be applied to the
    device data before any mappings defined by the setAttrMapping command. A typical
    use would be to scale a device's input so that it is within a usable range. For
    example, the device mapping can be used to calibrate a spaceball to work in a
    specific section of a scene. As an example, if the space ball is setup with
    absolute device mappings, constantly pressing in one direction will cause the
    attached attribute to get a constant value. If a relative mapping is used, and
    the spaceball is pressed in one direction, the attached attribute will jump a
    constantly increasing (or constantly decreasing) value and will find a rest
    value equal to the offset. There are important differences between how the
    relative flag is handled by this command and the setAttrMapping command. (See
    the setAttrMapping documentation for specifics on how it calculates relative
    values). In general, both a relative device mapping (this command) and a
    relative attachment mapping (setAttrMapping) should not be used together on the
    same axis.
    
    Dynamic library stub function 
    
    Flags:
    - absolute : a                   (bool)          [create]
        report absolute axis values
    
    - axis : ax                      (unicode)       [create]
        specify the axis to map
    
    - device : d                     (unicode)       [create]
        specify which device to map
    
    - offset : o                     (float)         [create]
        specify the axis offset value
    
    - relative : r                   (bool)          [create]
        report the change in axis value since the last sample
    
    - scale : s                      (float)         [create]
        specify the axis scale value
    
    - view : v                       (bool)          [create]
        translate the device coordinates into the coordinates of the active camera
    
    - world : w                      (bool)          [create]
        translate the device coordinates into world space coordinates
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setInputDeviceMapping`
    """
    pass
def toolPropertyWindow(*args, **kwargs): pass
def SelectUVMask(*args, **kwargs): pass
def PostInfinityCycleOffset(*args, **kwargs): pass
def xgmDataQueryHelperForTest(*args, **kwargs):
    """
    Flags:
    - boundMesh : bm                 (unicode)       []
    
    - direction : d                  (bool)          []
    
    - faceId : f                     (bool)          []
    
    - position : p                   (bool)          []
    
    - primitiveInfo : pi             (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmDataQueryHelperForTest`
    """
    pass
def mayaHasRenderSetup(*args, **kwargs):
    """
    This command controls and queries render setup states.           In query mode,
    return type is based on queried flag.
    
    Flags:
    - enableCurrentSession : ecs     (bool)          [query,edit]
        Enables or disables render setup for this Maya session only. This flag should
        only be called during Maya intialization. This flag is for internal use only,
        may change at any time and is unsupported.
    
    - enableDuringTests : edt        (bool)          [query,edit]
        Switches render setup for this Maya session only, as legacy render layer mode is
        assumed during testing. This flag is for internal use only, may change at any
        time and is unsupported.                                    Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.mayaHasRenderSetup`
    """
    pass
def UnmirrorSmoothProxy(*args, **kwargs): pass
def MirrorJoint(*args, **kwargs): pass
def cMuscleQuery(*args, **kwargs):
    """
    Flags:
    - direction : dir                (bool)          []
    
    - geometry : geo                 (bool)          []
    
    - help : h                       (bool)          []
    
    - index : idx                    (bool)          []
    
    - muscle : mus                   (bool)          []
    
    - selfcollide : slf              (bool)          []
    
    - smartcollide : smr             (bool)          []
    
    - system : sys                   (PyNode)        []
    
    
    Derived from mel command `maya.cmds.cMuscleQuery`
    """
    pass
def xgmSelectedPrims(*args, **kwargs):
    """
    Flags:
    - cull : c                       (bool)          []
    
    - uncull : u                     (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmSelectedPrims`
    """
    pass
def HideDeformers(*args, **kwargs): pass
def ConvertSelectionToEdges(*args, **kwargs): pass
def pairBlend(*args, **kwargs): pass
def CreateClip(*args, **kwargs): pass
def volumeAxis(*args, **kwargs): pass
def flexor(*args, **kwargs): pass
def rangeControl(*args, **kwargs): pass
def SplitVertex(*args, **kwargs): pass
def OpenFBXReview(*args, **kwargs): pass
def SculptSubdivsTool(*args, **kwargs): pass
def copyAttr(*args, **kwargs):
    """
    Given two nodes, transfer the connections and/or the values from the first node
    to the second for all attributes whose names and data types match. When values
    are transferred, they are transferred directly. They are not mapped or modified
    in any way. The transferAttributes command can be used to transfer and remap
    some mesh attributes. The attributes flag can be used to specify a list of
    attributes to be processed. If the attributes flag is unused, all attributes
    will be processed. For dynamic attributes, the values and/or connections will
    only be transferred if the attributes names on both nodes match. This command
    does not support geometry shape nodes such as meshes, subds and nurbs. This
    command does not support transfer of multi-attribute values such as weight
    arrays.           In query mode, return type is based on queried flag.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        The name of the attribute(s) for which connections and/or values will be
        transferred. If no attributes are specified, then all attributes will be
        transferred.
    
    - containerParentChild : cpc     (bool)          [create]
        For use when copying from one container to another only. This option indicates
        that the published parent and/or child relationships on the original container
        should be transferred to the target container if the published names match.
    
    - inConnections : ic             (bool)          [create]
        Indicates that incoming connections should be transferred.
    
    - keepSourceConnections : ksc    (bool)          [create]
        For use with the outConnections flag only. Indicates that the connections should
        be maintained on the first node, in addition to making them to the second node.
        If outConnections is used and keepSourceConnections is not used, the out
        connections on the source node will be broken and made to the target node.
    
    - outConnections : oc            (bool)          [create]
        Indicates that outgoing connections should be transferred.
    
    - renameTargetContainer : rtc    (bool)          [create]
        For use when copying from one container to another only. This option will rename
        the target container to the name of the original container, and rename the
        original container to its old name + Orig. You would want to use this option if
        your original container was referenced and edited, and you want those edits from
        the main scene to now apply to the new container.
    
    - values : v                     (bool)          [create]
        Indicates that values should be transferred.                               Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.copyAttr`
    """
    pass
def reorder(*args, **kwargs):
    """
    This command reorders (moves) objects relative to their siblings. For relative
    moves, both positive and negative numbers may be specified.  Positive numbers
    move the object forward and negative numbers move the object backward amoung its
    siblings. When an object is at the end (beginning) of the list of siblings, a
    relative move of 1 (-1) will put the object at the beginning (end) of the list
    of siblings.  That is, relative moves will wrap if necessary. If a shape is
    specified and it is the only child then its parent will be reordered.
    
    Flags:
    - back : b                       (bool)          [create]
        Move object(s) to back of sibling list.
    
    - front : f                      (bool)          [create]
        Move object(s) to front of sibling list.
    
    - relative : r                   (int)           [create]
        Move object(s) relative to other siblings.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.reorder`
    """
    pass
def dR_objectXrayTGL(*args, **kwargs): pass
def OrientConstraint(*args, **kwargs): pass
def ModifyUpperRadiusRelease(*args, **kwargs): pass
def dR_selectInvert(*args, **kwargs): pass
def GetCartoonExample(*args, **kwargs): pass
def HidePolygonSurfaces(*args, **kwargs): pass
def rebuildCurve(*args, **kwargs): pass
def CreatePSDTextureItem(*args, **kwargs): pass
def NextSkinPaintMode(*args, **kwargs): pass
def ToggleVisibilityAndKeepSelection(*args, **kwargs): pass
def FBIKLabelLeft(*args, **kwargs): pass
def artSetPaintCtx(*args, **kwargs):
    """
    This tool allows the user to modify the set membership (add, transfer, remove
    cvs) on nurbs surfaces using Maya Artisan's interface. In query mode, return
    type is based on queried flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objectsetnames : osn           (unicode)       [create,query,edit]
        Default name of object sets
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - setcolorfeedback : scf         (bool)          [create,query,edit]
        Specifies if the color feedback is on or off. C: Default is ON.  Q: When
        queried, it returns a boolean.
    
    - setdisplaycvs : dcv            (bool)          [create,query,edit]
        Specifies if the active cvs are displayed. C: Default is ON. Q: When queried, it
        returns a boolean.
    
    - setopertype : sot              (unicode)       [create,query,edit]
        Specifies the setEdit operation (add, transfer, remove). C: Default is add. Q:
        When queried, it returns a string.
    
    - settomodify : stm              (unicode)       [create,query,edit]
        Specifies the name of the set to modify. Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artSetPaintCtx`
    """
    pass
def nClothMergeCache(*args, **kwargs): pass
def xgmFileRender(*args, **kwargs):
    """
    Flags:
    - local : loc                    (bool)          []
    
    - micro : mic                    (bool)          []
    
    - object : obj                   (bool)          []
    
    - paint3d : p3d                  (bool)          []
    
    - progress : pb                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmFileRender`
    """
    pass
def NodeEditorShapeMenuStateAll(*args, **kwargs): pass
def DetachCurve(*args, **kwargs): pass
def ProjectCurveOnMesh(*args, **kwargs): pass
def progressBar(*args, **kwargs): pass
def dR_testCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_testCmd`
    """
    pass
def pasteKey(*args, **kwargs): pass
def RemoveBifrostEmitter(*args, **kwargs): pass
def HypershadeGraphClearGraph(*args, **kwargs): pass
def insertListItemBefore(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.insertListItemBefore`
    """
    pass
def polyCollapseFacet(*args, **kwargs):
    """
    Turns each selected facet into a point.
    
    Flags:
    - areaThreshold : at             (float)         [create,query,edit]
        Area threshold to determine whether faces should be collapsed. Attribute is
        ignored unless useAreaThreshold is set to true. Default:0.1
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - useAreaThreshold : uat         (bool)          [create,query,edit]
        If true only collapse faces with area less than the area threshold, otherwise
        collapse all faces regardless of area Default:false                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCollapseFacet`
    """
    pass
def NodeEditorGraphClearGraph(*args, **kwargs): pass
def HypershadeAutoSizeNodes(*args, **kwargs): pass
def dR_disableTexturesTGL(*args, **kwargs): pass
def WireDropoffLocatorOptions(*args, **kwargs): pass
def XgGuideTool(*args, **kwargs): pass
def AddBoatLocator(*args, **kwargs): pass
def SelectAllCameras(*args, **kwargs): pass
def toggle(*args, **kwargs):
    """
    The toggle command is used to toggle the display of various object features for
    objects which have these components. For example, CV and edit point display may
    be toggled for those listed     NURB curves or surfaces. Note: This command is
    not undoable.
    
    Flags:
    - above : a                      (bool)          [create]
        Toggle state for all objects above listed objects.
    
    - below : b                      (bool)          [create]
        Toggle state for all objects below listed objects.
    
    - boundary : bn                  (bool)          [create,query]
        Toggle boundary display of listed mesh objects.
    
    - boundingBox : box              (bool)          [create,query]
        Toggle or query the bounding box display of listed objects.
    
    - controlVertex : cv             (bool)          [create,query]
        Toggle CV display of listed curves and surfaces.
    
    - doNotWrite : dnw               (bool)          [create,query]
        Toggle the this should be written to the filestate.
    
    - editPoint : ep                 (bool)          [create,query]
        Toggle edit point display of listed curves and surfaces.
    
    - extent : et                    (bool)          [create,query]
        Toggle display of extents of listed mesh objects.
    
    - facet : f                      (bool)          [create,query]
        For use with normalflag. Set the normal display style to facet display.
    
    - geometry : g                   (bool)          [create,query]
        Toggle geometry display of listed objects.
    
    - gl : gl                        (bool)          [create]
        Toggle state for all objects
    
    - highPrecisionNurbs : hpn       (bool)          [create,query]
        Toggle high precision display for Nurbs
    
    - hull : hl                      (bool)          [create,query]
        Toggle hull display of listed curves and surfaces.
    
    - latticePoint : lp              (bool)          [create,query]
        Toggle point display of listed lattices
    
    - latticeShape : ls              (bool)          [create,query]
        Toggle display of listed lattices
    
    - localAxis : la                 (bool)          [create,query]
        Toggle local axis display of listed objects.
    
    - newCurve : nc                  (bool)          [create,query]
        Set component display state of new curve objects
    
    - newPolymesh : np               (bool)          [create,query]
        Set component display state of new polymesh objects
    
    - newSurface : ns                (bool)          [create,query]
        Set component display state of new surface objects
    
    - normal : nr                    (bool)          [create,query]
        Toggle display of normals of listed surface and mesh objects.
    
    - origin : o                     (bool)          [create,query]
        Toggle origin display of listed surfaces.
    
    - point : pt                     (bool)          [create,query]
        For use with normal flag. Set the normal display style to vertex display.
    
    - pointDisplay : pd              (bool)          [create,query]
        Toggle point display of listed surfaces.
    
    - pointFacet : pf                (bool)          [create,query]
        For use with normalflag. Set the normal display style to vertex and face
        display.
    
    - rotatePivot : rp               (bool)          [create,query]
        Toggle rotate pivot display of listed objects.
    
    - scalePivot : sp                (bool)          [create,query]
        Toggle scale pivot display of listed objects.
    
    - selectHandle : sh              (bool)          [create,query]
        Toggle select handle display of listed objects.
    
    - state : st                     (bool)          [create]
        Explicitly set the state to true or false instead of toggling the state. Can not
        be queried.
    
    - surfaceFace : sf               (bool)          [create,query]
        Toggle surface face handle display of listed surfaces.
    
    - template : te                  (bool)          [create,query]
        Toggle template state of listed objects
    
    - uvCoords : uv                  (bool)          [create,query]
        Toggle display uv coords of listed mesh objects.
    
    - vertex : vt                    (bool)          [create,query]
        Toggle vertex display of listed mesh objects.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.toggle`
    """
    pass
def loadModule(*args, **kwargs):
    """
    Maya plug-ins may be installed individually within one of Maya's standard plug-
    in directories, or they may be packaged up with other resources in a module.
    Each module resides in its own directory and provides a module definition file
    to make Maya aware of the plug-ins it provides. When Maya starts up it loads all
    of the module files it finds, making the module's plug-ins, scripts and other
    resources available for use. Note that the plug-ins themselves are not loaded at
    this time, Maya is simply made aware of them so that they can be loaded if
    needed. The loadModule command provides the ability to list and load any new
    modules which have been added since Maya started up, thereby avoiding the need
    to restart Maya before being able to use them.
    
    Flags:
    - allModules : a                 (bool)          [create]
        Load all new modules not yet loaded in Maya. New modules are the one returned by
        the -scan option.
    
    - load : ld                      (unicode)       [create]
        Load the module specified by the module definition file.
    
    - scan : sc                      (bool)          [create]
        Rescan module presence. Returns the list of module definition files found and
        not yet loaded into Maya. Does not load any of these newly found modules, nor
        change the Maya state.                                 Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.loadModule`
    """
    pass
def texMoveContext(*args, **kwargs):
    """
    This command can be used to create, edit, or query a texture editor move manip
    context. Note that the above flags control the global behaviour of all texture
    editor move manip contexts.  Changing one context independently is not allowed.
    Changing a context's behaviour using the above flags, will change all existing
    texture editor move manip contexts.
    
    Flags:
    - editPivotMode : epm            (bool)          [query]
        Returns true when the manipulator is in edit pivot mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - position : p                   (bool)          [query]
        Returns the current position of the manipulator
    
    - snap : s                       (bool)          [query,edit]
        Sets or queries whether snapping is to be used.
    
    - snapComponentsRelative : scr   (bool)          [query,edit]
        Value can be : true or false. If true, while snapping a group of UVs, the
        relative spacing between them will be preserved. If false, all the UVs will be
        snapped to the target point
    
    - snapPixelMode : spm            (int)           [query,edit]
        Sets the snapping mode to be the pixel center or upper left corner.
    
    - snapValue : sv                 (float)         [query,edit]
        Sets or queries the size of the snapping increment.
    
    - tweakMode : twk                (bool)          [query,edit]
        When true, the manipulator is hidden and highlighted components can be selected
        and moved in one step using a click-drag interaction.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texMoveContext`
    """
    pass
def FBXImportAxisConversionEnable(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportAxisConversionEnable`
    """
    pass
def disconnectJoint(*args, **kwargs):
    """
    This command will break a skeleton at the selected joint and delete any
    associated handles.
    
    Flags:
    - attachHandleMode : ahm         (bool)          [create]
        This flag is obsolete and no longer supported.
    
    - deleteHandleMode : dhm         (bool)          [create]
        Delete the handle on the associated joint.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.disconnectJoint`
    """
    pass
def SelectEdgeMask(*args, **kwargs): pass
def xgmDirectionBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmDirectionBrushToolCmd`
    """
    pass
def dR_showOptions(*args, **kwargs): pass
def FBXExportBakeComplexEnd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportBakeComplexEnd`
    """
    pass
def debugVar(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.debugVar`
    """
    pass
def NodeEditorGridToggleCrosshairOnEdgeDragging(*args, **kwargs): pass
def nConstraintComponentToComponentOptions(*args, **kwargs): pass
def dbmessage(*args, **kwargs):
    """
    The dbmessagecommand is used to install monitors for certain message types,
    dumping debug information as they are sent so that the flow of messages can be
    examined.
    
    Flags:
    - file : f                       (unicode)       [create]
        Destination file of the message monitoring information.  Use the special names
        stdoutand stderrto redirect to your command window.  As well, the special name
        msdevis available on NT to direct your output to the debug tab in the output
        window of Developer Studio. Default value is stdout.
    
    - list : l                       (bool)          [create]
        List all available message types and their current enabled status.
    
    - monitor : m                    (bool)          [create]
        Set the monitoring state of the message type ('on' to enable, 'off' to disable).
        Returns the list of all message types being monitored after the change in state.
    
    - type : t                       (unicode)       [create]
        Monitor only the messages whose name matches this keyword (default is all).
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dbmessage`
    """
    pass
def SetInitialState(*args, **kwargs): pass
def NodeEditorConnectionStyleBezier(*args, **kwargs): pass
def TimeEditorClipScaleToggle(*args, **kwargs): pass
def HypershadeRenameTab(*args, **kwargs): pass
def ToggleShelf(*args, **kwargs): pass
def ToggleXGenDisplayHUD(*args, **kwargs): pass
def dR_bevelTool(*args, **kwargs): pass
def DeleteAllHistory(*args, **kwargs): pass
def ConnectComponents(*args, **kwargs): pass
def timeEditorTracks(*args, **kwargs): pass
def UVCreateSnapshot(*args, **kwargs): pass
def createPolyPrismCtx(*args, **kwargs):
    """
    Flags:
    - attachToNumSides : ans         (bool)          []
    
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - length : ln                    (float)         []
    
    - name : n                       (unicode)       []
    
    - numberOfSides : ns             (int)           []
    
    - sideLength : sl                (float)         []
    
    - subdivisionsCap : sc           (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    
    Derived from mel command `maya.cmds.createPolyPrismCtx`
    """
    pass
def textScrollList(*args, **kwargs): pass
def inViewMessage(*args, **kwargs):
    """
    Used for displaying in-view messages. Note: On Linux, the alphaand
    textAlphaflags for inViewMessage are only supported when running a window
    manager that supports compositing (transparency and opacity).  Otherwise, they
    are ignored.  In addition, the flags for message fading: -fade, -fadeInTime,
    -fadeStay and -fadeOutTimeare supported, but the message will display without a
    fade effect if the window manager doesn't support compositing.
    
    Flags:
    - alpha : a                      (float)         [create]
        Sets the maximum alpha transparency for the message box.
    
    - assistMessage : amg            (unicode)       [create]
        The user assistance message to be displayed, can be html format.
    
    - backColor : bkc                (int)           [create]
        Sets the background color for the message using the format 0xAARRGGBB, alpha is
        not taken into account.
    
    - clear : cl                     (unicode)       [create]
        Use this flag to clear the message at a specified position. The supported
        positions are the same as for the -pos/position flag.
    
    - clickKill : ck                 (bool)          [create]
        Use this flag if the message needs to be deleted on mouse click.
    
    - dragKill : dk                  (bool)          [create]
        Use this flag if the message needs to be deleted on mouse drag.
    
    - fade : f                       (bool)          [create]
        Whether the message will fade after a time interval or not.
    
    - fadeInTime : fit               (int)           [create]
        Sets how long it takes for the image to fade in (milliseconds).
    
    - fadeOutTime : fot              (int)           [create]
        Sets how long it takes for the image to fade out (milliseconds).
    
    - fadeStayTime : fst             (int)           [create]
        Sets how long the image stays at max opacity  (milliseconds).
    
    - font : ft                      (unicode)       [create]
        Sets the message to a font (eg. Arial).
    
    - fontSize : fts                 (int)           [create]
        Sets the message font size.
    
    - frameOffset : fof              (int)           [create]
        Sets how far the message appears from the edge of the viewport in pixels.
    
    - hide : hd                      (bool)          [create]
        Hides all messages.
    
    - message : msg                  (unicode)       [create]
        The message to be displayed, can be html format. General message, inherited by
        -amg/assistMessageand -smg/statusMessage.
    
    - minimize : min                 (bool)          [create]
        Minimize all messages.
    
    - position : pos                 (unicode)       [create]
        The position that the message will appear at relative to the active viewport.
        The supported positions are:topLefttopCentertopRightmidLeftmidCentermidCenterTop
        midCenterBotmidRightbotLeftbotCenterbotRight
    
    - restore : res                  (bool)          [create]
        Restore all messages.
    
    - show : sh                      (bool)          [create]
        Shows all messages.
    
    - statusMessage : smg            (unicode)       [create]
        The status info message to be displayed, can be html format.
    
    - textAlpha : ta                 (float)         [create]
        Sets the maximum alpha transparency for the message text.
    
    - textOffset : tof               (int)           [create]
        Sets how far the text appears from the edge of the message box in pixels.
    
    - uvEditor : uv                  (bool)          [create]
        Show the message in the active UV editor view.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.inViewMessage`
    """
    pass
def MakePressureCurve(*args, **kwargs): pass
def SelectAllNURBSCurves(*args, **kwargs): pass
def ReverseSurfaceDirection(*args, **kwargs): pass
def TimeEditorExplodeGroup(*args, **kwargs): pass
def EditAssignedSet(*args, **kwargs): pass
def RemoveBrushSharing(*args, **kwargs): pass
def referenceQuery(*args, **kwargs): pass
def SelectPointsMask(*args, **kwargs): pass
def mrMapVisualizer(*args, **kwargs): pass
def textureDeformer(*args, **kwargs): pass
def ShowBoundingBox(*args, **kwargs): pass
def HypershadeShowAllAttrs(*args, **kwargs): pass
def OffsetSurfaces(*args, **kwargs): pass
def FBIKLabelMiddleFinger(*args, **kwargs): pass
def dR_quadDrawPress(*args, **kwargs): pass
def floatSliderGrp(*args, **kwargs): pass
def nucleusDisplayNComponentNodes(*args, **kwargs): pass
def cluster(*args, **kwargs): pass
def CreatePolygonSphereOptions(*args, **kwargs): pass
def TrenderSetupStates(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.TrenderSetupStates`
    """
    pass
def copyKey(*args, **kwargs): pass
def DeleteEntireHairSystem(*args, **kwargs): pass
def CreateOceanOptions(*args, **kwargs): pass
def BatchRenderOptions(*args, **kwargs): pass
def dR_curveSnapPress(*args, **kwargs): pass
def SymmetrizeSelection(*args, **kwargs): pass
def UVSphericalProjection(*args, **kwargs): pass
def PaintTextureDeformerWeightsToolOptions(*args, **kwargs): pass
def JointTool(*args, **kwargs): pass
def SelectSimilar(*args, **kwargs): pass
def MergeEdgeTool(*args, **kwargs): pass
def shelfLayout(*args, **kwargs): pass
def tangentConstraint(*args, **kwargs): pass
def NodeEditorBackToParent(*args, **kwargs): pass
def UnfoldPackUVs3DInEmptyTile(*args, **kwargs): pass
def XgmSplineCacheDeleteNodesAhead(*args, **kwargs): pass
def StitchTogether(*args, **kwargs): pass
def cmdScrollFieldExecuter(*args, **kwargs): pass
def HIKSelectedMode(*args, **kwargs): pass
def ParentConstraint(*args, **kwargs): pass
def ToggleAutoActivateBodyPart(*args, **kwargs): pass
def mouldSrf(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.mouldSrf`
    """
    pass
def CreateBarrierConstraintOptions(*args, **kwargs): pass
def polySelectSp(*args, **kwargs):
    """
    Flags:
    - loop : l                       (bool)          []
    
    - ring : r                       (bool)          []
    
    
    Derived from mel command `maya.cmds.polySelectSp`
    """
    pass
def dR_convertSelectionToVertex(*args, **kwargs): pass
def GetHIKChildId(*args, **kwargs):
    """
    Flags:
    - childindex : cid               (int)           []
    
    - nodeid : nid                   (int)           []
    
    
    Derived from mel command `maya.cmds.GetHIKChildId`
    """
    pass
def ScaleUVTool(*args, **kwargs): pass
def SetDefaultManipNone(*args, **kwargs): pass
def SimplifyCurveOptions(*args, **kwargs): pass
def SubdivSmoothnessRough(*args, **kwargs): pass
def RoundToolOptions(*args, **kwargs): pass
def PolyCreaseToolOptions(*args, **kwargs): pass
def CameraRemoveAllForAll(*args, **kwargs): pass
def glRenderEditor(*args, **kwargs):
    """
    Create a glRender view. This is a special view used for hardware rendering. This
    command is used to create and reparent the view as needed to support panels. See
    the glRender command for controlling the specific behavior of the hardware
    rendering. In query mode, return type is based on queried flag.
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - lookThru : lt                  (unicode)       [create,query,edit]
        Specify which camera the glRender view should be using.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
    
    - viewCameraName : vcn           (bool)          [query]
        Returns the name of the current camera used by the glRenderPanel. This is a
        query only flag.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.glRenderEditor`
    """
    pass
def createNurbsTorusCtx(*args, **kwargs):
    """
    Flags:
    - attachToHeightRatio : ahr      (bool)          []
    
    - attachToSections : attachToSections (bool)          []
    
    - attachToSpans : asp            (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - endSweep : esw                 (float)         []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - minorRadius : mr               (float)         []
    
    - minorSweep : msw               (float)         []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sections : sc                  (int)           []
    
    - spans : sp                     (int)           []
    
    - startSweep : ssw               (float)         []
    
    - surfaceDegree : sd             (int)           []
    
    - tolerance : tol                (float)         []
    
    - toleranceType : tlt            (int)           []
    
    - useTolerance : ut              (bool)          []
    
    
    Derived from mel command `maya.cmds.createNurbsTorusCtx`
    """
    pass
def TanimLayer(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.TanimLayer`
    """
    pass
def PaintEffectsToCurve(*args, **kwargs): pass
def AddPondBoatLocatorOptions(*args, **kwargs): pass
def ResolveInterpenetrationOptions(*args, **kwargs): pass
def nClothDeleteHistory(*args, **kwargs): pass
def UVStackSimilarShells(*args, **kwargs): pass
def DeleteAllClusters(*args, **kwargs): pass
def CreateConstructionPlaneOptions(*args, **kwargs): pass
def SymmetrizeUVBrushSizeOn(*args, **kwargs): pass
def viewCamera(*args, **kwargs):
    """
    The viewCamera command is used to position a camera to look directly at the side
    or top of another camera. This is primarily useful for the user when he or she
    is setting depth-of-field and clipping planes, if they are being used. The
    default behaviour: If no other flags are specified, the camera in the active
    panel is moved and the -t is presumed. If there is a camera selected, it is used
    as the target camera.
    
    Flags:
    - move : m                       (PyNode)        [create]
        Specifies which camera needs to move.
    
    - sideView : s                   (bool)          [create]
        Position camera to look at the side of the target camera.
    
    - topView : t                    (bool)          [create]
        Position camera to look at the top of the target camera (default).
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewCamera`
    """
    pass
def MakeUVInstanceCurrent(*args, **kwargs): pass
def DeleteMotionPaths(*args, **kwargs): pass
def ToggleMainMenubar(*args, **kwargs): pass
def attributeQuery(*args, **kwargs):
    """
    attributeQuery returns information about the configuration of an attribute. It
    handles both boolean flags, returning true or false, as well as other return
    values. Specifying more than one boolean flag will return the logical andof all
    the specified boolean flags.  You may not specify any two flags when both do not
    provide a boolean return type.  (eg. -internal -hiddenis okay but -range
    -hiddenor -range -softRangeis not.)
    
    Flags:
    - affectsAppearance : aa         (bool)          [create]
        Return true if the attribute affects the appearance of the node
    
    - affectsWorldspace : aws        (bool)          [create]
        Return the status of the attribute flag marking attributes affecting worldspace
    
    - attributeType : at             (bool)          [create]
        Return the name of the attribute type (will be the same type names as described
        in the addAttr and addExtension commands).
    
    - cachedInternally : ci          (bool)          [create]
        Return whether the attribute is cached within the node as well as in the
        datablock
    
    - categories : ct                (bool)          [create]
        Return the categories to which the attribute belongs or an empty list if it does
        not belong to any.
    
    - channelBox : ch                (bool)          [create]
        Return whether the attribute should show up in the channelBox or not
    
    - connectable : c                (bool)          [create]
        Return the connectable status of the attribute
    
    - enum : e                       (bool)          [create]
        Return true if the attribute is a enum attribute
    
    - exists : ex                    (bool)          [create]
        Return true if the attribute exists
    
    - hidden : h                     (bool)          [create]
        Return the hidden status of the attribute
    
    - indeterminant : idt            (bool)          [create]
        Return true if this attribute might be used in evaluation but it's not known for
        sure until evaluation time
    
    - indexMatters : im              (bool)          [create]
        Return the indexMatters status of the attribute
    
    - internal : i                   (bool)          [create]
        Return true if the attribute is either internalSet or internalGet
    
    - internalGet : ig               (bool)          [create]
        Return true if the attribute come from getCachedValue
    
    - internalSet : internalSet      (bool)          [create]
        Return true if the attribute must be set through setCachedValue
    
    - keyable : k                    (bool)          [create]
        Return the keyable status of the attribute
    
    - listChildren : lc              (bool)          [create]
        Return the list of children attributes of the given attribute.
    
    - listDefault : ld               (bool)          [create]
        Return the default values of numeric and compound numeric attributes.
    
    - listEnum : le                  (bool)          [create]
        Return the list of enum strings for the given attribute.
    
    - listParent : lp                (bool)          [create]
        Return the parent of the given attribute.
    
    - listSiblings : ls              (bool)          [create]
        Return the list of sibling attributes of the given attribute.
    
    - longName : ln                  (bool)          [create]
        Return the long name of the attribute.
    
    - maxExists : mxe                (bool)          [create]
        Return true if the attribute has a hard maximum. A min does not have to be
        present.
    
    - maximum : max                  (bool)          [create]
        Return the hard maximum of the attribute's value
    
    - message : msg                  (bool)          [create]
        Return true if the attribute is a message attribute
    
    - minExists : mne                (bool)          [create]
        Return true if the attribute has a hard minimum. A max does not have to be
        present.
    
    - minimum : min                  (bool)          [create]
        Return the hard minimum of the attribute's value
    
    - multi : m                      (bool)          [create]
        Return true if the attribute is a multi-attribute
    
    - niceName : nn                  (bool)          [create]
        Return the nice name (or UI name) of the attribute.
    
    - node : n                       (PyNode)        [create]
        Use all attributes from node named NAME
    
    - numberOfChildren : nc          (bool)          [create]
        Return the number of children the attribute has
    
    - range : r                      (bool)          [create]
        Return the hard range of the attribute's value
    
    - rangeExists : re               (bool)          [create]
        Return true if the attribute has a hard range. Both min and max must be present.
    
    - readable : rd                  (bool)          [create]
        Return the readable status of the attribute
    
    - renderSource : rs              (bool)          [create]
        Return whether this attribute is marked as a render source or not
    
    - shortName : sn                 (bool)          [create]
        Return the short name of the attribute.
    
    - softMax : smx                  (bool)          [create]
        Return the soft max (slider range) of the attribute's value
    
    - softMaxExists : sxe            (bool)          [create]
        Return true if the attribute has a soft maximum. A min does not have to be
        present.
    
    - softMin : smn                  (bool)          [create]
        Return the soft min (slider range) of the attribute's value
    
    - softMinExists : sme            (bool)          [create]
        Return true if the attribute has a soft minimum. A max does not have to be
        present.
    
    - softRange : s                  (bool)          [create]
        Return the soft range (slider range) of the attribute's value
    
    - softRangeExists : se           (bool)          [create]
        Return true if the attribute has a soft range. Both min and max must be present.
    
    - storable : st                  (bool)          [create]
        Return true if the attribute is storable
    
    - type : typ                     (unicode)       [create]
        Use static attributes from nodes of type TYPE.  Includes attributes inherited
        from parent class nodes.
    
    - typeExact : tex                (unicode)       [create]
        Use static attributes only from nodes of type TYPE.  Does not included inherited
        attributes.
    
    - usedAsColor : uac              (bool)          [create]
        Return true if the attribute should bring up a color picker
    
    - usedAsFilename : uaf           (bool)          [create]
        Return true if the attribute should bring up a file browser
    
    - usesMultiBuilder : umb         (bool)          [create]
        Return true if the attribute is a multi-attribute and it uses the multi-builder
        to handle its data
    
    - worldspace : ws                (bool)          [create]
        Return the status of the attribute flag marking worldspace attribute
    
    - writable : w                   (bool)          [create]
        Return the writable status of the attribute                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attributeQuery`
    """
    pass
def shadingGeometryRelCtx(*args, **kwargs): pass
def dR_gridSnapPress(*args, **kwargs): pass
def DistributeShells(*args, **kwargs): pass
def Redo(*args, **kwargs): pass
def ToggleCreaseVertices(*args, **kwargs): pass
def OpenTrialTutorials(*args, **kwargs): pass
def ShowNParticles(*args, **kwargs): pass
def nucleusDisplayTextureNodes(*args, **kwargs): pass
def currentCtx(*args, **kwargs):
    """
    This command returns the currently selected tool context.
    
    
    Derived from mel command `maya.cmds.currentCtx`
    """
    pass
def NodeEditorConnectionStyleStraight(*args, **kwargs): pass
def SmoothProxyOptions(*args, **kwargs): pass
def CreateDiskCacheOptions(*args, **kwargs): pass
def WireTool(*args, **kwargs): pass
def MakeCollideOptions(*args, **kwargs): pass
def polyEvaluate(*args, **kwargs):
    """
    Returns the required counts on the specified objects. If no objects are
    specified in the command line, then the objects from the active list are used.
    In MEL, the values are returned in the same order as the flags are set. Under
    Python, there is no concept of argument ordering, so the items are returned in a
    dictionary keyed by the name of the flag.  In Python, if only one item is
    requested, then it will not be returned in a dictionary. For user convenience,
    if no flag is set, then all values are echoed. All flags (except -fmt/format)
    are in fact query-flags. For user convenience, the -q flag may be ommitted. Some
    comments for non-formatted output :3d bounding boxes are returned as 3 couples
    of floats, 2d ones as 2 couples of floats.if a bounding box is queried and
    cannot be computed (for example the component bounding box when no component is
    selected, or 2d bounding box for and unmapped object) 0 is returned for each
    array element, so that indices in the output array remain consistent.intvalues
    (queried by topological flags) cannot be mixed with floatvalues (queried by
    bounding box flags). Thus if no flag is set, only intvalues are returned.
    
    Flags:
    - accurateEvaluation : ae        (bool)          [create]
        used to get accurate results for the bounding box computation For objects with
        large vertex counts, accurate evaluation takes more time
    
    - activeShells : activeShells    (bool)          [create]
        returns the indices of active shells as an array of int
    
    - activeUVShells : aus           (bool)          [create]
        returns the indices of active UV shells (for the current map if one is not
        specified) as an array of int
    
    - area : a                       (bool)          [create]
        returns the surface area of the object's faces in local space as a float
    
    - boundingBox : b                (bool)          [create]
        returns the object's bounding box in 3d space as 6 floats in MEL: xmin xmax ymin
        ymax zmin zmax, or as a tuple of three pairs in Python: ((xmin,xmax),
        (ymin,ymax), (zmin,zmax))
    
    - boundingBox2d : b2             (bool)          [create]
        returns the object's uv bounding box (for the current map if one is not
        specified) in 2d space as 4 floats in MEL : xmin xmax ymin ymax, or as a tuple
        of three pairs in Python: ((xmin,xmax), (ymin,ymax), (zmin,zmax))
    
    - boundingBoxComponent : bc      (bool)          [create]
        returns the bounding box of selected components in 3d space as 6 floats in MEL :
        xmin xmax ymin ymax zmin zmax, or as a tuple of three pairs in Python:
        ((xmin,xmax), (ymin,ymax), (zmin,zmax))
    
    - boundingBoxComponent2d : bc2   (bool)          [create]
        returns the bounding box of selected/specified components uv coordinates in 2d
        space as 4 floats in MEL : xmin xmax ymin ymax, or as a tuple of two pairs in
        Python: ((xmin,xmax), (ymin,ymax))
    
    - displayStats : ds              (bool)          [create]
        toggles the display of poly statistics for the active View. All other flags are
        ignored if this flag is specified (Obsolete - refer to the headsUpDisplay
        command)
    
    - edge : e                       (bool)          [create]
        returns the number of edges as an int
    
    - edgeComponent : ec             (bool)          [create]
        returns the object's number of selected edges as an int
    
    - face : f                       (bool)          [create]
        returns the number of faces as an int
    
    - faceArea : fa                  (bool)          [create]
        returns the surface area of selected/specified faces in local space as an array
        of float
    
    - faceComponent : fc             (bool)          [create]
        returns the object's number of selected faces as an int
    
    - format : fmt                   (bool)          [create]
        used to display the results as an explicit sentence
    
    - shell : s                      (bool)          [create]
        returns the number of shells (disconnected pieces) as an int
    
    - triangle : t                   (bool)          [create]
        returns the number of triangles as an int
    
    - triangleComponent : tc         (bool)          [create]
        returns the number of triangles of selected components as an int
    
    - uvArea : uva                   (bool)          [create]
        returns the UV area of the object's faces in 2d space as a float
    
    - uvComponent : uvc              (bool)          [create]
        returns the object's number of selected uv coordinates as an int
    
    - uvEdgePairs : uep              (bool)          [create]
        returns the pairs of UVs that are on the selected/specified edges
    
    - uvFaceArea : ufa               (bool)          [create]
        returns the UV area of selected/specified faces in 2d space as an array of float
    
    - uvSetName : uvs                (unicode)       [create]
        used when querying texture vertices to specify the uv set.  If a uv set is not
        specified then the current map for the object will be used
    
    - uvShell : us                   (bool)          [create]
        returns the number of UV shells (for the current map if one is not specified) as
        an int
    
    - uvShellIds : usi               (bool)          [create]
        returns the UV shell indices for selected/specified faces or UVs as an array of
        int (for the current map if one is not specified), one shell index per each
        face/UV.
    
    - uvcoord : uv                   (bool)          [create]
        returns the number of uv coordinates (for the current map if one is not
        specified) as an int
    
    - uvsInShell : uis               (int)           [create]
        returns all UVs inside specified shell(for the current map if one is not
        specified), use activeUVShells to get shell indices for current selection, use
        uvShellIds to get shell indices for specified faces or UVs
    
    - vertex : v                     (bool)          [create]
        returns the number of vertices as an int
    
    - vertexComponent : vc           (bool)          [create]
        returns the object's number of selected vertices as an int
    
    - worldArea : wa                 (bool)          [create]
        returns the surface area of the object's faces in world space as a float
    
    - worldFaceArea : wfa            (bool)          [create]
        returns the surface area of selected/specified faces in world space as an array
        of float                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyEvaluate`
    """
    pass
def AlignUV(*args, **kwargs): pass
def FBXImportAudio(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportAudio`
    """
    pass
def dR_scaleRelease(*args, **kwargs): pass
def polyListComponentConversion(*args, **kwargs):
    """
    This command converts poly components from one or more types to another one or
    more types, and returns the list of the conversion. It does not change anything
    of the current database.
    
    Flags:
    - border : bo                    (bool)          [create]
        Indicates that the converted components must be on the border of the selection.
        If it is not provided, the converted components will be the related ones.
    
    - fromEdge : fe                  (bool)          [create]
    
    - fromFace : ff                  (bool)          [create]
    
    - fromUV : fuv                   (bool)          [create]
    
    - fromVertex : fv                (bool)          [create]
    
    - fromVertexFace : fvf           (bool)          [create]
        Indicates the component type to convert from. If none of them is provided, it is
        assumed to be all of them, including poly objects.
    
    - internal : internal            (bool)          [create]
        Indicates that the converted components must be totally envolved by the source
        components. E.g. a converted face must have all of its surrounding vertices
        being given. If it is not provided, the converted components will be the related
        ones.
    
    - toEdge : te                    (bool)          [create]
    
    - toFace : tf                    (bool)          [create]
    
    - toUV : tuv                     (bool)          [create]
    
    - toVertex : tv                  (bool)          [create]
    
    - toVertexFace : tvf             (bool)          [create]
        Indicates the component type to convert to. If none of them is provided, it is
        assumed to the object.
    
    - uvShell : uvs                  (bool)          [create]
        Will return UV components within the same UV shell. Only works with -tuv and
        -fuv flags.
    
    - vertexFaceAllEdges : vfa       (bool)          [create]
        When converting from face vertices to edges, indicates that all edges with an
        end at the face vertex should be included. Without this flag, the default
        behaviour is to only include one edge per face vertex.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyListComponentConversion`
    """
    pass
def hudSlider(*args, **kwargs): pass
def FBXExportColladaFrameRate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportColladaFrameRate`
    """
    pass
def XgmSplineCacheDisableSelectedCache(*args, **kwargs): pass
def switchTable(*args, **kwargs): pass
def IncrementAndSave(*args, **kwargs): pass
def doubleProfileBirailSurface(*args, **kwargs):
    """
    The arguments are 4 cuves called profile1profile2rail1rail2. This command builds
    a railed surface by sweeping profile profile1along the two given rail curves
    rail1, rail2until profile2is reached. By using the -blend control, the railed
    surface creation could be biased more towards one of the two profile curves. The
    curves ( both profiles and rails ) could also be surface curves ( isoparams,
    curve on surfaces ). If the profile curves are surface curves the surface
    constructed could be made tangent continuous to the surfaces underlying the
    profiles using the flags -tp1, -tp2 respectively. Current Limitation: Its
    necessary that the two profile curves intersect the rail curves for successful
    surface creation.
    
    Flags:
    - blendFactor : bl               (float)         [create,query,edit]
        A blend factor applied in between the two profiles. The amount of influence
        'inputProfile1' has in the surface creation. Default:0.5
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    - tangentContinuityProfile1 : tp1 (bool)          [create,query,edit]
        Need tangent continuity across the input profile at inputProfile1. Default:false
    
    - tangentContinuityProfile2 : tp2 (bool)          [create,query,edit]
        Need tangent continuity across the input curve at inputProfile2. Default:false
    
    - transformMode : tm             (int)           [create,query,edit]
        transform mode ( Non proportional, proportional ). Non proportional is default
        value. Default:0                  Common flags
    
    
    Derived from mel command `maya.cmds.doubleProfileBirailSurface`
    """
    pass
def TimeEditorToggleTimeCursorPress(*args, **kwargs): pass
def DecreaseExposureFine(*args, **kwargs): pass
def HypershadeOutlinerPerspLayout(*args, **kwargs): pass
def ShowManipulators(*args, **kwargs): pass
def OutTangentSpline(*args, **kwargs): pass
def ModifyStampDepthRelease(*args, **kwargs): pass
def GraphEditorUnlockChannel(*args, **kwargs): pass
def SetBreakdownKeyOptions(*args, **kwargs): pass
def ShowSurfaceCVs(*args, **kwargs): pass
def CopySelected(*args, **kwargs): pass
def orientConstraint(*args, **kwargs): pass
def aaf2fcp(*args, **kwargs):
    """
    This command is used to convert an aff file to a Final Cut Pro (fcp) xml file
    The conversion process can take several seconds to complete and the command is
    meant to be run asynchronously
    
    Flags:
    - deleteFile : df                (bool)          [create]
        Delete temporary file. Can only be used with the terminate option
    
    - dstPath : dst                  (unicode)       [create]
        Specifiy a destination path
    
    - getFileName : gfn              (int)           [create]
        Query output file name
    
    - progress : pr                  (int)           [create]
        Request progress report
    
    - srcFile : src                  (unicode)       [create]
        Specifiy a source file
    
    - terminate : t                  (int)           [create]
        Complete the task
    
    - waitCompletion : wc            (int)           [create]
        Wait for the conversion process to complete                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.aaf2fcp`
    """
    pass
def UVUnstackShellsOptions(*args, **kwargs): pass
def renameAttr(*args, **kwargs):
    """
    Renames the given user-defined attribute to the name given in the string
    argument. If the new name conflicts with an existing name then this command will
    fail. Note that it is not legal to rename an attribute to the empty string.
    
    
    Derived from mel command `maya.cmds.renameAttr`
    """
    pass
def keyframeRegionSetKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to set keys within the keyframe
    region of the dope sheet editor
    
    Flags:
    - breakdown : bd                 (bool)          [query,edit]
        Specifies whether or not to create breakdown keys
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionSetKeyCtx`
    """
    pass
def Drag(*args, **kwargs): pass
def ShowManipulatorTool(*args, **kwargs): pass
def UpdateSnapshot(*args, **kwargs): pass
def ExportOfflineFile(*args, **kwargs): pass
def ShareOneBrush(*args, **kwargs): pass
def SetMeshWaxTool(*args, **kwargs): pass
def popListItem(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.popListItem`
    """
    pass
def ReplaceObjects(*args, **kwargs): pass
def MoveToolOptions(*args, **kwargs): pass
def NodeEditorUnpinSelected(*args, **kwargs): pass
def addExtension(*args, **kwargs):
    """
    This command is used to add an extension attribute to a node type. Either the
    longName or the shortName or both must be specified. If neither a dataType nor
    an attributeType is specified, a double attribute will be added.  The dataType
    flag can be specified more than once indicating that any of the supplied types
    will be accepted (logical-or).  To add a non-double attribute the following
    criteria can be used to determine whether the dataType or the attributeType flag
    is appropriate.  Some types, such as double3can use either. In these cases the
    -dtflag should be used when you only wish to access the data as an atomic entity
    (eg. you never want to access the three individual values that make up a
    double3).  In general it is best to use the -atin these cases for maximum
    flexibility. In most cases the -dtversion will not display in the attribute
    editor as it is an atomic type and you are not allowed to change individual
    parts of it.  All attributes flagged as (compound)below or the compound
    attribute itself are not actually added to the node until all of the children
    are defined (using the -pflag to set their parent to the compound being
    created).  See the EXAMPLES section for more details.  Type of attribute
    Flag and argument to use      boolean
    -at bool                      32 bit integer                                 -at
    long                      16 bit integer                                 -at
    short                     8 bit integer                                  -at
    byte                      char
    -at char                      enum
    -at enum (specify the enum names using the enumName flag) float
    -at float(use quotes
    since float is a mel keyword)   double
    -at double            angle value                                    -at
    doubleAngle       linear value                                   -at
    doubleLinear      string                                                 -dt
    string(use quotes
    since string is a mel keyword)  array of strings
    -dt stringArray       compound                                               -at
    compound          message (no data)                              -at message
    time                                                   -at time
    4x4 double matrix                              -dt matrix(use quotes
    since matrix is a mel keyword)  4x4 float matrix
    -at fltMatrix         reflectance                                    -dt
    reflectanceRGBreflectance (compound)                 -at reflectance
    spectrum                                               -dt spectrumRGB
    spectrum (compound)                    -at spectrum          2 floats
    -dt float2            2 floats (compound)                    -at float2
    3 floats                                               -dt float3            3
    floats (compound)                    -at float3            2 doubles
    -dt double2           2 doubles (compound)                   -at double2
    3 doubles                                              -dt double3           3
    doubles (compound)                   -at double3           2 32-bit integers
    -dt long2                     2 32-bit integers (compound)   -at long2
    3 32-bit integers                              -dt long3                     3
    32-bit integers (compound)   -at long3                     2 16-bit integers
    -dt short2            2 16-bit integers (compound)   -at short2            3
    16-bit integers                              -dt short3            3 16-bit
    integers (compound)   -at short3            array of doubles
    -dt doubleArray       array of floats                                -dt
    floatArray        array of 32-bit ints                   -dt Int32Array
    array of vectors                               -dt vectorArray       nurbs curve
    -dt nurbsCurve        nurbs surface                                  -dt
    nurbsSurface      polygonal mesh                                 -dt mesh
    lattice                                                -dt lattice
    array of double 4D points              -dt pointArray        In query mode,
    return type is based on queried flag.
    
    Flags:
    - attributeType : at             (unicode)       [create,query]
        Specifies the attribute type, see above table for more details. Note that the
        attribute types float, matrixand stringare also MEL keywords and must be
        enclosed in quotes.
    
    - binaryTag : bt                 (unicode)       [create,query]
        This flag is obsolete and does not do anything any more
    
    - cachedInternally : ci          (bool)          [create,query]
        Whether or not attribute data is cached internally in the node. This flag
        defaults to true for writable attributes and false for non-writable attributes.
        A warning will be issued if users attempt to force a writable attribute to be
        uncached as this will make it impossible to set keyframes.
    
    - category : ct                  (unicode)       [create,query,edit]
        An attribute category is a string associated with the attribute to identify it.
        (e.g. the name of a plugin that created the attribute, version information,
        etc.) Any attribute can be associated with an arbitrary number of categories
        however categories can not be removed once associated.
    
    - dataType : dt                  (unicode)       [create,query]
        Specifies the data type.  See setAttrfor more information on data type names.
    
    - defaultValue : dv              (float)         [create,query,edit]
        Specifies the default value for the attribute (can only be used for numeric
        attributes).
    
    - disconnectBehaviour : dcb      (int)           [create,query]
        defines the Disconnect Behaviour 2 Nothing, 1 Reset, 0 Delete
    
    - enumName : en                  (unicode)       [create,query,edit]
        Flag used to specify the ui names corresponding to the enum values. The
        specified string should contain a colon-separated list of the names, with
        optional values. If values are not specified, they will treated as sequential
        integers starting with 0. For example: -enumName A:B:Cwould produce options:
        A,B,C with values of 0,1,2; -enumName zero:one:two:thousand=1000would produce
        four options with values 0,1,2,1000; and -enumName
        solo=1:triplet=3:quintet=5would produce three options with values 1,3,5.  (Note
        that there is a current limitation of the Channel Box that will sometimes
        incorrectly display an enumerated attribute's pull-down menu.  Extra menu items
        can appear that represent the numbers inbetween non-sequential option values.
        To avoid this limitation, specify sequential values for the options of any
        enumerated attributes that will appear in the Channel Box.  For example:
        solo=1:triplet=2:quintet=3.)
    
    - exists : ex                    (bool)          [create,query]
        Returns true if the attribute queried is a user-added, dynamic attribute; false
        if not.
    
    - fromPlugin : fp                (bool)          [create,query]
        Was the attribute originally created by a plugin? Normally set automatically
        when the API call is made - only added here to support storing it in a file
        independently from the creating plugin.
    
    - hasMaxValue : hxv              (bool)          [create,query,edit]
        Flag indicating whether an attribute has a maximum value. (can only be used for
        numeric attributes).
    
    - hasMinValue : hnv              (bool)          [create,query,edit]
        Flag indicating whether an attribute has a minimum value. (can only be used for
        numeric attributes).
    
    - hasSoftMaxValue : hsx          (bool)          [create,query]
        Flag indicating whether a numeric attribute has a soft maximum.
    
    - hasSoftMinValue : hsn          (bool)          [create,query]
        Flag indicating whether a numeric attribute has a soft minimum.
    
    - hidden : h                     (bool)          [create,query]
        Will this attribute be hidden from the UI?
    
    - indexMatters : im              (bool)          [create,query]
        Sets whether an index must be used when connecting to this multi-attribute.
        Setting indexMatters to false forces the attribute to non-readable.
    
    - internalSet : internalSet      (bool)          [create,query]
        Whether or not the internal cached value is set when this attribute value is
        changed.  This is an internal flag used for updating UI elements.
    
    - keyable : k                    (bool)          [create,query]
        Is the attribute keyable by default?
    
    - longName : ln                  (unicode)       [create,query]
        Sets the long name of the attribute.
    
    - maxValue : max                 (float)         [create,query,edit]
        Specifies the maximum value for the attribute (can only be used for numeric
        attributes).
    
    - minValue : min                 (float)         [create,query,edit]
        Specifies the minimum value for the attribute (can only be used for numeric
        attributes).
    
    - multi : m                      (bool)          [create,query]
        Makes the new attribute a multi-attribute.
    
    - niceName : nn                  (unicode)       [create,query,edit]
        Sets the nice name of the attribute for display in the UI.  Setting the
        attribute's nice name to a non-empty string overrides the default behaviour of
        looking up the nice name from Maya's string catalog.   (Use the MEL commands
        attributeNiceNameand attributeQuery -niceNameto lookup an attribute's nice name
        in the catalog.)
    
    - nodeType : nt                  (unicode)       [create,query,edit]
        Specifies the type of node to which the attribute will be added. See the
        nodeType command for the names of different node types.
    
    - numberOfChildren : nc          (int)           [create,query]
        How many children will the new attribute have?
    
    - parent : p                     (unicode)       [create,query]
        Attribute that is to be the new attribute's parent.
    
    - proxy : pxy                    (unicode)       [create,query]
        Proxy another node's attribute. Proxied plug will be connected as source. The
        UsedAsProxy flag is automatically set in this case.
    
    - readable : r                   (bool)          [create,query]
        Can outgoing connections be made from this attribute?
    
    - shortName : sn                 (unicode)       [create,query]
        Sets the short name of the attribute.
    
    - softMaxValue : smx             (float)         [create,query,edit]
        Soft maximum, valid for numeric attributes only.  Specifies the upper default
        limit used in sliders for this attribute.
    
    - softMinValue : smn             (float)         [create,query,edit]
        Soft minimum, valid for numeric attributes only.  Specifies the upper default
        limit used in sliders for this attribute.
    
    - storable : s                   (bool)          [create,query]
        Can the attribute be stored out to a file?
    
    - usedAsColor : uac              (bool)          [create,query]
        Is the attribute to be used as a color definition? Must have 3 DOUBLE or 3 FLOAT
        children to use this flag.  The attribute type -atshould be double3or float3as
        appropriate.  It can also be used to less effect with data types -dtas double3or
        float3as well but some parts of the code do not support this alternative.  The
        special attribute types/data spectrumand reflectancealso support the color flag
        and on them it is set by default.
    
    - usedAsFilename : uaf           (bool)          [create,query]
        Is the attribute to be treated as a filename definition? This flag is only
        supported on attributes with data type -dtof string.
    
    - usedAsProxy : uap              (bool)          [create,query]
        Set if the specified attribute should be treated as a proxy to another
        attributes.
    
    - writable : w                   (bool)          [create,query]
        Can incoming connections be made to this attribute?
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.addExtension`
    """
    pass
def XgmSetDirectionBrushToolOption(*args, **kwargs): pass
def OrientJointOptions(*args, **kwargs): pass
def checkBoxGrp(*args, **kwargs): pass
def ExportOptions(*args, **kwargs): pass
def getClassification(*args, **kwargs): pass
def CreateSubdivSurface(*args, **kwargs): pass
def DeleteAllRigidBodies(*args, **kwargs): pass
def xgmSelectBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmSelectBrushToolCmd`
    """
    pass
def PfxBrushTransfer(*args, **kwargs): pass
def graphDollyCtx(*args, **kwargs):
    """
    This command can be used to create a dolly context for the graph editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.graphDollyCtx`
    """
    pass
def PublishParentAnchorOptions(*args, **kwargs): pass
def InsertKeyToolActivate(*args, **kwargs): pass
def binMembership(*args, **kwargs):
    """
    Command to assign nodes to bins.
    
    Flags:
    - addToBin : add                 (unicode)       [create]
        Add the nodes in a node list to a bin.
    
    - exists : ex                    (unicode)       [create]
        Query if a node exists in a bin.  The exists flag can take only one node.
    
    - inheritBinsFromNodes : ibn     (PyNode)        [create]
        Let the node in the flag's argument inherit bins from nodes in the specified
        node list.  The node list is specified as the object of the command.
    
    - isValidBinName : ivn           (unicode)       [create]
        Query if the specified bin name is valid.  If so, return true. Otherwise, return
        false.
    
    - listBins : lb                  (bool)          [create,query]
        Query and return a list of bins a list of nodes belong to. If a bin contains any
        of the nodes in the selection list, then it should be included in the returned
        bin list.
    
    - makeExclusive : mke            (unicode)       [create]
        Make the specified nodes belong exclusively in the specified bin.
    
    - notifyChanged : nfc            (bool)          [create]
        This flag is used to notify that binMembership has been changed.
    
    - removeFromBin : rm             (unicode)       [create]
        Remove the nodes in a node list from a bin.                                Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.binMembership`
    """
    pass
def HypershadeOpenCreateWindow(*args, **kwargs): pass
def NURBSToPolygons(*args, **kwargs): pass
def ShowSubdivSurfaces(*args, **kwargs): pass
def polySlideEdge(*args, **kwargs):
    """
    Moves an edge loop selection along the edges connected to the sides of its
    vertices.
    
    Flags:
    - absolute : a                   (bool)          [create]
        This flag specifies whether or not the command uses absolute mode If in absolute
        then all vertices will move the same distance (the specified percentage of the
        smallest edge) C: Default is off
    
    - direction : d                  (int)           [create]
        This flag specifies the direction of the slide edge movement 0: is left
        direction (relative) 1: is right direction (relative) 2: is normal direction
        (relative) C: Default is 0
    
    - edgeDirection : ed             (float)         [create]
        This flag specifies the relative percentage to move along the edges on either
        side of the vertices along the edge loop C: Default is 0.0
    
    - symmetry : sym                 (bool)          [create]
        This flag specifies whether or not the command will do a symmetrical slide. Only
        takes effect when symmetry is enabled. C: Default is off                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySlideEdge`
    """
    pass
def percent(*args, **kwargs):
    """
    This command sets percent values on members of a weighted node such as a cluster
    or a jointCluster. With no flags specified the command sets the percent value
    for selected components of the specified node to the specified percent value. A
    dropoff from the specified percent value to 0 can be specified from a point,
    plane or curve using a dropoff distance around that shape. The percent value can
    also be added or multiplied with existing percent values of the node components.
    In query mode, return type is based on queried flag.
    
    Flags:
    - addPercent : ap                (bool)          [create]
        Add the percent value specified with the -v flag to the existing percent values
    
    - dropoffAxis : dax              (float, float, float) [create]
        Specifies the axis along which to dropoff the percent value, starting from the
        dropoffPosition.
    
    - dropoffCurve : dc              (unicode)       [create]
        Specifies the curve around which to dropoff the percent value.
    
    - dropoffDistance : dds          (float)         [create]
        Specifies the dropoff distance from the point, plane or curve that was specified
        using the -dp -dax or -dc flags.
    
    - dropoffPosition : dp           (float, float, float) [create]
        Specifies the point around which to dropoff the percent value.
    
    - dropoffType : dt               (unicode)       [create]
        Specifies the type of dropoff. Used in conjunction with the -dp, -dax or -dc
        flags. Default is linear. Valid values are: linear, sine, exponential,
        linearSquared, none.
    
    - multiplyPercent : mp           (bool)          [create]
        Multiply the percent value specified with the -v flag with existing percent
        values
    
    - value : v                      (float)         [create,query]
        The percent value to be applied. The default is 1. In query mode, returns an
        array of doubles corresponding to the weights of the selected object components.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.percent`
    """
    pass
def snapshotModifyKeyCtx(*args, **kwargs):
    """
    Creates a context for inserting/delete keys on an editable motion trail
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.snapshotModifyKeyCtx`
    """
    pass
def HypershadeDeleteSelected(*args, **kwargs): pass
def PickWalkStopAtTransform(*args, **kwargs): pass
def playblast(*args, **kwargs):
    """
    This command playblasts the current playback range. Sound is optional. Note that
    the playblast command registers a condition called playblastingso that users can
    monitor whether playblasting is occurring. You may monitor the condition using
    the API (MConditionMessage) or a script (scriptJob and condition commands).
    
    Flags:
    - activeEditor : ae              (bool)          [create]
        This flag will return the current model editor that would be used for playblast.
        It does not invoke playblast itself.
    
    - cameraSetup : cs               (unicode, unicode) [create]
        Information about camera setup. The first string defines a camera setup MEL
        procedure. The camera setup procedure will be invoked before executing a
        playblast. The second string argument which is used as a camera identifier and
        is appended to the root file name to specify the final output file name(s). The
        command will fail there is not a pair of strings supplied to the argument.
    
    - clearCache : cc                (bool)          [create]
        When true, all previous temporary playblast files will be deleted before the new
        playblast files are created and the remaining temporary playblast files will be
        deleted when the application quits. Any playblast files that were explicitly
        given a name by the user will not be deleted.
    
    - codecOptions : co              (bool)          [create]
        Brings up the OS specific dialog for setting playblast codec options, and does
        not run the playblast.
    
    - combineSound : csd             (bool)          [create]
        Combine the trax sounds into a single track. This might force a resampling of
        the sound if the sound paramters don't match up.
    
    - completeFilename : cf          (unicode)       [create]
        When set, this string specifies the exact name of the output image. In contrast
        with the -f/filename flag, -cf/completeFilename does not append any frame number
        or extension string at the end of the filename. Additionally, playblast will not
        delete the image from disk after it is displayed. This flag should not be used
        in conjunction with -f/filename.
    
    - compression : c                (unicode)       [create]
        Specify the compression to use for the movie file.  To determine which settings
        are available on your system, use the `playblast -options` command. This will
        display a system-specific dialog with supported compression formats. When the
        'format' flag is 'image', this flag is used to pass in the desired image format.
        If the format is 'image' and the compression flag is ommitted, the output format
        specified via the Render Globals preference (see -format) will be used. If
        compression is set to 'none', the iff image format will be used.
    
    - editorPanelName : epn          (unicode)       [create]
        This optional flag specifies the name of the model editor or panel, which is to
        be used for playblast. The current model editor or panel won't be used for
        playblast unless its name is specified. Flag usage is specific to invoking
        playblast.
    
    - endTime : et                   (time)          [create]
        Specify the end time of the playblast.  Default is the end time of the playback
        range displayed in the Time Slider. Overridden by -frame.
    
    - filename : f                   (unicode)       [create]
        The filename to use for the output of this playblast. If the file already
        exists, a confirmation box will be displayed if playblast is performed
        interactively.  If playblast is executed from the command line and the file
        already exists, it will abort.
    
    - forceOverwrite : fo            (bool)          [create]
        Overwrite existing playblast files which may have the the same name as the one
        specified with the -fflag
    
    - format : fmt                   (unicode)       [create]
        The format for the playblast output. ValueDescriptionmovieThis option selects a
        platform-specific default movie format.On Linux and Mac OSX the default movie
        format is Quicktime.On Windows the default movie format is Audio Video
        Interleave. aviSet the format to Audio Video Interleave (Windows only)qtSet the
        format to QuickTime (all platforms).avfoundationWrite movie by AVFoundation (Mac
        only).imageOutputs a sequence of image files.The image format will be the Output
        Format specified using Window RenderEditors RenderSettings CommonTab. The
        resulting files use the value of the -fflag as a prefix, with an appended frame
        number, as in myFile.0007.iffiffSame as imageThe default value of the
        -fmt/format flag is movie. Depending on the selected format, a platform-specific
        default application will be used to view results. For image sequences, the
        default application is fcheck. For movies, the default application is Windows
        Media Player (on Windows), Quicktime Player (on Mac OSX), and Lqtplay (on
        Linux). Users can specify different applications via Maya's application
        preferences.
    
    - frame : fr                     (time)          [create]
        List of frames to blast. One frame specified per flag. The frames can be
        specified in any order but will be output in an ordered sequence. When specified
        this flag will override any start/end range
    
    - framePadding : fp              (int)           [create]
        Number of zeros used to pad file name. Typically set to 4 to support fcheck.
    
    - height : h                     (int)           [create]
        Height of the final image. This value will be clamped if larger than the width
        of the active window.Windows: If not using fcheck, the width and height must
        each be divisible by 4.
    
    - indexFromZero : ifz            (bool)          [create]
        Output frames starting with file.0000.ext and incrementing by one. Typically
        frames use the Maya time as their frame number. This option can only be used for
        frame based output formats.
    
    - offScreen : os                 (bool)          [create]
        When set, this toggle allow playblast to use an offscreen buffer to render the
        view. This allows playblast to work when the application is iconified, or
        obscured.
    
    - offScreenViewportUpdate : osv  (bool)          [create]
        When set, this toggle allows playblast to update the viewport while rendering
        with the offscreen buffer.
    
    - options : o                    (bool)          [create]
        Brings up a dialog for setting playblast options, and does not run the
        playblast.
    
    - percent : p                    (int)           [create]
        Percentage of current view size  to use during blasting. Accepted values are
        integers between 10 and 100.  All other values are clamped to be within this
        range.  A value of 25 means 1/4 of the  current view size; a  value of 50  means
        half the current view size; a value of 100 means full size.  (Default is 50.)
    
    - quality : qlt                  (int)           [create]
        Specify the compression quality factor to use for the movie file. Value should
        be in the 0-100 range
    
    - rawFrameNumbers : rfn          (bool)          [create]
        Playblast typically numbers its frames sequentially, starting at zero. This flag
        will override the default action and frames will be numbered using the actual
        frames specified by the -frame or -startFrame/-endFrame flags.
    
    - replaceAudioOnly : rao         (bool)          [create]
        When set, this string dictates that only the audio will be replaced when the
        scene is re-playblasted.
    
    - replaceEndTime : ret           (time)          [create]
        Specify the end time of a replayblast of an existing playblast.  Default is the
        start time of the playback range displayed in the Time Slider. Overridden by
        -frame.
    
    - replaceFilename : rf           (unicode)       [create]
        When set, this string specifies the name of an input playblast file which will
        have frames replaced according to the replace start and end times.
    
    - replaceStartTime : rst         (time)          [create]
        Specify the start time of a replayblast of an existing playblast.  Default is
        the start time of the playback range displayed in the Time Slider. Overridden by
        -frame.
    
    - saveDepth : sd                 (bool)          []
    
    - sequenceTime : sqt             (bool)          [create]
        Use sequence time
    
    - showOrnaments : orn            (bool)          [create]
        Sets whether or not model view ornaments (e.g. the axis icon) should be
        displayed
    
    - sound : s                      (unicode)       [create]
        Specify the sound node to be used during playblast
    
    - startTime : st                 (time)          [create]
        Specify the start time of the playblast.  Default is the start time of the
        playback range displayed in the Time Slider. Overridden by -frame.
    
    - throwOnError : toe             (bool)          [create]
        Playblast is tolerant of failures in most situations. When set, this toggle
        allows playblast to throw an error on these failures.
    
    - useTraxSounds : uts            (bool)          [create]
        Use sounds from TRAX.
    
    - viewer : v                     (bool)          [create]
        Specify whether a viewer should be launched for the playblast.  Default is true.
        Runs fcheckwhen -fmt is image. The player for movie files depends on the OS:
        Windows uses Microsoft Media Player, Irix uses movieplayer, OSX uses QuickTime.
    
    - width : w                      (int)           [create]
        Width of the final image. This value will be clamped if larger than the width of
        the active window.Windows: If not using fcheck, the width and height must each
        be divisible by 4.
    
    - widthHeight : wh               (int, int)      [create]
        Final image's width and height. Values larger than the dimensions of the active
        window are clamped. A width and height of 0 means to use the window's current
        size.Windows: If not using fcheck, the width and height must each be divisible
        by 4.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.playblast`
    """
    pass
def STRSTweakModeOff(*args, **kwargs): pass
def NParticleStyleBalls(*args, **kwargs): pass
def timeSliderCustomDraw(*args, **kwargs):
    """
    Flags:
    - clearPrimitives : cp           (bool)          []
    
    - color : clr                    (float, float, float, float) []
    
    - deregister : der               (int)           []
    
    - height : h                     (int)           []
    
    - layer : l                      (int)           []
    
    - location : loc                 (int)           []
    
    - priority : p                   (int)           []
    
    - registerAbove : rab            (unicode)       []
    
    - registerBelow : rbe            (unicode)       []
    
    - registerOn : ron               (unicode, int)  []
    
    - setPrimitives : sp             (unicode, float, float) []
    
    - visible : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.timeSliderCustomDraw`
    """
    pass
def CurveFilletOptions(*args, **kwargs): pass
def CreaseProxyEdgeToolOptions(*args, **kwargs): pass
def dR_selConstraintEdgeLoop(*args, **kwargs): pass
def scriptCtx(*args, **kwargs): pass
def dpBirailCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - bldProfileFirst : bpf          (bool)          []
    
    - bldProfileLast : bpl           (bool)          []
    
    - bldProfiles : bp               (bool)          []
    
    - bldRailOne : br1               (bool)          []
    
    - bldRailTwo : br2               (bool)          []
    
    - blendFactor : bl               (float)         []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - exists : ex                    (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - polygon : po                   (int)           []
    
    - reset : rs                     (bool)          []
    
    - tangentContinuityProfile1 : tp1 (bool)          []
    
    - tangentContinuityProfile2 : tp2 (bool)          []
    
    - toolNode : tnq                 (bool)          []
    
    - transformMode : tm             (int)           []
    
    
    Derived from mel command `maya.cmds.dpBirailCtx`
    """
    pass
def AttachSubdivSurfaceOptions(*args, **kwargs): pass
def XgmSplineCacheCreate(*args, **kwargs): pass
def ToggleMultiColorFeedback(*args, **kwargs): pass
def devicePanel(*args, **kwargs):
    """
    Dynamic library stub function
    """
    pass
def PointOnPolyConstraint(*args, **kwargs): pass
def AppendToHairCacheOptions(*args, **kwargs): pass
def ToggleTimeSlider(*args, **kwargs): pass
def EnableNParticles(*args, **kwargs): pass
def AddOceanDynamicLocator(*args, **kwargs): pass
def truncateHairCache(*args, **kwargs):
    """
    This command sets the end time of a hair cache to the current time. If the
    current time is less than the end time of the cache, the cache is truncated so
    that only the portion of the cache up to and including the current time is
    preserved.                  In query mode, return type is based on queried flag.
    
    
    Derived from mel command `maya.cmds.truncateHairCache`
    """
    pass
def RemoveConstraintTarget(*args, **kwargs): pass
def helpLine(*args, **kwargs): pass
def colorManagementFileRules(*args, **kwargs):
    """
    This non-undoable action manages the list of rules that Maya uses to assign an
    initial input color space to dependency graph nodes that read in color
    information from a file.  Rules are structured in a chain of responsibility,
    from highest priority rule to lowest priority rule, each rule matching a file
    path pattern and extension.  If a rule matches a given file path, its color
    space is returned as the result of rules evaluation, and no further rule is
    considered.  The lowest priority rule will always return a match. Rules can be
    added, removed, and changed in priority in the list.  Each rule can have its
    file path pattern, extension, and color space changed. The rule list can be
    saved to user preferences, and loaded from user preferences.            In query
    mode, return type is based on queried flag.
    
    Flags:
    - addRule : add                  (unicode)       [create,edit]
        Add a rule with the argument name to the list of rules, as the highest-priority
        rule.  If this flag is used, the pattern, extension, and colorSpace flags must
        be used as well, to specify the file rule pattern, extension, and color space,
        respectively.
    
    - colorSpace : cs                (unicode)       [create,query,edit]
        The input color space for the rule.  If the rule matches a file path, this is
        the color space that is returned.  This color space must match an existing color
        space in the input color space list.
    
    - down : dwn                     (unicode)       [create,edit]
        Move the rule with the argument name down one position towards lower priority.
    
    - evaluate : ev                  (unicode)       [create,edit]
        Evaluates the list of rules and returns the input color space name that
        corresponds to the argument file path.
    
    - extension : ext                (unicode)       [create,query,edit]
        The file extension for the rule is case insensitive
    
    - listRules : lsr                (bool)          [create,edit]
        Returns an array of rule name strings, in order, from lowest-priority (rule 0)
        to highest-priority (last rule in array).
    
    - load : ld                      (bool)          [create,edit]
        Read the rules from Maya preferences.  Any existing rules are cleared.
    
    - moveUp : up                    (unicode)       [create,edit]
        Move the rule with the argument name up one position towards higher priority.
    
    - pattern : pat                  (unicode)       [create,query,edit]
        The file path pattern for the rule.  This is the substring to match in the file
        path, expressed as a glob pattern: for example, '\*' matches all files. For more
        information about glob pattern syntax, see
        http://en.wikipedia.org/wiki/Glob_%28programming%29.
    
    - remove : rm                    (unicode)       [create,edit]
        Remove the rule with the argument name from the list of rules.
    
    - restoreDefaults : rde          (bool)          [create,edit]
        Restore the list of rules to the default ones only.
    
    - save : sav                     (bool)          [create,edit]
        Save the rules to Maya preferences.                                Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorManagementFileRules`
    """
    pass
def ThreeTopSplitViewArrangement(*args, **kwargs): pass
def CycleIKHandleStickyState(*args, **kwargs): pass
def PerformExportToBackburner(*args, **kwargs): pass
def CreatePolygonSphere(*args, **kwargs): pass
def selectPref(*args, **kwargs):
    """
    This command controls state variables used to selection UI behavior.
    
    Flags:
    - affectsActive : aa             (bool)          [create,query]
        Set affects-active toggle which when on causes the active list to be affected
        when changing between object and component selection mode.
    
    - allowHiliteSelection : ahs     (bool)          [create,query]
        When in component selection mode, allow selection of objects for editing.  If an
        object is selected for editing, it appears in the hilite color and its
        selectable components are automatically displayed.
    
    - autoSelectContainer : asc      (bool)          [query]
        When enabled, with container centric selection also on, whenever the root
        transform is selected in the viewport, the container node will automatically be
        selected as well.
    
    - autoUseDepth : aud             (bool)          [query]
        When enabled, useDepth and paintSelectWithDepth will be automatically enabled in
        shaded display mode and disabled in wireframe display mode.
    
    - clickBoxSize : cbs             (int)           [create,query]
        When click selecting, this value defines the size of square picking region
        surrounding the cursor. The size of the square is twice the specified value.
        That is, the value defines the amount of space on all four sides of the cursor
        position. The size must be positive.
    
    - clickDrag : cld                (bool)          [create,query]
        Set click/drag selection interaction on/off
    
    - containerCentricSelection : ccs (bool)          [query]
        When enabled, selecting any DAG node in a container in the viewport will select
        the container's root transform if there is one.  If there is no root transform
        then the highest DAG node in the container will be selected.  There is no effect
        when selecting nodes which are not in a container.
    
    - disableComponentPopups : dcp   (bool)          [create,query]
        A separate preference to allow users to disable popup menus when selecting
        components.  This pref is only meaningful if the popupMenuSelection pref is
        enabled.
    
    - expandPopupList : epl          (bool)          [create,query]
        When in popup selection mode, if this is set then all selection items that
        contain multiple objects or components will be be expanded such that each object
        or component will be a single new selection item.
    
    - ignoreSelectionPriority : isp  (bool)          [create,query]
        If this is set, selection priority will be ignored when performing selection.
    
    - manipClickBoxSize : mcb        (int)           [create,query]
        When selecting a manipulator, this value defines the size of square picking
        region surrounding the cursor. The size of the square is twice the specified
        value. That is, the value defines the amount of space on all four sides of the
        cursor position. The size must be positive.
    
    - paintSelect : ps               (bool)          [query]
        When enabled, the select tool will use drag selection instead of marquee
        selection.
    
    - paintSelectRefine : psf        (bool)          []
    
    - paintSelectWithDepth : psd     (bool)          [query]
        When enabled, paint selection will not select components that are behind the
        surface in the current camera view.
    
    - popupMenuSelection : pms       (bool)          [create,query]
        If this is set, a popup menu will be displayed and used to determine the object
        to select. The menu lists the current user box (marquee) of selected candidate
        objects.
    
    - preSelectBackfacing : psb      (bool)          [query]
        When enabled preselection will highlight backfacing components whose normals
        face away from the camera.
    
    - preSelectClosest : psc         (bool)          [query]
        When enabled and the cursor is over a surface, preselection highlighting will
        try to preselect the closest component to the cursor regardless of distance.
    
    - preSelectDeadSpace : pds       (int)           [query]
        This value defines the size of the region around the cursor used for
        preselection highlighting when the cursor is outside the surface.
    
    - preSelectHilite : psh          (bool)          [query]
        When enabled, the closest component under the cursor will be highlighted to
        indicate that clicking will select that component.
    
    - preSelectHiliteSize : phs      (float)         [query]
        This value defines the size of the region around the cursor used for
        preselection highlighting. Within this region the closest component to the
        cursor will be highlighted.
    
    - preSelectSize : pss            (int)           []
    
    - preSelectTweakDeadSpace : pdt  (int)           [query]
        This value defines the size of the region around the cursor used for
        preselection highlighting when the cursor is outside the surface in tweak mode.
    
    - selectTypeChangeAffectsActive : stc (bool)          [query]
        If true then the active list will be updated according to the new selection
        preferences.
    
    - selectionChildHighlightMode : sch (int)           [create,query]
        Controls the highlighting of the children of a selected object. Valid modes are:
        0: Always highlight children 1: Never highlight children 2: Use per-object
        Selection Child Highlightsetting.  Default mode is (0): Always highlight
        children.  For (2), each DAG object has an individual Selection Child
        Highlightboolean flag. By default, this flag will be TRUE. When mode (2) is
        enabled, the control is deferred to the selected object's Selection Child
        Highlightflag.
    
    - singleBoxSelection : sbs       (bool)          [create,query]
        Set single box selection on/off. This flag indicates whether just single object
        will be selected when the user box (marquee) selects several objects if flag set
        to true.  Otherwise, all those objects inside the box will be selected.
    
    - straightLineDistance : sld     (bool)          [query]
        If true then use straight line distances for selection proximity.
    
    - trackSelectionOrder : tso      (bool)          [query]
        When enabled, the order of selected objects and components will be tracked.  The
        'ls' command will be able to return the active list in the order of selection
        which will allow scripts to be written that depend on the order.
    
    - useDepth : ud                  (bool)          [query]
        When enabled, marquee selection will not select components that are behind the
        surface in the current camera view.
    
    - xformNoSelect : xns            (bool)          [create,query]
        Disable selection in xform tools                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectPref`
    """
    pass
def CreateMeshFromMashPoints(*args, **kwargs): pass
def polyToCurve(*args, **kwargs):
    """
    Flags:
    - addUnderTransform : aut        (bool)          []
    
    - caching : cch                  (bool)          []
    
    - conformToSmoothMeshPreview : usm (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - degree : dg                    (int)           []
    
    - displaySmoothMesh : dsm        (int)           []
    
    - form : f                       (int)           []
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    
    Derived from mel command `maya.cmds.polyToCurve`
    """
    pass
def PlaybackRangeEnabledClips(*args, **kwargs): pass
def TimeEditorFrameSelected(*args, **kwargs): pass
def SineOptions(*args, **kwargs): pass
def isConnected(*args, **kwargs):
    """
    The isConnectedcommand is used to check if two plugs are connected in the
    dependency graph. The return value is falseif they are not and trueif they are.
    The first string specifies the source plug to check for connection. The second
    one specifies the destination plug to check for connection.
    
    Flags:
    - ignoreUnitConversion : iuc     (bool)          [create]
        In looking for connections, skip past unit conversion nodes.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.isConnected`
    """
    pass
def DisplayHairCurvesCurrentAndRest(*args, **kwargs): pass
def polyPlanarProjection(*args, **kwargs):
    """
    TpolyProjCmdBase is a base class for the command to create a mapping on the
    selected polygonal faces. Projects a map onto an object, using an orthogonal
    projection. The piece of the map defined from isu, isv, icx, icy area, is placed
    at pcx, pcy, pcz location.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createNewMap : cm              (bool)          [create,query]
        This flag when set true will create a new map with a the name passed in, if the
        map does not already exist.
    
    - frozen : fzn                   (bool)          []
    
    - imageCenter : ic               (float, float)  [create,query,edit]
        The center point of the 2D model layout. Default:0.5, 0.5
    
    - imageCenterX : icx             (float)         [create,query,edit]
        Image center X coord.
    
    - imageCenterY : icy             (float)         [create,query,edit]
        Image center Y coord.
    
    - imageScale : imageScale        (float, float)  [create,query,edit]
        Specifies the UV scale : Enlarges or reduces the 2D version of the model in U or
        V space relative to the 2D centerpoint. Default:1.0, 1.0
    
    - imageScaleU : isu              (float)         [create,query,edit]
        The the U scale : Enlarges or reduces the 2D version of the model in U space
        relative to the 2D centerpoint.
    
    - imageScaleV : isv              (float)         [create,query,edit]
        The V scale : Enlarges or reduces the 2D version of the model in V space
        relative to the 2D centerpoint.
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        This flag specifies if the projection node should be inserted before or after
        deformer nodes already applied to the shape. Inserting the projection after the
        deformer leads to texture swimming during animation and is most often
        undesirable. C: Default is on.
    
    - keepImageRatio : kir           (bool)          [create]
        True means keep any image ratio
    
    - mapDirection : md              (unicode)       [create]
        This flag specifies the mapping direction. 'x', 'y' and 'z' projects the map
        along the corresponding axis. 'c' projects along the current camera viewing
        direction. 'p' does perspective projection if current camera is perspective. 'b'
        projects along the best plane fitting the objects selected.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - perInstance : pi               (bool)          [create]
        True if the new map is per-instance, otherwise it is shared.
    
    - projectionCenter : pc          (float, float, float) [create,query,edit]
        The point on the object that will be the center of the projection. Default:0.0,
        0.0, 0.0
    
    - projectionCenterX : pcx        (float)         [create,query,edit]
        Projection center X coord.
    
    - projectionCenterY : pcy        (float)         [create,query,edit]
        Projection center Y coord.
    
    - projectionCenterZ : pcz        (float)         [create,query,edit]
        Projection center Z coord.
    
    - projectionHeight : ph          (float)         [create,query,edit]
        The height of the map relative to the 3D projection axis.
    
    - projectionHorizontalSweep : phs (float)         [create,query,edit]
        The angle swept horizontally by the projection.  The range is [0, 360].
    
    - projectionScale : ps           (float, float)  [create,query,edit]
        The width and the height of the map relative to the 3D projection axis.
        Default:1.0, 1.0
    
    - projectionScaleU : psu         (float)         []
    
    - projectionScaleV : psv         (float)         []
    
    - radius : r                     (float)         []
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        The mapping rotate angles. Default:0.0, 0.0, 0.0
    
    - rotateX : rx                   (float)         [create,query,edit]
        X mapping rotate angle.
    
    - rotateY : ry                   (float)         [create,query,edit]
        Y mapping rotate angle.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        Z mapping rotate angle.
    
    - rotationAngle : ra             (float)         [create,query,edit]
        The angle for the rotation. When the angle is positive, then the map rotates
        counterclockwise on the mapped model; if negative, the map rotates clockwise.
        Default:0.0
    
    - seamCorrect : sc               (bool)          [create,query,edit]
        This flag specifies to perform a seam correction on the mapped faces.
        Common poly modifier operation flags
    
    - smartFit : sf                  (bool)          [create]
        True means use the smart fit algorithm
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyPlanarProjection`
    """
    pass
def CreatePolygonPyramidOptions(*args, **kwargs): pass
def dynCache(*args, **kwargs):
    """
    Cache the current state of all particle shapes at the current time.
    
    
    Derived from mel command `maya.cmds.dynCache`
    """
    pass
def HypershadeUnpinSelected(*args, **kwargs): pass
def NodeEditorSelectDownStream(*args, **kwargs): pass
def TogglePolyNonPlanarFaceDisplay(*args, **kwargs): pass
def SnapToPixel(*args, **kwargs): pass
def PaintRandomOptions(*args, **kwargs): pass
def AirOptions(*args, **kwargs): pass
def renderLayerPostProcess(*args, **kwargs):
    """
    Post process the results when rendering is done with. Presently this generates a
    layered PSD file using individual iff files.            In query mode, return
    type is based on queried flag.
    
    Flags:
    - keepImages : ki                (bool)          [create,query]
        When set to on, the original iff images are kept after the conversion to PSD.
        Default is to remove them.
    
    - sceneName : sn                 (unicode)       [create,query]
        Specifies the scene name for interactive batch rendering.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderLayerPostProcess`
    """
    pass
def FireworksOptions(*args, **kwargs): pass
def polyColorPerVertex(*args, **kwargs): pass
def SubdivSurfaceHierarchyMode(*args, **kwargs): pass
def ToggleDisplayColorsAttr(*args, **kwargs): pass
def RemoveWrapInfluence(*args, **kwargs): pass
def CreatePolygonCylinderOptions(*args, **kwargs): pass
def ImportDeformerWeightsOptions(*args, **kwargs): pass
def SelectUVShell(*args, **kwargs): pass
def PreInfinityCycleOffset(*args, **kwargs): pass
def soundControl(*args, **kwargs): pass
def meshReorderContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.meshReorderContext`
    """
    pass
def MirrorSkinWeightsOptions(*args, **kwargs): pass
def AppendToHairCache(*args, **kwargs): pass
def cMuscleSplineBind(*args, **kwargs):
    """
    Flags:
    - bind : b                       (bool)          []
    
    - endpts : ep                    (bool)          []
    
    - help : h                       (bool)          []
    
    - sindex : si                    (int)           []
    
    - target : tgt                   (PyNode)        []
    
    
    Derived from mel command `maya.cmds.cMuscleSplineBind`
    """
    pass
def polyUnite(*args, **kwargs): pass
def HideFur(*args, **kwargs): pass
def ConvertSelectionToUVBorder(*args, **kwargs): pass
def editRenderLayerGlobals(*args, **kwargs):
    """
    Edit the parameter values common to all render layers.  Some of these
    paremeters, eg. baseId and mergeType, are stored as preferences and some, eg.
    currentRenderLayer, are stored in the file.
    
    Flags:
    - baseId : bi                    (int)           [create,query]
        Set base layer ID.  This is the number at which new layers start searching for a
        unique ID.
    
    - currentRenderLayer : crl       (PyNode)        [create,query]
        Set current render layer. This will will update the renderLayerManger and all
        DAG objects to identify them as members of the render layer. This flag may also
        be used in conjunction with useCurrentto automatically add new DAG objects to
        the active layer. The isCurrentRenderLayerChangingcondition can be used to
        determine when the current layer is being changed and adjustments are being
        applied to the scene.
    
    - enableAutoAdjustments : eaa    (bool)          [create,query]
        Set whether or not to enable automatic creation of adjustments when certain
        attributes (ie. surface render stats, shading group assignment, or render
        settings) are changed.
    
    - mergeType : mt                 (int)           [create,query]
        Set file import merge type.  Valid values are 0, none, 1, by number, and 2, by
        name.
    
    - useCurrent : uc                (bool)          [create,query]
        Set whether or not to enable usage of the current render layer as the
        destination for all new nodes.                               Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editRenderLayerGlobals`
    """
    pass
def floatField(*args, **kwargs): pass
def readPDC(*args, **kwargs):
    """
    Flags:
    - file : f                       (unicode)       []
    
    - test : t                       (bool)          []
    
    
    Derived from mel command `maya.cmds.readPDC`
    """
    pass
def iterOnNurbs(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.iterOnNurbs`
    """
    pass
def OpenFacebook(*args, **kwargs): pass
def trimCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - exists : ex                    (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - locatorU : lu                  (float)         []
    
    - locatorV : lv                  (float)         []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - replaceOriginal : rpo          (bool)          []
    
    - reset : rs                     (bool)          []
    
    - selected : sl                  (int)           []
    
    - shrink : sh                    (bool)          []
    
    - tolerance : tol                (float)         []
    
    - toolNode : tnq                 (bool)          []
    
    
    Derived from mel command `maya.cmds.trimCtx`
    """
    pass
def Unparent(*args, **kwargs): pass
def SelectAll(*args, **kwargs): pass
def EnableSelectTool(*args, **kwargs): pass
def roundConstantRadius(*args, **kwargs): pass
def CleanupPolygon(*args, **kwargs): pass
def MoveInfluence(*args, **kwargs): pass
def HideStrokePathCurves(*args, **kwargs): pass
def cacheFileTrack(*args, **kwargs):
    """
    This command is used for inserting and removing tracks related to the caches
    displayed in the trax editor. It can also be used to modify the track state, for
    example, to lock or mute a track.                  In query mode, return type is
    based on queried flag.
    
    Flags:
    - insertTrack : it               (int)           [create]
        This flag is used to insert a new empty track at the track index specified.
    
    - lock : l                       (bool)          [create,query,edit]
        This flag specifies whether clips on a track are to be locked or not.
    
    - mute : m                       (bool)          [create,query,edit]
        This flag specifies whether clips on a track are to be muted or not.
    
    - removeEmptyTracks : ret        (bool)          [create]
        This flag is used to remove all tracks that have no clips.
    
    - removeTrack : rt               (int)           [create]
        This flag is used to remove the track with the specified index.  The track must
        have no clips on it before it can be removed.
    
    - solo : so                      (bool)          [create,query,edit]
        This flag specifies whether clips on a track are to be soloed or not.
    
    - track : t                      (int)           [create,query,edit]
        Used to specify a new track index for a cache to be displayed. Track-indices are
        1-based.                                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cacheFileTrack`
    """
    pass
def dR_selectModeDisableTweakMarquee(*args, **kwargs): pass
def animCurveEditor(*args, **kwargs): pass
def NodeEditorCut(*args, **kwargs): pass
def CreateExpressionClip(*args, **kwargs): pass
def CreateSoftBody(*args, **kwargs): pass
def retimeKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to scale keyframes within the
    graph editor using the retime tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - moveByFrame : mbf              (int)           [edit]
        Move the selected retime bar by the specified number of frames
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - snapOnFrame : sof              (bool)          [query,edit]
        When set, the retime markers will snap on frames as they are moved.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.retimeKeyCtx`
    """
    pass
def dR_viewGridTGL(*args, **kwargs): pass
def artUserPaintCtx(*args, **kwargs): pass
def contentBrowser(*args, **kwargs):
    """
    This command is used to edit and query a Content Browser. The Content Browser is
    a unique panel, so only one instance of it can exist at a given time. The
    optional argument is the name of the control.
    
    Flags:
    - addContentPath : acp           (unicode)       [edit]
        Adds the given path(s) to the libraries displayed on the Examples tab. Also
        updates the corresponding MAYA_CONTENT_PATH environment variable.
    
    - context : ctx                  (unicode, unicode, unicode) [query,edit]
        Sets the default location for the given context. The two optional arguments
        (Python only) are the category (tab) and location. To clear the content use
        empty strings for category and location.  In query mode, it returns the context
        of the content browser in an array of 3 strings : the name of the context, the
        default category name, the default location.
    
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - location : loc                 (unicode)       [edit]
        Switches to the Examples tab and selects the given library location.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - preview : pv                   (bool)          [edit]
        Shows / hides the preview panel. Note: this flag will not affect the currently
        opened Content Browser, but only any subsequently opened ones.
    
    - refreshTreeView : rtv          (bool)          [edit]
        Forces a refresh of the Examples tab tree view pane.
    
    - removeContentPath : rcp        (unicode)       [edit]
        Removes the given path(s) from the libraries displayed on the Examples tab. Also
        updates the corresponding MAYA_CONTENT_PATH environment variable.
    
    - saveCurrentContext : scc       (bool)          [edit]
        Saves the context for the current Content Browser tab.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - thumbnailView : th             (bool)          [edit]
        Shows / hides the thumbnail panel. Note: this flag will not affect the currently
        opened Content Browser, but only any subsequently opened ones.
    
    - treeView : tr                  (bool)          [edit]
        Shows / hides the tree view panel. Note: this flag will not affect the currently
        opened Content Browser, but only any subsequently opened ones.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.contentBrowser`
    """
    pass
def DetachSkin(*args, **kwargs): pass
def ProjectTangentOptions(*args, **kwargs): pass
def ConvertSelectionToVertexFaces(*args, **kwargs): pass
def progressWindow(*args, **kwargs):
    """
    The progressWindow command creates a window containing a status message, a
    graphical progress gauge, and optionally a Hit ESC to Cancellabel for
    interruptable operations. Only one progress window is allowed on screen at a
    time. While the window is visible, the busy cursor is shown.
    
    Flags:
    - endProgress : ep               (bool)          [create]
        Terminates the progress window. No other flags can be used at the same time.
        This is normally issued through MEL in response to the -ic/isCancelled flag
        being set or if the progress value reaches its maximum.
    
    - isCancelled : ic               (bool)          [query]
        Returns true if the user has tried to cancel the operation. Returns false
        otherwise.
    
    - isInterruptable : ii           (bool)          [create,query,edit]
        Returns true if the progress window should respond to attempts to cancel the
        operation. The cancel button is disabled if this is set to true.
    
    - maxValue : max                 (int)           [create,query,edit]
        The maximum or endingvalue of the progress indicator. If the progress value is
        greater than the -max/maxValue, the progress value will be set to the maximum.
        Default value is 100.
    
    - minValue : min                 (int)           [create,query,edit]
        The minimum or startingvalue of the progress indicator. If the progress value is
        less than the -min/minValue, the progress value will be set to the minimum.
        Default value is 0.
    
    - progress : pr                  (int)           [create,query,edit]
        The amount of progress currently shown on the control. The value will always be
        between min and max. Default is equal to the minimum when the control is
        created.
    
    - status : st                    (unicode)       [create,query,edit]
        The status text appearing above the progress gauge.
    
    - step : s                       (int)           [edit]
        Increments the -pr/progress value by the amount specified.
    
    - title : t                      (unicode)       [create,query,edit]
        The window title.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.progressWindow`
    """
    pass
def RemoveBifrostKillplane(*args, **kwargs): pass
def HypershadeGraphRemoveSelected(*args, **kwargs): pass
def walkCtx(*args, **kwargs):
    """
    This command can be used to create, edit, or query a walk context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - crouchCount : wcc              (float)         [create,query,edit]
        The camera crouch count.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - walkHeight : wh                (float)         [create,query,edit]
        The camera initial height.
    
    - walkSensitivity : wsv          (float)         [create,query,edit]
        The camera rotate sensitivity.
    
    - walkSpeed : ws                 (float)         [create,query,edit]
        The camera move speed.
    
    - walkToolHud : wth              (bool)          [create,query,edit]
        Control whether show walk tool HUD.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.walkCtx`
    """
    pass
def removeMultiInstance(*args, **kwargs):
    """
    Removes a particular instance of a multiElement. This is only useful for input
    attributes since outputs will get regenerated the next time the node gets
    executed. This command will remove the instance and optionally break all
    incoming and outgoing connections to that instance. If the connections are not
    broken (with the -b true) flag, then the command will fail if connections exist.
    
    Flags:
    - allChildren : all              (bool)          [create]
        If the argument is true, remove all children of the multi parent.
    
    - b : b                          (bool)          [create]
        If the argument is true, all connections to the attribute will be broken before
        the element is removed. If false, then the command will fail if the element is
        connected.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.removeMultiInstance`
    """
    pass
def GpuCacheExportSelection(*args, **kwargs): pass
def HypershadeConvertPSDToFileTexture(*args, **kwargs): pass
def arnoldIpr(*args, **kwargs):
    """
    Flags:
    - camera : cam                   (PyNode)        []
    
    - height : h                     (int)           []
    
    - mode : m                       (unicode)       []
    
    - node : n                       (unicode)       []
    
    - width : w                      (int)           []
    
    
    Derived from mel command `maya.cmds.arnoldIpr`
    """
    pass
def showMetadata(*args, **kwargs):
    """
    This command is used to show metadata values which is in the specified channels
    vertex, edge, face, and vertexFacein the viewport. You can view the data by
    three ways: color: draw color on the components. ray: draw a ray on the
    components. string: draw 2d strings on the components. For example, if the
    metadata of shape.vtx[1]is (1, 0, 0), you can turn on the visualization with all
    three modes. On colormode, you can see a red vertex which is on the position of
    shape.vtx[1]. On raymode, you can see a ray with the direction (1, 0, 0). On
    stringmode, you can see strings 1 0 0below the vertex in the viewport.  To use
    coloror raymode, you should make the member of the data structure with three or
    less items, such as float[3]. The three items are mapped to RGBas a color, or
    XYZas a vector. The structure with two items works similarly. The only
    difference is that the third value will always be zero. However, if the
    structure has only one item, the value is mapped to all three variables. That
    means if the structure is intand its value is 1, the color will be white(1, 1,
    1) and the vector will be (1, 1, 1).  You can get the current status of the
    flags on the query mode (using -query). But you can query only the status of one
    flag in a single command and you cannot set values on the query mode.  You can
    use the command on some specified objects, or run it with no arguments to make
    changes on all objects in the scene. The object must be a mesh shape. Components
    are not allowed as the command arguments.
    
    Flags:
    - auto : a                       (bool)          [create,query]
        Similar to the flag -range, but uses the min/max value from the metadata in the
        same stream and member instead of the specified input value. In query mode, you
        can use the flag to query if autois on.
    
    - dataType : dt                  (unicode)       [create,query]
        In create mode, when used with the flags streamand member, specify a member to
        show. If the flag offis used, specify the member to turn off. In query mode,
        when used with the flags streamand member, query the visualization state of the
        specified member. Only one member of each shape can be visualized at a time. In
        query mode, this flag can accept a value.
    
    - interpolation : i              (bool)          [create,query]
        In create mode, enable/disable interpolation for colormethod. When interpolation
        is on, the components will be displayed in the interpolated color, which is
        computed by averaging their metadata values. In query mode, query the current
        state of interpolation flag of the selected objects.
    
    - isActivated : ia               (bool)          [create,query]
        Used to check if the given stream is activated. If some shapes are selected,
        query their states. If no shape is selected, query the states of all shapes in
        the scene.
    
    - listAllStreams : las           (bool)          [create,query]
        Used with object names to list all streams of the specified objects. no matter
        if they are visible in the viewport. Or you can use the flag individually to
        list all streams in the scene. Due to the fact that different objects may have
        the same stream name, the returned list will merge the duplicated stream names
        automatically.
    
    - listMembers : lm               (bool)          [create,query]
        Used with the flag 'stream' to get the member list in the specified stream.
    
    - listValidMethods : lvm         (bool)          [create,query]
        List the valid visual methods that can be set for the current stream and member.
        Some data type cannot be displayed by some methods. For example, if the data
        type is string, it cannot be displayed by coloror by ray. In other words, only
        the method stringwill be returned when you list the methods.
    
    - listVisibleStreams : lvs       (bool)          [create,query]
        Used with object names to list the name of the current visible streams of the
        specified object. Or you can use the flag with no object name to list all
        visible streams in the scene.
    
    - member : mb                    (unicode)       [create,query]
        In create mode, when used with the flags streamand dataType, specify a member to
        show. If the flag offis on, specify the member to turn off. In query mode, when
        used with the flags streamand dataType, query the visualization state of the
        specified member. Only one member of each shape can be visualized at a time. In
        query mode, this flag can accept a value.
    
    - method : m                     (unicode)       [create,query]
        Determine the method of visualization: colorconvert metadata to a color value
        and draw the components with the color rayconvert metadata to a vector and draw
        this vector line which starts from the center of the component stringdisplay the
        metadata through 2d string beside the component in the viewport The argument
        must be a string and must be one of the three words. The default method is
        color. If the data type is string, you can only show it with stringmethod. In
        query mode, you can use the flag with no arguments to query the method of a
        specified stream and member.
    
    - off : boolean                  (In create mode, turn off the member which is specified
    by the flags) [create,query]
        stream, memberand dataType.
    
    - range : r                      (float, float)  [create,query]
        Specify the range of data to use. The value which is out of the range will be
        clamped to the min/max value. If the method of visualization is color, the range
        will be mapped to the color. That means the min value will be displayed in black
        while the max value will be in white. In query mode, you can use the flag
        individually to query the current range.
    
    - rayScale : rs                  (float)         [create,query]
        Specify the scale of the ray to display it with a proper length.
    
    - stream : s                     (unicode)       [create,query]
        In create mode, when used with the flags memberand dataType, specify a member to
        show. If the flag offis used, specify the member to turn off. In query mode,
        when used with the flags memberand dataType, query the visualization state of
        the specified member. When used with the flag listMembers, query the members in
        the specified stream. Only one member of each shape can be visualized at a time.
        In query mode, this flag can accept a value.Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.showMetadata`
    """
    pass
def SelectAllClusters(*args, **kwargs): pass
def paramLocator(*args, **kwargs):
    """
    The command creates a locator in the underworld of a NURBS curve or NURBS
    surface at the specified parameter value.  If no object is specified, then a
    locator will be created on the first valid selected item (either a curve point
    or a surface point).
    
    Flags:
    - position : p                   (bool)          [create]
        Whether to set the locator position in normalized space.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.paramLocator`
    """
    pass
def AddDivisions(*args, **kwargs): pass
def CreateTextureReferenceObject(*args, **kwargs): pass
def xgmCombBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - lockSelection : ls             (bool)          []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmCombBrushContext`
    """
    pass
def dR_paintRelease(*args, **kwargs): pass
def FBXExportGenerateLog(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportGenerateLog`
    """
    pass
def displayColor(*args, **kwargs):
    """
    This command changes or queries the display color for anything in the
    application that allows the user to set its color. The color is defined by a
    color index into either the dormant or active color palette. These colors are
    part of the UI and not part of the saved data for a model.  This command is not
    undoable. In query mode, return type is based on queried flag.
    
    Flags:
    - active : a                     (bool)          [create]
        Specifies the color index applies to active color palette. name Specifies the
        name of color to change. index The color index for the color.
    
    - create : c                     (bool)          [create]
        Creates a new display color which can be queried or set. If is used only when
        saving color preferences.
    
    - dormant : d                    (bool)          [create]
        Specifies the color index applies to dormant color palette. If neither of the
        dormant or active flags is specified, dormant is the default.
    
    - list : l                       (bool)          [create]
        Writes out a list of all color names and their value.
    
    - queryIndex : qi                (int)           [create]
        Allows you to obtain a list of color names with the given color indices.
    
    - resetToFactory : rf            (bool)          [create]
        Resets all display colors to their factory defaults.
    
    - resetToSaved : rs              (bool)          [create]
        Resets all display colors to their saved values.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayColor`
    """
    pass
def containerView(*args, **kwargs):
    """
    A container view defines the layout information for the published attributes of
    a particular container.  Container views can be selected from a set of built-in
    views or may be defined on an associated container template. This command
    queries the view-related information for a container node. The information
    returned from this command will be based on the view-related settings in force
    on the container node at the time of the query (i.e. the container's view mode,
    template name, view name attributes).                In query mode, return type
    is based on queried flag.
    
    Flags:
    - itemInfo : ii                  (unicode)       [query]
        Used in query mode in conjunction with the itemList flag. The command will
        return a list of information for each item in the view, the information fields
        returned for each item are determined by this argument value. The information
        fields will be listed in the string array returned. The order in which the
        keyword is specified will determine the order in which the data will be returned
        by the command. One or more of the following keywords, separated by colons ':'
        are used to specify the argument value. itemIndex  : sequential item number
        (0-based)itemName   : item name (string)itemLabel  : item display label
        (string)itemDescription : item description field (string)itemLevel  : item
        hierarchy level (0-n)itemIsGroup : (boolean 0 or 1) indicates whether or not
        this item is a groupitemIsAttribute : (boolean 0 or 1) indicates whether or not
        this item is an attributeitemNumChildren: number of immediate children (groups
        or attributes) of this itemitemAttrType : item attribute type
        (string)itemCallback : item callback field (string)
    
    - itemList : il                  (bool)          [query]
        Used in query mode, the command will return a list of information for each item
        in the view.  The viewName flag is used to select the view to query. The
        information returned about each item is determined by the itemInfo argument
        value. For efficiency, it is best to query all necessary item information at one
        time (to avoid recomputing the view information on each call).
    
    - viewDescription : vd           (bool)          [query]
        Used in query mode, returns the description field associated with the selected
        view. If no description was defined for this view, the value will be empty.
    
    - viewLabel : vb                 (bool)          [query]
        Used in query mode, returns the display label associated with the view. An
        appropriate label suitable for the user interface will be returned based on the
        selected view.  Use of the view label is usually more suitable than the view
        name for display purposes.
    
    - viewList : vl                  (bool)          [query]
        Used in query mode, command will return a list of all views defined for the
        given target (container or template).
    
    - viewName : vn                  (unicode)       [query]
        Used in query mode, specifies the name of the queried view when used in
        conjunction with a template target. When used in conjunction with a container
        target, it requires no string argument, and returns the name of the currently
        active view associated with the container; this value may be empty if the
        current view is not a valid template view or is generated by one of the built-in
        views modes. For this reason, the view label is generally more suitable for
        display purposes. In query mode, this flag can accept a value.Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.containerView`
    """
    pass
def xgmModifierGuideOp(*args, **kwargs):
    """
    Flags:
    - createGuide : c                (bool)          []
    
    - density : d                    (float)         []
    
    - interpolate : i                (bool)          []
    
    - removeGuide : r                (bool)          []
    
    - updateRef : u                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmModifierGuideOp`
    """
    pass
def PolyRemoveAllCrease(*args, **kwargs): pass
def arnoldFlushCache(*args, **kwargs):
    """
    Flags:
    - flushall : fa                  (bool)          []
    
    - quads : q                      (bool)          []
    
    - selected_textures : st         (bool)          []
    
    - skydome : s                    (bool)          []
    
    - textures : t                   (bool)          []
    
    
    Derived from mel command `maya.cmds.arnoldFlushCache`
    """
    pass
def scaleConstraint(*args, **kwargs): pass
def FBXExportQuickSelectSetAsCache(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportQuickSelectSetAsCache`
    """
    pass
def deformer(*args, **kwargs): pass
def ctxAbort(*args, **kwargs):
    """
    This command tells the current context to reset itself, losing what has been
    done so far.  If a escape context has been set it then makes that context
    current.
    
    
    Derived from mel command `maya.cmds.ctxAbort`
    """
    pass
def dbpeek(*args, **kwargs):
    """
    The dbpeekcommand is used to analyze the Maya data for information of interest.
    See a description of the flags for details on what types of things can be
    analyzed.
    
    Flags:
    - allObjects : all               (bool)          [create,query]
        Ignore any specified or selected objects and peek into all applicable objects.
        The definition of allObjectswill vary based on the peek operation being
        performed - see the flag documentation for details on what it means for a given
        operation. By default if no objects are selected or specified then it will
        behave as though this flag were set.
    
    - argument : a                   (unicode)       [create,query]
        Specify one or more arguments to be passed to the operation. The acceptable
        values for the argument string are documented in the flag to which they will be
        applied. If the argument itself takes a value then the value will be of the form
        argname=argvalue.
    
    - count : c                      (int)           [create,query]
        Specify a count to be used by the test. Different tests make different use of
        the count, query the operation to find out how it interprets the value. For
        example a performance test might use it as the number of iterations to run in
        the test, an output operation might use it to limit the amount of output it
        produces.
    
    - evaluationGraph : eg           (bool)          [create,query]
        Ignore any nodes that are not explicitly part of the evaluation graph. Usually
        this means nodes that are affected either directly or indirectly by animation.
        May also tailor the operation to be EM-specific in the areas where the structure
        of the DG differs from the structure of the EM, for example, plug
        configurations. This is a filter on the currently selected nodes, including the
        use of the allObjectsflag.
    
    - operation : op                 (unicode)       [create,query]
        Specify the peeking operation to perform. The various operations are registered
        at run time and can be listed by querying this flag without a value. If you
        query it with a value then you get the detail values that peek operation accepts
        and a description of what it does. In query mode, this flag can accept a value.
    
    - outputFile : of                (unicode)       [create,query]
        Specify the location of a file to which the information is to be dumped. Default
        will return the value from the command.  Use the special names stdoutand
        stderrto redirect to your command window. The special name msdevis available
        when debugging on Windows to direct your output to the debug tab in the output
        window of Visual Studio.                             Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dbpeek`
    """
    pass
def agFormatOut(*args, **kwargs):
    """
    Flags:
    - file : f                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.agFormatOut`
    """
    pass
def ToggleZoomInMode(*args, **kwargs): pass
def SetKeyPath(*args, **kwargs): pass
def dR_modeVert(*args, **kwargs): pass
def windowPref(*args, **kwargs):
    """
    Create or modify preferred window attributes.  The size and position of a window
    is retained during and between application sessions.  A default window
    preference is created when a window is closed.  Window preferences must be named
    and, consequently, only affect the window with a matching name. Note that window
    preferences are not applied to the main Maya window nor the Command window. In
    query mode, return type is based on queried flag.
    
    Flags:
    - enableAll : ea                 (bool)          [create,query]
        Enable/disable all window preferences.  Preferences are enabled by default.  Set
        this flag to false and window's will ignore all preference values.
    
    - exists : ex                    (bool)          [create]
        Returns true|false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - height : h                     (int)           [create,query,edit]
        Height of the window.
    
    - leftEdge : le                  (int)           [create,query,edit]
        Left edge position of the window.
    
    - loadAll : la                   (bool)          [create]
        Reads in file with window attributes from disk.
    
    - maximized : max                (bool)          [create,query,edit]
        Maximize the window.
    
    - parentMain : pm                (bool)          [create,query]
        Set whether window is parented to main application window. Windows only.
    
    - remove : r                     (bool)          [create]
        Remove a window preference.
    
    - removeAll : ra                 (bool)          [create]
        Remove all window preferences.
    
    - restoreMainWindowState : rms   (unicode)       [create]
        Reads in file with main window state (positions of toolbars and dock controls).
    
    - saveAll : sa                   (bool)          [create]
        Writes out file with window attributes.
    
    - saveMainWindowState : sms      (unicode)       [create]
        Writes out file with main window state (positions of toolbars and dock
        controls).
    
    - topEdge : te                   (int)           [create,query,edit]
        Top edge position of the window.
    
    - topLeftCorner : tlc            (int, int)      [create,query,edit]
        Top and left edge position of the window.
    
    - width : w                      (int)           [create,query,edit]
        Width of the window.
    
    - widthHeight : wh               (int, int)      [create,query,edit]
        Width and height of the window.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.windowPref`
    """
    pass
def HypershadeRevertSelectedSwatches(*args, **kwargs): pass
def ToggleSubdDetails(*args, **kwargs): pass
def XgmSplineCacheDeleteOptions(*args, **kwargs): pass
def dR_bridgePress(*args, **kwargs): pass
def ConnectMashToVector(*args, **kwargs): pass
def CreateHairCacheOptions(*args, **kwargs): pass
def createPolyPyramidCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - numberOfSides : ns             (int)           []
    
    - sideLength : sl                (float)         []
    
    - subdivisionsDepth : sd         (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    
    Derived from mel command `maya.cmds.createPolyPyramidCtx`
    """
    pass
def MakePressureCurveOptions(*args, **kwargs): pass
def intSlider(*args, **kwargs): pass
def dR_meshColorOverrideTGL(*args, **kwargs): pass
def subdivDisplaySmoothness(*args, **kwargs):
    """
    Sets or querys the display smoothness of subdivision surfaces on the selection
    list or of all subdivision surfaces if the -all option is set.  Smoothness
    options are; rough, medium, or fine.  Rough is the default.
    
    Flags:
    - all : boolean                  (If set, change smoothness for all subdivision surfaces) [create,query]
    
    - smoothness : s                 (int)           [create,query]
        Smoothness - 1 rough, 2 medium, 3 fine                             Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdivDisplaySmoothness`
    """
    pass
def tolerance(*args, **kwargs):
    """
    This command sets tolerances used by modelling operations that require a
    tolerance, such as surface fillet. Linear tolerance is also known as
    positionaltolerance. Angular tolerance is also known as tangentialtolerance. In
    query mode, return type is based on queried flag.
    
    Flags:
    - angular : a                    (float)         [create,query]
        Sets the angular, or tangentialtolerance.
    
    - linear : l                     (float)         [create,query]
        Sets the linear, or positonaltolerance.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.tolerance`
    """
    pass
def EditNormalizationGroups(*args, **kwargs): pass
def BakeSpringAnimationOptions(*args, **kwargs): pass
def requires(*args, **kwargs):
    """
    This command is used during file I/O to specify the requirements needed to load
    the given file.  It defines what file format version was used to write the file,
    or what plug-ins are required to load the scene. The first string names a
    product (either maya, or a plug-in name) The second string gives the version.
    This command is only useful during file I/O, so users should not have any need
    to use this command themselves. The flags -nodeTypeand -dataTypespecify the node
    types and data types defined by the plug-in. When Maya open a scene file, it
    runs requirescommand in the file and load required plug-ins. But some plug-ins
    may be not loaded because they are missing. The flags -nodeTypeand -dataTypeare
    used by the missing plug-ins. If one plug-in is missing, nodes and data created
    by this plug-in are created as unknown nodes and unknown data. Maya records
    their original types for these unknown nodes and data. When these nodes and data
    are saved back to file, it will be possible to determine the associated missing
    plug-ins. And when export selected nodes, Maya can write out the exact required
    plug-ins. The flags -nodeTypeand -dataTypeis optional. In this command, if these
    flags are not given for one plug-in and the plug-in is missing, the
    requirescommand of this plug-in will always be saved back.
    
    Flags:
    - dataType : dt                  (unicode)       [create]
        Specify a data type defined by this plug-in. The data type is specified by
        MFnPlugin::registerData() when register the plug-in.
    
    - nodeType : nt                  (unicode)       [create]
        Specify a node type defined by this plug-in. The node type is specified by
        MFnPlugin::registerNode() when register the plug-in.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.requires`
    """
    pass
def PolygonCopy(*args, **kwargs): pass
def SelectPolygonSelectionBoundary(*args, **kwargs): pass
def HypershadeSortByName(*args, **kwargs): pass
def NodeEditorHighlightConnectionsOnNodeSelection(*args, **kwargs): pass
def UVCylindricProjection(*args, **kwargs): pass
def OneClickSetCallback(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickSetCallback`
    """
    pass
def PaintGridOptions(*args, **kwargs): pass
def geometryCache(*args, **kwargs): pass
def flow(*args, **kwargs): pass
def ExtrudeEdgeOptions(*args, **kwargs): pass
def FBXExportUseTmpFilePeripheral(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportUseTmpFilePeripheral`
    """
    pass
def TimeEditorCopyClips(*args, **kwargs): pass
def DeleteHistory(*args, **kwargs): pass
def CreateParticleDiskCacheOptions(*args, **kwargs): pass
def SymmetrizeUV(*args, **kwargs): pass
def polyEditUVShell(*args, **kwargs):
    """
    Command edits uv shells on polygonal objects. When used with the query flag, it
    returns the transformation values associated with the specified components.
    
    Flags:
    - angle : a                      (float)         [create,query]
        Specifies the angle value (in degrees) that the uv values are to be rotated by.
    
    - pivotU : pu                    (float)         [create,query]
        Specifies the pivot value, in the u direction, about which the scale or rotate
        is to be performed.
    
    - pivotV : pv                    (float)         [create,query]
        Specifies the pivot value, in the v direction, about which the scale or rotate
        is to be performed.
    
    - relative : r                   (bool)          [create,query]
        Specifies whether this command is editing the values relative to the currently
        existing values. Default is true;
    
    - rotateRatio : rr               (float)         [create,query]
        Specifies the ratio value that the uv values are to be rotated by Default is 1.0
    
    - rotation : rot                 (bool)          [create,query]
        Specifies whether this command is editing the values with rotation values
    
    - scale : s                      (bool)          [create,query]
        Specifies whether this command is editing the values with scale values
    
    - scaleU : su                    (float)         [create,query]
        Specifies the scale value in the u direction.
    
    - scaleV : sv                    (float)         [create,query]
        Specifies the scale value in the v direction.
    
    - uValue : u                     (float)         [create,query]
        Specifies the value, in the u direction - absolute if relative flag is false..
    
    - uvSetName : uvs                (unicode)       [create,query]
        Specifies the name of the uv set to edit uvs on. If not specified will use the
        current uv set if it exists.
    
    - vValue : v                     (float)         [create,query]
        Specifies the value, in the v direction - absolute if relative flag is false..
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyEditUVShell`
    """
    pass
def PaintToonBorderColor(*args, **kwargs): pass
def ReplaceObjectsOptions(*args, **kwargs): pass
def LODGenerateMeshes(*args, **kwargs): pass
def SelectTextureReferenceObject(*args, **kwargs): pass
def shelfTabLayout(*args, **kwargs): pass
def MergeEdgeToolOptions(*args, **kwargs): pass
def STRSTweakModeOn(*args, **kwargs): pass
def Ungroup(*args, **kwargs): pass
def MergeToCenter(*args, **kwargs): pass
def ExtractSubdivSurfaceVertices(*args, **kwargs): pass
def arnoldRender(*args, **kwargs):
    """
    Flags:
    - batch : b                      (bool)          []
    
    - camera : cam                   (PyNode)        []
    
    - frameSequence : seq            (unicode)       []
    
    - height : h                     (int)           []
    
    - origFileName : ofn             (unicode)       []
    
    - port : p                       (int)           []
    
    - saveToRenderView : srv         (unicode)       []
    
    - width : w                      (int)           []
    
    
    Derived from mel command `maya.cmds.arnoldRender`
    """
    pass
def ToggleGrid(*args, **kwargs): pass
def cmdaiDisable(*args, **kwargs): pass
def hikManip(*args, **kwargs):
    """
    Flags:
    - bodyParts : bp                 (bool)          []
    
    - fullBody : fb                  (bool)          []
    
    - rotate : r                     (bool)          []
    
    - start : sta                    (bool)          []
    
    - stop : stp                     (bool)          []
    
    - translate : t                  (bool)          []
    
    
    Derived from mel command `maya.cmds.hikManip`
    """
    pass
def workspacePanel(*args, **kwargs):
    """
    Workspace panel.
    
    Flags:
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - mainWindow : mw                (bool)          [create,query,edit]
        Main window for the application.  The main window has an 'Exit' item in the
        Window Manager menu.  By default, the first created window becomes the main
        window.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspacePanel`
    """
    pass
def ToggleAutoFrame(*args, **kwargs): pass
def resourceManager(*args, **kwargs):
    """
    List resources matching certain properties.
    
    Flags:
    - nameFilter : nf                (unicode)       [create]
        List only resources matching the name. Argument may contain ? and \* characters.
    
    - saveAs : s                     (unicode, unicode) [create]
        Saves a copy of the resource (first parameter) as a separate file (second
        parameter).                              Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.resourceManager`
    """
    pass
def CreateBindingSet(*args, **kwargs): pass
def FBXExportUseSceneName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportUseSceneName`
    """
    pass
def cmdArnoldUpdateTx(*args, **kwargs): pass
def BakeCustomPivotOptions(*args, **kwargs): pass
def SculptGeometryToolOptions(*args, **kwargs): pass
def PolyExtrudeEdges(*args, **kwargs): pass
def CenterPivot(*args, **kwargs): pass
def createPolyConeCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAxis : asa (bool)          []
    
    - attachToSubdivisionsCap : asc  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - roundCap : rc                  (bool)          []
    
    - subdivisionsDepth : sd         (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    
    Derived from mel command `maya.cmds.createPolyConeCtx`
    """
    pass
def plane(*args, **kwargs): pass
def polyMapSew(*args, **kwargs): pass
def ShowAllPolyComponents(*args, **kwargs): pass
def polyAverageVertex(*args, **kwargs): pass
def RestoreUIElements(*args, **kwargs): pass
def AddPondSurfaceLocator(*args, **kwargs): pass
def HideLightManipulators(*args, **kwargs): pass
def ParentConstraintOptions(*args, **kwargs): pass
def DeleteAllExpressions(*args, **kwargs): pass
def CreateCreaseSetOptions(*args, **kwargs): pass
def viewClipPlane(*args, **kwargs):
    """
    The viewClipPlane command can be used to query or set a camera's clip planes. If
    a camera is not specified, the camera in the active view will be used. The near
    and far clip plane flags may be used in conjunction with the auto clip plane
    flag. In query mode, return type is based on queried flag.
    
    Flags:
    - autoClipPlane : acp            (bool)          [create,query]
        Compute the clip planes such that all object's in the camera's viewing frustum
        will be visible.
    
    - farClipPlane : fcp             (float)         [create,query]
        Set or query the far clip plane.
    
    - nearClipPlane : ncp            (float)         [create,query]
        Set or query the near clip plane.
    
    - surfacesOnly : so              (bool)          [create]
        This flag is to be used in conjunction with the auto clip plane flag. Only the
        bounding boxes of surfaces will be used to compute the camera's clipping planes.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewClipPlane`
    """
    pass
def ToggleCompIDs(*args, **kwargs): pass
def TimeEditorGhostTrackToggle(*args, **kwargs): pass
def DeleteStaticChannelsOptions(*args, **kwargs): pass
def PartialCreaseSubdivSurface(*args, **kwargs): pass
def ToggleMaterialLoadingDetailsVisibility(*args, **kwargs): pass
def ShowDeformers(*args, **kwargs): pass
def DoUnghostOptions(*args, **kwargs): pass
def ReducePolygonOptions(*args, **kwargs): pass
def OpenTutorials(*args, **kwargs): pass
def nucleusDisplayTransformNodes(*args, **kwargs): pass
def ShowNRigids(*args, **kwargs): pass
def GetSettingsFromSelectedStroke(*args, **kwargs): pass
def SetDrivenKey(*args, **kwargs): pass
def RenderSequenceOptions(*args, **kwargs): pass
def SmoothSkinWeights(*args, **kwargs): pass
def AddBifrostChannelField(*args, **kwargs): pass
def AnimationSweep(*args, **kwargs): pass
def FBXImportSkins(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportSkins`
    """
    pass
def listAttr(*args, **kwargs): pass
def VolumeAxis(*args, **kwargs): pass
def FBXExportInAscii(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportInAscii`
    """
    pass
def XgmSplineCacheEnableSelectedCache(*args, **kwargs): pass
def SetFullBodyIKKeys(*args, **kwargs): pass
def mute(*args, **kwargs): pass
def ProfilerToolHideSelectedRepetition(*args, **kwargs): pass
def HypershadePickWalkUp(*args, **kwargs): pass
def SelectAllGeometry(*args, **kwargs): pass
def createEditor(*args, **kwargs):
    """
    This command creates a property sheet for any dependency node. The second
    argument is the name of the node, and the first is the name of a layout into
    which the property sheet controls should be placed. The property sheets created
    by this command can by user-customized using the editorTemplatecommand.
    
    Flags:
    - noCloseOnDelete : nc           (bool)          [create]
        If this flag is set then don't close the editor when the data is deleted
    
    - queueForDelete : qfd           (bool)          [create]
        The specified layout is put on a queue.  When the queue is full, layouts past
        the end of the queue are automatically deleted.  If the layout is already on the
        queue, it is moved to the front.  This allows us to dispose of editors when they
        are no longer being used.  This flag should only be used by the showEditor.mel
        script.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.createEditor`
    """
    pass
def GraphSnapOptions(*args, **kwargs): pass
def CollapseSubdivSurfaceHierarchy(*args, **kwargs): pass
def SetCMCAmbient(*args, **kwargs): pass
def CopyUVsToUVSetOptions(*args, **kwargs): pass
def GoToMinFrame(*args, **kwargs): pass
def UncreaseSubdivSurface(*args, **kwargs): pass
def lattice(*args, **kwargs): pass
def DuplicateEdges(*args, **kwargs): pass
def UseHardwareShader(*args, **kwargs): pass
def ShortPolygonNormals(*args, **kwargs): pass
def HypershadeSelectObjectsWithMaterials(*args, **kwargs): pass
def loft(*args, **kwargs): pass
def setToolTo(*args, **kwargs):
    """
    This command switches control to the named context.
    
    
    Derived from mel command `maya.cmds.setToolTo`
    """
    pass
def SetNClothStartFromMesh(*args, **kwargs): pass
def dR_pointSnapPress(*args, **kwargs): pass
def hwRenderLoad(*args, **kwargs):
    """
    Empty command used to force the dynamic load of HR render
    
    
    Derived from mel command `maya.cmds.hwRenderLoad`
    """
    pass
def ActivateGlobalScreenSlider(*args, **kwargs): pass
def NormalConstraintOptions(*args, **kwargs): pass
def polyRetopoCtx(*args, **kwargs):
    """
    Create a new context to manipulate reform nodes                  In query mode,
    return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.polyRetopoCtx`
    """
    pass
def ShowAttributeEditorOrChannelBox(*args, **kwargs): pass
def superCtx(*args, **kwargs):
    """
    Flags:
    - attach : a                     (unicode)       []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.superCtx`
    """
    pass
def XgmSetFreezeBrushTool(*args, **kwargs): pass
def ExportSkinWeightMaps(*args, **kwargs): pass
def polyColorMod(*args, **kwargs): pass
def xgmFindAttachment(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    - file : f                       (unicode)       []
    
    - frame : fm                     (int)           []
    
    - module : m                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmFindAttachment`
    """
    pass
def CreateText(*args, **kwargs): pass
def DeleteAllStaticChannels(*args, **kwargs): pass
def sbs_SetEditionModeScale(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetEditionModeScale`
    """
    pass
def LayoutUVRectangle(*args, **kwargs): pass
def QuadrangulateOptions(*args, **kwargs): pass
def InsertKnotOptions(*args, **kwargs): pass
def muMessageQuery(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.muMessageQuery`
    """
    pass
def Newton(*args, **kwargs): pass
def Birail2(*args, **kwargs): pass
def soft(*args, **kwargs):
    """
    Makes a soft body from the object(s) passed on the command line or in the
    selection list.  The geometry can be a NURBS, polygonal, lattice object.  The
    resulting soft body is made up of a hierarchy with a particle shape and a
    geometry shape, thus: T    / \  T   G /      P        Dynamics are applied to
    the particle shape and the resulting particle positions then drive the locations
    of the geometry's CVs, vertices, or lattice points. With the convert option, the
    particle shape and its transform are simply inserted below the original shape's
    hierarchy. With the duplicate option, the original geometry's transform and
    shape are duplicated underneath its parent, and the particle shape is placed
    under the duplicate.  Note that any animation on the hierarchy will affect the
    particle shape as well.  If you do not want then, then reparent the structure
    outside the hierarchy. When duplicating, the soft portion (the duplicate) is
    given the name copyOf+ original object name.  The particle portion is always
    given the name original object name+ Particles.None of the flags of the soft
    command can be queried.  The soft -q command is used only to identify when an
    object is a soft body, or when two objects are part of the same soft body. See
    the examples.
    
    Flags:
    - convert : c                    (bool)          [create]
        This tells the command that you want the original object to be the actual
        deformed object.  The particle shape portion of the soft body will be inserted
        in the same hierarchy as the original, under the same parent (with one
        additional intervening transform which is initially the identity).  If no flags
        are passed, then this is assumed.  The combination -c -h 1 is not valid; if you
        have this in your scripts, remove the -h 1.
    
    - duplicate : d                  (bool)          [create]
        This tells the command that you want to make a copy of the original object and
        use the copy as the deforming geometry. Input connections to the original object
        are duplicated.  You would do this if you wanted to keep the original object in
        your scene and also have a copy of it that was a soft body. This flag and -dh
        are mutually exclusive.
    
    - duplicateHistory : dh          (bool)          [create]
        This is the same as -d, except that upstream history, is duplicated as well,
        instead of just input connections. This flag and -d are mutually exclusive.
    
    - goal : g                       (float)         [create]
        This is the same as -d, but in addition it tells the command that you want the
        resulting soft body to try to follow the original geometry, using the set goal
        weight as the value that controls how strongly it is to follow it.  A value of
        1.0 will try to follow exactly, and a value of 0.0 will not follow at all. The
        default value is 0.5.  This value must be from 0.0 to 1.0. You could use -d with
        -g, but it is redundant.  If you want history to be duplicated, you can use -dh
        and -g together.
    
    - hideOriginal : h               (bool)          [create]
        This flag is used only when duplicating (-d, -g, or -dh).  If set to true,
        whichever of the two objects is NOT the soft object will be hidden. In other
        words, with -d -h true, the original object will be hidden; with -d -c -h 1 the
        duplicate object will be hidden. You would typically do this if you want to use
        the non-dynamic object as a goal for the soft one (see -g) but you do not want
        it visible in the scene. The flags -h 1 and -c are mutually exclusive.
    
    - name : n                       (unicode)       []
        This flag is obsolete.  If you wish to give your new soft object a name, use the
        rename command (or from the UI, use the outliner).                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.soft`
    """
    pass
def polySlideEdgeCtx(*args, **kwargs):
    """
    Flags:
    - absolute : a                   (bool)          []
    
    - direction : d                  (int)           []
    
    - edgeDirection : ed             (float)         []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - snappingPoints : sp            (int)           []
    
    - snappingTolerance : st         (float)         []
    
    - useSnapping : us               (bool)          []
    
    
    Derived from mel command `maya.cmds.polySlideEdgeCtx`
    """
    pass
def PickWalkUp(*args, **kwargs): pass
def HypershadeDisplayAsLargeSwatches(*args, **kwargs): pass
def cmdArnoldMeshLight(*args, **kwargs): pass
def Triangulate(*args, **kwargs): pass
def CurveSmoothnessMedium(*args, **kwargs): pass
def Create3DContainer(*args, **kwargs): pass
def FloodSurfaces(*args, **kwargs): pass
def dR_selConstraintEdgeRing(*args, **kwargs): pass
def draggerContext(*args, **kwargs): pass
def dropoffLocator(*args, **kwargs): pass
def AttachToPathOptions(*args, **kwargs): pass
def XgmSplineCacheCreateOptions(*args, **kwargs): pass
def camera(*args, **kwargs): pass
def ToggleNormals(*args, **kwargs): pass
def PoleVectorConstraintOptions(*args, **kwargs): pass
def XgmSetDirectionBrushTool(*args, **kwargs): pass
def visor(*args, **kwargs): pass
def geometryExportCache(*args, **kwargs): pass
def LookAtSelection(*args, **kwargs): pass
def PFXUVSetLinkingEditor(*args, **kwargs): pass
def AddKeysToolOptions(*args, **kwargs): pass
def hide(*args, **kwargs):
    """
    The hidecommand is used to make objects invisible. If no flags are used, the
    objects specified, or the active objects if none are specified, will be made
    invisible.
    
    Flags:
    - allObjects : all               (bool)          [create]
        Make everything invisible (top level objects).
    
    - clearLastHidden : clh          (bool)          [create]
        Clear the last hidden list.
    
    - clearSelection : cs            (bool)          [create]
        Clear selection after the operation.
    
    - invertComponents : ic          (bool)          [create]
        Hide components that are not specified.
    
    - returnHidden : rh              (bool)          [create]
        Hide objects, but also return list of hidden objects.
    
    - testVisibility : tv            (bool)          [create]
        Do not change visibility, just test it (returns 1 is invisible, 2 if visible, 3
        if partially visible).                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hide`
    """
    pass
def colorManagementPrefs(*args, **kwargs):
    """
    This command allows querying and editing the color management global data in a
    scene.  It also allows for setting the view transform and rendering space which
    automatically configures the color processing in the enabled views.
    In query mode, return type is based on queried flag.
    
    Flags:
    - cmConfigFileEnabled : cfe      (bool)          [query,edit]
        Turn on or off applying an OCIO configuration file.  If set, the color
        management configuration set in the preferences is used.
    
    - cmEnabled : cme                (bool)          [query,edit]
        Turn on or off color management in general.  If set, the color management
        configuration set in the preferences is used.
    
    - colorManageAllNodes : cma      (bool)          [create,query,edit]
        Adds color management to all input nodes such as file texture nodes
    
    - colorManagePots : cmp          (bool)          [query,edit]
        Turn on or off color management of color pots in the UI.  If set, colors in
        color pots are taken to be in rendering space, and are displayed after being
        transformed by the view transform set in the preferences.
    
    - colorManagedNodes : cmn        (bool)          [query,edit]
        Gets the names of all nodes that apply color management to bring pixels from an
        input color space to the rendering space. Examples include file texture node.
    
    - colorManagementSDKVersion : cmv (unicode)       [query,edit]
        Obtain the version of the color management SDK used by Maya.
    
    - configFilePath : cfp           (unicode)       [query,edit]
        The configuration file to be used, if color management is enabled.
    
    - defaultInputSpaceName : din    (unicode)       [query,edit]
        This flag is obsolete.  See the colorManagementFileRules command for more
        information.
    
    - equalsToPolicyFile : etp       (unicode)       [query,edit]
        Query if the current loaded policy settings is the same with the settings
        described in the policy file which is the argument of the command.
    
    - exportPolicy : epy             (unicode)       [create,query,edit]
        Export the color management parameters to policy file
    
    - inhibitEvents : ie             (bool)          [create,query,edit]
        Inhibit client-server notifications and event triggers which occur when changing
        the color management settings.
    
    - inputSpaceNames : iss          (bool)          [query,edit]
        Returns the list of available input color spaces. Used to populate the input
        color spaces UI popup.
    
    - loadPolicy : lpy               (unicode)       [create,query,edit]
        Load the color management policy file. This file overides the color management
        settings.
    
    - loadedDefaultInputSpaceName : ldn (unicode)       [query,edit]
        This flag is obsolete.
    
    - loadedOutputTransformName : lon (unicode)       [query,edit]
        Gets the loaded output transform.  Used by file open, import, and reference to
        check for missing color spaces or transforms.
    
    - loadedRenderingSpaceName : lrn (unicode)       [query,edit]
        Gets the loaded rendering space.  Used by file open, import, and reference to
        check for missing color spaces or transforms.
    
    - loadedViewTransformName : lvn  (unicode)       [query,edit]
        Gets the loaded view transform.  Used by file open, import, and reference to
        check for missing color spaces or transforms.
    
    - missingColorSpaceNodes : mcn   (bool)          [query,edit]
        Gets the names of the nodes that have color spaces not defined in the selected
        transform collection.
    
    - ocioRulesEnabled : ore         (bool)          [query,edit]
        Turn on or off the use of colorspace assignment rules from the OCIO library.
    
    - outputTarget : ott             (unicode)       [query,edit]
        Indicates to which output the outputTransformEnabled or the outputTransformName
        flags are to be applied. Valid values are rendereror playblast.
    
    - outputTransformEnabled : ote   (bool)          [query,edit]
        Turn on or off applying the output transform for out of viewport renders. If
        set, the output transform set in the preferences is used.
    
    - outputTransformName : otn      (unicode)       [query,edit]
        The output transform to be applied for out of viewport renders.  Disables output
        use view transform mode.
    
    - outputTransformNames : ots     (bool)          [query,edit]
        Returns the list of available output transforms.
    
    - outputTransformUseColorConversion : otc (bool)          [query,edit]
        Turn on or off selecting the color space conversion for the output color space
        of viewport renders.  If set, a conversion color space is used; otherwise, a
        view transform is used.
    
    - outputUseViewTransform : ovt   (bool)          [query,edit]
        Turns use view transform mode on.  In this mode, the output transform is set to
        match the view transform.  To turn the mode off, set an output transform using
        the outputTransformName flag.
    
    - policyFileName : pfn           (unicode)       [query,edit]
        Set the policy file name
    
    - popupOnError : poe             (bool)          [query,edit]
        Turn on or off displaying a modal popup on error (as well as the normal script
        editor reporting of the error), for this invocation of the command.  Default is
        off.
    
    - refresh : rfr                  (bool)          [create,query,edit]
        Refresh the color management.
    
    - renderingSpaceName : rsn       (unicode)       [query,edit]
        The color space to be used during rendering.  This is the source color space to
        the viewing transform, for color managed viewers and color managed UI controls,
        and the destination color space for color managed input pixels.
    
    - renderingSpaceNames : rss      (bool)          [query,edit]
        Returns the list of available rendering spaces.  Used to populate the color
        management preference UI popup.
    
    - restoreDefaults : rde          (bool)          [create,query,edit]
        Restore the color management settings to their default value.
    
    - viewTransformName : vtn        (unicode)       [query,edit]
        The view transform to be applied by color managed viewers and color managed UI
        controls.
    
    - viewTransformNames : vts       (bool)          [query,edit]
        Returns the list of available view transforms.  Used to populate the color
        management preference UI popup.                                 Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorManagementPrefs`
    """
    pass
def polyBridgeEdge(*args, **kwargs): pass
def polyPlatonicSolid(*args, **kwargs): pass
def RemoveConstraintTargetOptions(*args, **kwargs): pass
def DecreaseExposureCoarse(*args, **kwargs): pass
def TimeDraggerToolActivate(*args, **kwargs): pass
def addIK2BsolverCallbacks(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.addIK2BsolverCallbacks`
    """
    pass
def PerformPrecompExport(*args, **kwargs): pass
def PolyExtrudeOptions(*args, **kwargs): pass
def polyToSubdiv(*args, **kwargs): pass
def CreateNSoftBodyOptions(*args, **kwargs): pass
def ShowWhatsNew(*args, **kwargs): pass
def subdLayoutUV(*args, **kwargs): pass
def OutTangentFlat(*args, **kwargs): pass
def timeEditorClipOffset(*args, **kwargs):
    """
    This command is used to compute an offset to apply on a source clip in order to
    automatically align it to a destination clip at a specified match element. For
    this command to work, offset objects must be specified for the character.
    In query mode, return type is based on queried flag.
    
    Flags:
    - applyToAllRoots : atr          (bool)          [create]
        Apply root offsets to all roots in the population. However, if the root objects
        are specified by rootObj flag, this flag will be ignored.
    
    - clipId : id                    (int)           [create,edit]
        ID of the clip to be edited.
    
    - matchClipId : mci              (int)           [create]
        Specify the ID of a clip to match.
    
    - matchDstTime : mdt             (time)          [create]
        Specify the time on target clip.
    
    - matchObj : mob                 (PyNode)        [create]
        Specify the object to match.
    
    - matchOffsetRot : mor           (bool)          [query]
        Get the rotation of the match offset matrix.
    
    - matchOffsetTrans : mot         (bool)          [query]
        Get the translation of the match offset matrix.
    
    - matchPath : mpt                (unicode)       [create]
        Full path of the clip to match. For example:
        composition1|track1|Group|track2|clip1
    
    - matchRotOp : mro               (int)           [create]
        Specify the option for matching rotation. 0 : full - All rotation components are
        matched1 : Y    - Y component is matched2 : none - No rotation matching
    
    - matchSrcTime : mst             (time)          [create]
        Specify the time on source clip.
    
    - matchTransOp : mto             (int)           [create]
        Specify the option for matching translation. 0 : full - All translation
        components are matched1 : XZ   - X and Z components are matched2 : none - No
        translation matching
    
    - offsetTransform : oft          (bool)          [create,query]
        Create/get an offset for the specified clip.
    
    - path : pt                      (unicode)       [create,edit]
        Full path of a clip to be edited. For example: composition1|track1|group;
        composition1|track1|group|track2|clip1. In query mode, this flag can accept a
        value.
    
    - resetMatch : rsm               (int)           [create]
        Specify clip ID to remove offset.
    
    - resetMatchPath : rmp           (unicode)       [create]
        Specify clip's full path to remove offset. For example:
        composition1|track1|Group|track2|clip1
    
    - rootObj : rob                  (unicode)       [create,query,edit]
        Specify the root objects. If specified, this flag will take precedence over
        applyToAllRoots flag. When used in query mode, returns list of roots defined for
        the relocator.
    
    - upVectorX : upx                (float)         [create]
        Specify the X coordinate of the up vector.
    
    - upVectorY : upy                (float)         [create]
        Specify the Y coordinate of the up vector.
    
    - upVectorZ : upz                (float)         [create]
        Specify the Z coordinate of the up vector.                                 Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeEditorClipOffset`
    """
    pass
def PlaybackRangeHighlight(*args, **kwargs): pass
def softModContext(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.softModContext`
    """
    pass
def DisplayLayerEditorWindow(*args, **kwargs): pass
def RandomizeFollicles(*args, **kwargs): pass
def SaveCurrentLayout(*args, **kwargs): pass
def xgmDensityComp(*args, **kwargs):
    """
    Flags:
    - force : f                      (bool)          []
    
    - progressBar : pb               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmDensityComp`
    """
    pass
def ConvertToBreakdown(*args, **kwargs): pass
def BezierPresetCorner(*args, **kwargs): pass
def CreateSubdivCone(*args, **kwargs): pass
def NodeEditorSetTraversalDepthZero(*args, **kwargs): pass
def TogglePolyPrimitivesAsToolExitOnComplete(*args, **kwargs): pass
def OpenAutodeskStore(*args, **kwargs): pass
def PaintShrinkWrapWeightsTool(*args, **kwargs): pass
def AlembicHelp(*args, **kwargs): pass
def SnapToPoint(*args, **kwargs): pass
def ToggleMeshFaces(*args, **kwargs): pass
def polyColorSet(*args, **kwargs):
    """
    Command to do the following to color sets:         - delete an existing color
    set.         - rename an existing color set.     - create a new empty color set.
    - set the current color set to a pre-existing color set.     - modify sharing
    between instances of per-instance color sets     - query the current color set.
    - query the names of all color sets.         - query the name(s) along with
    representation value(s)       or clamped value(s) of all color sets         -
    query the representation value or clamped value of the current color set
    
    Flags:
    - allColorSets : acs             (bool)          [create,query,edit]
        This flag when used in a query will return a list of all of the color set names
    
    - clamped : cla                  (bool)          [create,query,edit]
        This flag specifies if the color set will truncate any value that is outside 0
        to 1 range.
    
    - colorSet : cs                  (unicode)       [create,query,edit]
        Specifies the name of the color set that this command needs to work on. This
        flag has to be specified for this command to do anything meaningful other than
        query the current color set.
    
    - copy : cp                      (bool)          [create,query,edit]
        This flag when used will result in the copying of the color set corresponding to
        name specified with the colorSet flag to the colorSet corresponding to the name
        specified with the newcolorSet flag
    
    - create : cr                    (bool)          [create,query,edit]
        This flag when used will result in the creation of an empty color set
        corresponding to the name specified with the colorSet flag. If a color set with
        that name already exists, then no new color set will be created.
    
    - currentColorSet : ccs          (bool)          [create,query,edit]
        This flag when used will set the current color set that the object needs to work
        on, to be the color set corresponding to the name specified with the colorSet
        flag. This does require that a colorSet with the specified name exist. When
        queried, this returns the current color set.
    
    - currentPerInstanceSet : cpi    (bool)          [query,edit]
        This is a query-only flag for use when the current color set is a per-instance
        color set family. This returns the member of the set family that corresponds to
        the currently select instance.
    
    - delete : d                     (bool)          [create,query,edit]
        This flag when used will result in the deletion of the color set corresponding
        to the name specified with the colorSet flag.
    
    - newColorSet : nc               (unicode)       [create,query,edit]
        Specifies the name that the color set corresponding to the name specified with
        the colorSet flag, needs to be renamed to.
    
    - perInstance : pi               (bool)          [create,query,edit]
        This flag can be used in conjunction with the create flag to indicate whether or
        not the color set is per-instance. When you create a per-instance color set, the
        set will be applied as shared between all selected instances of the shape unless
        the unshared flag is used. The perInstance flag can be used in query mode with
        the currentColorSet or allColorSets flag to indicate that the set family names
        (i.e. not containing instance identifiers) will be returned by the query. In
        query mode, this flag can accept a value.
    
    - rename : rn                    (bool)          [create,query,edit]
        This flag when used will result in the renaming of the color set corresponding
        to the name specified with the colorSet flag to the name specified using the
        newColorSet flag.
    
    - representation : rpt           (unicode)       [create,query,edit]
        This flag corresponds to the color channels to used, for example A(alpha only),
        RGB, and RGBA.
    
    - shareInstances : si            (bool)          [create,query,edit]
        This flag is used to modify the sharing of per-instance color sets within a
        given color set family so that all selected instances share the specified set.
        In query mode, it returns a list of the instances that share the set specified
        by the colorSet flag.
    
    - unshared : us                  (bool)          [create,query,edit]
        This flag can be used in conjunction with the create and perInstance flags to
        indicate that the newly created per-instance set should be created with a
        separate set per instance.                                 Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyColorSet`
    """
    pass
def FlipMesh(*args, **kwargs): pass
def RenameAttribute(*args, **kwargs): pass
def constrain(*args, **kwargs):
    """
    This command constrains rigid bodies to the world or other rigid bodies.
    In query mode, return type is based on queried flag.
    
    Flags:
    - barrier : br                   (bool)          [create,query]
        Creates a barrier constraint.  This command requires one rigid bodies.
    
    - damping : d                    (float)         [create,query,edit]
        Sets the damping constant. Default value: 0.1 Range: -1000.0 to 1000.0
    
    - directionalHinge : dhi         (bool)          [create,query]
        Creates a directional hinge constraint.  This command requires two rigid bodies.
        The directional hinge always maintains the initial direction of its axis.
    
    - hinge : hi                     (bool)          [create,query]
        Creates a hinge constraint.  This command requires one or two rigid bodies.
    
    - interpenetrate : i             (bool)          [create,query,edit]
        Allows (or disallows) the rigid bodies defined in the constrain to ipenetrate.
    
    - nail : na                      (bool)          [create,query]
        Creates a nail constraint.  This command requires one rigid body.
    
    - name : n                       (unicode)       [create,query,edit]
        Names the rigid constraint.
    
    - orientation : o                (float, float, float) [create,query,edit]
        Set initial orientation of the constraint in world space.  This command is only
        valid with hinge and barrier constraints Default value: 0.0 0.0 0.0
    
    - pinConstraint : pin            (bool)          [create,query]
        Creates a pin constraint.  This command requires two rigid bodies.
    
    - position : p                   (float, float, float) [create,query,edit]
        Set initial position of the constraint in world space. Default value: 0.0 0.0
        0.0 for uni-constraints, midpoint of bodies for deul constraint.
    
    - restLength : rl                (float)         [create,query,edit]
        Sets the rest length. Default value: 1.0
    
    - spring : s                     (bool)          [create,query]
        Creates a spring constraint.  This command requires one or two rigidies.
    
    - stiffness : st                 (float)         [create,query,edit]
        Sets the springs stiffness constant. Default value: 5.0                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.constrain`
    """
    pass
def PickWalkDownSelect(*args, **kwargs): pass
def InTangentClamped(*args, **kwargs): pass
def setKeyPath(*args, **kwargs):
    """
    The setKeyPath command either creates or edits the path (a nurbs curve) based on
    the current position of the selected object at the current time.
    
    
    Derived from mel command `maya.cmds.setKeyPath`
    """
    pass
def track(*args, **kwargs):
    """
    The track command translates a camera horizontally or vertically in the world
    space. The viewing-direction and up-direction of the camera are not altered.
    There is no translation in the viewing direction. The track command can be
    applied to either a perspective or an orthographic camera. When no camera name
    is supplied, this command is applied to the camera in the active view.
    
    Flags:
    - down : d                       (float)         [create]
        Set the amount of down translation in unit distance.
    
    - left : l                       (float)         [create]
        Set the amount of left translation in unit distance.
    
    - right : r                      (float)         [create]
        Set the amount of right translation in unit distance.
    
    - upDistance01 : u               (float)         [create]
        Set the amount of up translation in unit distance. This is equivalent to using
        up/upDistance02 flag.
    
    - upDistance02 : up              (float)         [create]
        Set the amount of up translation in unit distance. This is equivalent to using
        u/upDistance01 flag.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.track`
    """
    pass
def SelectedAnimLayer(*args, **kwargs): pass
def PreflightPolygon(*args, **kwargs): pass
def cycleCheck(*args, **kwargs):
    """
    This command searches for plug cycles in the dependency graph. If a plug or node
    is selected then it searches for cycles that that plug or node is involved with.
    Plugs or nodes can also be passed as arguments. If the -all flag is used then
    the entire graph is searched. Normally the return value is a boolean indicating
    whether or not the given items were involved in a cycle.  If the -list flag is
    used then the return value is the list of all plugs in cycles (involving the
    selected plug or node if any). Note that it is possible for evaluation cycles to
    occur even where no DG connections exist. Here are some examples: 1) Nodes with
    evaluation-time dependent connections: An example is expression nodes, because
    we cannot tell what an expression node is actually referring to until it is
    evaluated, and such evaluation-time dependent nodes may behave differently based
    on the context (e.g. time) they are evaluated at. If you suspect a cycle due to
    such a connection, the best way to detect the cycle is through manual
    inspection. 2) Cycles due to DAG hierarchy: noting that DAG nodes are
    implicitely connected through parenting, if a child DAG node connects an output
    into the input of a parent node, a cycle will exist if the plugs involved also
    affect each other. In order to enable detection of cycles involving the DAG, add
    the -dag flag to the command line. Note also that this command may incorrectly
    report a cycle on an instanced skeleton where some of the instances use IK. You
    will have to examine the reported cycle yourself to determine if it is truly a
    cycle or not. The evaluation time cycle checking will not report false cycles.
    
    Flags:
    - all : all                      (bool)          [create]
        search the entire graph for cycles instead of the selection list. (Note: if
        nothing is selected, -all is assumed).
    
    - children : c                   (bool)          [create]
        Do not consider cycles on the children, only the specified plugs
    
    - dag : dag                      (bool)          [create]
        Also look for cycles due to relationships in the DAG. For each DAG node, the
        parenting connection on its children is also considered when searching for
        cycles.
    
    - evaluation : e                 (bool)          [create,query]
        Turn on and off cycle detection during graph evaluation
    
    - firstCycleOnly : fco           (bool)          [create]
        When -list is used to return a plug list, the list may contain multiple cycles
        or partial cycles. When -firstCycleOnly is specified only the first such cycle
        (which will be a full cycle) is returned.
    
    - firstPlugPerNode : fpn         (bool)          [create]
        When -list is used to return a plug list, the list will typically contain
        multiple plugs per node (e.g. ... A.output B.input B.output C.input ...),
        reflecting internal affectsrelationships rather than external DG connections.
        When -firstPlugPerNode is specified, only the first plug in the list for each
        node is returned (B.input in the example).
    
    - lastPlugPerNode : lpn          (bool)          [create]
        When -list is used to return a plug list, the list will typically contain
        multiple plugs per node (e.g. ... A.output B.input B.output C.input ...),
        reflecting internal affectsrelationships rather than external DG connections.
        When -lastPlugPerNode is specified, only the last plug in the list for each node
        is returned (B.output in the example).
    
    - list : l                       (bool)          [create]
        Return all plugs involved in one or more cycles.  If not specified, returns a
        boolean indicating whether a cycle exists.
    
    - listSeparator : ls             (unicode)       [create]
        When -list is used to return a plug list, the list may contain multiple cycles
        or partial cycles. Use -listSeparator to specify a string that will be inserted
        into the returned string array to separate the cycles.
    
    - parents : p                    (bool)          [create]
        Do not consider cycles on the parents, only the specified plugs
    
    - secondary : s                  (bool)          [create]
        Look for cycles on related plugs as well as the specified plugs Default is onfor
        the -allcase and offfor others
    
    - timeLimit : tl                 (time)          [create]
        Limit the search to the given amount of time                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cycleCheck`
    """
    pass
def SelectAllIKHandles(*args, **kwargs): pass
def ModifyConstraintAxis(*args, **kwargs): pass
def ApplySettingsToSelectedStroke(*args, **kwargs): pass
def xgmSyncPatchVisibility(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmSyncPatchVisibility`
    """
    pass
def deformerEvaluator(*args, **kwargs):
    """
    Flags:
    - chains : c                     (bool)          []
    
    - meshes : m                     (bool)          []
    
    
    Derived from mel command `maya.cmds.deformerEvaluator`
    """
    pass
def sceneLint(*args, **kwargs):
    """
             sceneLintISSUE_CODEdescription: DETAILED_DESCRIPTION_OF_ISSUE,
    mitigationobjects: [ LIST_OF_STRINGS_NAMING_OBJECTS_TO_WHICH_IT_APPLIES ],
    benefit: DESCRIPTION_OF_HOW_THE_CODE_MAKES_THE_SCENE_BETTER,
    description: DESCRIPTION_OF_WHAT_THE_CODE_DOES,
    codeThe sceneLintcommand is used to analyze the currently loaded scene to find
    potential areas for improvement in performance, memory use, or reduction of
    clutter.  In the query mode it will report back the list of available checks it
    can do. Each check will have an associated short-form which can be passed to the
    command to run specific checks.  In create mode the returned string is a JSON
    format list of issues and mitigations that suggest a way to solve the problem it
    describes.  Mitigation can be automatically performed by extracting the
    mitigation code and arguments then running the Python code
    
    Dynamic library stub function 
    
    Flags:
    - issueType : i                  (unicode)       [create,query]
        Specify a set of issue types to be checked. If omitted then all known issue
        types are checked. In query mode returns a description of what a particular
        issue type is checking. In query mode, this flag can accept a value.
    
    - verbose : v                    (bool)          [create,query]
        If set then include both name and description when querying the list of
        available issue types.                             Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sceneLint`
    """
    pass
def HideIntermediateObjects(*args, **kwargs): pass
def ConvertSelectionToUVs(*args, **kwargs): pass
def panZoom(*args, **kwargs):
    """
    The panZoom command pans/zooms the 2D film. The panZoom command can be applied
    to either a perspective or an orthographic camera. When no camera name is
    supplied, this command is applied to the camera in the active view.
    
    Flags:
    - absolute : abs                 (bool)          [create]
        This flag modifies the behavior of the distance and zoomRatio flags. If
        specified, the distance and zoomRatio value will be applied directly.
    
    - downDistance : d               (float)         [create]
        Set the amount of down pan distance in inches
    
    - leftDistance : l               (float)         [create]
        Set the amount of left pan distance in inches
    
    - relative : rel                 (bool)          [create]
        This flag modifies the behavior of the distance and zoomRatio flags. If
        specified, the distance or zoomRatio value is used multiply the camera's
        existing value. By default the relative flag is always on.
    
    - rightDistance : r              (float)         [create]
        Set the amount of right pan distance in inches
    
    - upDistance : u                 (float)         [create]
        Set the amount of up pan distance in inches
    
    - zoomRatio : z                  (float)         [create]
        Set the amount of zoom ratio                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.panZoom`
    """
    pass
def nexQuadDrawCtx(*args, **kwargs):
    """
    Flags:
    - appendMesh : apm               (unicode)       []
    
    - bevelEdge : bed                (float)         []
    
    - bridgeCurveType : bct          (int)           []
    
    - bugReport : bug                (bool)          []
    
    - cameraToPoly : ctp             (bool)          []
    
    - canDoConnect : cdc             (bool)          []
    
    - cancelManip : cam              (bool)          []
    
    - capslock : cap                 (bool)          []
    
    - connItemSel : cis              (int)           []
    
    - connectMode : sm               (bool)          []
    
    - contextTweakMode : ctm         (bool)          []
    
    - curSlideMesh : csm             (unicode)       []
    
    - debugString : deb              (bool)          []
    
    - extrudePoly : epl              (float)         []
    
    - extrudeVert : evr              (float, float)  []
    
    - extrudeVertDivisions : evd     (int)           []
    
    - getManipVal : gmv              (unicode, unicode) []
    
    - getSplitCmd : gsc              (bool)          []
    
    - hasPolySelection : hps         (bool)          []
    
    - hasValidSel : hs               (bool)          []
    
    - hideManip : hm                 (bool)          []
    
    - hiliteSymmetrize : hsy         (bool)          []
    
    - iconpath : ico                 (unicode)       []
    
    - isGoodForBevel : gbe           (bool)          []
    
    - isGoodForBridge : gfb          (bool)          []
    
    - isGoodForExtrude : gfe         (bool)          []
    
    - keepFacesTogether : kft        (int)           []
    
    - lastSewNode : lsn              (unicode)       []
    
    - lockSelected : ls              (bool)          []
    
    - manipOrientation : mo          (float, float, float) []
    
    - manipOrientationX : mox        (float)         []
    
    - manipOrientationY : moy        (float)         []
    
    - manipOrientationZ : moz        (float)         []
    
    - manipPos : mp                  (float, float, float) []
    
    - manipPosX : mpx                (float)         []
    
    - manipPosY : mpy                (float)         []
    
    - manipPosZ : mpz                (float)         []
    
    - manipScaleX : msx              (float)         []
    
    - manipScaleY : msy              (float)         []
    
    - manipScaleZ : msz              (float)         []
    
    - manipUndoNotify : mun          (bool)          []
    
    - manipVal : mv                  (unicode, unicode, float) []
    
    - modelPanelType : mpt           (unicode, unicode) []
    
    - multiCompMode : mcm            (int)           []
    
    - numConnItems : nci             (bool)          []
    
    - polynames : pn                 (bool)          []
    
    - prevManipVal : pmv             (float)         []
    
    - quadDrawClearDots : qcd        (bool)          []
    
    - resetCustom : rc               (unicode)       []
    
    - resetManip : rm                (bool)          []
    
    - restoreSelection : res         (unicode)       []
    
    - rmbComplete : rmc              (bool)          []
    
    - selCount : cnt                 (unicode)       []
    
    - selFlip : sef                  (bool)          []
    
    - selSym : ses                   (bool)          []
    
    - selectHilite : sh              (bool)          []
    
    - selectLocked : sl              (bool)          []
    
    - skipSelTypeCB : ssc            (bool)          []
    
    - stickyIsDown : sid             (bool)          []
    
    - straighten : str               (bool)          []
    
    - unlockAll : ua                 (bool)          []
    
    - updateManips : upm             (bool)          []
    
    - useRefMesh : urm               (bool)          []
    
    
    Derived from mel command `maya.cmds.nexQuadDrawCtx`
    """
    pass
def jointLattice(*args, **kwargs): pass
def readTake(*args, **kwargs):
    """
    This action reads a take (.mov) file to a defined device. See also: writeTake,
    applyTake
    
    Dynamic library stub function 
    
    Flags:
    - angle : a                      (unicode)       [create]
        Sets the angular unit used in the take. Valid strings are deg, degree, rad, and
        radian. C: The default is the current user angular unit.
    
    - device : d                     (unicode)       [create]
        Specifies the device into which the take data is read. This is a required
        argument.
    
    - frequency : f                  (float)         [create]
        The timestamp is ignored and the specified frequency is used. If timeStamp data
        is not in the .mov file, the -noTimestamp flag should also be used. This flag
        resample, instead the data is assumed to be at the specified frequency. C: If
        the take file does not use time stamps, the default frequency is 60Hz.
    
    - linear : l                     (unicode)       [create]
        Sets the linear unit used in the take. Valid strings are mm, millimeter, cm,
        centimeter, m, meter, km, kilometer, in, inch, ft, foot, yd, yard, mi, and mile.
        C: The default is the current user linear unit.
    
    - noTime : nt                    (bool)          [create]
        Specifies if the take (.mov) file contains time stamps. C: The default is to
        assume time stamps are part of the take file.
    
    - take : t                       (unicode)       [create]
        Reads the specified take file. It is safest to pass the full path to the flag.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.readTake`
    """
    pass
def SquareSurface(*args, **kwargs): pass
def OpenFeatureRequest(*args, **kwargs): pass
def EnableWeightNrm(*args, **kwargs): pass
def SetWireframeColor(*args, **kwargs): pass
def reorderDeformers(*args, **kwargs):
    """
    This command changes the order in which 2 deformation nodes affect the output
    geometry. The first string argument is the name of deformer1, the second is
    deformer2, followed by the list of objects they deform. It inserts deformer2
    before deformer1. Currently supported deformer nodes include: sculpt, cluster,
    jointCluster, lattice, wire, jointLattice, boneLattice, blendShape.
    
    Flags:
    - name : n                       (unicode)       [create]
        This flag is obsolete and is not used.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.reorderDeformers`
    """
    pass
def ClearInitialState(*args, **kwargs): pass
def MoveNormalToolOptions(*args, **kwargs): pass
def SubdivToNURBSOptions(*args, **kwargs): pass
def mayaPreviewRenderIntoNewWindow(*args, **kwargs): pass
def ToggleCreatePolyPrimitivesAsTool(*args, **kwargs): pass
def dR_selectModeHybrid(*args, **kwargs): pass
def HideUnselectedCVs(*args, **kwargs): pass
def cameraView(*args, **kwargs): pass
def HypershadeTestTextureOptions(*args, **kwargs): pass
def CreateGhost(*args, **kwargs): pass
def FBIKLabelRingToe(*args, **kwargs): pass
def arubaNurbsToPoly(*args, **kwargs):
    """
    This command tesselates a NURBS surface and produces a polygonal surface. The
    name of the new polygonal surface is returned. If construction history is ON,
    then the name of the new dependency node is returned as well.
    
    Flags:
    - adaptive : adp                 (bool)          []
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - chordalDeviation : cd          (float)         []
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - localSpace : ls                (bool)          [create]
        Tesselate in local space
    
    - maxChordLength : mcl           (float)         []
    
    - minChordLength : icl           (float)         []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normalTolerance : ntl          (float)         []
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - sampleType : st                (int)           []
    
    - samples : smp                  (int)           []
    
    - tolerance : tol                (float)         []
    
    - useSurfaceShader : uss         (bool)          []
    
    - worldSpace : ws                (bool)          [create]
        Tesselate in world space                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.arubaNurbsToPoly`
    """
    pass
def nClothRemove(*args, **kwargs): pass
def DeviceEditor(*args, **kwargs): pass
def PruneSculpt(*args, **kwargs): pass
def projectCurve(*args, **kwargs): pass
def SymmetrizeUVContext(*args, **kwargs):
    """
    Flags:
    - axis : a                       (int)           []
    
    - axisIncrement : ai             (float)         []
    
    - axisPos : ap                   (float)         []
    
    - end_resize : rof               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - floodShell : fs                (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - sizeuv : suv                   (float)         []
    
    - start_resize : ron             (bool)          []
    
    
    Derived from mel command `maya.cmds.SymmetrizeUVContext`
    """
    pass
def HypershadeGridToggleSnap(*args, **kwargs): pass
def NParticleTool(*args, **kwargs): pass
def rename(*args, **kwargs): pass
def MakeMotorBoats(*args, **kwargs): pass
def GraphCopy(*args, **kwargs): pass
def HypershadeCreateContainerOptions(*args, **kwargs): pass
def tumbleCtx(*args, **kwargs):
    """
    This command can be used to create, edit, or query a tumble context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - autoOrthoConstrain : aoc       (bool)          [create,query,edit]
        Automatically constrain horizontal and vertical rotations when the camera is
        orthographic. The shift key can be used to unconstrain the rotation.
    
    - autoSetPivot : asp             (bool)          [create,query,edit]
        Automatically set the camera pivot to the selection or tool effect region
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - localTumble : lt               (int)           [create,query,edit]
        Describes what point the camera will tumble around: 0 for the camera's tumble
        pivot1 for the camera's center of interest2 for the camera's local axis, offset
        by its tumble pivot
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objectTumble : ot              (bool)          [create,query,edit]
        Make the camera tumble around the selected object, if true.
    
    - orthoLock : ol                 (bool)          [create,query,edit]
        Orthographic cameras cannot be tumbled while orthoLock is on.
    
    - orthoStep : os                 (float)         [create,query,edit]
        Specify the angular step in degrees for orthographic rotation. If camera is
        orthographic and autoOrthoConstrain is toggled on the rotation will be stepped
        by this amount.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - tumbleScale : ts               (float)         [create,query,edit]
        Set the rotation speed. A tumble scale of 1.0 will result in in 40 degrees of
        rotation per 100 pixels of cursor drag.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.tumbleCtx`
    """
    pass
def GoToPreviousDrivenKey(*args, **kwargs): pass
def matchTransform(*args, **kwargs):
    """
    This command modifies the source object's transform to match the target object's
    transform. If no flags are specified then the command will match position,
    rotation and scaling.
    
    Flags:
    - pivots : piv                   (bool)          [create]
        Match the source object(s) scale/rotate pivot positions to the target
        transform's pivot.
    
    - position : pos                 (bool)          [create]
        Match the source object(s) position to the target object.
    
    - rotation : rot                 (bool)          [create]
        Match the source object(s) rotation to the target object.
    
    - scale : scl                    (bool)          [create]
        Match the source object(s) scale to the target transform.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.matchTransform`
    """
    pass
def AddEdgeDivisionsOptions(*args, **kwargs): pass
def CreateVolumeCube(*args, **kwargs): pass
def runup(*args, **kwargs):
    """
    runup plays the scene through a frame of frames, forcing dynamic objects to
    evaluate as it does so.   If no max frame is specified, runup runs up to the
    current time.
    
    Flags:
    - cache : cch                    (bool)          [create]
        Cache the state after the runup.
    
    - fromPreviousFrame : fpf        (bool)          [create]
        Run up the animation from the previously evaluated frame. If no flag is supplied
        this is the default.
    
    - fromStartFrame : fsf           (bool)          [create]
        Run up the animation from the start frame. If no flag is supplied
        -fromPreviousFrame is the default.
    
    - maxFrame : mxf                 (time)          [create]
        Ending time for runup, in current user time units. The runup will always start
        at the minimum start frame for all dynamic objects.
    
    - state : st                     (bool)          [create]
        Turns runup and cache on/off.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.runup`
    """
    pass
def expression(*args, **kwargs): pass
def UniversalManip(*args, **kwargs): pass
def UVStraighten(*args, **kwargs): pass
def PolyRemoveCrease(*args, **kwargs): pass
def AssignToonShaderLightAngle(*args, **kwargs): pass
def mrShaderManager(*args, **kwargs): pass
def xgmPromoteRender(*args, **kwargs):
    """
    Flags:
    - progress : pb                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmPromoteRender`
    """
    pass
def dR_slideOff(*args, **kwargs): pass
def FBXExportSmoothingGroups(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportSmoothingGroups`
    """
    pass
def deleteAttrPattern(*args, **kwargs):
    """
    After a while the list of attribute patterns could become cluttered. This
    command provides a way to remove patterns from memory so that only the ones of
    interest will show.
    
    Flags:
    - allPatterns : all              (bool)          [create]
        If specified it means delete all known attribute patterns.
    
    - patternName : pn               (unicode)       [create]
        The name of the pattern to be deleted.
    
    - patternType : pt               (unicode)       [create]
        Delete all patterns of the given type.                             Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deleteAttrPattern`
    """
    pass
def NodeEditorGridToggleVisibility(*args, **kwargs): pass
def TangentsLinear(*args, **kwargs): pass
def dbtrace(*args, **kwargs):
    """
    The dbtracecommand is used to manipulate trace objects.           The keyword is
    the only mandatory argument, indicating which trace           object is to be
    altered.           Trace Objects to affect (keywordKEY)Optional filtering
    criteria (filterFILTER)Function (off, outputFILE, mark, titleTITLE, timed:
    default operation is to enable traces)You can use the query mode to find out
    which keywords are currently           active (query with no arguments) or
    inactive (query with the offargument).           You can enhance that query with
    or without a keyword argument to find           out where their output is going
    (query with the outputargument), out what filters are currently applied (query
    with the           filterargument), or if their output will be
    timestamped (query with the timedargument).                 In query mode,
    return type is based on queried flag.
    
    Flags:
    - filter : f                     (unicode)       [create,query]
        Set the filter object for these trace objects (see 'dgfilter')
    
    - info : i                       (bool)          [query]
        In query mode return a brief description of the trace object.
    
    - keyword : k                    (unicode)       [create,query]
        Keyword of the trace objects to affect In query mode, this flag can accept a
        value.
    
    - mark : m                       (bool)          [create]
        Display a mark for all outputs of defined trace objects
    
    - off : boolean                  (Toggle the traces off.  If omitted it will turn them on.) [create]
    
    - output : o                     (unicode)       [create,query]
        Destination file of the affected trace objects.  Use the special names stdoutand
        stderrto redirect to your command window. The special name msdevis available on
        Windows to direct your output to the debug tab in the output window of Visual
        Studio.
    
    - timed : tm                     (bool)          [create,query]
        Turn on/off timing information in the output of the specified trace objects.
    
    - title : t                      (unicode)       [create]
        Display a title mark for all outputs of defined trace objects
    
    - verbose : v                    (bool)          [create]
        Include all traces in output and filter queries, not just those turned on.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dbtrace`
    """
    pass
def SetKeyframeForVertexColor(*args, **kwargs): pass
def OutlinerToggleAttributes(*args, **kwargs): pass
def HypershadeSelectConnected(*args, **kwargs): pass
def ToggleTextureBorder(*args, **kwargs): pass
def polyMergeFacetCtx(*args, **kwargs):
    """
    The second face becomes a hole in the first face.The new holed face is located
    either on the first, last, or between both selected faces, depending on the
    mode. Both faces must belong to the same object.Facet flags are mandatory.
    Create a new context to merge facets on polygonal objects
    
    Flags:
    - activeNodes : anq              (bool)          [query]
        Return the active nodes in the tool
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - firstFacet : ff                (int)           [create,query,edit]
        The number of the first (outer) face to merge.
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - immediate : im                 (bool)          [edit]
        Acts on the object not the tool defaults
    
    - mergeMode : mm                 (int)           [create,query,edit]
        This flag specifies how faces are merged: 0: moves second face to first one 1:
        moves both faces to average 2: moves first face to second one 3, 4, 5: same as
        above, except faces are projected but not centred 6: Nothing moves. C: Default
        is None (6).
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - previous : pv                  (bool)          [edit]
        Reset to previously stored values
    
    - reset : rs                     (bool)          [edit]
        Reset to default values
    
    - secondFacet : sf               (int)           [create,query,edit]
        The number of the second (hole) face to merge.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - toolNode : tnq                 (bool)          [query]
        Return the node used for tool defaults                  Common poly modifier
        operation flags
    
    
    Derived from mel command `maya.cmds.polyMergeFacetCtx`
    """
    pass
def ToolSettingsWindow(*args, **kwargs): pass
def dR_bridgeRelease(*args, **kwargs): pass
def ContentBrowserWindow(*args, **kwargs): pass
def CreateIllustratorCurvesOptions(*args, **kwargs): pass
def xgmPrimSelectionContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - isolateSelect : isolateSelect  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmPrimSelectionContext`
    """
    pass
def UVCylindricProjectionOptions(*args, **kwargs): pass
def createPolySoccerBallCtx(*args, **kwargs):
    """
    Flags:
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sideLength : sl                (float)         []
    
    
    Derived from mel command `maya.cmds.createPolySoccerBallCtx`
    """
    pass
def dR_meshOffsetTGL(*args, **kwargs): pass
def instanceable(*args, **kwargs):
    """
    Flags one or more DAG nodes so that they can (or cannot) be instanced. This
    command sets an internal state on the specified DAG nodes which is checked
    whenever Maya attempts an instancing operation. If no node names are provided on
    the command line then the current selection list is used.  Sets are
    automatically expanded to their constituent objects. Nodes which are already
    instanced (or have children which are already instanced) cannot be marked as
    non-instancable.
    
    Flags:
    - allow : a                      (bool)          [create,query]
        Specifies the new instanceable state for the node. Specify true to allow the
        node to be instanceable, and false to prevent it from being instanced. The
        default is true (i.e. nodes can be instanced by default).
    
    - recursive : r                  (bool)          [create]
        Can be specified with the -allow flag in create or edit mode to recursively
        apply the -allow setting to all non-shape children of the selected node(s). To
        also affect shapes, also specify the -shape flag along with -recursive.
    
    - shape : s                      (bool)          [create]
        Can be specified with the -allow flag in create or edit mode to apply the -allow
        setting to all shape children of the selected node(s). This flag can be
        specified in conjunction with the -recursive flag.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.instanceable`
    """
    pass
def DisableMemoryCaching(*args, **kwargs): pass
def ReverseToonObjects(*args, **kwargs): pass
def subgraph(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.subgraph`
    """
    pass
def dR_quadDrawClearDots(*args, **kwargs): pass
def EmitFluidFromObject(*args, **kwargs): pass
def BatchBakeOptions(*args, **kwargs): pass
def SelectPolygonToolMarkingMenu(*args, **kwargs): pass
def texturePlacementContext(*args, **kwargs):
    """
    Create a command for creating new texture placement contexts. By default label
    mapping is on when the context is created.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - labelMapping : lm              (bool)          [create,query,edit]
        Set the context to label mapping.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texturePlacementContext`
    """
    pass
def xgmGuideSculptContext(*args, **kwargs):
    """
    Flags:
    - affect : a                     (int)           []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - lockLength : l                 (bool)          []
    
    - resetAffected : ra             (bool)          []
    
    - selGuideColorB : gcb           (float)         []
    
    - selGuideColorG : gcg           (float)         []
    
    - selGuideColorR : gcr           (float)         []
    
    - selHilight : sh                (bool)          []
    
    - selVolumeColorB : vcb          (float)         []
    
    - selVolumeColorG : vcg          (float)         []
    
    - selVolumeColorR : vcr          (float)         []
    
    - size : s                       (float)         []
    
    - volumetricSel : vs             (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmGuideSculptContext`
    """
    pass
def ExportProxyContainer(*args, **kwargs): pass
def NodeEditorPickWalkLeft(*args, **kwargs): pass
def OneClickGetState(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickGetState`
    """
    pass
def PaintHairSpecularColor(*args, **kwargs): pass
def ctxTraverse(*args, **kwargs):
    """
    This command tells the current context to do a traversal. Some contexts will
    ignore this command. Individual contexts determine what up/down left/right mean.
    
    Flags:
    - down : d                       (bool)          [create]
        Move downas defined by the current context.
    
    - left : l                       (bool)          [create]
        Move leftas defined by the current context.
    
    - right : r                      (bool)          [create]
        Move rightas defined by the current context.
    
    - up : up                        (bool)          [create]
        Move upas defined by the current context.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ctxTraverse`
    """
    pass
def xgmPartBrushContext(*args, **kwargs):
    """
    Flags:
    - alongStroke : alongStroke      (bool)          []
    
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmPartBrushContext`
    """
    pass
def CreatePolygonUltraShape(*args, **kwargs): pass
def StitchSurfacePointsOptions(*args, **kwargs): pass
def TrimTool(*args, **kwargs): pass
def copySkinWeights(*args, **kwargs):
    """
    Command to copy or mirror the skinCluster weights accross one  of the three
    major axes.  The command can be used to mirror  weights either from one surface
    to another or within the  same surface.              In query mode, return type
    is based on queried flag.
    
    Flags:
    - destinationSkin : ds           (unicode)       [create,query,edit]
        Specify the destination skin shape
    
    - influenceAssociation : ia      (unicode)       [create,query,edit]
        The influenceAssociation flag controls how the influences on the source and
        target skins are matched up. The flag can be included multiple times to specify
        multiple association schemes that will be invoked one after the other until all
        influences have been matched up. Supported values are closestJoint, closestBone,
        label, name, oneToOne. The default is closestJoint.
    
    - mirrorInverse : mi             (bool)          [create,query,edit]
        Values are mirrored from the positive side to the negative.  If this flag is
        used then the direction is inverted.
    
    - mirrorMode : mm                (unicode)       [create,query,edit]
        The mirrorMode flag defines the plane of mirroring (XY, YZ, or XZ) when the
        mirror flag is used. The default plane is XY.
    
    - noBlendWeight : nbw            (bool)          [create,query,edit]
        When the no blend flag is used, the blend weights on the skin cluster will not
        be copied across to the destination.
    
    - noMirror : nm                  (bool)          [create,query,edit]
        When the no mirror flag is used, the weights are copied instead of mirrored.
    
    - normalize : nr                 (bool)          [create,query,edit]
        Normalize the skin weights.
    
    - sampleSpace : spa              (int)           [create,query,edit]
        Selects which space the attribute transfer is performed in. 0 is world space, 1
        is model space. The default is world space.
    
    - smooth : sm                    (bool)          [create,query,edit]
        When the smooth flag is used, the weights are smoothly interpolated between the
        closest vertices, instead of assigned from the single closest.
    
    - sourceSkin : ss                (unicode)       [create,query,edit]
        Specify the source skin shape
    
    - surfaceAssociation : sa        (unicode)       [create,query,edit]
        The surfaceAssociation flag controls how the weights are transferred between the
        surfaces: closestPoint, rayCast, or closestComponent. The default is
        closestComponent.
    
    - uvSpace : uv                   (unicode, unicode) [create,query,edit]
        The uvSpace flag indicates that the weight transfer should occur in UV space,
        based on the source and destination UV sets specified.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.copySkinWeights`
    """
    pass
def ViewSequence(*args, **kwargs): pass
def CreatePinConstraint(*args, **kwargs): pass
def IKHandleTool(*args, **kwargs): pass
def RerootSkeleton(*args, **kwargs): pass
def SymmetrizeUVBrushSizeOff(*args, **kwargs): pass
def PaintToonCreaseColor(*args, **kwargs): pass
def LatticeDeformKeysTool(*args, **kwargs): pass
def SelectToolMarkingMenuPopDown(*args, **kwargs): pass
def setXformManip(*args, **kwargs):
    """
    This command changes some of the settings of the xform manip, to control its
    appearance. In query mode, return type is based on queried flag.
    
    Flags:
    - showUnits : su                 (bool)          [query]
        If set to true, the xform manip displays current units; otherwise, the manip
        hides them.
    
    - suppress : s                   (bool)          [query]
        If set to true, the xform manip is suppressed and therefore not visible or
        usable.
    
    - useRotatePivot : urp           (bool)          [query]
        If set to true, the xform manip uses the rotate pivot; otherwise, the manip uses
        the bounding-box center. Defaults false.
    
    - worldSpace : ws                (bool)          [query]
        If set to true, the xform manip is always in world space. If false, the manip is
        in object space. (Note: when multiple objects are selected the manip is always
        in world space, no matter what this is set to)                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setXformManip`
    """
    pass
def MergeMultipleEdges(*args, **kwargs): pass
def STRSTweakModeToggle(*args, **kwargs): pass
def shot(*args, **kwargs): pass
def unassignInputDevice(*args, **kwargs):
    """
    This command deletes all command strings associated with this device. In query
    mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - clutch : c                     (unicode)       [create]
        Only delete command attachments with this clutch.
    
    - device : d                     (unicode)       [create]
        Specifies the device to work on.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.unassignInputDevice`
    """
    pass
def BrushPresetBlendShading(*args, **kwargs): pass
def MergeVertices(*args, **kwargs): pass
def HypershadeShapeMenuStateAllExceptShadingGroupMembers(*args, **kwargs): pass
def hyperPanel(*args, **kwargs): pass
def cmdaiSwitchOperator(*args, **kwargs): pass
def HideAll(*args, **kwargs): pass
def ToggleAutoFrameTime(*args, **kwargs): pass
def UVEditorInvertPin(*args, **kwargs): pass
def CreateCameraAimUp(*args, **kwargs): pass
def GoToWorkingFrame(*args, **kwargs): pass
def geometryDeleteCacheFramesOpt(*args, **kwargs): pass
def showHelp(*args, **kwargs):
    """
    Invokes a web browser to open the on-line documentation and help files. It will
    open the help page for a given topic, or open a browser to a specific URL.
    In query mode, return type is based on queried flag.
    
    Flags:
    - absolute : a                   (bool)          [create]
        The specified URLis an absolute URL that should be passed directly to the web
        browser.
    
    - docs : d                       (bool)          [create,query]
        Use this flag to directly specify a help file relative to the on-line
        documentation root.
    
    - helpTable : ht                 (bool)          [create,query]
        Use this flag to specify which file will be used to search for help topics when
        the -d/docs and -a/absolute flags are not used. If only a file name is specified
        and not a path, then the file is assumed to be in the maya application
        directory.If this flag does not accept an argument if it is queried.The default
        value is helpTable.
    
    - version : v                    (bool)          [query]
        Use this flag to get the Maya version that the showHelp command uses.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.showHelp`
    """
    pass
def SculptMeshFrame(*args, **kwargs): pass
def EnableDynamicConstraints(*args, **kwargs): pass
def fontAttributes(*args, **kwargs):
    """
    Flags:
    - faceName : fc                  (unicode)       []
    
    - font : fn                      (unicode)       []
    
    - pitch : p                      (unicode)       []
    
    - size : sz                      (int)           []
    
    - style : st                     (unicode)       []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.fontAttributes`
    """
    pass
def Sine(*args, **kwargs): pass
def SubdivSurfaceCleanTopology(*args, **kwargs): pass
def PolyExtrudeVertices(*args, **kwargs): pass
def ChangeColorPrefs(*args, **kwargs): pass
def GridUVOptions(*args, **kwargs): pass
def createPolyCubeCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAll : asa  (bool)          []
    
    - attachToSubdivisionsDepth : asd (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - attachToSubdivisionsWidth : asw (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - depth : d                      (float)         []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - subdivisionsDepth : sd         (int)           []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createPolyCubeCtx`
    """
    pass
def TemplateObject(*args, **kwargs): pass
def polyMapSewMove(*args, **kwargs): pass
def FBXExport(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExport`
    """
    pass
def HideNParticles(*args, **kwargs): pass
def RetimeKeysTool(*args, **kwargs): pass
def addAllWrappedCmds(): pass
def timeCode(*args, **kwargs):
    """
    Use this command to query and set the time code information in the file
    
    Flags:
    - mayaStartFrame : msf           (float)         [create,query,edit]
        Sets the Maya start time of the time code, in frames. In query mode, returns the
        Maya start frame of the time code.
    
    - productionStartFrame : psf     (float)         [create,query,edit]
        Sets the production start time of the time code, in terms of frames. In query
        mode, returns the sub-second frame of production start time.
    
    - productionStartHour : psh      (float)         [create,query,edit]
        Sets the production start time of the time code, in terms of hours. In query
        mode, returns the hour of production start time.
    
    - productionStartMinute : psm    (float)         [create,query,edit]
        Sets the production start time of the time code, in terms of minutes. In query
        mode, returns the minute of production start time.
    
    - productionStartSecond : pss    (float)         [create,query,edit]
        Sets the production start time of the time code, in terms of seconds. In query
        mode, returns the second of production start time.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeCode`
    """
    pass
def CreateDagContainerOptions(*args, **kwargs): pass
def FBIKLabelFootThumb(*args, **kwargs): pass
def RotateTool(*args, **kwargs): pass
def DeleteUVs(*args, **kwargs): pass
def ToggleMeshEdges(*args, **kwargs): pass
def ShowDeformingGeometry(*args, **kwargs): pass
def sbs_SetGlobalTextureHeight(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetGlobalTextureHeight`
    """
    pass
def RelaxInitialStateOptions(*args, **kwargs): pass
def HypershadeEditPSDFile(*args, **kwargs): pass
def OpenViewportPrefs(*args, **kwargs): pass
def nucleusGetEffectsAsset(*args, **kwargs): pass
def GlobalStitchOptions(*args, **kwargs): pass
def PaintClusterWeightsTool(*args, **kwargs): pass
def ShowNURBSCurves(*args, **kwargs): pass
def XgCreateDescriptionEditor(*args, **kwargs): pass
def AddBifrostFoamMask(*args, **kwargs): pass
def dR_setRelaxAffectsInterior(*args, **kwargs): pass
def fcheck(*args, **kwargs):
    """
    Invokes the fcheck program to display images in a separate window.
    
    
    Derived from mel command `maya.cmds.fcheck`
    """
    pass
def FBXImportHardEdges(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportHardEdges`
    """
    pass
def SmoothingLevelIncrease(*args, **kwargs): pass
def isDescendentPulling(*args, **kwargs):
    """
    Flags:
    - effectorid : eff               (int)           []
    
    
    Derived from mel command `maya.cmds.isDescendentPulling`
    """
    pass
def listAttrPatterns(*args, **kwargs):
    """
    Attribute patterns are plain text descriptions of an entire Maya attribute
    forest. (forestbecause there could be an arbitrary number of root level
    attributes, it's not restricted to having a single common parent though in
    general that practice is a good idea.) This command lists the various pattern
    types available, usually created via plugin, as well as any specific patterns
    that have already been instantiated. A pattern type is a thing that knows how to
    take some textual description of an attribute tree, e.g. XML or plaintext, and
    convert it into an attribute pattern that can be applied to any node or node
    type in Maya.
    
    Flags:
    - patternType : pt               (bool)          [create]
        If turned on then show the list of pattern types rather than actual instantiated
        patterns.
    
    - verbose : v                    (bool)          [create]
        If turned on then show detailed information about the patterns or pattern types.
        The same list of instance or pattern names is returned as for the non-verbose
        case.                               Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.listAttrPatterns`
    """
    pass
def SetMeshFlattenTool(*args, **kwargs): pass
def FBXExportBakeResampleAnimation(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportBakeResampleAnimation`
    """
    pass
def XgmSplineCacheExport(*args, **kwargs): pass
def xgmNoiseBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmNoiseBrushToolCmd`
    """
    pass
def ToggleCreateNurbsPrimitivesAsTool(*args, **kwargs): pass
def SetFullBodyIKKeysSelected(*args, **kwargs): pass
def ProfilerToolThreadView(*args, **kwargs): pass
def HypershadeRefreshAllSwatchesOnDisk(*args, **kwargs): pass
def ShowMeshAmplifyToolOptions(*args, **kwargs): pass
def nConstraintCollisionExclusionOptions(*args, **kwargs): pass
def OutlinerCollapseAllSelectedItems(*args, **kwargs): pass
def UnifyTangents(*args, **kwargs): pass
def GridUV(*args, **kwargs): pass
def CommandShell(*args, **kwargs): pass
def SelectContiguousEdgesOptions(*args, **kwargs): pass
def ShowUIElements(*args, **kwargs): pass
def polySmooth(*args, **kwargs): pass
def igConvertToLogical(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.igConvertToLogical`
    """
    pass
def ikfkDisplayMethod(*args, **kwargs):
    """
    The ikfkDisplayMethodcommand is used to specify how ik/fk       blending should
    be shown                 In query mode, return type is based on queried flag.
    
    Flags:
    - display : d                    (unicode)       [create,query]
        Specify how ik/fk blending should be shown when the handle is selected. Possible
        choices are none(do not display any blending), ik(only show ik),fk(only show
        fk), and ikfk(show both ik and fk).                                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ikfkDisplayMethod`
    """
    pass
def SetFluidAttrFromCurve(*args, **kwargs): pass
def copyFlexor(*args, **kwargs):
    """
    This command copies an existing bone or joint flexor from one bone (joint) to
    another.  The attributes of the flexor and their connections as well as any
    tweaks in on the latticeFfd are copied from the original to the new flexor.  If
    the selected bone (joint) appears to be a mirror reflection of the bone (joint)
    of the existing flexor then the transform of the ffd lattice group gets
    reflected to the new bone (joint).  The arguments for the command are the name
    of the ffd Lattice and the name of the destination joint. If they are not
    specified at the command line, they will be picked up from the current selection
    list.
    
    
    Derived from mel command `maya.cmds.copyFlexor`
    """
    pass
def Undo(*args, **kwargs): pass
def layeredShaderPort(*args, **kwargs): pass
def DuplicateNURBSPatchesOptions(*args, **kwargs): pass
def curveEPCtx(*args, **kwargs):
    """
    The curveEPCtx command creates a new context for creating curves by placing edit
    points.
    
    Flags:
    - bezier : bez                   (bool)          [create,query,edit]
        Use bezier curves
    
    - degree : d                     (int)           [create,query,edit]
        Curve degree
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - preserveShape : ps             (bool)          [create,query,edit]
        Set this flag to make the operation preserve the shape
    
    - preserveShapeFraction : pf     (float)         [create,query,edit]
        Fraction value used when preserving the shape
    
    - refit : rf                     (bool)          [create,query,edit]
        Set this flag to refit the curve
    
    - uniform : un                   (bool)          [create,query,edit]
        Should the curve use uniform parameterization?                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveEPCtx`
    """
    pass
def UseSelectedEmitter(*args, **kwargs): pass
def lookThru(*args, **kwargs):
    """
    This command sets a particular camera to look through in a view. This command
    may also be used to view the negative z axis of lights or other DAG objects. The
    standard camera tools can then be used to place the object. Note: if there are
    multiple objects under the transform selected, cameras and lights take
    precedence. In query mode, return type is based on queried flag.
    
    Flags:
    - farClip : fc                   (float)         [create]
        Used when setting clip far plane for a new look thru camera. Will not affect the
        attributes of an existing camera. Clip values must come before shape or view.
    
    - nearClip : nc                  (float)         [create]
        Used when setting near clip plane for a new look thru camera. Will not affect
        the attributes of an existing camera. Clip values must come before shape or
        view.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.lookThru`
    """
    pass
def Goal(*args, **kwargs): pass
def HypershadeSetLargeNodeSwatchSize(*args, **kwargs): pass
def AddAttribute(*args, **kwargs): pass
def ObjectCentricLightLinkingEditor(*args, **kwargs): pass
def addMetadata(*args, **kwargs):
    """
    Defines the attachment of a metadata structure to one or more selected objects.
    This creates a placeholder with an empty metadata Stream for later population
    through the editMetadatacommand. It's similar in concept to the addAttrcommand
    for nodes - a data description is added but no data is actually set.  When
    assigning a metadata structure you must specify these flags - channelNameis the
    metadata channel type (e.g. vertex), streamNameis the name of the metadata
    stream to be created, and structureis the name of the structure type defining
    the contents of the metadata. The indexTypeflag is optional. If it is not
    present then the index will be presumed to be a standard numerical value.  You
    can query metadata information at a variety of levels. See the table below for a
    full list of the queryable arguments. In each case the specification of any of
    the non-queried arguments filters the list of metadata to be examined during the
    query. For all queries a single object must be selected for querying.  For
    example querying the channelNameflag with no other arguments will return the
    list of all Channel types on the selected object that contain any metadata.
    Querying the channelNameflag with the indexTypeflag specified will return only
    those channel types containing metadata streams that use that particular type of
    index.  Query the channelNameflag to return the list of any channel types that
    have metadata.Specify the channelNameand streamNameflags and query the
    structureflag to return the name of the structure assigned to the given stream
    (if any).Specify a channelNameand query the streamNameto return the list of all
    streams assigned to that particular channel type.If you query the
    streamNamewithout a specific channelNamethen it returns a list of pairs of
    (channelName, streamName) for all metadata streams.Flag Combinations:
    ChannelName IndexType StreamName Structure   Create   Can Query      0
    0          0         0         X        ChannelName, StreamName, Structure
    0          0          0         1         X        ChannelName, StreamName,
    IndexType      0          0          1         0         X        ChannelName,
    Structure, IndexType      0          0          1         1         X
    ChannelName, IndexType      0          1          0         0         X
    ChannelName, StreamName, Structure      0          1          0         1
    X        ChannelName, StreamName      0          1          1         0
    X        ChannelName, Structure      0          1          1         1         X
    ChannelName      1          0          0         0         X        StreamName,
    Structure, IndexType      1          0          0         1         X
    StreamName, IndexType      1          0          1         0         X
    Structure, IndexType      1          0          1         1        (a)
    IndexType      1          1          0         0         X        StreamName,
    Structure      1          1          0         1         X        StreamName
    1          1          1         0         X        Structure      1          1
    1         1        (b)       X     (a) Assign an empty metadata stream with
    default index type     (b) Assign an empty metadata stream with the named index
    type
    
    Flags:
    - channelName : cn               (unicode)       [create,query]
        Name of the Channel type to which the structure is to be added (e.g. vertex). In
        query mode, this flag can accept a value.
    
    - channelType : cht              (unicode)       [create,query]
        Obsolete - use the 'channelName' flag instead. In query mode, this flag can
        accept a value.
    
    - indexType : idt                (unicode)       [create,query]
        Name of the index type the new Channel should be using. If not specified this
        defaults to a simple numeric index. Of the native types only a mesh
        vertexFacechannel is different, using a pairindex type. In query mode, this flag
        can accept a value.
    
    - scene : scn                    (bool)          [create,query]
        Use this flag when you want to add metadata to the scene as a whole rather than
        to any individual nodes. If you use this flag and have nodes selected the nodes
        will be ignored and a warning will be displayed.
    
    - streamName : stn               (unicode)       [create,query]
        Name of the empty stream being created. In query mode not specifying a value
        will return a list of streams on the named channel type. In query mode, this
        flag can accept a value.
    
    - structure : str                (unicode)       [create,query]
        Name of the structure which defines the metadata to be attached to the object.
        In query mode this will return the name of the structure attached at a given
        stream. In query mode, this flag can accept a value.Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.addMetadata`
    """
    pass
def XgmSetFreezeBrushToolOption(*args, **kwargs): pass
def SelectMultiComponentMask(*args, **kwargs): pass
def clipEditor(*args, **kwargs):
    """
    Create a clip editor with the given name.
    
    Flags:
    - allTrackHeights : th           (int)           []
        OBSOLETE flag. Use clipStyle instead.
    
    - autoFit : af                   (unicode)       [query,edit]
        on | off | tgl Auto fit-to-view.
    
    - autoFitTime : aft              (unicode)       [query,edit]
        on | off | tgl Auto fit-to-view along the time axis, as well.
    
    - characterOutline : co          (unicode)       []
    
    - clipDropCmd : cd               (unicode)       [edit]
        Command executed when clip node is dropped on the TraX editor
    
    - clipStyle : cs                 (int)           [query,edit]
        Set/return the clip track style in the specified editor. Default is 2. Valid
        values are 1-3.
    
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - deleteCmd : dc                 (unicode)       [edit]
        Command executed when backspacekey is pressed
    
    - deselectAll : da               (bool)          [edit]
        Deselect all clips and blends in the editor.
    
    - displayActiveKeyTangents : dat (unicode)       [edit]
        on | off | tgl Display active key tangents in the editor.
    
    - displayActiveKeys : dak        (unicode)       [edit]
        on | off | tgl Display active keys in the editor.
    
    - displayInfinities : di         (unicode)       [edit]
        on | off | tgl Display infinities in the editor.
    
    - displayKeys : dk               (unicode)       [edit]
        on | off | tgl Display keyframes in the editor.
    
    - displayTangents : dtn          (unicode)       [edit]
        on | off | tgl Display tangents in the editor.
    
    - displayValues : dv             (unicode)       [edit]
        on | off | tgl Display active keys and tangents values in the editor.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - frameAll : fa                  (bool)          [edit]
        Frame view around all clips in the editor.
    
    - frameRange : fr                (float, float)  [query,edit]
        The editor's current frame range.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - highlightedBlend : hb          (unicode, unicode) [query]
        Returns the highlighted blend, listed as scheduler and index
    
    - highlightedClip : hc           (unicode, unicode) [query]
        Returns the highlighted clip, listed as scheduler and index
    
    - initialized : it               (bool)          [query]
        Returns whether the clip editor is fully initialized, and has a port to draw
        through. If not, the -frameRange and -frameAll flags will fail.
    
    - listAllCharacters : lac        (bool)          [edit]
        List all characters in the editor and outliner.
    
    - listCurrentCharacters : lc     (bool)          [edit]
        List only the characters in the editor and outliner.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - lookAt : la                    (unicode)       [edit]
        all | selected | currentTime FitView helpers.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - manageSequencer : ms           (bool)          [create,query,edit]
        Sets/returns whether the clip editor should manage sequencer nodes.  If so,
        animation clips and characters are not represented.
    
    - menuContext : mc               (unicode)       [query]
        Returns a string array denoting the type of data object the cursor is over.
        Returned values are: timeSlider nothing track, track index, character node name,
        group name clip, clip node name
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectBlend : sb               (unicode, unicode, unicode) [query,edit]
        Select the blends specified by the scheduler name and the indicies of the two
        clips used in the blend. When queried, a string containing the scheduler name
        and the two clip indicies for all of the selected blends is returned.
    
    - selectClip : sc                (unicode, unicode) [query,edit]
        Selects the clip specified by the scheduler name and the clip index. When
        queried, a string containing the scheduler and clip index of all of the selected
        clips is returned.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - snapTime : st                  (unicode)       [query,edit]
        none | integer | keyframe Keyframe move snap in time.
    
    - snapValue : sv                 (unicode)       [query,edit]
        none | integer | keyframe Keyframe move snap in values.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipEditor`
    """
    pass
def CreatePolygonPrismOptions(*args, **kwargs): pass
def SelectUVOverlappingComponentsPerObject(*args, **kwargs): pass
def DeleteChannelsOptions(*args, **kwargs): pass
def CreateNURBSSquareOptions(*args, **kwargs): pass
def LevelOfDetailGroup(*args, **kwargs): pass
def graphTrackCtx(*args, **kwargs):
    """
    This command can be used to create a track context for the graph editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.graphTrackCtx`
    """
    pass
def Radial(*args, **kwargs): pass
def InteractiveSplitToolOptions(*args, **kwargs): pass
def TexSculptActivateBrushSize(*args, **kwargs): pass
def UniversalManipOptions(*args, **kwargs): pass
def NextManipulatorHandle(*args, **kwargs): pass
def BlindDataEditor(*args, **kwargs): pass
def OpenAutodeskExchange(*args, **kwargs): pass
def softMod(*args, **kwargs): pass
def PickWalkUpSelect(*args, **kwargs): pass
def HIKCycleMode(*args, **kwargs): pass
def NParticleStylePoints(*args, **kwargs): pass
def CustomNURBSComponentsOptions(*args, **kwargs): pass
def CreateActiveRigidBodyOptions(*args, **kwargs): pass
def dR_selConstraintElement(*args, **kwargs): pass
def ProfilerToolShowSelectedRepetition(*args, **kwargs): pass
def UVCentricUVLinkingEditor(*args, **kwargs): pass
def AutoProjectionOptions(*args, **kwargs): pass
def ScaleKeysOptions(*args, **kwargs): pass
def CreateSculptDeformerOptions(*args, **kwargs): pass
def XgmSplineCacheDelete(*args, **kwargs): pass
def ToggleNurbsPrimitivesAsToolExitOnComplete(*args, **kwargs): pass
def dgmodified(*args, **kwargs):
    """
    The dgmodifiedcommand is used to find out which nodes in the
    dependency graph have been modified.  This is mostly useful for fixing
    instances where file new asks you to save when no changes have been
    made to the scene.
    
    
    Derived from mel command `maya.cmds.dgmodified`
    """
    pass
def PolyCircularize(*args, **kwargs): pass
def bezierAnchorState(*args, **kwargs):
    """
    The bezierAnchorState command provides an easy interface to modify anchor
    states: - Smooth/Broken anchor tangents - Even/Uneven weighted anchor tangents
    
    Flags:
    - even : ev                      (bool)          [create]
        Sets selected anchors (or attached tangent handles) to even weighting when true,
        uneven otherwise.
    
    - smooth : sm                    (bool)          [create]
        Sets selected anchors (or attached tangent handles) to smooth when true, broken
        otherwise.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.bezierAnchorState`
    """
    pass
def mtkQuadDrawPoint(*args, **kwargs):
    """
    Flags:
    - addPoint : a                   (float, float, float, float, float, float) []
    
    - clearPoints : cl               (bool)          []
    
    - deletePoint : d                (int)           []
    
    
    Derived from mel command `maya.cmds.mtkQuadDrawPoint`
    """
    pass
def fluidMergeCacheOpt(*args, **kwargs): pass
def dR_autoWeldTGL(*args, **kwargs): pass
def PaintDeltaMushWeightsTool(*args, **kwargs): pass
def FourViewArrangement(*args, **kwargs): pass
def viewFit(*args, **kwargs):
    """
    The viewFit command positions the specified camera so its point-of-view contains
    all selected objects other than itself. If no objects are selected, everything
    is fit to the view (excepting cameras, lights, and sketching plannes). The fit-
    factor, if specified, determines how much of the view should be filled. If a
    camera is not specified, the camera in the active view will be used. After the
    camera is moved, its center of interest is set to the center of the bounding box
    of the objects. Additionally, a list of objects can be passed as arguments. If a
    camera is specified it must be the first argument. Objects passed as arguments
    to the command will be used instead of the selected objects.
    
    Flags:
    - allObjects : all               (bool)          [create]
        Specifies that all objects are to be fit regardless of the active list.
    
    - animate : an                   (bool)          [create]
        Specifies that the transition between camera positions should be animated.
    
    - center : c                     (bool)          [create]
        Specifies that the camera moves to the center of the selected object, but does
        not move the camera closer.
    
    - fitFactor : f                  (float)         [create]
        Specifies how much of the view should be filled with the fitteditems.
    
    - namespace : ns                 (unicode)       [create]
        Specifies a namespace that should be excluded. All objects in the specified
        namespace will be excluded from the fit process.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - panel : p                      (unicode)       []
    
    
    Derived from mel command `maya.cmds.viewFit`
    """
    pass
def RemoveFromCharacterSet(*args, **kwargs): pass
def sbs_GetGlobalTextureHeight(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetGlobalTextureHeight`
    """
    pass
def TimeDraggerToolDeactivate(*args, **kwargs): pass
def DecrementFluidCenter(*args, **kwargs): pass
def CreateCluster(*args, **kwargs): pass
def xgmBifrostBrushContext(*args, **kwargs):
    """
    Flags:
    - bifrostBoard : bb              (unicode)       []
    
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmBifrostBrushContext`
    """
    pass
def selectType(*args, **kwargs):
    """
    The selectTypecommand is used to change the set of allowable types of objects
    that can be selected when using the select tool. It accepts no other arguments
    besides the flags. There are basically two different types of items that are
    selectable when interactively selecting objects in the 3D views.  They are
    classified as objects (entire objects) or components (parts of objects).  The
    objectand componentcommand flags control which class of objects are selectable.
    It is possible to select components while in the object selection mode. To set
    the components which are selectable in object selection mode you must use the
    -ocm flag when specifying the component flags.
    
    Flags:
    - allComponents : alc            (bool)          [create,query]
        Set all component selection masks on/off
    
    - allObjects : alo               (bool)          [create,query]
        Set all object selection masks on/off
    
    - animBreakdown : abd            (bool)          [create,query]
        Set animation breakdown selection mask on/off.
    
    - animCurve : ac                 (bool)          [create,query]
        Set animation curve selection mask on/off.
    
    - animInTangent : ait            (bool)          [create,query]
        Set animation in-tangent selection mask on/off.
    
    - animKeyframe : ak              (bool)          [create,query]
        Set animation keyframe selection mask on/off.
    
    - animOutTangent : aot           (bool)          [create,query]
        Set animation out-tangent selection mask on/off.
    
    - byName : bn                    (unicode, bool) [create]
        Set the specified user-defined selection mask on/off. (object flag)
    
    - camera : ca                    (bool)          [create,query]
        Set camera selection mask on/off. (object flag)
    
    - cluster : cl                   (bool)          [create,query]
        Set cluster selection mask on/off. (object flag)
    
    - collisionModel : clm           (bool)          [create,query]
        Set collision model selection mask on/off. (object flag)
    
    - controlVertex : cv             (bool)          [create,query]
        Set control vertex selection mask on/off. (component flag)
    
    - curve : c                      (bool)          [create,query]
        Set curve selection mask on/off. (object flag)
    
    - curveKnot : ck                 (bool)          [create,query]
        Set curve knot selection mask on/off. (component flag)
    
    - curveOnSurface : cos           (bool)          [create,query]
        Set curve-on-surface selection mask on/off. (object flag)
    
    - curveParameterPoint : cpp      (bool)          [create,query]
        Set curve parameter point selection mask on/off. (component flag)
    
    - dimension : dim                (bool)          [create,query]
        Set dimension shape selection mask on/off. (object flag)
    
    - dynamicConstraint : dc         (bool)          [create,query]
        Set dynamicConstraint selection mask on/off. (object flag)
    
    - edge : eg                      (bool)          [create,query]
        Set mesh edge selection mask on/off. (component flag)
    
    - editPoint : ep                 (bool)          [create,query]
        Set edit-point selection mask on/off. (component flag)
    
    - emitter : em                   (bool)          [create,query]
        Set emitter selection mask on/off. (object flag)
    
    - facet : fc                     (bool)          [create,query]
        Set mesh face selection mask on/off. (component flag)
    
    - field : fi                     (bool)          [create,query]
        Set field selection mask on/off. (object flag)
    
    - fluid : fl                     (bool)          [create,query]
        Set fluid selection mask on/off. (object flag)
    
    - follicle : fo                  (bool)          [create,query]
        Set follicle selection mask on/off. (object flag)
    
    - hairSystem : hs                (bool)          [create,query]
        Set hairSystem selection mask on/off. (object flag)
    
    - handle : ha                    (bool)          [create,query]
        Set object handle selection mask on/off. (object flag)
    
    - hull : hl                      (bool)          [create,query]
        Set hull selection mask on/off. (component flag)
    
    - ikEndEffector : iee            (bool)          [create,query]
        Set ik end effector selection mask on/off. (object flag)
    
    - ikHandle : ikh                 (bool)          [create,query]
        Set ik handle selection mask on/off. (object flag)
    
    - imagePlane : ip                (bool)          [create,query]
        Set image plane selection mask on/off. (component flag)
    
    - implicitGeometry : ig          (bool)          [create,query]
        Set implicit geometry selection mask on/off. (object flag)
    
    - isoparm : iso                  (bool)          [create,query]
        Set surface iso-parm selection mask on/off. (component flag)
    
    - joint : j                      (bool)          [create,query]
        Set ik handle selection mask on/off. (object flag)
    
    - jointPivot : jp                (bool)          [create,query]
        Set joint pivot selection mask on/off. (component flag)
    
    - lattice : la                   (bool)          [create,query]
        Set lattice selection mask on/off. (object flag)
    
    - latticePoint : lp              (bool)          [create,query]
        Set lattice point selection mask on/off. (component flag)
    
    - light : lt                     (bool)          [create,query]
        Set light selection mask on/off. (object flag)
    
    - localRotationAxis : ra         (bool)          [create,query]
        Set local rotation axis selection mask on/off. (component flag)
    
    - locator : lc                   (bool)          [create,query]
        Set locator (all types) selection mask on/off. (object flag)
    
    - locatorUV : luv                (bool)          [create,query]
        Set uv locator selection mask on/off. (object flag)
    
    - locatorXYZ : xyz               (bool)          [create,query]
        Set xyz locator selection mask on/off. (object flag)
    
    - meshComponents : mc            (bool)          []
    
    - meshUVShell : msh              (bool)          [create,query]
        Set uv shell component mask on/off.
    
    - motionTrailPoint : mtp         (bool)          [create,query]
        Set motion point selection mask on/off.
    
    - motionTrailTangent : mtt       (bool)          [create,query]
        Set motion point tangent mask on/off.
    
    - nCloth : ncl                   (bool)          [create,query]
        Set nCloth selection mask on/off. (object flag)
    
    - nParticle : npr                (bool)          [create,query]
        Set nParticle point selection mask on/off. (component flag)
    
    - nParticleShape : nps           (bool)          [create,query]
        Set nParticle shape selection mask on/off. (object flag)
    
    - nRigid : nr                    (bool)          [create,query]
        Set nRigid selection mask on/off. (object flag)
    
    - nonlinear : nl                 (bool)          [create,query]
        Set nonlinear selection mask on/off. (object flag)
    
    - nurbsCurve : nc                (bool)          [create,query]
        Set nurbs-curve selection mask on/off. (object flag)
    
    - nurbsSurface : ns              (bool)          [create,query]
        Set nurbs-surface selection mask on/off. (object flag)
    
    - objectComponent : ocm          (bool)          [create,query]
        Component flags apply to object mode.
    
    - orientationLocator : ol        (bool)          [create,query]
        Set orientation locator selection mask on/off. (object flag)
    
    - particle : pr                  (bool)          [create,query]
        Set particle point selection mask on/off. (component flag)
    
    - particleShape : ps             (bool)          [create,query]
        Set particle shape selection mask on/off. (object flag)
    
    - plane : pl                     (bool)          [create,query]
        Set sketch plane selection mask on/off. (object flag)
    
    - polymesh : p                   (bool)          [create,query]
        Set poly-mesh selection mask on/off. (object flag)
    
    - polymeshEdge : pe              (bool)          [create,query]
        Set poly-mesh edge selection mask on/off. (component flag)
    
    - polymeshFace : pf              (bool)          [create,query]
        Set poly-mesh face selection mask on/off. (component flag)
    
    - polymeshFreeEdge : pfe         (bool)          [create,query]
        Set poly-mesh free-edge selection mask on/off. (component flag)
    
    - polymeshUV : puv               (bool)          [create,query]
        Set poly-mesh UV point selection mask on/off. (component flag)
    
    - polymeshVertex : pv            (bool)          [create,query]
        Set poly-mesh vertex selection mask on/off. (component flag)
    
    - polymeshVtxFace : pvf          (bool)          [create,query]
        Set poly-mesh vertexFace selection mask on/off. (component flag)
    
    - queryByName : qbn              (unicode)       [query]
        Query the specified user-defined selection mask. (object flag)
    
    - rigidBody : rb                 (bool)          [create,query]
        Set rigid body selection mask on/off. (object flag)
    
    - rigidConstraint : rc           (bool)          [create,query]
        Set rigid constraint selection mask on/off. (object flag)
    
    - rotatePivot : rp               (bool)          [create,query]
        Set rotate pivot selection mask on/off. (component flag)
    
    - scalePivot : sp                (bool)          [create,query]
        Set scale pivot selection mask on/off. (component flag)
    
    - sculpt : sc                    (bool)          [create,query]
        Set sculpt selection mask on/off. (object flag)
    
    - selectHandle : sh              (bool)          [create,query]
        Set select handle selection mask on/off. (component flag)
    
    - spring : spr                   (bool)          [create,query]
        Set spring shape selection mask on/off. (object flag)
    
    - springComponent : spc          (bool)          [create,query]
        Set individual spring selection mask on/off. (component flag)
    
    - stroke : str                   (bool)          [create,query]
        Set the Paint Effects stroke selection mask on/off. (object flag)
    
    - subdiv : sd                    (bool)          [create,query]
        Set subdivision surfaces selection mask on/off. (object flag)
    
    - subdivMeshEdge : sme           (bool)          [create,query]
        Set subdivision surfaces mesh edge selection mask on/off. (component flag)
    
    - subdivMeshFace : smf           (bool)          [create,query]
        Set subdivision surfaces mesh face selection mask on/off. (component flag)
    
    - subdivMeshPoint : smp          (bool)          [create,query]
        Set subdivision surfaces mesh point selection mask on/off. (component flag)
    
    - subdivMeshUV : smu             (bool)          [create,query]
        Set subdivision surfaces mesh UV map selection mask on/off. (component flag)
    
    - surfaceEdge : se               (bool)          [create,query]
        Set surface edge selection mask on/off. (component flag)
    
    - surfaceFace : sf               (bool)          [create,query]
        Set surface face selection mask on/off. (component flag)
    
    - surfaceKnot : sk               (bool)          [create,query]
        Set surface knot selection mask on/off. (component flag)
    
    - surfaceParameterPoint : spp    (bool)          [create,query]
        Set surface parameter point selection mask on/off. (component flag)
    
    - surfaceRange : sr              (bool)          [create,query]
        Set surface range selection mask on/off. (component flag)
    
    - surfaceUV : suv                (bool)          [create,query]
        Set surface uv selection mask on/off. (component flag)
    
    - texture : tx                   (bool)          [create,query]
        Set texture selection mask on/off. (object flag)
    
    - vertex : v                     (bool)          [create,query]
        Set mesh vertex selection mask on/off. (component flag)                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectType`
    """
    pass
def CreateNURBSCube(*args, **kwargs): pass
def panZoomCtx(*args, **kwargs):
    """
    This command can be used to create camera 2D pan/zoom context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - buttonDown : btd               (bool)          [create]
        Perform the button down operation
    
    - buttonUp : btu                 (bool)          [create]
        Perform the button up operation
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - panMode : pm                   (bool)          [create]
        Specify to create a camera 2D pan context, which is the default.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - zoomMode : zm                  (bool)          [create]
        Specify to create a camera 2D zoom context.
    
    - zoomScale : zs                 (float)         [create,query,edit]
        Scale the zoom. The smaller the scale the slower the drag.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.panZoomCtx`
    """
    pass
def PlaybackRangeMinMax(*args, **kwargs): pass
def DisplayShadingMarkingMenuPopDown(*args, **kwargs): pass
def ReattachSkeleton(*args, **kwargs): pass
def xgmNop(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmNop`
    """
    pass
def blendCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - autoDirection : ad             (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - crvsInFirstRail : cfr          (int)           []
    
    - exists : ex                    (bool)          []
    
    - flipLeft : fl                  (bool)          []
    
    - flipRight : fr                 (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - leftParameter : lp             (float)         []
    
    - multipleKnots : mk             (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - polygon : po                   (int)           []
    
    - positionTolerance : pt         (float)         []
    
    - reset : rs                     (bool)          []
    
    - rightParameter : rp            (float)         []
    
    - tangentTolerance : tt          (float)         []
    
    - toolNode : tnq                 (bool)          []
    
    - useGlobalTol : ugt             (bool)          []
    
    
    Derived from mel command `maya.cmds.blendCtx`
    """
    pass
def radioMenuItemCollection(*args, **kwargs): pass
def BifMeshExport(*args, **kwargs): pass
def AddKeysTool(*args, **kwargs): pass
def dynExport(*args, **kwargs):
    """
    Export particle data to disk files. For cache export (-format cache), dynExport
    also sets three attributes of the current dynGlobals node.  It sets the
    useParticleRenderCache attribute to true, and the
    min/maxFrameOfLastParticleRenderCache attributes to correspond to the min and
    max frames. Exported .pda or .pdb files are assigned a name of form object
    name.frame.extension, where extensionis pdaor pdb.The naming convention for .pdc
    files is similar but does not use frame numbers, it uses a more precise
    representation of the time instead. By default, the pda and pdb formats export
    all per-particle attributes, and all integer or float type attributes except
    those which are hidden or not storable. (Exception: level of detail is not
    exported, by default) The pdc format exports all attributes which the particle
    object needs for its state cache. To specify only selected attributes, use the
    -atr flag (which is multi-use).  In general, it is recommended not to use this
    flag with pdc type, since you need all the attributes in order for the cache to
    be useful. dynExport exports data for the current frame, or for a range of
    frames specified with -mnf and -mxf. If you are not already at the start frame,
    dynExport will run up the scene for you. VERY VERY IMPORTANT NOTE:If you use
    dynExport in -prompt mode, it does NOT automatically force evaluation of your
    objects.  You must do this yourself from your script.  The easiest way is to
    request each particle object's countattribute each frame.  You must request the
    count attribute for each object you want to export, because their solvers run
    independently of one another.  In interactive mode, objects WILL get evaluated
    automatically and you don't have to worry about any of this. When exporting a
    particle object whose particles are created from collisions involving particles
    in another particle object(s), you must make sure you simultaneously export all
    the particle objects involved in the dependency chain otherwise you will get an
    empty cache file. For non-per-particle attributes, pda and pdb formats write the
    identical value once for each particle.  The following types of non-per-particle
    attributes can be exported: float, double, doubleLinear, doubleAngle, byte,
    short, long, enum.  The first four are exported as Real(in PDB parlance), and
    the last four as Integer.In the pda and pdb formats, particleIdand
    particleId0are exported as Integer, and are exported under the names idand
    id0respectively.  All other attributes are exported under their long names.
    
    Flags:
    - allObjects : all               (bool)          [create]
        Ignore the selection list and export all particle objects. If you also specify
        an object name, the -all flag will be ignored.
    
    - attribute : atr                (unicode)       [create]
        Name of attribute to be exported. If any specified object does not have one of
        the specified attributes, dynExport will issue an error and not do the export.
    
    - format : f                     (unicode)       [create]
        Desired format: binarypdb), asciipda), or cachepdc). The pdc format is for use
        by the Maya particle system to cache particle data.  The pda and pdb format
        options are intended for pipelines involving other software (for example,
        sending the data to some program written in-house); Maya cannot read pda or pdb
        files. There is no formal description of the PDB format, but the
        ExploreMe/particles/readpdb directory contains the source and Makefile for a
        small, simple C program called readpdbwhich reads it. Note that you must compile
        and run readpdb on the platform which you exported the files on.
    
    - maxFrame : mxf                 (time)          [create]
        Ending frame to be exported.
    
    - minFrame : mnf                 (time)          [create]
        Starting frame to be exported. The export operation will play the scene through
        from min frame to max frame as it exports.
    
    - onlyUpdateParticles : oup      (bool)          [create]
        Specify to only update the particles before exporting.
    
    - overSampling : os              (int)           [create]
        OverSampling to be used during export.
    
    - path : p                       (unicode)       [create]
        This option allows you to specify a subdirectory of the workspace
        particlesdirectory where you want the exported files to be stored. By default,
        files are stored in the workspace particles directory, i.e., -path is relative
        to that directory. Please Read This: This is a change from previous versions of
        Maya in which the path was relative to the workspace root directory.) You can
        set the particlesdirectory anywhere you want using the project window or
        workspace -fr command. (In this way, you can use an absolute path for export).
        The -path flag cannot handle strings which include /or \, in other words, it
        lets you go down only one level in the directory hierarchy. If you specify a
        path which doesn't exist, the action will create it if possible; if it can't
        create the path it will warn you and fail. If you are using a project for which
        a particle data directory is not defined, dynExport will create a default one
        called particlesand add it to your workspace.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dynExport`
    """
    pass
def ogsdebug(*args, **kwargs):
    """
    Flags:
    - count : c                      (int)           []
    
    - debug : d                      (unicode)       []
    
    - timing : t                     (unicode)       []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.ogsdebug`
    """
    pass
def NodeEditorShowAllCustomAttrs(*args, **kwargs): pass
def WeightedTangents(*args, **kwargs): pass
def CreateSubdivCube(*args, **kwargs): pass
def TogglePolyUVsCreateShader(*args, **kwargs): pass
def CreatePointLight(*args, **kwargs): pass
def AlembicReplace(*args, **kwargs): pass
def FBXGetTakeLocalTimeSpan(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeLocalTimeSpan`
    """
    pass
def AssignHairConstraint(*args, **kwargs): pass
def PickWalkDown(*args, **kwargs): pass
def FloatSelectedObjects(*args, **kwargs): pass
def constructionHistory(*args, **kwargs):
    """
    This command turns construction history on or off.               In query mode,
    return type is based on queried flag.
    
    Flags:
    - toggle : tgl                   (bool)          [create,query]
        Turns construction history on or off.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.constructionHistory`
    """
    pass
def geometryReplaceCacheFrames(*args, **kwargs): pass
def stackTrace(*args, **kwargs):
    """
    Flags:
    - dump : d                       (bool)          []
    
    - parameterCount : pc            (int)           []
    
    - parameterType : pt             (int, int)      []
    
    - parameterValue : pv            (int, int)      []
    
    - state : s                      (bool)          []
    
    
    Derived from mel command `maya.cmds.stackTrace`
    """
    pass
def RenameCurrentColorSet(*args, **kwargs): pass
def adskAssetList(*args, **kwargs):
    """
    Flags:
    - infoType : it                  (unicode)       []
    
    
    Derived from mel command `maya.cmds.adskAssetList`
    """
    pass
def InTangentSpline(*args, **kwargs): pass
def setKeyframe(*args, **kwargs):
    """
    This command creates keyframes for the specified objects, or the active objects
    if none are specified on the command line. The default time for the new
    keyframes is the current time. Override this behavior with the -tflag on the
    command line. The default value for the keyframe is the current value of the
    attribute for which a keyframe is set.  Override this behavior with the -vflag
    on the command line. When setting keyframes on animation curves that do not have
    timeas an input attribute (ie, they are unitless animation curves), use
    -f/-floatto specify the unitless value at which to set a keyframe. The -time and
    -float flags may be combined in one command. This command sets up Dependency
    Graph relationships for proper evaluation of a given attribute at a given time.
    
    Flags:
    - animLayer : al                 (unicode)       [create]
        Specifies that the new key should be placed in the specified animation layer.
        Note that if the objects being keyframed are not already part of the layer, this
        flag will be ignored.
    
    - animated : an                  (bool)          [create]
        Add the keyframe only to the attribute(s) that have already a keyframe on.
        Default: false
    
    - attribute : at                 (unicode)       [create]
        Attribute name to set keyframes on.
    
    - breakdown : bd                 (bool)          [create,query,edit]
        Sets the breakdown state for the key.  Default is false
    
    - clip : c                       (unicode)       [create]
        Specifies that the new key should be placed in the specified clip. Note that if
        the objects being keyframed are not already part of the clip, this flag will be
        ignored.
    
    - controlPoints : cp             (bool)          [create]
        Explicitly specify whether or not to include the control points of a shape (see
        -sflag) in the list of attributes. Default: false.
    
    - dirtyDG : dd                   (bool)          [create]
        Allow dirty messages to be sent out when a keyframe is set.
    
    - float : f                      (float)         [create]
        Float time at which to set a keyframe on float-based animation curves.
    
    - hierarchy : hi                 (unicode)       [create]
        Controls the objects this command acts on, relative to the specified (or active)
        target objects. Valid values are above,below,both,and none.Default is hierarchy
        -query
    
    - identity : id                  (bool)          [create]
        Sets an identity key on an animation layer.  An identity key is one that
        nullifies the effect of the anim layer.  This flag has effect only when the
        attribute being keyed is being driven by animation layers.
    
    - inTangentType : itt            (unicode)       [create]
        The in tangent type for keyframes set by this command. Valid values are: auto,
        clamped, fast, flat, linear, plateau, slow, spline, and stepnextDefault is
        keyTangent -q -g -inTangentType
    
    - insert : i                     (bool)          [create]
        Insert keys at the given time(s) and preserve the shape of the animation
        curve(s). Note: the tangent type on inserted keys will be fixed so that the
        curve shape can be preserved.
    
    - insertBlend : ib               (bool)          [create]
        If true, a pairBlend node will be inserted for channels that have nodes other
        than animCurves driving them, so that such channels can have blended animation.
        If false, these channels will not have keys inserted. If the flag is not
        specified, the blend will be inserted based on the global preference for
        blending animation.
    
    - minimizeRotation : mr          (bool)          [create]
        For rotations, ensures that the key that is set is a minimum distance away from
        the previous key.  Default is false
    
    - noResolve : nr                 (bool)          [create]
        When used with the -value flag, causes the specified value to be set directly
        onto the animation curve, without attempting to resolve the value across
        animation layers.
    
    - outTangentType : ott           (unicode)       [create]
        The out tangent type for keyframes set by this command. Valid values are: auto,
        clamped, fast, flat, linear, plateau, slow, spline, step, and stepnext. Default
        is keyTangent -q -g -outTangentType
    
    - respectKeyable : rk            (bool)          [create]
        When used with the -attribute flag, prevents the keying of the non keyable
        attributes.
    
    - shape : s                      (bool)          [create]
        Consider attributes of shapes below transforms as well, except controlPoints.
        Default: true
    
    - time : t                       (time)          [create]
        Time at which to set a keyframe on time-based animation curves.
    
    - useCurrentLockedWeights : lw   (bool)          [create]
        If we are setting a key over an existing key, use that key tangent's locked
        weight value for the new locked weight value.  Default is false
    
    - value : v                      (float)         [create]
        Value at which to set the keyframe. Using the value flag will not cause the
        keyed attribute to change to the specified value until the scene re-evaluates.
        Therefore, if you want the attribute to update to the new value immediately, use
        the setAttr command in addition to setting the key.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setKeyframe`
    """
    pass
def SimplifyCurve(*args, **kwargs): pass
def timeField(*args, **kwargs): pass
def SendToUnitySelection(*args, **kwargs): pass
def PresetBlendingWindow(*args, **kwargs): pass
def art3dPaintCtx(*args, **kwargs): pass
def ModifyLowerRadiusPress(*args, **kwargs): pass
def Art3dPaintToolOptions(*args, **kwargs): pass
def AddSelectionAsCombinationTarget(*args, **kwargs): pass
def cMuscleSimulate(*args, **kwargs):
    """
    Flags:
    - endf : e                       (int)           []
    
    - help : h                       (bool)          []
    
    - mode : m                       (unicode)       []
    
    - start : s                      (int)           []
    
    - step : st                      (int)           []
    
    
    Derived from mel command `maya.cmds.cMuscleSimulate`
    """
    pass
def psdExport(*args, **kwargs):
    """
    Writes the Photoshop file layer set into different formats.  The output
    file depth (bit per channel ) can be different from that of the input.
    If the input is 16 bpc and output is 8 bpc, there will be data loss.
    In query mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - alphaChannelIdx : aci          (int)           [create,query]
        Index of the alpha channel to output, if not supplied, writes out the default
        alpha channel.  The index is zero based. This is useful to write out specific
        alpha channels available as Additional Alpha Channelsof Photoshop.
    
    - bytesPerChannel : bpc          (int)           [create,query]
        Output file depth. Any of these keyword: 0 for choosing depth based on input1
        for 8 bits per channel2 for 16 bits per channelDefault is 0.
    
    - emptyLayerSet : els            (bool)          [create,query]
        Option to check if the given layer set is empty or not.  This should be used in
        query mode and input file name and layer set names should be specified.
    
    - format : format                (unicode)       [create,query]
        Output file format. Any of these keyword: iff, sgi, pic, tif, als, gif, rla,
        jpgDefault is iff.
    
    - layerName : lyn                (unicode)       [create,query]
        Name of the layer to output.
    
    - layerSetName : lsn             (unicode)       [create,query]
        Name of the layer set to output, if not supplied, writes out the Composite
        image.
    
    - outFileName : ofn              (unicode)       [create,query]
        Name(with path) of the output file.
    
    - preMultiplyAlpha : pma         (bool)          [create,query]
        Option to multiply RGB colors with alpha values.  If (r,g,b,a) is the value of
        pixel, it will be changed to (r\*a, g\*a, b\*a, a) when this flag is used.
    
    - psdFileName : ifn              (unicode)       [create,query]
        Name(with path) of the input Photoshop file. Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.psdExport`
    """
    pass
def polyVertexNormalCtx(*args, **kwargs):
    """
    Flags:
    - deformmode : dm                (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - lockmode : lm                  (int)           []
    
    - relativemode : rm              (int)           []
    
    - rotatemode : rot               (int)           []
    
    
    Derived from mel command `maya.cmds.polyVertexNormalCtx`
    """
    pass
def nConstraintSlideOnSurface(*args, **kwargs): pass
def ConvertToFrozen(*args, **kwargs): pass
def editor(*args, **kwargs):
    """
    Edit the characteristic of an editor
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editor`
    """
    pass
def polyCBoolOp(*args, **kwargs): pass
def TimeEditorAddToSoloSelectedTracks(*args, **kwargs): pass
def keyframeRegionCurrentTimeCtx(*args, **kwargs):
    """
    This command creates a context which may be used to change current time within
    the keyframe region of the dope sheet editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionCurrentTimeCtx`
    """
    pass
def OpenHomePage(*args, **kwargs): pass
def RemoveBifrostGuide(*args, **kwargs): pass
def SquareSurfaceOptions(*args, **kwargs): pass
def texSelectShortestPathCtx(*args, **kwargs):
    """
    Creates a new context to select shortest edge path between two vertices or UVs
    in the texture editor window. In query mode, return type is based on queried
    flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texSelectShortestPathCtx`
    """
    pass
def EnterEditModeRelease(*args, **kwargs): pass
def SewUVsWithoutHotkey(*args, **kwargs): pass
def bakeDeformer(*args, **kwargs): pass
def LoadHIKCharacterState(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.LoadHIKCharacterState`
    """
    pass
def NodeEditorToggleNodeTitleMode(*args, **kwargs): pass
def HoldCurrentKeys(*args, **kwargs): pass
def changeSubdivRegion(*args, **kwargs):
    """
    Changes a subdivision surface region based on the command parameters. The
    command operates on the selected subdivision surfaces.
    
    Flags:
    - action : a                     (int)           [create]
        Specifies the action to the selection region      1 = delete selection region
        2 = enlarge selection region
    
    - level : l                      (int)           [create]
        Specify the level of the subdivision surface to perform the operation
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.changeSubdivRegion`
    """
    pass
def dR_selectModeMarquee(*args, **kwargs): pass
def animLayer(*args, **kwargs): pass
def evaluationManager(*args, **kwargs):
    """
    Handles turning on and off the evaluation manager method of evaluating the DG.
    Query the 'mode' flag to see all available evaluation modes. The special mode
    'off' disables the evaluation manager. The scheduling override flags
    'nodeTypeXXX' force certain node types to use specific scheduling types, even
    though the node descriptions might indicate otherwise. Use with caution; certain
    nodes may not react well to alternative scheduling types. Only one scheduling
    type override will be in force at a time, the most restrictive one. In order,
    they are untrusted, globally serialized, locally serialized, and parallel. The
    node types will however remember all overrides. For example, if you set a node
    type override to be untrusted, then to be parallel it will continue to use the
    untrusted override. If you then turn off the untrusted override, the scheduling
    will advance to the parallel one. The actual node scheduling type is always
    superceded by the overrides. For example, a serial node will still be considered
    as parallel if the node type has the parallel override set, even though 'serial'
    is a more restrictive scheduling type. See the 'dbpeek' command 'graph'
    operation with arguments 'evaluationGraph' and 'scheduling' to see what
    scheduling type any particular node will end up using after the hierarchy of
    overrides and native scheduling types is applied.
    
    Flags:
    - cycleCluster : ccl             (unicode)       [create,query]
        Returns a list of nodes that are stored together with the given one in a cycle
        cluster. The list will be empty when the evaluation mode is not active or the
        node is not in a cycle.
    
    - disableInfo : di               (unicode)       [query]
        Returns a list of strings that contain the reasons that the evaluation manager
        has been disabled (as distinct from it being deliberately turned off, e.g.
        because an unsupported node type or attribute value was encountered). If the
        list is empty then the evaluation manager is operating normally.
    
    - downstreamFrom : dst           (unicode)       [create,query]
        Find the DG nodes that are immediately downstream of the named one in the
        evaluation graph. Note that the connectivity is via evaluation mode connections,
        not DG connections. In query mode the graph is walked and any nodes downstream
        of the named one are returned. The return type is alternating pairs of values
        that represent the graph level and the node name, e.g. if you walk downstream
        from A in the graph A -B -C then the return will be the array of strings
        (0,A,1,B,2,C). Scripts can deconstruct this information into something more
        visually recognizable. Note that cycles are likely to be present so any such
        scripts would have to handle them.
    
    - empty : mt                     (bool)          []
    
    - enabled : e                    (bool)          [query]
        Valid in query mode only. Checks to see if the evaluation manager is currently
        enabled. This is independent of the current mode.
    
    - idleAction : ia                (int)           [create,query]
        This flag sets the actions EM will perform on idle. It accepts the following
        values: 0 - No action1 - Graph Rebuild2 - EM Manipulation Preparation3 - Graph
        Rebuild and EM Manipulation PreparationWhere: Graph Rebuildwill rebuild the
        evaluation graph on an idle event as soon as it is able to do so.EM
        ManipulationPreparationwill get the evaluation manager to perform all the steps
        necessary for EM manipulation to be available after the next idle event.Note:
        These idle actions only apply to the graph attached to the normal context. All
        other graphs will be built according to their own rules. The disadvantage of
        enabling idle actions is that for some workflows that are changing the graph
        frequently, or very large graphs, the graph build and manipulation preparation
        time may impact the workflow. If workflows are impacted it is suggested to turn
        idle actions off by passing this flag a value of 0.
    
    - idleBuild : ib                 (bool)          [create,query]
        This flag is obsolete. Please use the -idleAction flag with a value of 1 in
        order to activate evaluation graph rebuild on idle.
    
    - invalidate : inv               (bool)          [create,query]
        This flag invalidates the graph. Value is used to control auto rebuilding on
        idle (false) or forced (true). This command should be used as a last resort. In
        query mode it checks to see if the graph is valid.
    
    - manipulation : man             (bool)          [create,query]
        This flag is used to activate evaluation manager manipulation support.
    
    - mode : m                       (unicode)       [create,query]
        Changes the current evaluation mode in the evaluation manager. Supported values
        are off, serialand parallel.
    
    - nodeTypeGloballySerialize : ntg (bool)          [create,query]
        This flag is used only when the evaluation manager is in parallelmode but can be
        set at anytime. It activates or deactivates the override to force global serial
        scheduling for the class name argument(s) in the evaluation manager. Legal
        object values are class type names: e.g. transform, skinCluster, mesh. When
        queried without specified nodes, it returns the list of nodes with the global
        serial scheduling override active. Scheduling overrides take precedence over all
        of the node and node type scheduling rules. Use with caution; certain nodes may
        not react well to alternative scheduling types.
    
    - nodeTypeParallel : ntp         (bool)          [create,query]
        This flag is used only when the evaluation manager is in parallelmode but can be
        set at anytime. It activates or deactivates the override to force parallel
        scheduling for the class name argument(s) in the evaluation manager. Legal
        object values are class type names: e.g. transform, skinCluster, mesh. When
        queried without specified nodes, it returns the list of nodes with the parallel
        scheduling override active. Scheduling overrides take precedence over all of the
        node and node type scheduling rules. Use with caution; certain nodes may not
        react well to alternative scheduling types.
    
    - nodeTypeSerialize : nts        (bool)          [create,query]
        This flag is used only when the evaluation manager is in parallelmode but can be
        set at anytime. It activates or deactivates the override to force local serial
        scheduling for the class name argument(s) in the evaluation manager. Legal
        object values are class type names: e.g. transform, skinCluster, mesh. When
        queried without specified nodes, it returns the list of nodes with the local
        serial scheduling override active. Scheduling overrides take precedence over all
        of the node and node type scheduling rules. Use with caution; certain nodes may
        not react well to alternative scheduling types.
    
    - nodeTypeUntrusted : ntu        (bool)          [create,query]
        This flag is used only when the evaluation manager is in parallelmode but can be
        set at anytime. It activates or deactivates the override to force untrusted
        scheduling for the class name argument(s) in the evaluation manager. Legal
        object values are class type names: e.g. transform, skinCluster, mesh. When
        queried without specified nodes, it returns the list of nodes with the untrusted
        scheduling override active. Scheduling overrides take precedence over all of the
        node and node type scheduling rules. Use with caution; certain nodes may not
        react well to alternative scheduling types. Untrusted scheduling will allow
        nodes to be evaluated in a critical section, separately from any other node
        evaluation. It should be used only as a last resort since the lost parallelism
        caused by untrusted nodes can greatly reduce performance.
    
    - safeMode : sfm                 (bool)          [create,query]
        This flag activates/deactivates parallel evaluation safe mode. When enabled,
        parallel execution will fall back to serial when evaluation graph is missing
        dependencies. Detection is happening on scheduling of parallel evaluation, which
        means potential fallback will happen at the next evaluation. WARNING: This mode
        should be disabled with extreme caution. It will prevent parallel mode from
        falling back to serial mode when an invalid evaluation is detected. Sometimes
        the evaluation will still work correctly in those situations and use of this
        flag will keep the peak parallel performance running. However since the safe
        mode is used to catch invalid evaluation disabling it may also cause problems
        with evaluation, anything from invalid values, missing evaluation, or even
        crashes.                                   Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    - upstreamFrom : ust             (unicode)       [create,query]
        Find the DG nodes that are immediately upstream of the named one in the
        evaluation graph. Note that the connectivity is via evaluation mode connections,
        not DG connections. In query mode the graph is walked and any nodes upstream of
        the named one are returned. The return type is alternating pairs of values that
        represent the graph level and the node name, e.g. if you walk upstream from C in
        the graph A -B -C then the return will be the array of strings (0,C,1,B,2,A).
        Scripts can deconstruct this information into something more visually
        recognizable. Note that cycles are likely to be present so any such scripts
        would have to handle them.
    
    
    Derived from mel command `maya.cmds.evaluationManager`
    """
    pass
def NodeEditorDiveIntoCompound(*args, **kwargs): pass
def nClothReplaceCache(*args, **kwargs): pass
def CreateSubCharacterOptions(*args, **kwargs): pass
def listAnimatable(*args, **kwargs): pass
def dR_viewLeft(*args, **kwargs): pass
def assembly(*args, **kwargs): pass
def DisableExpressions(*args, **kwargs): pass
def PublishAttributesOptions(*args, **kwargs): pass
def toolBar(*args, **kwargs): pass
def projectTangent(*args, **kwargs): pass
def HypershadeMoveTabDown(*args, **kwargs): pass
def NURBSSmoothnessHullOptions(*args, **kwargs): pass
def xgmWidthBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmWidthBrushToolCmd`
    """
    pass
def TwoPointArcToolOptions(*args, **kwargs): pass
def HypershadeDeleteAllCamerasAndImagePlanes(*args, **kwargs): pass
def cmdArnoldBakeGeo(*args, **kwargs): pass
def SelectAllFluids(*args, **kwargs): pass
def AddHolderOptions(*args, **kwargs): pass
def CreateWakeOptions(*args, **kwargs): pass
def xgmClumpBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - intensityFactor : intensityFactor (float)         []
    
    - lockSelection : ls             (bool)          []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - preserveLength : pl            (bool)          []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmClumpBrushContext`
    """
    pass
def SelectFacePath(*args, **kwargs): pass
def AssumePreferredAngle(*args, **kwargs): pass
def xgmSplineBaseDensityScaleChangeCmd(*args, **kwargs):
    """
    Flags:
    - value : v                      (float)         []
    
    
    Derived from mel command `maya.cmds.xgmSplineBaseDensityScaleChangeCmd`
    """
    pass
def PolySelectTool(*args, **kwargs): pass
def ContentBrowserLayout(*args, **kwargs): pass
def arnoldBakeGeo(*args, **kwargs):
    """
    Flags:
    - filename : f                   (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldBakeGeo`
    """
    pass
def FBXGetTakeReferenceTimeSpan(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeReferenceTimeSpan`
    """
    pass
def deleteUI(*args, **kwargs):
    """
    This command deletes UI objects such as windows and controls.  Deleting a layout
    or window will also delete all of its children.  If a flag is used then all
    objects being deleted must be of the specified type. This command may not be
    edited or queried. NOTE: it is recommended that the type flags be used to
    disambiguate different kinds of objects with the same name.
    
    This command deletes UI objects such as windows and controls.  Deleting a layout
    or window will also delete all of its children.  If a flag is used then all
    objects being deleted must be of the specified type. This command may not be
    edited or queried. NOTE: it is recommended that the type flags be used to
    disambiguate different kinds of objects with the same name.
    
    Flags:
    - collection : cl                (bool)          [create]
        Object names for deletion are all radio or tool collections.
    
    - control : ctl                  (bool)          [create]
        Object names for deletion are all controls.
    
    - editor : ed                    (bool)          [create]
        Object names for deletion are all editors.
    
    - layout : lay                   (bool)          [create]
        Object names for deletion are all layouts.
    
    - menu : m                       (bool)          [create]
        Object names for deletion are all menus.
    
    - menuItem : mi                  (bool)          [create]
        Object names for deletion are all menu items.
    
    - panel : pnl                    (bool)          [create]
        Object names for deletion are all panels.
    
    - panelConfig : pc               (bool)          [create]
        Object names for deletion are panel configurations.
    
    - radioMenuItemCollection : ric  (bool)          [create]
        Object names for deletion are all radio menu item collections.
    
    - toolContext : tc               (bool)          [create]
        Object names for deletion are all tool contexts.
    
    - uiTemplate : uit               (bool)          [create]
        Object names for deletion are all UI templates.
    
    - window : wnd                   (bool)          [create]
        Object names for deletion are all windows.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deleteUI`
    
    Flags:
    - collection : cl                (bool)          [create]
        Object names for deletion are all radio or tool collections.
    
    - control : ctl                  (bool)          [create]
        Object names for deletion are all controls.
    
    - editor : ed                    (bool)          [create]
        Object names for deletion are all editors.
    
    - layout : lay                   (bool)          [create]
        Object names for deletion are all layouts.
    
    - menu : m                       (bool)          [create]
        Object names for deletion are all menus.
    
    - menuItem : mi                  (bool)          [create]
        Object names for deletion are all menu items.
    
    - panel : pnl                    (bool)          [create]
        Object names for deletion are all panels.
    
    - panelConfig : pc               (bool)          [create]
        Object names for deletion are panel configurations.
    
    - radioMenuItemCollection : ric  (bool)          [create]
        Object names for deletion are all radio menu item collections.
    
    - toolContext : tc               (bool)          [create]
        Object names for deletion are all tool contexts.
    
    - uiTemplate : uit               (bool)          [create]
        Object names for deletion are all UI templates.
    
    - window : wnd                   (bool)          [create]
        Object names for deletion are all windows.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deleteUI`
    """
    pass
def polyRemesh(*args, **kwargs): pass
def debug(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.debug`
    """
    pass
def SetFocusToCommandLine(*args, **kwargs): pass
def SetMBSMultiply(*args, **kwargs): pass
def OutlinerToggleIgnoreUseColor(*args, **kwargs): pass
def setDefaultShadingGroup(*args, **kwargs):
    """
    The setDefaultShadingGroup command is used to change which shading group is
    considered the current default shading group. Subsequently created objects will
    be assigned to the new default group. In query mode, return type is based on
    queried flag.
    
    
    Derived from mel command `maya.cmds.setDefaultShadingGroup`
    """
    pass
def TrackTool(*args, **kwargs): pass
def ToggleToolbox(*args, **kwargs): pass
def CutPolygon(*args, **kwargs): pass
def arrayMapper(*args, **kwargs): pass
def ConvertHairSelectionToRestCurveEndCVs(*args, **kwargs): pass
def CreateJiggleOptions(*args, **kwargs): pass
def createPolySphereCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAll : asa  (bool)          []
    
    - attachToSubdivisionsAxis : asx (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    
    Derived from mel command `maya.cmds.createPolySphereCtx`
    """
    pass
def xgmGrabBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - preserveLength : pl            (int)           []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmGrabBrushContext`
    """
    pass
def typeManipContextCommand(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.typeManipContextCommand`
    """
    pass
def MakeStereoLinks(*args, **kwargs): pass
def Revolve(*args, **kwargs): pass
def dR_modeEdge(*args, **kwargs): pass
def DisableTimeChangeUndoConsolidation(*args, **kwargs): pass
def bevel(*args, **kwargs): pass
def saveImage(*args, **kwargs): pass
def FluidEmitterOptions(*args, **kwargs): pass
def SelectAllParticles(*args, **kwargs): pass
def EnableAll(*args, **kwargs): pass
def BendCurvesOptions(*args, **kwargs): pass
def textureWindow(*args, **kwargs): pass
def PolygonHardenEdge(*args, **kwargs): pass
def SelectPolygonToolMarkingMenuPopDown(*args, **kwargs): pass
def SpreadSheetEditor(*args, **kwargs): pass
def NodeEditorPublishCompound(*args, **kwargs): pass
def ExportProxyContainerOptions(*args, **kwargs): pass
def SimplifyStrokePathCurves(*args, **kwargs): pass
def SwapBlendShapeOptions(*args, **kwargs): pass
def PaintNonlinearWeightsTool(*args, **kwargs): pass
def AddWire(*args, **kwargs): pass
def arnoldLicense(*args, **kwargs):
    """
    Flags:
    - copyToClipboard : cc           (unicode)       []
    
    - getNlmServer : gn              (bool)          []
    
    - getRlmServer : gr              (bool)          []
    
    - runServerStatus : rs           (bool)          []
    
    - setNlmServer : sn              (unicode)       []
    
    - setRlmServer : sr              (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldLicense`
    """
    pass
def FBIKLabelNone(*args, **kwargs): pass
def fluidAppend(*args, **kwargs): pass
def CreatePoseInterpolator(*args, **kwargs): pass
def FillHole(*args, **kwargs): pass
def GraphEditorFrameCenterView(*args, **kwargs): pass
def TrimToolOptions(*args, **kwargs): pass
def CreatePointLightOptions(*args, **kwargs): pass
def IPRRenderIntoNewWindow(*args, **kwargs): pass
def polyExtrudeEdge(*args, **kwargs): pass
def PaintToonLineOffset(*args, **kwargs): pass
def ResampleCurve(*args, **kwargs): pass
def LowQualityDisplay(*args, **kwargs): pass
def SelectUVBorderComponents(*args, **kwargs): pass
def PostInfinityConstant(*args, **kwargs): pass
def SaveBrushPreset(*args, **kwargs): pass
def BrushPresetReplaceShadingOff(*args, **kwargs): pass
def MirrorDeformerWeights(*args, **kwargs): pass
def TimeEditorCreateClip(*args, **kwargs): pass
def ToggleHikDetails(*args, **kwargs): pass
def dR_renderGlobalsTGL(*args, **kwargs): pass
def HideClusters(*args, **kwargs): pass
def ConvertSelectionToContainedFaces(*args, **kwargs): pass
def ExtrudeEdge(*args, **kwargs): pass
def ToggleAutoSmooth(*args, **kwargs): pass
def CreateCharacter(*args, **kwargs): pass
def currentUnit(*args, **kwargs):
    """
    This command allows you to change the units in which you will work in Maya.
    There are three types of units: linear, angular and time. The current unit
    affects how all commands in Maya interpret their numeric values. For example, if
    the current linear unit is cm, then the command: move 5 -2 3; sphere -radius 4;
    will be interpreted as moving 5cm in X, -2cm in Y, 3cm in Z, and as creating a
    sphere with radius 4cm. Similarly, if the current time unit is Film (24 frames
    per second), then the command: currentTime 6; will be interpreted as setting the
    current time to frame 6 in the Film unit, which is 6/24 or 0.25 seconds. You can
    always override the unit of a particular numeric value to a command be
    specifying it one the command. For example, using the above examples: move 5m
    -2mm 3cm; sphere -radius 4inch; currentTime 6ntsc; would move the object 5
    meters in X, -2 millimeters in Y, 3 centimeters in Z, create a sphere of radius
    4 inches, and change the current time to 6 frames in the NTSC unit, which would
    be 0.2 seconds, or 4.8 frames in the current (Film) unit.
    
    Flags:
    - angle : a                      (unicode)       [create,query]
        Set the current angular unit. Valid strings are: [deg | degree | rad | radian]
        When queried, returns a string which is the current angular unit
    
    - fullName : f                   (bool)          [query]
        A query only flag. When specified in conjunction with any of the
        -linear/-angle/-time flags, will return the long form of the unit. For example,
        mmand millimeterare the same unit, but the former is the short form of the unit
        name, and the latter is the long form of the unit name.
    
    - linear : l                     (unicode)       [create,query]
        Set the current linear unit. Valid strings are: [mm | millimeter | cm |
        centimeter | m | meter | km | kilometer | in | inch | ft | foot | yd | yard | mi
        | mile] When queried, returns a string which is the current linear unit
    
    - time : t                       (unicode)       [create,query]
        Set the current time unit. Valid strings are: [hour | min | sec | millisec |
        game | film | pal | ntsc | show | palf | ntscf | 23.976fps | 29.97fps | 29.97df
        | 47.952fps | 59.94fps | 44100fps | 48000fps] When queried, returns a string
        which is the current time unit Note that there is no long form for any of the
        time units. The non-seconds based time units are interpreted as the following
        frames per second: game: 15 fpsfilm: 24 fpspal: 25 fpsntsc: 30 fpsshow: 48
        fpspalf: 50 fpsntscf: 60 fps
    
    - updateAnimation : ua           (bool)          [create]
        An edit only flag.  When specified in conjunction with the -time flag indicates
        that times for keys are not updated.  By default when the current time unit is
        changed, the times for keys are modified so that playback timing is preserved.
        For example a key set a frame 12film is changed to frame 15ntsc when the current
        time unit is changed to ntsc, since they both represent a key at a time of 0.5
        seconds.  Specifying -updateAnimation false would leave the key at frame 12ntsc.
        Default is -updateAnimation true.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.currentUnit`
    """
    pass
def FBXExportBakeComplexStep(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportBakeComplexStep`
    """
    pass
def OutlinerToggleConnected(*args, **kwargs): pass
def EnableMemoryCaching(*args, **kwargs): pass
def SnapToPointRelease(*args, **kwargs): pass
def Group(*args, **kwargs): pass
def ChangeVertexSize(*args, **kwargs): pass
def ModifyUVVectorRelease(*args, **kwargs): pass
def CreateSubdivPlane(*args, **kwargs): pass
def polyMergeEdge(*args, **kwargs): pass
def RetimeKeysToolOptions(*args, **kwargs): pass
def GeometryToBoundingBox(*args, **kwargs): pass
def HideObjectGeometry(*args, **kwargs): pass
def PartSpriteWizard(*args, **kwargs): pass
def dR_edgedFacesTGL(*args, **kwargs): pass
def CreateEmitter(*args, **kwargs): pass
def FBIKLabelIndexToe(*args, **kwargs): pass
def geomBind(*args, **kwargs): pass
def TimeEditorKeepTransitionsTogglePress(*args, **kwargs): pass
def DeltaMushOptions(*args, **kwargs): pass
def movIn(*args, **kwargs):
    """
    Imports a .mov file into animation curves connected to  the listed attributes.
    The attribute must be writable, since an animation curve will be created and
    connected to the attribute. If an animation curve already is connected to the
    attribute, the imported data is pasted onto that curve. The starting time used
    for the .mov file importation is the current time when the command is executed.
    Valid attribute types are numeric attributes; time attributes; linear
    attributes; angular attributes; compound attributes made of the types listed
    previously; and multi attributes composed of the types listed previously. If an
    unsuppoted attribute type is requested, the command will fail and no data will
    be imported. It is important that your user units are set to the same units used
    in the .mov file, otherwise linear and angular values will be incorrect. To
    export a .mov file, use the movOut command.
    
    Flags:
    - file : f                       (unicode)       [create]
        The name of the .mov file. If no extension is used, a .mov will be added.
    
    - startTime : st                 (time)          [create]
        The default start time for importing the .mov file is the current time. The
        startTime option sets the starting time for the .mov data in the current time
        unit.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.movIn`
    """
    pass
def reverseCurve(*args, **kwargs): pass
def ShowDynamicConstraints(*args, **kwargs): pass
def ToggleCullingVertices(*args, **kwargs): pass
def RemoveBifrostCollider(*args, **kwargs): pass
def HypershadeFrameSelected(*args, **kwargs): pass
def nucleusGetnClothExample(*args, **kwargs): pass
def arnoldViewOverrideOptionBox(*args, **kwargs):
    """
    Flags:
    - mode : m                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldViewOverrideOptionBox`
    """
    pass
def GeometryConstraint(*args, **kwargs): pass
def ShowNURBSSurfaces(*args, **kwargs): pass
def GoToNextDrivenKey(*args, **kwargs): pass
def UnpublishNode(*args, **kwargs): pass
def renderSetupSwitchVisibleRenderLayer(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderSetupSwitchVisibleRenderLayer`
    """
    pass
def manipComponentPivot(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.manipComponentPivot`
    """
    pass
def XgExpressionEditor(*args, **kwargs): pass
def SmoothTangent(*args, **kwargs): pass
def polyBevel(*args, **kwargs): pass
def FBXImportQuaternion(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportQuaternion`
    """
    pass
def UnpublishAttributes(*args, **kwargs): pass
def blend(*args, **kwargs):
    """
    Flags:
    - autoDirection : ad             (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - crvsInFirstRail : cfr          (int)           []
    
    - flipLeft : fl                  (bool)          []
    
    - flipRight : fr                 (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - leftParameter : lp             (float)         []
    
    - multipleKnots : mk             (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - polygon : po                   (int)           []
    
    - positionTolerance : pt         (float)         []
    
    - rightParameter : rp            (float)         []
    
    - tangentTolerance : tt          (float)         []
    
    
    Derived from mel command `maya.cmds.blend`
    """
    pass
def SetMeshFoamyTool(*args, **kwargs): pass
def FBXExportShapes(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportShapes`
    """
    pass
def PlaybackRangeSound(*args, **kwargs): pass
def ShapeEditorNewGroup(*args, **kwargs): pass
def AddKeyToolDeactivate(*args, **kwargs): pass
def SetHiddenFromCamera(*args, **kwargs): pass
def polyColorSetCmdWrapper(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.polyColorSetCmdWrapper`
    """
    pass
def aiViewRegionCmd(*args, **kwargs):
    """
    Flags:
    - create : c                     (bool)          []
    
    - delete : d                     (bool)          []
    
    
    Derived from mel command `maya.cmds.aiViewRegionCmd`
    """
    pass
def nBase(*args, **kwargs): pass
def RotateToolWithSnapMarkingMenu(*args, **kwargs): pass
def ShowMeshBulgeToolOptions(*args, **kwargs): pass
def HypershadeRemoveTab(*args, **kwargs): pass
def ToggleSelectedLabels(*args, **kwargs): pass
def viewHeadOn(*args, **kwargs):
    """
    The viewHeadOn command positions the specified camera so it is looking downthe
    normal of the live object, and fitted to the live object. If the live object is
    a surface, an arbitrary normal is chosen.
    
    
    Derived from mel command `maya.cmds.viewHeadOn`
    """
    pass
def GrowPolygonSelectionRegion(*args, **kwargs): pass
def ConformPolygonNormals(*args, **kwargs): pass
def dagCommandWrapper(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dagCommandWrapper`
    """
    pass
def SetCMCDiffuse(*args, **kwargs): pass
def GraphEditorAlwaysDisplayTangents(*args, **kwargs): pass
def DeleteAllChannels(*args, **kwargs): pass
def NodeEditorShapeMenuStateAllExceptShadingGroupMembers(*args, **kwargs): pass
def UndoCanvas(*args, **kwargs): pass
def nexMultiCutCtx(*args, **kwargs):
    """
    Flags:
    - appendMesh : apm               (unicode)       []
    
    - bevelEdge : bed                (float)         []
    
    - bridgeCurveType : bct          (int)           []
    
    - bugReport : bug                (bool)          []
    
    - cameraToPoly : ctp             (bool)          []
    
    - canDoConnect : cdc             (bool)          []
    
    - cancelManip : cam              (bool)          []
    
    - capslock : cap                 (bool)          []
    
    - connItemSel : cis              (int)           []
    
    - connectMode : sm               (bool)          []
    
    - contextTweakMode : ctm         (bool)          []
    
    - curSlideMesh : csm             (unicode)       []
    
    - debugString : deb              (bool)          []
    
    - extrudePoly : epl              (float)         []
    
    - extrudeVert : evr              (float, float)  []
    
    - extrudeVertDivisions : evd     (int)           []
    
    - getManipVal : gmv              (unicode, unicode) []
    
    - getSplitCmd : gsc              (bool)          []
    
    - hasPolySelection : hps         (bool)          []
    
    - hasValidSel : hs               (bool)          []
    
    - hideManip : hm                 (bool)          []
    
    - hiliteSymmetrize : hsy         (bool)          []
    
    - iconpath : ico                 (unicode)       []
    
    - isGoodForBevel : gbe           (bool)          []
    
    - isGoodForBridge : gfb          (bool)          []
    
    - isGoodForExtrude : gfe         (bool)          []
    
    - keepFacesTogether : kft        (int)           []
    
    - lastSewNode : lsn              (unicode)       []
    
    - lockSelected : ls              (bool)          []
    
    - manipOrientation : mo          (float, float, float) []
    
    - manipOrientationX : mox        (float)         []
    
    - manipOrientationY : moy        (float)         []
    
    - manipOrientationZ : moz        (float)         []
    
    - manipPos : mp                  (float, float, float) []
    
    - manipPosX : mpx                (float)         []
    
    - manipPosY : mpy                (float)         []
    
    - manipPosZ : mpz                (float)         []
    
    - manipScaleX : msx              (float)         []
    
    - manipScaleY : msy              (float)         []
    
    - manipScaleZ : msz              (float)         []
    
    - manipUndoNotify : mun          (bool)          []
    
    - manipVal : mv                  (unicode, unicode, float) []
    
    - modelPanelType : mpt           (unicode, unicode) []
    
    - multiCompMode : mcm            (int)           []
    
    - numConnItems : nci             (bool)          []
    
    - polynames : pn                 (bool)          []
    
    - prevManipVal : pmv             (float)         []
    
    - quadDrawClearDots : qcd        (bool)          []
    
    - resetCustom : rc               (unicode)       []
    
    - resetManip : rm                (bool)          []
    
    - restoreSelection : res         (unicode)       []
    
    - rmbComplete : rmc              (bool)          []
    
    - selCount : cnt                 (unicode)       []
    
    - selFlip : sef                  (bool)          []
    
    - selSym : ses                   (bool)          []
    
    - selectHilite : sh              (bool)          []
    
    - selectLocked : sl              (bool)          []
    
    - skipSelTypeCB : ssc            (bool)          []
    
    - stickyIsDown : sid             (bool)          []
    
    - straighten : str               (bool)          []
    
    - unlockAll : ua                 (bool)          []
    
    - updateManips : upm             (bool)          []
    
    - useRefMesh : urm               (bool)          []
    
    
    Derived from mel command `maya.cmds.nexMultiCutCtx`
    """
    pass
def sculpt(*args, **kwargs): pass
def EPCurveTool(*args, **kwargs): pass
def BakeInstancerToGeometry(*args, **kwargs): pass
def VertexNormalEditTool(*args, **kwargs): pass
def dR_slideEdge(*args, **kwargs): pass
def ShowBaseWire(*args, **kwargs): pass
def SnapToPointPress(*args, **kwargs): pass
def ls(*args, **kwargs): pass
def SetPassiveKey(*args, **kwargs): pass
def dR_preferencesTGL(*args, **kwargs): pass
def addPP(*args, **kwargs): pass
def OffsetEdgeLoopTool(*args, **kwargs): pass
def PaintEffectsToolOptions(*args, **kwargs): pass
def XgmSetGrabBrushTool(*args, **kwargs): pass
def ExtrudeVertexOptions(*args, **kwargs): pass
def DeleteCurrentWorkspace(*args, **kwargs): pass
def CreateNodeWindow(*args, **kwargs): pass
def angleBetween(*args, **kwargs): pass
def LevelOfDetailGroupOptions(*args, **kwargs): pass
def InvertSelection(*args, **kwargs): pass
def SelectCurvePointsMask(*args, **kwargs): pass
def TexSculptActivateBrushStrength(*args, **kwargs): pass
def polyMoveEdge(*args, **kwargs): pass
def NodeEditorAdditiveGraphingMode(*args, **kwargs): pass
def BreakRigidBodyConnection(*args, **kwargs): pass
def cMuscleCompIndex(*args, **kwargs):
    """
    Flags:
    - help : h                       (bool)          []
    
    
    Derived from mel command `maya.cmds.cMuscleCompIndex`
    """
    pass
def polySoftEdge(*args, **kwargs): pass
def PickWalkUseController(*args, **kwargs): pass
def cmdPhotometricLights(*args, **kwargs): pass
def HIKPinRotate(*args, **kwargs): pass
def getRenderDependencies(*args, **kwargs):
    """
    Command to return dependencies of an image source.  Image sources (such as
    render targets) can depend on other upstream image sources that result from
    renderings of 3D scene, or renderings of 2D compositing graphs. This command
    returns these dependencies, so that they can be analyzed and rendered.
    
    
    Derived from mel command `maya.cmds.getRenderDependencies`
    """
    pass
def AssignBrushToPfxToon(*args, **kwargs): pass
def CutCurve(*args, **kwargs): pass
def CreateAreaLightOptions(*args, **kwargs): pass
def xgmFreezeBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - invertFrozen : invertFrozen    (bool)          []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - operation : op                 (int)           []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - unfreeze : uf                  (bool)          []
    
    - unfreezeAll : ufa              (bool)          []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmFreezeBrushContext`
    """
    pass
def xpmPicker(*args, **kwargs):
    """
    Open a dialog and ask you to choose a xpm file
    
    Flags:
    - fileName : fn                  (unicode)       [create]
        default filename to display in dialog
    
    - parent : p                     (unicode)       [create]
        parent window for modal dialog                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.xpmPicker`
    """
    pass
def GamePipeline(*args, **kwargs):
    """
    Flags:
    - sendToEngineAll : sa           (unicode)       []
    
    - sendToEngineSelection : ss     (unicode)       []
    
    - sendToUnityAll : sua           (bool)          []
    
    - sendToUnitySelection : sus     (bool)          []
    
    - setEngineProject : sp          (unicode)       []
    
    - setUnityProject : sup          (bool)          []
    
    
    Derived from mel command `maya.cmds.GamePipeline`
    """
    pass
def ScaleToolWithSnapMarkingMenu(*args, **kwargs): pass
def CreateSet(*args, **kwargs): pass
def ToggleObjectDetails(*args, **kwargs): pass
def PolyConvertToRingAndSplit(*args, **kwargs): pass
def CameraModeToggle(*args, **kwargs): pass
def LoopBrushAnimationOptions(*args, **kwargs): pass
def PaintEffectsMeshQuality(*args, **kwargs): pass
def FrameSelected2(*args, **kwargs): pass
def mirrorJoint(*args, **kwargs):
    """
    This command will duplicate a branch of the skeleton from the selected joint
    symmetrically about a plane in world space. There are three mirroring modes(xy-,
    yz-, xz-plane).
    
    Flags:
    - mirrorBehavior : mb            (bool)          [create]
        The mirrorBehavior flag is used to specify that when performing the mirror, the
        joint orientation axes should be mirrored such that equal rotations on the
        original and mirrored joints will place the skeleton in a mirrored position
        (symmetric across the mirroring plane). Thus, animation curves from the original
        joints can be copied to the mirrored side to produce a similar (but symmetric)
        behavior. When mirrorBehavior is not specified, the joint orientation on the
        mirrored side will be identical to the source side.
    
    - mirrorXY : mxy                 (bool)          [create]
        mirror skeleton from the selected joint about xy-plane in world space.
    
    - mirrorXZ : mxz                 (bool)          [create]
        mirror skeleton from the selected joint about xz-plane in world space.
    
    - mirrorYZ : myz                 (bool)          [create]
        mirror skeleton from the selected joint about yz-plane in world space.
    
    - searchReplace : sr             (unicode, unicode) [create]
        After performing the mirror, rename the new joints by searching the name for the
        first specified string and replacing it with the second specified string.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.mirrorJoint`
    """
    pass
def sbs_GetAllInputsFromSubstanceNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetAllInputsFromSubstanceNode`
    """
    pass
def colorSliderGrp(*args, **kwargs): pass
def polyPrimitive(*args, **kwargs): pass
def sbs_GetPackageFullPathNameFromSubstanceNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetPackageFullPathNameFromSubstanceNode`
    """
    pass
def RemoveFromContainer(*args, **kwargs): pass
def poleVectorConstraint(*args, **kwargs): pass
def CreateConstraintOptions(*args, **kwargs): pass
def OpenBrowserSetupAssistant(*args, **kwargs): pass
def selectedNodes(*args, **kwargs):
    """
    Flags:
    - dagObjects : do                (bool)          []
    
    
    Derived from mel command `maya.cmds.selectedNodes`
    """
    pass
def polyTransfer(*args, **kwargs): pass
def CreateNURBSPlaneOptions(*args, **kwargs): pass
def polyInstallAction(*args, **kwargs): pass
def stitchSurfaceCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - bias : b                       (float)         []
    
    - caching : cch                  (bool)          []
    
    - cascade : c                    (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - cvIthIndex : ci                (int)           []
    
    - cvJthIndex : cj                (int)           []
    
    - exists : ex                    (bool)          []
    
    - fixBoundary : fb               (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - keepG0Continuity : kg0         (bool)          []
    
    - keepG1Continuity : kg1         (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - numberOfSamples : ns           (int)           []
    
    - object : o                     (bool)          []
    
    - parameterU : u                 (float)         []
    
    - parameterV : v                 (float)         []
    
    - positionalContinuity : pc      (bool)          []
    
    - replaceOriginal : rpo          (bool)          []
    
    - reset : rs                     (bool)          []
    
    - stepCount : sc                 (int)           []
    
    - tangentialContinuity : tc      (bool)          []
    
    - togglePointNormals : tpn       (bool)          []
    
    - togglePointPosition : tpp      (bool)          []
    
    - toggleTolerance : tt           (bool)          []
    
    - tolerance : tol                (float)         []
    
    - toolNode : tnq                 (bool)          []
    
    - weight0 : wt0                  (float)         []
    
    - weight1 : wt1                  (float)         []
    
    
    Derived from mel command `maya.cmds.stitchSurfaceCtx`
    """
    pass
def PlaybackRangePrefs(*args, **kwargs): pass
def DisplayWireframe(*args, **kwargs): pass
def RebuildSurfacesOptions(*args, **kwargs): pass
def attrFieldSliderGrp(*args, **kwargs): pass
def CreatePolygonSoccerBallOptions(*args, **kwargs): pass
def blendShape(*args, **kwargs): pass
def iconTextRadioCollection(*args, **kwargs): pass
def NodeEditorConnectionStyleCorner(*args, **kwargs): pass
def polyUVStackSimilarShellsCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.polyUVStackSimilarShellsCmd`
    """
    pass
def openGLExtension(*args, **kwargs):
    """
    Command returns the extension name depending on whether a given OpenGL extension
    is supported or not. The input is the extension string to the -extension flag.
    If the -extension flag is not used, or if the string argument to this flag is an
    empty string than all extension names are returned in a single string. If the
    extension exists it is not necessary true that the extension is supported. This
    command can only be used when a modeling view has been created. Otherwise no
    extensions will have been initialized and the resulting string will always be
    the empty string.
    
    Flags:
    - extension : ext                (unicode)       [create]
        Specifies the OpenGL extension to query.
    
    - renderer : rnd                 (bool)          [create]
        Specifies to query the OpenGL renderer.
    
    - vendor : vnd                   (bool)          [create]
        Specifies to query the company responsible for the OpenGL implementation.
    
    - version : ver                  (bool)          [create]
        Specifies to query the OpenGL version.                             Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.openGLExtension`
    """
    pass
def cmdArnoldFlushBackground(*args, **kwargs): pass
def GoToMaxFrame(*args, **kwargs): pass
def CreateSubdivCylinder(*args, **kwargs): pass
def NodeEditorToggleCreateNodePane(*args, **kwargs): pass
def TogglePolygonFaceCenters(*args, **kwargs): pass
def LatticeUVToolOptions(*args, **kwargs): pass
def OpenBossEditor(*args, **kwargs): pass
def AlignSurfaces(*args, **kwargs): pass
def FBXImportUpAxis(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportUpAxis`
    """
    pass
def HypershadeToggleAttrFilter(*args, **kwargs): pass
def renderPassRegistry(*args, **kwargs):
    """
    query information related with render passes.
    
    Flags:
    - channels : ch                  (int)           [create]
        Specify the number of channels for query.
    
    - isPassSupported : ips          (bool)          [create]
        Return whether the pass is supported by the renderer This flag must be specified
        by the flag -passID firstly. The renderer whose default value is the current
        renderer is specified by the flag renderer.
    
    - passID : pi                    (unicode)       [create]
        Specify the render pass ID for query.
    
    - passName : pn                  (bool)          [create]
        Get the pass name for the passID. This flag must be specified by the flag
        -passID firstly.
    
    - renderer : r                   (unicode)       [create]
        Specify a renderer when using this command. By default the current renderer is
        specified.
    
    - supportedChannelCounts : scc   (bool)          [create]
        List channel counts supported by the renderer(specified by the flag -renderer)
        and the specified pass ID. This flag must be specified by the flag -passID
        firstly.
    
    - supportedDataTypes : sdt       (bool)          [create]
        List frame buffer types supported by the renderer(specified by the flag
        -renderer), the specified passID and channels. This flag must be specified by
        the flag -passID and -channels firstly.
    
    - supportedPassSemantics : ps    (bool)          [create]
        List pass semantics supported by the specified passID. This flag must be
        specified by the flag -passId firstly.
    
    - supportedRenderPassNames : spn (bool)          [create]
        List render pass names supported by the renderer(specified by the flag
        -renderer).
    
    - supportedRenderPasses : srp    (bool)          [create]
        List render passes supported by the renderer(specified by the flag -renderer).
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderPassRegistry`
    """
    pass
def polyCompare(*args, **kwargs):
    """
    Compares two Polygonal Geometry objects with a fine control on what to compare.
    If no objects are specified in the command line, then the objects from the
    active list are used. Default behaviour is to compare all flags. Use MEL script
    polyCompareTwoObjects.mel to get formatted output from this command.
    
    Flags:
    - colorSetIndices : ic           (bool)          [create]
        Compare poly1, poly2 for matching Color Indices.
    
    - colorSets : c                  (bool)          [create]
        Compare poly1, poly2 for matching Color Sets.
    
    - edges : e                      (bool)          [create]
        Compare poly1, poly2 for matching Edges.
    
    - faceDesc : fd                  (bool)          [create]
        Compare poly1, poly2 for matching Face Descriptions. Face descriptions describe
        the topology of a face, for example number and orientation of edges, number of
        topology of any holes in the face etc.
    
    - userNormals : un               (bool)          [create]
        Compare poly1, poly2 for matching User Normals.
    
    - uvSetIndices : iuv             (bool)          [create]
        Compare poly1, poly2 for matching UV Indices.
    
    - uvSets : uv                    (bool)          [create]
        Compare poly1, poly2 for matching UV Sets.
    
    - vertices : v                   (bool)          [create]
        Compare poly1, poly2 for matching Vertices.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCompare`
    """
    pass
def PaintToonProfileColor(*args, **kwargs): pass
def RenameCurrentSet(*args, **kwargs): pass
def FBXRead(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXRead`
    """
    pass
def container(*args, **kwargs): pass
def PickWalkLeft(*args, **kwargs): pass
def HighlightWhatsNew(*args, **kwargs): pass
def IncreaseGammaFine(*args, **kwargs): pass
def showWindow(*args, **kwargs):
    """
    Make a window visible. If no window is specified then the current window (most
    recently created) is used. See also the windowcommand's vis/visibleflag. If the
    specified window is iconified, it will be opened.
    
    
    Derived from mel command `maya.cmds.showWindow`
    """
    pass
def setKeyframeBlendshapeTargetWts(*args, **kwargs):
    """
    This command can be used to keyframe per-point blendshape target weights. It
    operates on the currently selected objects as follows. When the base object is
    selected, then the target weights are keyed for all targets. When only target
    shapes are selected, then the weights for thoses targets are keyframed.
    
    
    Derived from mel command `maya.cmds.setKeyframeBlendshapeTargetWts`
    """
    pass
def PreviousManipulatorHandle(*args, **kwargs): pass
def HypershadeOpenSpreadSheetWindow(*args, **kwargs): pass
def DisplayHairCurvesRestPosition(*args, **kwargs): pass
def GraphEditorNormalizedView(*args, **kwargs): pass
def createDisplayLayer(*args, **kwargs): pass
def CreatePoseInterpolatorOptions(*args, **kwargs): pass
def AddSelectionAsCombinationTargetOptions(*args, **kwargs): pass
def CopyKeysOptions(*args, **kwargs): pass
def polyWarpImage(*args, **kwargs):
    """
    Flags:
    - background : bg                (int, int, int) []
    
    - bilinear : b                   (bool)          []
    
    - fileFormat : ff                (unicode)       []
    
    - inputName : inputName          (unicode)       []
    
    - inputUvSetName : iuv           (unicode)       []
    
    - noAlpha : na                   (bool)          []
    
    - outputName : on                (unicode)       []
    
    - outputUvSetName : ouv          (unicode)       []
    
    - overwrite : o                  (bool)          []
    
    - tiled : t                      (bool)          []
    
    - xResolution : xr               (int)           []
    
    - yResolution : yr               (int)           []
    
    
    Derived from mel command `maya.cmds.polyWarpImage`
    """
    pass
def paneLayout(*args, **kwargs): pass
def internalVar(*args, **kwargs):
    """
    This command returns the values of internal variables.  No modification of these
    variables is supported.
    
    Flags:
    - userAppDir : uad               (bool)          [create]
        Return the user application directory.
    
    - userBitmapsDir : ubd           (bool)          [create]
        Return the user bitmaps prefs directory.
    
    - userHotkeyDir : uhk            (bool)          [create]
        Return the user hotkey directory.
    
    - userMarkingMenuDir : umm       (bool)          [create]
        Return the user marking menu directory.
    
    - userPrefDir : upd              (bool)          [create]
        Return the user preference directory.
    
    - userPresetsDir : ups           (bool)          [create]
        Return the user presets directory.
    
    - userScriptDir : usd            (bool)          [create]
        Return the user script directory.
    
    - userShelfDir : ush             (bool)          [create]
        Return the user shelves directory.
    
    - userTmpDir : utd               (bool)          [create]
        Return a temp directory.  Will check for TMPDIR environment variable, otherwise
        will return the current directory.
    
    - userWorkspaceDir : uwd         (bool)          [create]
        Return the user workspace directory (also known as the projects directory).
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.internalVar`
    """
    pass
def keyframeRegionScaleKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to scale keyframes within the
    keyframe region of the dope sheet editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - scaleSpecifiedKeys : ssk       (bool)          [query,edit]
        Determines if only the specified keys should be scaled. If false, the non-
        selected keys will be adjusted during the scale. The default is true.
    
    - type : typ                     (unicode)       [edit]
        rect | manip Specifies the type of scale manipulator to use
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionScaleKeyCtx`
    """
    pass
def DopeSheetEditor(*args, **kwargs): pass
def geometryMergeCache(*args, **kwargs): pass
def Squash(*args, **kwargs): pass
def ExportDeformerWeights(*args, **kwargs): pass
def ShapeEditorSelectNone(*args, **kwargs): pass
def NodeEditorGridToggleSnap(*args, **kwargs): pass
def replaceCacheFrames(*args, **kwargs): pass
def MoveSurfaceSeam(*args, **kwargs): pass
def NodeEditorToggleZoomOut(*args, **kwargs): pass
def melOptions(*args, **kwargs):
    """
    Set and query options that affect the behavior of Maya's Embedded Language
    (MEL).                In query mode, return type is based on queried flag.
    
    Flags:
    - duplicateVariableWarnings : dvw (bool)          [create,query]
        When turned on, this option will cause a warning to be generated whenever a MEL
        variable is declared within the same scope as another variable with the same
        name. The warnings will be generated when the script is sourced, not when it is
        executed. Usually these warnings indicate an error in the script. On query the
        current setting of the option will be returned. The corresponding preference
        optionVar is melDuplicateVariableWarnings.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.melOptions`
    """
    pass
def dR_selectModeRaycast(*args, **kwargs): pass
def HypergraphDecreaseDepth(*args, **kwargs): pass
def animView(*args, **kwargs):
    """
    This command allows you to specify the current view range within an animation
    editor. In query mode, return type is based on queried flag.
    
    Flags:
    - endTime : et                   (time)          []
        End time to display within the editor
    
    - maxValue : max                 (float)         []
        Upper value to display within the editor
    
    - minValue : min                 (float)         []
        Lower value to display within the editor
    
    - nextView : nv                  (bool)          [edit]
        Switches to the next view.
    
    - previousView : pv              (bool)          [edit]
        Switches to the previous view.
    
    - startTime : st                 (time)          []
        Start time to display within the editor                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.animView`
    """
    pass
def textFieldButtonGrp(*args, **kwargs): pass
def NodeEditorExplodeCompound(*args, **kwargs): pass
def timeEditorBakeClips(*args, **kwargs):
    """
    This command is used to bake Time Editor clips and to blend them into a single
    clip.
    
    Flags:
    - bakeToAnimSource : bas         (unicode)       [create]
        Bake/merge the selected clips into the animation source.
    
    - bakeToClip : btc               (unicode)       [create]
        Bake/merge the selected clips into a clip.
    
    - clipId : id                    (int)           [create]
        Clip IDs of the clips to bake.
    
    - combineLayers : cl             (bool)          [create]
        Combine the layers of the input clip.
    
    - forceSampling : fs             (bool)          [create]
        Force sampling on the whole time range when baking.
    
    - keepOriginalClip : koc         (bool)          [create]
        Keep the source clips after baking.
    
    - path : pt                      (unicode)       [create]
        Full path of clips on which to operate. For example: composition1|track1|group;
        composition1|track1|group|track2|clip1.
    
    - sampleBy : sb                  (time)          [create]
        Sampling interval when baking crossfades and timewarps.
    
    - targetTrackIndex : tti         (int)           [create]
        Specify the target track when baking containers. If targetTrackIndex is
        specified, the track index within the specified node is used. If
        targetTrackIndex is not specified or is the default value (-1), the track index
        within the current node is used. If targetTrackIndex is -2, a new track will be
        created.
    
    - targetTracksNode : ttn         (unicode)       [create]
        Target tracks node when baking containers.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeEditorBakeClips`
    """
    pass
def CreateSubdivRegion(*args, **kwargs): pass
def DeleteAllParticles(*args, **kwargs): pass
def assignCommand(*args, **kwargs): pass
def PublishNode(*args, **kwargs): pass
def InsertIsoparmsOptions(*args, **kwargs): pass
def projectionContext(*args, **kwargs):
    """
    Set the context for projection manips
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.projectionContext`
    """
    pass
def dR_multiCutPointCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_multiCutPointCmd`
    """
    pass
def HypershadeOpenBrowserWindow(*args, **kwargs): pass
def NURBSTexturePlacementTool(*args, **kwargs): pass
def TwoSideBySideViewArrangement(*args, **kwargs): pass
def polyChipOff(*args, **kwargs): pass
def TimeEditorClipResetTiming(*args, **kwargs): pass
def HypershadeDeleteDuplicateShadingNetworks(*args, **kwargs): pass
def cmdArnoldExportStandIn(*args, **kwargs): pass
def dR_extrudePress(*args, **kwargs): pass
def baseTemplate(*args, **kwargs):
    """
    This is the class for the commands that edit and/or query templates.
    In query mode, return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          [query]
        Returns true or false depending upon whether the specified template exists. When
        used with the matchFile argument, the query will return true if the template
        exists and the filename it was loaded from matches the filename given.
    
    - fileName : fn                  (unicode)       [create,query]
        Specifies the filename associated with the template.  This argument can be used
        in conjunction with load, save or query modes. If no filename is associated with
        a template, a default file name based on the template name will be used.  It is
        recommended but not required that the filename and template name correspond.
    
    - force : f                      (bool)          [create]
        This flag is used with some actions to allow them to proceed with an overwrite
        or destructive operation. When used with load, it will allow an existing
        template to be reloaded from a file.  When used in create mode, it will allow an
        existing template to be recreated (for example when using fromContainer argument
        to regenerate a template).
    
    - load : l                       (bool)          []
        Load an existing template from a file. If a filename is specified for the
        template, the entire file (and all templates in it) will be loaded. If no file
        is specified, a default filename will be assumed, based on the template name.
    
    - matchFile : mf                 (unicode)       [query]
        Used in query mode in conjunction with other flags this flag specifies an
        optional file name that is to be matched as part of the query operation.
    
    - silent : si                    (bool)          [create,query,edit]
        Silent mode will suppress any error or warning messages that would normally be
        reported from the command execution.  The return values are unaffected.
    
    - unload : u                     (bool)          [create]
        Unload the specified template.  This action will not delete the associated
        template file if one exists, it merely removes the template definition from the
        current session.
    
    - viewList : vl                  (unicode)       [create,query]
        Used in query mode, returns a list of all views defined on the template.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.baseTemplate`
    """
    pass
def AddInfluenceOptions(*args, **kwargs): pass
def CurveEditTool(*args, **kwargs): pass
def SelectAllFollicles(*args, **kwargs): pass
def modelEditor(*args, **kwargs): pass
def texSculptCacheContext(*args, **kwargs):
    """
    This is a tool context command for uv cache sculpting tool.              In
    query mode, return type is based on queried flag.
    
    Flags:
    - adjustSize : asz               (bool)          [edit]
        If true, puts the tool into the mode where dragging the mouse will edit the
        brush size. If false, puts the tool back into the previous sculpt mode.
    
    - adjustStrength : ast           (bool)          [edit]
        If true, puts the tool into the mode where dragging the mouse will edit the
        brush strength. If false, puts the tool back into the previous sculpt mode.
    
    - direction : d                  (int)           [query,edit]
        Specifies how the brush determines where the uvs go.
    
    - exists : ex                    (bool)          []
    
    - falloffType : ft               (int)           [query,edit]
        Specifies how the brush determines which uvs to affect.
    
    - floodPin : fp                  (float)         [create,edit]
        Sets the pin value for each UV to the given value
    
    - grabTwist : gtw                (bool)          [create,query,edit]
        If true, the grab brush twists the UVs
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - inverted : inv                 (bool)          [create,query,edit]
        If true, inverts the effect of the brush.
    
    - mode : m                       (unicode)       [query,edit]
        Specifies the type of sculpting effect the brush will perform.
    
    - name : n                       (unicode)       []
    
    - pinsmooth : ps                 (bool)          []
    
    - pinsmoothandpaint : psp        (bool)          []
    
    - sculptFalloffCurve : sfc       (unicode)       [query,edit]
        Specifies the falloff curve that affects the brush.
    
    - showBrushRingDuringStroke : sbr (bool)          [query,edit]
        Specifies whether or not to show the brush ring during stroke.
    
    - size : sz                      (float)         [query,edit]
        Specifies the world-space size of the current brush.
    
    - strength : st                  (float)         [query,edit]
        Specifies the world-space strength of the current brush.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texSculptCacheContext`
    """
    pass
def PolySelectToolOptions(*args, **kwargs): pass
def AttachSelectedAsSourceField(*args, **kwargs): pass
def SelectFacetMask(*args, **kwargs): pass
def xgmExportToP3D(*args, **kwargs):
    """
    Flags:
    - curves : c                     (bool)          []
    
    - description : d                (unicode)       []
    
    - directory : dir                (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmExportToP3D`
    """
    pass
def dR_snapToBackfacesTGL(*args, **kwargs): pass
def arnoldImportAss(*args, **kwargs):
    """
    Flags:
    - filename : f                   (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldImportAss`
    """
    pass
def PointOnCurve(*args, **kwargs): pass
def TimeEditorCutClips(*args, **kwargs): pass
def PolyMergeOptions(*args, **kwargs): pass
def exclusiveLightCheckBox(*args, **kwargs): pass
def SetMeshBulgeTool(*args, **kwargs): pass
def OutlinerToggleReferenceNodes(*args, **kwargs): pass
def polyProjectCurve(*args, **kwargs): pass
def ConvertHairSelectionToFollicles(*args, **kwargs): pass
def HypershadeUpdatePSDNetworks(*args, **kwargs): pass
def CutUVsWithoutHotkey(*args, **kwargs): pass
def TransferAttributeValues(*args, **kwargs): pass
def dR_cameraToPoly(*args, **kwargs): pass
def CreateMashNetwork(*args, **kwargs): pass
def UVEditorFrameSelected(*args, **kwargs): pass
def createPolyTorusCtx(*args, **kwargs):
    """
    Flags:
    - attachToSectionRadius : asr    (bool)          []
    
    - attachToSubdivisionsAxis : asa (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sectionRadius : sr             (float)         []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    - twist : tw                     (float)         []
    
    
    Derived from mel command `maya.cmds.createPolyTorusCtx`
    """
    pass
def fluidReplaceCacheOpt(*args, **kwargs): pass
def HIKInitAxis(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.HIKInitAxis`
    """
    pass
def DisplayCurrentHairCurves(*args, **kwargs): pass
def RevolveOptions(*args, **kwargs): pass
def SelectAllPolygonGeometry(*args, **kwargs): pass
def suitePrefs(*args, **kwargs):
    """
    This command sets the mouse and keyboard interaction mode for Maya and other
    Suites applications (if Maya is part of a Suites install).
    
    Flags:
    - applyToSuite : ats             (unicode)       [create]
        Apply the mouse and keyboard interaction settings for the given application to
        all applications in the Suite (if Maya is part of a Suites install). Valid
        values are Maya, 3dsMax, or undefined, which signifies that each app is to use
        their own settings.
    
    - installedAsSuite : ias         (bool)          [create]
        Returns true if Maya is part of a Suites install, false otherwise.
    
    - isCompleteSuite : ics          (bool)          [create]
        Returns true if the Suites install contains all Entertainment Creation Suite
        products, false otherwise.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.suitePrefs`
    """
    pass
def BevelPlus(*args, **kwargs): pass
def SelectPreviousObjects3dsMax(*args, **kwargs): pass
def threadCount(*args, **kwargs):
    """
    This command sets the number of threads to be used by Maya in regions of code
    that are multithreaded. By default the number of threads is equal to the number
    of logical CPUs, not the number of physical CPUs. Logical CPUs are different
    from physical CPUs in the following ways:A physical CPU with hyperthreading
    counts as two logical CPUsA dual-core CPU counts as two logical CPUsWith some
    workloads, using one thread per logical CPU may not perform well. This is
    sometimes the case with hyperthreading. It is worth experimenting with different
    numbers of threads to see which gives the best performance. Note that having
    more threads can mean Maya uses more memory. Setting a value of zero means the
    number of threads used will equal the number of logical processors in the
    system. In query mode, return type is based on queried flag.
    
    Flags:
    - numberOfThreads : n            (int)           [create,query]
        Sets the number of threads to use                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.threadCount`
    """
    pass
def xgmExport(*args, **kwargs):
    """
    Flags:
    - exporter : x                   (unicode)       []
    
    - progress : pb                  (bool)          []
    
    - visibleOnly : vo               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmExport`
    """
    pass
def HypershadeTransferAttributeValues(*args, **kwargs): pass
def NodeEditorRestoreLastClosedTab(*args, **kwargs): pass
def OpenMenuFinder(*args, **kwargs): pass
def SelectNone(*args, **kwargs): pass
def PaintOperationMarkingMenuRelease(*args, **kwargs): pass
def AimConstraintOptions(*args, **kwargs): pass
def fluidAppendOpt(*args, **kwargs): pass
def FireOptions(*args, **kwargs): pass
def editDisplayLayerGlobals(*args, **kwargs):
    """
    Edit the parameter values common to all display layers.  Some of these
    paremeters, eg. baseId and mergeType, are stored as preferences and some, eg.
    currentDisplayLayer, are stored in the file.
    
    Flags:
    - baseId : bi                    (int)           [create,query]
        Set base layer ID.  This is the number at which new layers start searching for a
        unique ID.
    
    - currentDisplayLayer : cdl      (PyNode)        [create,query]
        Set current display layer; ie. the one that all new objects are added to.
    
    - mergeType : mt                 (int)           [create,query]
        Set file import merge type.  Valid values are 0, none, 1, by number, and 2, by
        name.
    
    - useCurrent : uc                (bool)          [create,query]
        Set whether or not to enable usage of the current display layer as the
        destination for all new nodes.                              Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editDisplayLayerGlobals`
    """
    pass
def GraphEditorFramePlaybackRange(*args, **kwargs): pass
def TruncateHairCache(*args, **kwargs): pass
def crashInfoCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.crashInfoCmd`
    """
    pass
def polyExtrudeFacet(*args, **kwargs):
    """
    Extrude faces. Faces can be extruded separately or together, and manipulations
    can be performed either in world or object space.
    
    Flags:
    - attraction : att               (float)         [create,query,edit]
        Attraction, related to magnet. The range is [-2.0, 2.0]. Default:0.0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createCurve : cc               (bool)          [create]
        If true then the operation can create a curve.
    
    - divisions : d                  (int)           [create,query,edit]
        How many divisions should the extrusion be broken-up into. Default:1
    
    - frozen : fzn                   (bool)          []
    
    - gain : ga                      (float)         [create,query,edit]
        Gain factor per component. Can be painted using Artisan. Default:1.0
    
    - gravity : g                    (float, float, float) [create,query,edit]
        The gravity vector. Default:0.0, -1.0, 0.0
    
    - gravityX : gx                  (float)         [create,query,edit]
        Gravity X coord.
    
    - gravityY : gy                  (float)         [create,query,edit]
        Gravity Y coord.
    
    - gravityZ : gz                  (float)         [create,query,edit]
        Gravity Z coord.
    
    - inputCurve : inc               (PyNode)        [create]
        This flag specifies the name of the curve to be used as input for the operation.
    
    - keepFacesTogether : kft        (bool)          [create,query,edit]
        How to extrude faces. If on, faces are pulled together (connected ones stay
        connected), otherwise they are pulled independently. Default:true
    
    - keepFacetTogether : xft        (bool)          [create,query,edit]
        How to extrude edges. If on, extruded faces produced from the edges being
        extruded will be kept together. Otherwise they are pulled independently.
        Default:true
    
    - localCenter : lc               (int)           [create,query,edit]
        Local center on the edge : 0=Middle point, 1=Start point, 2=End point. Default:0
    
    - localDirection : ld            (float, float, float) [create,query,edit]
        Direction to determine X axis for local space. Default:1.0, 0.0, 0.0
    
    - localDirectionX : ldx          (float)         [create,query,edit]
        X coord of the X axis.
    
    - localDirectionY : ldy          (float)         [create,query,edit]
        Y coord of the X axis.
    
    - localDirectionZ : ldz          (float)         [create,query,edit]
        Z coord of the X axis.
    
    - localRotate : lr               (float, float, float) [create,query,edit]
        The local rotations. Default:0.0, 0.0, 0.0
    
    - localRotateX : lrx             (float)         [create,query,edit]
        Local rotate X coord. The range is [0, 360].
    
    - localRotateY : lry             (float)         [create,query,edit]
        Local rotate Y coord. The range is [0, 360].
    
    - localRotateZ : lrz             (float)         [create,query,edit]
        Local rotate Z coord : Rotation along the normal. The range is [0, 360].
    
    - localScale : ls                (float, float, float) [create,query,edit]
        Local Scale. Default:1.0, 1.0, 1.0
    
    - localScaleX : lsx              (float)         [create,query,edit]
        Scale X coord.
    
    - localScaleY : lsy              (float)         [create,query,edit]
        Scale Y coord.
    
    - localScaleZ : lsz              (float)         [create,query,edit]
        Scale Z coord.
    
    - localTranslate : lt            (float, float, float) [create,query,edit]
        Local translate. Default:0.0, 0.0, 0.0
    
    - localTranslateX : ltx          (float)         [create,query,edit]
        Local translation X coord.
    
    - localTranslateY : lty          (float)         [create,query,edit]
        Local translation Y coord.
    
    - localTranslateZ : ltz          (float)         [create,query,edit]
        Local translation Z coord : Move along the normal.
    
    - magnX : mx                     (float)         [create,query,edit]
        Magnet X coord.
    
    - magnY : my                     (float)         [create,query,edit]
        Magnet Y coord.
    
    - magnZ : mz                     (float)         [create,query,edit]
        Magnet Z coord.
    
    - magnet : m                     (float, float, float) [create,query,edit]
        The magnet vector. Default:0.0, 0.0, 0.0
    
    - maya2012 : m12                 (bool)          []
    
    - maya2018 : m18                 (bool)          []
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - offset : off                   (float)         [create,query,edit]
        Local offset. Faces are moved this distance towards the inside of the face.
        Default:0.0
    
    - pivot : pvt                    (float, float, float) [create,query,edit]
        The pivot for scaling and rotation. Default:0.0, 0.0, 0.0
    
    - pivotX : pvx                   (float)         [create,query,edit]
        Pivot X coord.
    
    - pivotY : pvy                   (float)         [create,query,edit]
        Pivot Y coord.
    
    - pivotZ : pvz                   (float)         [create,query,edit]
        Pivot Z coord.
    
    - random : ran                   (float)         [create,query,edit]
        Random value for all parameters. Default:0.0
    
    - reverseAllFaces : raf          (bool)          [create,query,edit]
        If on, original faces are reversed in case of extruding all faces. Default:true
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        Rotation angles around X, Y, Z. Default:0.0, 0.0, 0.0
    
    - rotateX : rx                   (float)         [create,query,edit]
        Rotation angle around X.
    
    - rotateY : ry                   (float)         [create,query,edit]
        Rotation angle around Y.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        Rotation angle around Z.
    
    - scale : s                      (float, float, float) [create,query,edit]
        Scaling vector. Default:1.0, 1.0, 1.0
    
    - scaleX : sx                    (float)         [create,query,edit]
        Scale X coord.
    
    - scaleY : sy                    (float)         [create,query,edit]
        Scale Y coord.
    
    - scaleZ : sz                    (float)         [create,query,edit]
        Scale Z coord.
    
    - smoothingAngle : sma           (float)         [create,query,edit]
        Angle below which new edges will be smoothed Default:kPi/6.0
    
    - taper : tp                     (float)         [create,query,edit]
        Taper or Scale along the extrusion path Default:1.0
    
    - taperCurve_FloatValue : cfv    (float)         [create,query,edit]
        ?????
    
    - taperCurve_Interp : ci         (int)           [create,query,edit]
        ????? Default:0
    
    - taperCurve_Position : cp       (float)         [create,query,edit]
        ?????
    
    - thickness : tk                 (float)         [create,query,edit]
        Faces are moved outwards from their original position to give the object a
        consistent thickess. Default:0.0f
    
    - translate : t                  (float, float, float) [create,query,edit]
        Translation vector. Default:0.0, 0.0, 0.0
    
    - translateX : tx                (float)         [create,query,edit]
        Translation X coord.
    
    - translateY : ty                (float)         [create,query,edit]
        Translation Y coord.
    
    - translateZ : tz                (float)         [create,query,edit]
        Translation Z coord.
    
    - twist : twt                    (float)         [create,query,edit]
        Twist or Rotation along the extrusion path Default:0.0
    
    - weight : w                     (float)         [create,query,edit]
        The weight, related to gravity. Default:0.0
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyExtrudeFacet`
    """
    pass
def CreatePolygonCubeOptions(*args, **kwargs): pass
def ImportAnim(*args, **kwargs): pass
def ResampleCurveOptions(*args, **kwargs): pass
def dR_customPivotToolRelease(*args, **kwargs): pass
def radioButtonGrp(*args, **kwargs): pass
def PaintToonLineOpacity(*args, **kwargs): pass
def SelectUVOverlappingComponents(*args, **kwargs): pass
def PreInfinityConstant(*args, **kwargs): pass
def OpenLearningChannel(*args, **kwargs): pass
def u3dLayout(*args, **kwargs):
    """
    Flags:
    - layoutScaleMode : ls           (int)           []
    
    - multiObject : m                (bool)          []
    
    - mutations : mut                (int)           []
    
    - packBox : box                  (float, float, float, float) []
    
    - preRotateMode : rot            (int)           []
    
    - preScaleMode : scl             (int)           []
    
    - resolution : res               (int)           []
    
    - rotateMax : rmx                (float)         []
    
    - rotateMin : rmn                (float)         []
    
    - rotateStep : rst               (float)         []
    
    - shellSpacing : spc             (float)         []
    
    - tileAssignMode : ta            (int)           []
    
    - tileMargin : mar               (float)         []
    
    - tileU : u                      (int)           []
    
    - tileV : v                      (int)           []
    
    - translate : trs                (bool)          []
    
    
    Derived from mel command `maya.cmds.u3dLayout`
    """
    pass
def savePrefs(*args, **kwargs):
    """
    This command saves preferences to disk. If no flags are specified then all pref
    types get saved out.
    
    Flags:
    - colors : c                     (bool)          [create]
        Save the color prefs to disk
    
    - general : g                    (bool)          [create]
        Save the general prefs to disk (optionVars)
    
    - hotkeys : hk                   (bool)          [create]
        Save the hotkeys to disk
    
    - menuSets : ms                  (bool)          [create]
        Save the menuSet preferences to disk
    
    - plugins : pl                   (bool)          [create]
        Save the plug-in prefs to disk
    
    - uiLayout : ui                  (bool)          [create]
        Save each window's size and position to disk                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.savePrefs`
    """
    pass
def pointPosition(*args, **kwargs): pass
def CVHardnessOptions(*args, **kwargs): pass
def MirrorPolygonGeometryOptions(*args, **kwargs): pass
def writeTake(*args, **kwargs):
    """
    This action writes a take from a device with recorded data to a take (.mov)
    file. The writeTake action can also write the virtual definition of a device.
    See also: recordDevice, readTake, defineVirtualDevice
    
    Dynamic library stub function 
    
    Flags:
    - angle : a                      (unicode)       [create]
        Sets the angular unit used in the take. Valid strings are
        [deg|degree|rad|radian]. C: The default is the current user angular unit.
    
    - device : d                     (unicode)       [create]
        Specifies the device that contains the take. This is a required argument. If the
        device does not contain a take, the action will fail.
    
    - linear : l                     (unicode)       [create]
        Sets the linear unit used in the take. Valid strings are [mm|millimeter|cm|centi
        meter|m|meter|km|kilometer|in|inch|ft|foot|yd|yard|mi|mile] C: The default is
        the current user linear unit.
    
    - noTime : nt                    (bool)          [create]
        The take (.mov) file will not contain time stamps. C: The default is to put time
        stamps in the take file.
    
    - precision : pre                (int)           [create]
        Sets the number of digits to the right of the decimal place in the take file.C:
        The default is 6.
    
    - take : t                       (unicode)       [create]
        Write out the take to a file with the specified name.
    
    - virtualDevice : vd             (unicode)       [create]
        Writes out the virtual device definition to a mel script with the specified file
        name.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.writeTake`
    """
    pass
def HideFluids(*args, **kwargs): pass
def ConvertSelectionToShell(*args, **kwargs): pass
def ToggleBackfaceCulling(*args, **kwargs): pass
def sbs_AffectTheseAttributes(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_AffectTheseAttributes`
    """
    pass
def dR_DoCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_DoCmd`
    """
    pass
def itemFilterRender(*args, **kwargs):
    """
    Flags:
    - anyTextures : at               (bool)          []
    
    - category : cat                 (unicode)       []
    
    - classification : cls           (unicode)       []
    
    - exclusiveLights : exl          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - lightSets : ls                 (bool)          []
    
    - lights : l                     (bool)          []
    
    - linkedLights : ll              (bool)          []
    
    - listBuiltInFilters : lbf       (bool)          []
    
    - listOtherFilters : lof         (bool)          []
    
    - listUserFilters : luf          (bool)          []
    
    - negate : neg                   (bool)          []
    
    - nodeClassification : nc        (unicode)       []
    
    - nonExclusiveLights : nxl       (bool)          []
    
    - nonIlluminatingLights : nil    (bool)          []
    
    - parent : p                     (unicode)       []
    
    - postProcess : pp               (bool)          []
    
    - renderUtilityNode : run        (bool)          []
    
    - renderableObjectSets : ros     (bool)          []
    
    - renderingNode : rn             (bool)          []
    
    - shaders : s                    (bool)          []
    
    - text : t                       (unicode)       []
    
    - textures2d : t2d               (bool)          []
    
    - textures3d : t3d               (bool)          []
    
    - texturesProcedural : tp        (bool)          []
    
    
    Derived from mel command `maya.cmds.itemFilterRender`
    """
    pass
def SculptSurfacesToolOptions(*args, **kwargs): pass
def EnableParticles(*args, **kwargs): pass
def artAttr(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.artAttr`
    """
    pass
def SinglePerspectiveViewLayout(*args, **kwargs): pass
def copyNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.copyNode`
    """
    pass
def CircularFillet(*args, **kwargs): pass
def GroupOptions(*args, **kwargs): pass
def sampleImage(*args, **kwargs):
    """
    The sampleImage command is used to control parameters of sample images, such as
    swatches in the multilister. The fast option turns on or off some rendering
    cheats which speed up the render but may cause edges to look ragged. The
    resolution option specifies the width in pixels of the image which will be
    rendered for the specified node. Note that the width of the image is also the
    height of the image since sample images are square.
    
    Flags:
    - fastSample : f                 (bool)          [create]
        If fast but rough rendering for sampleImage is to be used
    
    - resolution : r                 (<type 'int'>, PyNode) [create]
        The first argument to this flag specifies a resolution in pixels. The second
        argument specifies a dependency node. The effect of this flag is that further
        sample image renderings for the specified node will be made at the specified
        resolution.                  Flag can have multiple arguments, passed either as
        a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sampleImage`
    """
    pass
def TensionOptions(*args, **kwargs): pass
def AddToCurrentScene3dsMax(*args, **kwargs): pass
def HideSmoothSkinInfluences(*args, **kwargs): pass
def ReverseCurve(*args, **kwargs): pass
def workspaceControl(*args, **kwargs): pass
def gradientControlNoAttr(*args, **kwargs): pass
def CreateEmptyUVSet(*args, **kwargs): pass
def FBIKLabelMiddleToe(*args, **kwargs): pass
def CreatePondOptions(*args, **kwargs): pass
def DetachSkeleton(*args, **kwargs): pass
def ProjectCurveOnSurfaceOptions(*args, **kwargs): pass
def ShowDynamicsUI(*args, **kwargs): pass
def autoSave(*args, **kwargs):
    """
    Provides an interface to the auto-save mechanism.                In query mode,
    return type is based on queried flag.
    
    Flags:
    - destination : dst              (int)           [create,query]
        Sets the option for where auto-save files go. 0 - auto-saves go into the
        workspace autosave folder 1 - auto-saves go into the named folder (set with the
        -folder flag) 2 - auto-saves go into a folder set by an environment variable
        (MAYA_AUTOSAVE_FOLDER)
    
    - destinationFolder : df         (bool)          [query]
        Queries the actual destination folder for auto-saves, based on the current
        setting of the -destination flag, workspace rules and environment variables.
        Resolves environment variables etc. and makes any relative path absolute
        (resolved relative to the workspace root). The returned string will end with a
        trailing separator ('/').
    
    - enable : en                    (bool)          [create,query]
        Enables or disables auto-saves.
    
    - folder : fol                   (unicode)       [create,query]
        Sets the folder for auto-saves used if the destination option is 1.
    
    - interval : int                 (float)         [create,query]
        Sets the interval between auto-saves (in seconds). The default interval is 600
        seconds (10 minutes).
    
    - limitBackups : lim             (bool)          [create,query]
        Sets whether the number of auto-save files is limited.
    
    - maxBackups : max               (int)           [create,query]
        Sets the maximum number of auto-save files, if limiting is in effect.
    
    - perform : p                    (bool)          [create]
        Invokes the auto-save process.
    
    - prompt : prm                   (bool)          [create,query]
        Sets whether the auto-save prompts the user before auto-saving.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.autoSave`
    """
    pass
def polyExtrudeVertex(*args, **kwargs): pass
def RemoveBifrostFoamMask(*args, **kwargs): pass
def GeometryConstraintOptions(*args, **kwargs): pass
def OpenXGenEditor(*args, **kwargs): pass
def ShowNonlinears(*args, **kwargs): pass
def GpuCacheExportAll(*args, **kwargs): pass
def HypershadeCollapseAsset(*args, **kwargs): pass
def curveCVCtx(*args, **kwargs):
    """
    The curveCVCtx command creates a new context for creating curves by placing
    control vertices (CVs).
    
    Flags:
    - bezier : bez                   (bool)          [create,query,edit]
    
    - degree : d                     (int)           [create,query,edit]
        Curve degree
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - multEndKnots : me              (bool)          [create,query,edit]
        Specify if multiple end knots are to be created.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - preserveShape : ps             (bool)          [create,query,edit]
        Set this flag to make the operation preserve the shape
    
    - rational : rl                  (bool)          [create,query,edit]
        Should the curve be rational?
    
    - refit : rf                     (bool)          [create,query,edit]
        Set this flag to refit the curve
    
    - symmetry : sm                  (bool)          [create,query,edit]
        Specify if symmetry is to be used
    
    - uniform : un                   (bool)          [create,query,edit]
        Should the curve use uniform parameterization?                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveCVCtx`
    """
    pass
def SmoothingDisplayShowBoth(*args, **kwargs): pass
def AddCombinationTargetOptions(*args, **kwargs): pass
def CreateTextureDeformer(*args, **kwargs): pass
def BakeSimulation(*args, **kwargs): pass
def UnpublishChildAnchor(*args, **kwargs): pass
def FBXImportLights(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportLights`
    """
    pass
def displacementToPoly(*args, **kwargs):
    """
    Command bakes geometry with displacement mapping into a polygonal object.
    
    Flags:
    - findBboxOnly : fbb             (bool)          [create,query,edit]
        When used, only the bounding box scale for the displaced object is found.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displacementToPoly`
    """
    pass
def listConnections(*args, **kwargs): pass
def SetMeshFreezeTool(*args, **kwargs): pass
def FBXExportLights(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportLights`
    """
    pass
def defineDataServer(*args, **kwargs):
    """
    Connects to the specified data servername, creating a named device which then
    can be attached to device handlers. When the device is defined, it queries
    queries the server for data axis information.  The CapChannelspresent are
    represented as axis in form channelName.usagefor scalar channels and
    channelName.componentfor compound channels. See listInputDeviceAxesto list axis
    names. Note that undoing defineDataServer -d myDevice-s myServerdoes not break
    the connection with the data server until it cannot be redone.  Executing any
    other command (sphere for example) will cause this to occur.  Similarly, the
    command defineDataServer -d myDevice-u does not break the connection with the
    data server until it cannot be undone.  Either flushUndo, or the
    'defineDataServer' command fallingoff the end of the undo queue causes this to
    occur, and the connection. to be broken. No return value.
    
    Dynamic library stub function 
    
    Flags:
    - device : d                     (unicode)       [create]
        specified the device name to be given to the server connection. device name must
        be unique or the command fails.
    
    - server : s                     (unicode)       [create]
        specifies the name of the server with which the define device connects, and can
        be specifiied in two ways  name-- the name of the server socketServer names of
        the form nameconnect to the server socket on the localhost corresponding to
        name.  If namedoes not begin with /, then /tmp/nameis used. This is the default
        behavior of most servers. If namebegins with /, namedenotes the full path to the
        socket. host:service- a udp service on the specified host.The servicecan be any
        one of a udp service name,a port number,or a named service of tcpmux,and they
        are found in that order. If hostis omitted, the localhost is used. In any case,
        if the server cannot be found, the device is not defined (created) and the
        command fails.
    
    - undefine : u                   (bool)          [create]
        undefines (destroys) the dataServer device, closing the connection with the
        server.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.defineDataServer`
    """
    pass
def XgmSplineCacheImport(*args, **kwargs): pass
def PerspGraphOutlinerLayout(*args, **kwargs): pass
def SetKeyAnimated(*args, **kwargs): pass
def polyPlatonic(*args, **kwargs):
    """
    Flags:
    - primitive : p                  (int)           []
    
    - radius : r                     (float)         []
    
    - sphericalInflation : i         (float)         []
    
    - subdivisionMode : sm           (int)           []
    
    - subdivisions : sd              (int)           []
    
    
    Derived from mel command `maya.cmds.polyPlatonic`
    """
    pass
def nClothAppend(*args, **kwargs): pass
def HypershadeRenderTextureRangeOptions(*args, **kwargs): pass
def ToggleSoftEdges(*args, **kwargs): pass
def ShowMeshCloneTargetToolOptions(*args, **kwargs): pass
def offsetCurve(*args, **kwargs): pass
def ConnectJointOptions(*args, **kwargs): pass
def CreateHair(*args, **kwargs): pass
def ShowWrapInfluences(*args, **kwargs): pass
def geometryReplaceCacheFramesOpt(*args, **kwargs): pass
def insertJointCtx(*args, **kwargs):
    """
    The command will create an insert joint context. The insert joint tool inserts
    joints into an existing chain of joints.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.insertJointCtx`
    """
    pass
def UndoViewChange(*args, **kwargs): pass
def ProjectWindow(*args, **kwargs): pass
def EditFluidResolutionOptions(*args, **kwargs): pass
def BakeSimulationOptions(*args, **kwargs): pass
def ViewAlongAxisNegativeX(*args, **kwargs): pass
def lsThroughFilter(*args, **kwargs): pass
def ShowClusters(*args, **kwargs): pass
def HypershadeShowDirectoriesAndFiles(*args, **kwargs): pass
def MoveRotateScaleToolToggleSnapMode(*args, **kwargs): pass
def TextureToGeometry(*args, **kwargs): pass
def XgExportPreset(*args, **kwargs): pass
def OneClickGetContactingAppName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickGetContactingAppName`
    """
    pass
def PaintGeomCacheToolOptions(*args, **kwargs): pass
def adpAnalyticsDialog(*args, **kwargs):
    """
    Flags:
    - desktopAnalytics : da          (bool)          []
    
    
    Derived from mel command `maya.cmds.adpAnalyticsDialog`
    """
    pass
def XgmSetGrabBrushToolOption(*args, **kwargs): pass
def RotateUVsOptions(*args, **kwargs): pass
def Extrude(*args, **kwargs): pass
def FBXImportShowUI(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportShowUI`
    """
    pass
def attachSurface(*args, **kwargs): pass
def DeleteHair(*args, **kwargs): pass
def fluidDeleteCacheFramesOpt(*args, **kwargs): pass
def LevelOfDetailUngroup(*args, **kwargs): pass
def greasePencil(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.greasePencil`
    """
    pass
def CreateCameraOnly(*args, **kwargs): pass
def SelectSurfaceBorderOptions(*args, **kwargs): pass
def TexSculptDeactivateBrushSize(*args, **kwargs): pass
def UnlockCurveLength(*args, **kwargs): pass
def NodeEditorConnectNodeOnCreation(*args, **kwargs): pass
def UnghostAll(*args, **kwargs): pass
def ogs(*args, **kwargs):
    """
    OGS is one of the viewport renderers. As there is a lot of effort involved in
    migrating functionality it will evolve over several releases. As it evolves it
    is prudent to provide safeguards to get the database back to a known state. That
    is the function of this command, similar to how 'dgdirty' is used to restore
    state to the dependency graph.
    
    Flags:
    - deviceInformation : di         (bool)          [create]
        If used then output the current device information.
    
    - disposeReleasableTextures : drt (bool)          [create]
        Clear up all the releasable file textures in GPU memory that are not required
        for rendering.
    
    - dumpTexture : dt               (unicode)       [create]
        If used then dump GPU texture memory usage info (in MB), must be used with FLAG
        gpuMemoryUsed. The final info detail is specified by the string parameter.
        Current available values are: full, total.
    
    - enableHardwareInstancing : hwi (bool)          [create]
        Enables/disables new gpu instancing of instanceable render items in OGS.
    
    - fragmentEditor : fe            (unicode)       [create]
        If used then launch the fragment editor UI.
    
    - fragmentXML : xml              (unicode)       [create]
        Get the fragment XML associated with a shading node.
    
    - gpuMemoryTotal : gmt           (int)           [create,query]
        Get or set the total amount of GPU memory which Maya is allowed to use (in MB).
    
    - gpuMemoryUsed : gpu            (bool)          [create]
        If used then output the estimated amount of GPU memory in use (in MB).
    
    - isLegacyViewportEnabled : lve  (bool)          [query]
        To query if the legacy viewport is enabled.
    
    - isWinRemoteSession : irs       (bool)          [query]
        Query if this is a remote session.
    
    - pause : p                      (bool)          [create,query]
        Toggle pausing VP2 display update
    
    - rebakeTextures : rbt           (bool)          [create]
        If used then re-bake all baked textures for OGS.
    
    - regenerateUVTilePreview : rup  (unicode)       [create]
        If used then regenerate all UV tiles preview textures for OGS.
    
    - reloadTextures : rlt           (bool)          [create]
        If used then reload all textures for OGS.
    
    - reset : r                      (bool)          [create,query]
        If used then reset the entire OGS database for all viewports using it. In query
        mode the number of viewports that would be affected is returned but the reset is
        not actually done.  If no viewport is using OGS then OGS will stop listening to
        DG changes.
    
    - shaderSource : ss              (unicode)       [query]
        Get the shader source for the specified material.
    
    - toggleTexturePaging : ttp      (bool)          [create]
        If used then toggle the default OGS Texture paging mechanism.
    
    - traceRenderPipeline : trp      (bool)          [create]
        Enable debug tracing of the renderer pipeline.                             Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ogs`
    """
    pass
def softModCtx(*args, **kwargs):
    """
    Controls the softMod context.
    
    Flags:
    - dragSlider : ds                (unicode)       [edit]
        Specify the slider mode for hotkey radius resizing.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - falseColor : fc                (bool)          [edit]
        Enable or disable false color display on the soft mod manipulator.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - reset : rst                    (bool)          [query,edit]
        Reset the tool options to their default values.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.softModCtx`
    """
    pass
def dR_softSelDistanceTypeGlobal(*args, **kwargs): pass
def PinSelection(*args, **kwargs): pass
def HIKSetSelectionKey(*args, **kwargs): pass
def iconTextRadioButton(*args, **kwargs): pass
def CreateBifrostAero(*args, **kwargs): pass
def polyCacheMonitor(*args, **kwargs):
    """
    When the cacheInput attribute has a positive value the midModifier node caches
    the output mesh improving performance in computations of downstream nodes. When
    the counter has a zero value the midModifier releases the cached data.
    
    Flags:
    - cacheValue : chv               (bool)          [create]
        Flag to indicate whether the node's cache counter should be incremented or
        decremented. True increments the counter, false decrements the counter.
    
    - nodeName : nm                  (unicode)       [create]
        Name of the node whose cache counter needs to be changed.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCacheMonitor`
    """
    pass
def xgmPointRender(*args, **kwargs):
    """
    Flags:
    - progress : pb                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmPointRender`
    """
    pass
def BakeChannelOptions(*args, **kwargs): pass
def ScriptPaintToolOptions(*args, **kwargs): pass
def ToggleOppositeFlagOfSelectedShapes(*args, **kwargs): pass
def PolyEditEdgeFlowOptions(*args, **kwargs): pass
def OpenStartupMovies(*args, **kwargs): pass
def AddPondDynamicLocator(*args, **kwargs): pass
def HideKinematics(*args, **kwargs): pass
def SelectEdgeRing(*args, **kwargs): pass
def RemoveFromContainerOptions(*args, **kwargs): pass
def TimeEditorClipHoldToggle(*args, **kwargs): pass
def polyAverageNormal(*args, **kwargs):
    """
    Set normals of vertices or vertex-faces to an average value when the vertices
    within a given threshold. First, it sorts out the containing edges, and set them
    to be soft, if it is possible, so to let the normals appear to be merged. The
    remained components then are sorted into lumps where vertices in each lump are
    within the given threshold. For all vertices and vertex-faces, set their normals
    to the average normal in the lump. Selected vertices may or may not on the same
    object. If objects are selected, it is assumed that all vertices are selected.
    If edges or faces are selected, it is assumed that the related vertex-faces are
    selected.
    
    Flags:
    - allowZeroNormal : azn          (bool)          [create]
        Specifies whether to allow zero normals to be created. By default it is false.
        If it is false, replaceNormal is needed.
    
    - distance : d                   (float)         [create]
        Specifies the distance threshold. All vertices within the threshold are
        considered when computing an average normal. By default it is 0.0.
    
    - postnormalize : pon            (bool)          [create]
        Specifies whether to normalize the resulting normals. By default it is true.
    
    - prenormalize : prn             (bool)          [create]
        Specifies whether to normalize the normals before averaging. By default it is
        true.
    
    - replaceNormalXYZ : xyz         (float, float, float) [create]
        If the allowZeroNormalis false, this value is used to replace the zero normals.
        By default it is (1, 0, 0).                                Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyAverageNormal`
    """
    pass
def PerformTessellationSetupOptions(*args, **kwargs): pass
def selectionConnection(*args, **kwargs): pass
def polyTriangulate(*args, **kwargs): pass
def DeleteSelectedContainers(*args, **kwargs): pass
def nConstraintDisableCollisionOptions(*args, **kwargs): pass
def DistributeUVsOptions(*args, **kwargs): pass
def RedoViewChange(*args, **kwargs): pass
def ProductInformation(*args, **kwargs): pass
def dR_targetWeldTool(*args, **kwargs): pass
def blendShapeEditor(*args, **kwargs):
    """
    This command creates an editor that derives from the base editor class that has
    controls for blendShape, control nodes.
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - targetControlList : tcl        (bool)          [query]
    
    - targetList : tl                (bool)          [query]
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
    
    - verticalSliders : vs           (bool)          [create,query,edit]
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.blendShapeEditor`
    """
    pass
def NodeEditorCreateCompound(*args, **kwargs): pass
def scriptedPanelType(*args, **kwargs): pass
def dynGlobals(*args, **kwargs): pass
def curveIntersect(*args, **kwargs): pass
def bufferCurve(*args, **kwargs): pass
def WrinkleToolOptions(*args, **kwargs): pass
def AddBifrostAdaptiveMesh(*args, **kwargs): pass
def TogglePolygonFaceTriangles(*args, **kwargs): pass
def SoftModDeformer(*args, **kwargs): pass
def AnimationSnapshot(*args, **kwargs): pass
def FBXExportAxisConversionMethod(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportAxisConversionMethod`
    """
    pass
def cMuscleWeightPrune(*args, **kwargs):
    """
    Flags:
    - help : h                       (bool)          []
    
    - normalize : n                  (bool)          []
    
    - prune : pr                     (float)         []
    
    - system : sys                   (PyNode)        []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.cMuscleWeightPrune`
    """
    pass
def renderQualityNode(*args, **kwargs):
    """
    This command creates a new node in the dependency graph of the specified type.
    The renderQualityNode creates a render quality node and registers it with the
    model.  The createNode command will not register nodes of this type correctly.
    
    Flags:
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace doesn't
        exist, we will create the namespace.
    
    - parent : p                     (unicode)       [create]
        Specifies the parent in the DAG under which the new node belongs.
    
    - shared : s                     (bool)          [create]
        This node is shared across multiple files, so only create it if it does not
        already exist.
    
    - skipSelect : ss                (bool)          [create]
        This node is not to be selected after creation, the original selection will be
        preserved.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderQualityNode`
    """
    pass
def containerBind(*args, **kwargs):
    """
    This is an accessory command to the container command which is used for some
    automated binding operations on the container. A container's published interface
    can be bound using a bindingSet on the associated container template.
    In query mode, return type is based on queried flag.
    
    Flags:
    - allNames : all                 (bool)          [create]
        Specifies that all published names on the container should be considered during
        the binding operation.  By default only unbound published names will be operated
        on.  Additionally specifying the 'force' option with 'all' will cause all
        previously bound published names to be reset (or unbound) before the binding
        operation is performed; in the event that there is no appropriate binding found
        for the published name, it will be left in the unbound state.
    
    - bindingSet : bs                (unicode)       [query]
        Specifies the name of the template binding set to use for the bind or query
        operation. This flag is not available in query mode.
    
    - bindingSetConditions : bsc     (bool)          [query]
        Used in query mode, returns a list of binding set condition entries from the
        specified template binding set.  The list returned is composed of of all
        published name / condition string pairs for each entry in the binding set. This
        flag returns all entries in the associated binding set and does not take into
        account the validity of each entry with respect to the container's list of
        published names, bound or unbound state, etc.
    
    - bindingSetList : bsl           (bool)          [query,edit]
        Used in query mode, returns a list of available binding sets that are defined on
        the associated container template.
    
    - force : f                      (bool)          [create]
        This flag is used to force certain operations to proceed that would normally not
        be performed.
    
    - preview : p                    (bool)          [create]
        This flag will provide a preview of the results of a binding operation but will
        not actually perform it.  A list of publishedName/boundName pairs are returned
        for each published name that would be affected by the binding action. If the
        binding of a published name will not change as a result of the action it will
        not be listed. Published names that were bound but will become unbound are also
        listed, in this case the associated boundName will be indicated by an empty
        string.                              Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.containerBind`
    """
    pass
def FBXExportUpAxis(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportUpAxis`
    """
    pass
def stitchSurfacePoints(*args, **kwargs):
    """
    The stitchSurfacePoints command aligns two or more surface points along the
    boundaries together to a single point. In the process, a node to average the
    points is created. The points are averaged together in a weighted fashion. The
    points may be control vertices along the boundaries. If the points are CVs then
    they are stitched together only with positional continuity. Note: No two points
    can lie on the same surface.
    
    Flags:
    - bias : b                       (float)         [create,query,edit]
        Blend CVs in between input surface and result from stitch. A value of 0.0
        returns the input surface. Default:1.0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - cascade : c                    (bool)          [create]
        Cascade the created stitch node. (Only if the surface has a stitch history)
        Default is 'false'.
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - cvIthIndex : ci                (int)           [create,query,edit]
        The ith boundary CV index on the input surface. Default:-1
    
    - cvJthIndex : cj                (int)           [create,query,edit]
        The jth boundary CV index on the input surface. Default:-1
    
    - equalWeight : ewt              (bool)          [create]
        Assign equal weights to all the points being stitched together. Default is
        'true'. If false, the first point is assigned a weight of 1.0 and the rest are
        assigned 0.0.
    
    - fixBoundary : fb               (bool)          [create,query,edit]
        Fix Boundary CVs while solving for any G1 constraints. Default:false
    
    - frozen : fzn                   (bool)          []
    
    - keepG0Continuity : kg0         (bool)          [create]
        Stitch together the points with positional continuity. Default is 'true'.
    
    - keepG1Continuity : kg1         (bool)          [create]
        Stitch together the points with tangent continuity. Default is 'false'.
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - parameterU : u                 (float)         [create,query,edit]
        The U parameter value on surface for a point constraint. Default:-10000
    
    - parameterV : v                 (float)         [create,query,edit]
        The V parameter value on surface for a point constraint. Default:-10000
    
    - positionalContinuity : pc      (bool)          [create,query,edit]
        Toggle on (off) G0 continuity at edge corresponding to multi index. Default:true
    
    - replaceOriginal : rpo          (bool)          [create]
        Create in place(i.e., replace).                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    - stepCount : sc                 (int)           [create,query,edit]
        Step count for the number of discretizations. Default:20
    
    - tangentialContinuity : tc      (bool)          [create,query,edit]
        Toggle on (off) G1 continuity across edge corresponding to multi index.
        Default:false
    
    - togglePointNormals : tpn       (bool)          [create,query,edit]
        Toggle on (off) normal point constraints on the surface. Default:false
    
    - togglePointPosition : tpp      (bool)          [create,query,edit]
        Toggle on (off) position point constraints on the surface. Default:true
    
    - toggleTolerance : tt           (bool)          [create,query,edit]
        Toggle on (off) so as to use Tolerance or specified steps for discretization.
        Default:false
    
    - tolerance : tol                (float)         [create,query,edit]
        Tolerance to use while discretizing the edge. Default:0.1
        Common flags
    
    
    Derived from mel command `maya.cmds.stitchSurfacePoints`
    """
    pass
def RenameCurrentUVSet(*args, **kwargs): pass
def InitialFluidStatesOptions(*args, **kwargs): pass
def setMenuMode(*args, **kwargs):
    """
    Optionally sets a new Menu Mode for the menu bar in the main Maya window.
    Returns the current Menu Mode, and if a new one is specified, then the previous
    Menu Mode is returned. Note that due to recent changes to the menu set
    architecture (8.0+), this function now takes a menu set as a parameter instead
    of a label.
    
    
    Derived from mel command `maya.cmds.setMenuMode`
    """
    pass
def createNode(*args, **kwargs): pass
def userCtx(*args, **kwargs): pass
def transferShadingSets(*args, **kwargs):
    """
    Command to transfer shading set assignments between meshes. The last mesh in the
    list receives the shading assignments from the other meshes.            In query
    mode, return type is based on queried flag.
    
    Flags:
    - sampleSpace : spa              (int)           [create,query,edit]
        Selects which space the attribute transfer is performed in. 0 is world space, 1
        is model space. The default is world space.
    
    - searchMethod : sm              (int)           [create,query,edit]
        Specifies which search method to use when correlating points. 0 is closest along
        normal, 3 is closest to point. The default is closest to point.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.transferShadingSets`
    """
    pass
def ProfilerToolCpuView(*args, **kwargs): pass
def HypershadePickWalkLeft(*args, **kwargs): pass
def artAttrCtx(*args, **kwargs): pass
def FBIKLabelElbow(*args, **kwargs): pass
def AssignBrushToHairSystem(*args, **kwargs): pass
def CoarsenSelectedComponents(*args, **kwargs): pass
def render(*args, **kwargs):
    """
    The render command is used to start off a MayaSoftware rendering session of the
    currently active camera. If a rendering is already in progress, then this
    command stops the rendering. This command is not undoable.
    
    Flags:
    - abortMissingTexture : amt      (bool)          [create]
        Abort renderer when encountered missing texture. Only available when -batch is
        set
    
    - batch : b                      (bool)          [create]
        Run in batch mode. Compute the images for all renderable cameras. This is the
        mel equivalent of running maya in batch mode with the -render flag set. All
        other flags are ignored when -batch is used.
    
    - keepPreImage : kpi             (bool)          [create]
        Keep the renderings prior to post-process around. Only available when -batch is
        set
    
    - layer : l                      (unicode)       [create]
        Render the specified render layer. Only this render layer will be rendered,
        regardless of the renderable attribute value of the render layer. The layer name
        will be appended to the output image file name. The specified render layer
        becomes the current render layer before rendering, and remains as current render
        layer after the rendering.
    
    - nglowpass : ngl                (bool)          [create]
        Overwrite glow pass capabilities (can turn off glow pass globally by setting
        this value to false)
    
    - nshadows : nsh                 (bool)          [create]
        Shadowing capabilities (can turn off shadow globally by setting this value to
        false)
    
    - replace : rep                  (bool)          [create]
        Replace the rendered image if it already exists. Only available when -batch is
        set
    
    - xresolution : x                (int)           [create]
        Overwrite x resolution
    
    - yresolution : y                (int)           [create]
        Overwrite y resolution                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.render`
    """
    pass
def dgInfo(*args, **kwargs):
    """
    This command prints information about the DG in plain text. The scope of the
    information printed is the entire graph if the allflag is used, the nodes/plugs
    on the command line if they were specified, and the selection list, in that
    order. Each plug on a connection will have two pieces of state information
    displayed together at the end of the line on which they are printed. There are
    two possible values for each of the two states displayed. The values are updated
    when the DG pulls data across them, usually through evaluation, or pushes a
    dirty message through them. There are some subtleties in how the data is pulled
    through the connection but for simplicity it will be referred to as evaluation.
    The values displayed will be CLEAN or DIRTY followed by PROP or BLOCK. The first
    keyword has these meanings: CLEANmeans that evaluation of the plug's connection
    succeeded and no dirty messages have come through it since then. It also implies
    that the destination end of the connection has received the value from the
    source end. DIRTYmeans that a dirty message has passed through the plug's
    connection since the last time an evaluation was made on the destination side of
    that connection. Note: the data on the node has its own dirty state that depends
    on other factors so having a clean connection doesn't necessarily mean the
    plug's data is clean, and vice versa. The second keyword has these meanings:
    PROPmeans that the connection will allow dirty messages to pass through and
    forwards them to all destinations. BLOCKmeans that a dirty message will stop at
    this connection and not continue on to any destinations. This is an optimization
    that prevents excessive dirty flag propagation when many values are changing,
    for example, a frame change in an animated sequece. The combination CLEAN
    BLOCKshould never be seen in a valid DG. This indicates that while the plug
    connection has been evaluated since the last dirty message it will not propagate
    any new dirty messages coming in to it. That in turn means downstream nodes will
    not be notified that the graph is changing and they will not evaluate properly.
    Recovering from this invalid state requires entering the command dgdirty -ato
    mark everything dirty and restart proper evaluation. Think of this command as
    the reset/reboot of the DG world. Both state types behave differently depending
    on your connection type. SimpleA -B: Plugs at both ends of the connection share
    the same state information. The state information updates when an evaluation
    request comes to A from B, or a dirty message is sent from A to B. Fan-OutA -B,
    A -C: Each of A, B, and C have their own unique state information. B and C
    behave as described above. A has its state information linked to B and C - it
    will have CLEANonly when both B and C have CLEAN, it will have BLOCKonly when
    both B and C have BLOCK. In-OutA -B, C -A: Each of A, B, and C have their own
    unique state information. B and C behave as described above. A has its state
    information linked to B and C. The CLEAN|DIRTYflag looks backwards, then
    forwards: if( C == CLEAN ) A = CLEAN else if( B == CLEAN ) A = CLEAN The
    BLOCKstate is set when a dirty message passes through A, and the PROPstate is
    set either when A is set clean or an evaluation passes through A. There are some
    other exceptions to these rules: All of this state change information only
    applies to dirty messages and evaluations that use the normal context. Any
    changes in other contexts, for example, through the getAttr -t TIMEcommand, does
    not affect the state in the connections. Param curves and other passive inputs,
    for example blend nodes coming from param curves, will not disable propagation.
    Doing so would make the keyframing workflow impossible. Certain messages can
    choose to completely ignore the connection state information. For example when a
    node's state attribute changes a connection may change to a blocking one so the
    message has to be propagated at least one step further to all of its
    destinations. This way they can update their information. Certain operations can
    globally disable the use of the propagaton state to reduce message flow.  The
    simplest example is when the evaluation manager is building its graph. It has to
    visit all nodes so the propagation cannot be blocked. The messaging system has
    safeguards against cyclic messages flowing through connections but sometimes a
    message bypasses the connection completely and goes directly to the node. DAG
    parents do this to send messages to their children. So despite connections into
    a node all having the BLOCKstate it could still receive dirty messages.
    
    Flags:
    - allNodes : all                 (bool)          [create]
        Use the entire graph as the context
    
    - connections : c                (bool)          [create]
        Print the connection information
    
    - dirty : d                      (bool)          [create]
        Only print dirty/clean nodes/plugs/connections.  Default is both
    
    - nodes : n                      (bool)          [create]
        Print the specified nodes (or the entire graph if -all is used)
    
    - nonDeletable : nd              (bool)          [create]
        Include non-deletable nodes as well (normally not of interest)
    
    - outputFile : of                (unicode)       [create]
        Send the output to the file FILE instead of STDERR
    
    - propagation : p                (bool)          [create]
        Only print propagating/not propagating nodes/plugs/connections. Default is both.
    
    - short : s                      (bool)          [create]
        Print using short format instead of long
    
    - size : sz                      (bool)          [create]
        Show datablock sizes for all specified nodes. Return value is tuple of all
        selected nodes (NumberOfNodes, NumberOfDatablocks, TotalDatablockMemory)
    
    - subgraph : sub                 (bool)          [create]
        Print the subgraph affected by the node or plugs (or all nodes in the graph
        grouped in subgraphs if -all is used)
    
    - type : nt                      (unicode)       [create]
        Filter output to only show nodes of type NODETYPE
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgInfo`
    """
    pass
def polyWedgeFace(*args, **kwargs): pass
def CopyUVs(*args, **kwargs): pass
def webView(*args, **kwargs):
    """
    This command allows the user to bring up a web page view
    
    Flags:
    - urlAddress : url               (unicode)       [create]
        Bring up webView on given URL
    
    - windowHeight : wh              (int)           [create]
        Set the window height
    
    - windowWidth : ww               (int)           [create]
        Set the window width                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.webView`
    """
    pass
def effector(*args, **kwargs):
    """
    The effector command is used to set the name or hidden flag for the effector.
    The standard edit (-e) and query (-q) flags are used for edit and query
    functions.
    
    Flags:
    - hide : hi                      (bool)          [create,query,edit]
        Specifies whether to hide drawing of effector if attached to a handle.
    
    - name : n                       (unicode)       [create,query,edit]
        Specifies the name of the effector.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.effector`
    """
    pass
def timeEditorPanel(*args, **kwargs): pass
def dR_outlinerTGL(*args, **kwargs): pass
def recordAttr(*args, **kwargs):
    """
    This command sets up an attribute to be recorded.  When the record command is
    executed, any changes to this attribute are recorded.  When recording stops
    these changes are turned into keyframes. If no attributes are specified all
    attributes of the node are recorded. When the query flag is used, a list of the
    attributes being recorded will be returned. In query mode, return type is based
    on queried flag.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        specify the attribute to record
    
    - delete : d                     (bool)          [create]
        Do not record the specified attributes                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.recordAttr`
    """
    pass
def keyingGroup(*args, **kwargs): pass
def DuplicateCurve(*args, **kwargs): pass
def SquashOptions(*args, **kwargs): pass
def ExportOfflineFileOptions(*args, **kwargs): pass
def ShatterOptions(*args, **kwargs): pass
def python(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.python`
    """
    pass
def volumeBind(*args, **kwargs):
    """
    Command for creating and editing volume binding nodes. The node is use for
    storing volume data to define skin weighting data.
    
    Flags:
    - influence : inf                (unicode)       [query,edit]
        Edit or Query the list of influences connected to the skin cluster.
    
    - name : n                       (unicode)       [create]
        Used to specify the name of the node being created.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.volumeBind`
    """
    pass
def flowLayout(*args, **kwargs): pass
def MultiCutTool(*args, **kwargs): pass
def NonWeightedTangents(*args, **kwargs): pass
def gameExporter(*args, **kwargs):
    """
    Flags:
    - FBXReviewPath : frp            (unicode)       []
    
    - viewInFBXReview : vfr          (unicode)       []
    
    
    Derived from mel command `maya.cmds.gameExporter`
    """
    pass
def SnapToCurvePress(*args, **kwargs): pass
def CreatePolygonPipe(*args, **kwargs): pass
def skinBindCtx(*args, **kwargs):
    """
    This command creates a tool that can be used to edit volumes from an interactive
    bind.
    
    Flags:
    - about : a                      (unicode)       [create,query,edit]
        The space in which the axis should be mirrored. Valid values are: worldand
        object.
    
    - axis : ax                      (unicode)       [create,query,edit]
        The mirror axis. Valid values are: x,y, and z.
    
    - colorRamp : cr                 (unicode)       [create,query,edit]
        Set the values on the color ramp used to display the weight values.
    
    - currentInfluence : ci          (unicode)       [create,query,edit]
        Set the index of the current influence or volume to be adjusted by the
        manipulator.
    
    - displayInactiveMode : di       (int)           [create,query,edit]
        Determines the display mode for drawing volumes that are not selected, in
        particular which volume cages if any are displayed. 0 - None 1 - Nearby volumes
        2 - All volumes
    
    - displayNormalized : dn         (bool)          [create,query,edit]
        Display raw select weights (false) or finalized normalized weights (true).
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - falloffCurve : fc              (unicode)       [create,query,edit]
        Set the values on the falloff curve control.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - symmetry : s                   (bool)          [create,query,edit]
        Controls whether or not the tool operates in symmetric (mirrored) mode.
    
    - tolerance : t                  (float)         [create,query,edit]
        The tolerance setting for determining whether another influence is symmetric to
        the the current influence.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.skinBindCtx`
    """
    pass
def annotate(*args, **kwargs): pass
def UntrimSurfaces(*args, **kwargs): pass
def NodeEditorExtendToShapes(*args, **kwargs): pass
def CreateSubdivSurfacePolyOptions(*args, **kwargs): pass
def DeleteAllShadingGroupsAndMaterials(*args, **kwargs): pass
def dR_viewPersp(*args, **kwargs): pass
def assignInputDevice(*args, **kwargs):
    """
    This command associates a command string (i.e. a mel script) with the input
    device.  When the device moves or a button on the device is pressed, the command
    string is executed as if you typed it into the window.  If the command string
    contains the names of buttons or axes of the device, the current value of these
    buttons/axes are substituted in.  Buttons are reported as booleans and axes as
    doubles. This command is most useful for associating buttons on a device with
    commands.  For using a device to capture continous movements it is much more
    efficient to attach the device directly into the dependency graph.
    
    Dynamic library stub function 
    
    Flags:
    - clutch : c                     (unicode)       [create]
        specify a clutch button.  This button must be down for the command string to be
        executed. If no clutch is specified the command string is executed everytime the
        device state changes
    
    - continuous : ct                (bool)          [create]
        if this flag is set the command string is continously (once for everytime the
        device changes state).  By default if a clutch button is specified the command
        string is only executed once when the button is pressed.
    
    - device : d                     (unicode)       [create]
        specify which device to assign the command string.
    
    - immediate : im                 (bool)          [create]
        Immediately executes the command, without using the queue.
    
    - multiple : m                   (bool)          [create]
        if this flag is set the other command strings associated with this device are
        not deleted. By default, when a new command string is attached to the device,
        all other command strings are deleted.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.assignInputDevice`
    """
    pass
def QuadDrawTool(*args, **kwargs): pass
def InsertKeysToolOptions(*args, **kwargs): pass
def projectionManip(*args, **kwargs):
    """
    Various commands to set the manipulator to interesting positions.
    In query mode, return type is based on queried flag.
    
    Flags:
    - fitBBox : fb                   (bool)          [create]
        Fit the projection manipulator size and position to the shading group bounding
        box. The orientation is not modified.
    
    - projType : pt                  (int)           [create]
        Set the projection type to the given value. Projection type values are: 1 =
        planar.2 = spherical.3 = cylindrical.4 = ball.5 = cubic.6 = triplanar.7 =
        concentric.8 = camera.
    
    - switchType : st                (bool)          [create]
        Loop over the allowed types. If the hardware shading is on, it loops over the
        hardware shadeable types (planar, cylindrical, spherical), otherwise, it loops
        over all the types. If there is no given value, it loops over the different
        projection types.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.projectionManip`
    """
    pass
def NewScene(*args, **kwargs): pass
def UVSphericalProjectionOptions(*args, **kwargs): pass
def globalStitch(*args, **kwargs): pass
def TwoStackedViewArrangement(*args, **kwargs): pass
def HypershadeDisplayAsExtraLargeSwatches(*args, **kwargs): pass
def cmdArnoldFlushTexture(*args, **kwargs): pass
def TranslateToolWithSnapMarkingMenuPopDown(*args, **kwargs): pass
def MakeFluidCollide(*args, **kwargs): pass
def commandEcho(*args, **kwargs):
    """
    This command controls what is echoed to the command window.              In
    query mode, return type is based on queried flag.
    
    Flags:
    - addFilter : af                 (unicode)       [create]
        This flag allows you to append filters to the current list of filtered commands
        when echo all commands is enabled. Just like the filter flag, you can provide a
        partial command name, so all commands that start with a substring specified in
        the addFilter entry will be filtered out.
    
    - filter : f                     (unicode)       [create,query]
        This flag allows you to filter out unwanted commands when echo all commands is
        enabled. You can provide a partial command name, so all commands that start with
        a substring specified in filter entry will be filtered out. If filter is empty,
        all commands are echoed to the command window.
    
    - lineNumbers : ln               (bool)          [create,query]
        If true then file name and line number information is provided in error and
        warning messages. If false then no file name and line number information is
        provided in error and warning messages.
    
    - state : st                     (bool)          [create,query]
        If true then all commands are echoed to the command window. If false then only
        relevant commands are echoed.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.commandEcho`
    """
    pass
def SelectAllFurs(*args, **kwargs): pass
def subdDuplicateAndConnect(*args, **kwargs):
    """
    This command duplicates the input subdivision surface object, connects up the
    outSubdiv attribute of the original subd shape to the create attribute of the
    newly created duplicate shape and copies over the shader assignments from the
    original shape to the new duplicated shape. The command will fail if no objects
    are selected or sent as argument or if the object sent as argument is not a
    subdivision surface object.
    
    
    Derived from mel command `maya.cmds.subdDuplicateAndConnect`
    """
    pass
def CurveSmoothnessCoarse(*args, **kwargs): pass
def Create2DContainerEmitterOptions(*args, **kwargs): pass
def geomToBBox(*args, **kwargs):
    """
    Create polygonal mesh bounding boxes for geometry. Can also create a single
    bounding box per hierarchy.
    
    Flags:
    - bakeAnimation : ba             (bool)          [create]
        Bake the animation. Can be used with startTime, endTime and sampleBy flags. If
        used alone, the time slider will be used to specify the startTime and endTime.
    
    - combineMesh : cm               (bool)          [create]
        Combine resulting bounding boxes. Mutually exclusive with -s/single option.
    
    - endTime : et                   (time)          [create]
        Used with bakeAnimation flag. Specifies the end time of the baking process.
    
    - keepOriginal : ko              (bool)          [create]
        Do not remove the selected nodes used to create the bounding boxes.
    
    - name : n                       (unicode)       [create]
        Specifies the bounding box name.
    
    - nameSuffix : ns                (unicode)       [create]
        Specifies the bounding box name suffix.
    
    - sampleBy : sb                  (time)          [create]
        Used with bakeAnimation flag. Specifies the animation evaluation time increment.
    
    - shaderColor : sc               (float, float, float) [create]
        Set the color attribute of the Lambert material associate with the bounding box.
        The RGB values should be defined between 0 to 1.0. Default value is 0.5 0.5 0.5.
    
    - single : s                     (bool)          [create]
        Create a single bounding box per hierarchy selected.
    
    - startTime : st                 (time)          [create]
        Used with bakeAnimation flag. Specifies the start time of the baking process.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.geomToBBox`
    """
    pass
def SelectHierarchy(*args, **kwargs): pass
def AttachSurfacesOptions(*args, **kwargs): pass
def igBrushContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.igBrushContext`
    """
    pass
def PolySpinEdgeBackward(*args, **kwargs): pass
def FBXExportCameras(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportCameras`
    """
    pass
def arnoldScene(*args, **kwargs):
    """
    Flags:
    - list : l                       (unicode)       []
    
    - mode : m                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldScene`
    """
    pass
def dgPerformance(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.dgPerformance`
    """
    pass
def PokePolygonOptions(*args, **kwargs): pass
def loadPlugin(*args, **kwargs): pass
def nConstraintForceFieldOptions(*args, **kwargs): pass
def OutlinerUnhide(*args, **kwargs): pass
def FlowPathObjectOptions(*args, **kwargs): pass
def TransferAttributeValuesOptions(*args, **kwargs): pass
def ToggleUnsharedUVs(*args, **kwargs): pass
def DeactivateGlobalScreenSliderModeMarkingMenu(*args, **kwargs): pass
def ReverseSurfaceDirectionOptions(*args, **kwargs): pass
def dR_conform(*args, **kwargs): pass
def CreateMultiStereoRig(*args, **kwargs): pass
def TimeEditorClipTrimEnd(*args, **kwargs): pass
def CreatePoseInterpolatorEditor(*args, **kwargs): pass
def MapUVBorder(*args, **kwargs): pass
def RigidBindSkin(*args, **kwargs): pass
def dR_modeObject(*args, **kwargs): pass
def DisplayHairCurvesStart(*args, **kwargs): pass
def dR_curveSnapRelease(*args, **kwargs): pass
def bevelPlus(*args, **kwargs): pass
def SelectAllRigidBodies(*args, **kwargs): pass
def BezierPresetBezier(*args, **kwargs): pass
def evaluator(*args, **kwargs):
    """
    Handles turning on and off custom evaluation overrides used by the evaluation
    manager. Query no flag to see all available custom evaluators. Query the
    'enable' flag to check if an evaluator is currently enabled. If the 'name' flag
    isn't used then return all modes and their current active state.
    
    Flags:
    - clusters : cl                  (bool)          [query]
        This flag queries the list of clusters currently assigned to the named custom
        evaluator. The return value will be an array of strings where the array consists
        of a set of (number, string[]) groups. e.g. If an evaluator has 2 clusters with
        2 and 3 nodes in them respectively the output would be something like: (2,
        'transform2', 'transform3', 3, 'joint1', 'joint2', 'joint3')
    
    - configuration : c              (unicode)       [create,query]
        Sends configuration information to a custom evaluator. It's up to the evaluator
        to understand what they mean. Multiple configuration messages can be sent in a
        single command. Query this flag for a given evaluator to find out what
        configuration messages it accepts.
    
    - enable : en                    (bool)          [create,query]
        Enables or disables a specific graph evaluation runtime, depending on the state
        of the flag.  In order to use this flag you must also specify the name in the
        'name' argument. When the 'enable' flag is used in conjunction with the
        'nodeType' flag then it is used to selectively turn on or off the ability of the
        given evaluator to handle nodes of the given type (i.e. it no longer toggles the
        evaluator enabled state). When the 'enable' flag is used in conjunction with the
        'configuration' flag then it is passed along with the configuration message
        interpreted by the custom evaluator.
    
    - info : i                       (bool)          [query]
        Queries the evaluator information. Only valid in query mode since the
        information is generated by the evaluator's internal state and cannot be
        changed. In order to use this flag, the 'name' argument must also be specified.
    
    - name : n                       (unicode)       [create,query]
        Names a particular DG evaluation override evaluator. Evaluators are registered
        automatically by name. Query this flag to get a list of available runtimes. When
        a runtime is registered it is enabled by default. Use the 'enable' flag to
        change its enabled state. In query mode, this flag can accept a value.
    
    - nodeType : nt                  (unicode)       [create,query]
        Names a particular node type to be passed to the evaluator request. Evaluators
        can either use or ignore the node type information as passed. In query mode,
        this flag can accept a value.
    
    - nodeTypeChildren : ntc         (bool)          [create,query]
        If enabled when using the 'nodeType' flag then handle all of the node types
        derived from the given one as well. Default is to only handle the named node
        type.
    
    - priority : p                   (int)           [create,query]
        Query or set the evaluator priority. Custom evaluator with highest priority
        order will get the chance to claim the nodes first.  Evaluators must have unique
        priority values. In order to use this flag you must also specify the name in the
        'name' argument.
    
    - valueName : vn                 (unicode)       [query]
        Queries a value from a given evaluator.  Evaluators can define a set of values
        for which they answer. In query mode, this flag can accept a value.Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.evaluator`
    """
    pass
def ToggleEdgeIDs(*args, **kwargs): pass
def PolygonPaste(*args, **kwargs): pass
def SelectPreviousObjectsMotionBuilder(*args, **kwargs): pass
def NodeEditorSetSmallNodeSwatchSize(*args, **kwargs): pass
def WarpImage(*args, **kwargs): pass
def ExportSelectionOptions(*args, **kwargs): pass
def expressionEditorListen(*args, **kwargs):
    """
    Listens for messages for the Expression Editor, at its request, and communicates
    them to it.  This action is for internal use only and should not be called by
    users.  This action should be called only by the Expression Editor.
    
    Flags:
    - listenFile : lf                (unicode)       [create]
        Listen for changes to the file argument.
    
    - listenForAttr : la             (unicode)       [create]
        Listen for changes to the attributes of the node argument.
    
    - listenForExpression : le       (unicode)       [create]
        Listen for changes to the named expression
    
    - listenForName : ln             (unicode)       [create]
        Listen for name changes for the node argument.
    
    - stopListenForAttr : sla        (unicode)       [create]
        Stop listening for changes to the attributes of the node argument.
    
    - stopListenForExpression : sle  (unicode)       [create]
        Stop listening for changes to the named expression
    
    - stopListenForName : sln        (unicode)       [create]
        Stop listening for name changes for the node argument.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.expressionEditorListen`
    """
    pass
def PaintSetMembershipTool(*args, **kwargs): pass
def AlembicExportSelection(*args, **kwargs): pass
def polyQueryBlindData(*args, **kwargs):
    """
    Command query's blindData associated with particular polygonal components. So,
    the command will require the following to be specified:         - selection list
    to query Optional are the:         - typeId         - associationType         -
    longDataName or shortDataName of data being queried.         - The actual data
    being specified.         - showComponent flag Note that for object level blind
    data, the showComponent flag will be ignored. If no components are selected, the
    assocation flag will be ignored and object level data will be queried.
    
    Flags:
    - associationType : at           (unicode)       [create]
        Specifies the dataTypes that are part of BlindData node being queried. Allowable
        associations are objectfor any object, and vertexedgeand facefor mesh objects.
    
    - binaryData : bnd               (unicode)       [create]
        Specifies the binary string value to search for
    
    - booleanData : bd               (bool)          [create]
        Specifies the string value to search for
    
    - doubleData : dbd               (float)         [create]
        Specifies the double/float value to search for
    
    - intData : ind                  (int)           [create]
        Specifies the integer value to search for
    
    - longDataName : ldn             (unicode)       [create]
        Specifies the long name of the data that is being queried by this command.
    
    - maxValue : max                 (float)         [create]
        Specifies the maximum value to search for.  This option will query float,
        double, and integer types of blind data.
    
    - minValue : min                 (float)         [create]
        Specifies the minimum value to search for.  This option will query float, double
        and integer types of blind data.
    
    - shortDataName : sdn            (unicode)       [create]
        Specifies the short name of the data that is being queried by this command.
    
    - showComp : sc                  (bool)          [create]
        The showComponent option controls whether the object.[component].attribute name
        is output preceeding the actual value.  If the showComponent option is used then
        the restriction of only returning 1 type of blind data (i.e. one of integer,
        float, double... is removed, as the return for all are strings. If the
        association is object and not component, then this option will still cause all
        the attribute names to be printed
    
    - stringData : sd                (unicode)       [create]
        Specifies the string value to search for
    
    - subString : ss                 (unicode)       [create]
        Specifies the substring that should be checked against a STRING type blind data.
        If the sub string is found query is successful.  Will not look at non String
        type blind data elements.
    
    - typeId : id                    (int)           [create]
        Specifies the typeId of the BlindData type being queried.  If the typeId is not
        specified, then all of the components that match the query will be output.  The
        typeId of the elements found will be output if the ShowComponents option is
        used.  Will be in the format object.component.attribute::typeId. If the typeId
        is specifed then the ::typeIdportion will not be output with the ShowComponents
        option.                                 Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyQueryBlindData`
    """
    pass
def fluidCacheInfo(*args, **kwargs):
    """
    A command to get information about the fluids cache. Get the startFrame and
    resolution for InitialConditions. Get the endFrame as well for a playback cache.
    Note that for the playback cache, it will look at the current time (or last
    frame if the current time is past end of cache)                 In query mode,
    return type is based on queried flag.
    
    Flags:
    - attribute : at                 (unicode)       [create,query,edit]
        Modifier to the hasDataflag, used to query whether a cache has data (at the
        current time) for a specific fluid attribute.  Valid attribute values are
        density, velocity, temperature, fuel, color, coordinates(for texture
        coordinates), falloff.
    
    - cacheTime : t                  (time)          [create,query,edit]
        Only valid with the -hasData flag.  The time the -hasData flag uses when it
        queries the cache to see if there is data.
    
    - endFrame : ef                  (bool)          [create,query,edit]
        Returns end time of cache as float.
    
    - hasCache : hc                  (bool)          [create,query,edit]
        Returns true if fluid has specified cache, false if not.
    
    - hasData : hd                   (bool)          [create,query,edit]
        Queries whether a given cache has data in it at the time specified by the -time
        flag.  (If not -time flag is present, -hasData assumes the current time.) When
        used with the attributeflag, indicates if data for the specified attribute
        exists in the cache.  When used without the attributeflag, hasDataindicates
        whether there is data in the cache for any of the valid fluid attributes.
    
    - initialConditions : ic         (bool)          [create,query,edit]
        Specifies the cache to be queried is the Initial Conditionscache.
    
    - playback : pb                  (bool)          [create,query,edit]
        Specifies the cache to be queried is the Playbackcache.
    
    - resolution : re                (bool)          [create,query,edit]
        Returns cache resolution as float[].
    
    - startFrame : sf                (bool)          [create,query,edit]
        Returns start time for cache as float.                             Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.fluidCacheInfo`
    """
    pass
def StopBifrostBackgroundProcessing(*args, **kwargs): pass
def xgmSetGuideCVCount(*args, **kwargs):
    """
    Flags:
    - count : c                      (int)           []
    
    
    Derived from mel command `maya.cmds.xgmSetGuideCVCount`
    """
    pass
def TumbleTool(*args, **kwargs): pass
def CreatePolygonGear(*args, **kwargs): pass
def ResetDisplay(*args, **kwargs): pass
def SymmetrizeUVOptions(*args, **kwargs): pass
def PaintToonLineWidth(*args, **kwargs): pass
def color(*args, **kwargs):
    """
    This command sets the dormant wireframe color of the specified objects to be
    their class color or if the -ud/userDefined flag is specified, one of the user
    defined colors. The -rgb/rgbColor flags can be specified if the user requires
    floating point RGB colors.
    
    Flags:
    - rgbColor : rgb                 (float, float, float) [create]
        Specifies and rgb color to set the selected object to.
    
    - userDefined : ud               (int)           [create]
        Specifies the user defined color index to set selected object to. The valid
        range of numbers is [1-8].                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.color`
    """
    pass
def ResetCurrentWorkspace(*args, **kwargs): pass
def sbs_GetBakeFormat(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetBakeFormat`
    """
    pass
def SelectVertexFaceMask(*args, **kwargs): pass
def PreferencesWindow(*args, **kwargs): pass
def ToggleUVDistortion(*args, **kwargs): pass
def SaveCurrentWorkspace(*args, **kwargs): pass
def CreateShrinkWrapOptions(*args, **kwargs): pass
def AppendToPolygonToolOptions(*args, **kwargs): pass
def TimeEditorCreateGroupFromSelection(*args, **kwargs): pass
def ToggleHulls(*args, **kwargs): pass
def HideHotbox(*args, **kwargs): pass
def ConvertSelectionToUVShell(*args, **kwargs): pass
def ToggleCharacterControls(*args, **kwargs): pass
def ToggleBackfaceGeometry(*args, **kwargs): pass
def jointCtx(*args, **kwargs):
    """
    The joint context command (jointCtx) updates the parameters of the joint tool.
    The options for the tool will be set by the flags the user specifies.
    
    Flags:
    - autoJointOrient : ajo          (unicode)       [create,query,edit]
        Specifies the joint orientation. Valid string choices are permutations of the
        axes; none, xyz, yzx, zxy, xzy, yxz, zyx. The first letter determines which axis
        is aligned with the bone.C: The default is xyz.Q: When queried, this flag
        returns a string.
    
    - autoPriorityH : apH            (bool)          [create,query,edit]
        Specifies if the ikHandle's priority is assigned automatically.C: The default is
        off.Q: When queried, this flag returns an int.
    
    - createIKHandle : ikh           (bool)          [create,query,edit]
        Enables the joint tool to create an ikHandle when the tool is completed.C: The
        default is off.Q: When queried, this flag returns an int.
    
    - degreeOfFreedomJ : dJ          (unicode)       [create,query,edit]
        Specifies the degrees of freedom for all of the joints created by the tool.
        Valid string choices are the free axes; x, y, z, xy, xz, yz, xyz, and none.C:
        The default is xyz.Q: When queried, this flag returns a string.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - forceSolverH : fsH             (bool)          [create,query,edit]
        Specifies if the ikSolver for the ikHandle is enabled.C: The default is on.Q:
        When queried, this flag returns an int.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - jointAutoLimits : jal          (bool)          [create,query,edit]
        Automatically computes the joint limits based on the kind of joint created. C:
        The default is off.Q: When queried, this flag returns an int.
    
    - jointOrientationJ : joJ        (float, float, float) [create,query,edit]
        Sets the orientation of the joints created by the tool. If autoJointOrient in
        on, these values will be ignored.C: The default is 0 0 0.Q: When queried, this
        flag returns an array of three floats.
    
    - largeBoneLength : lbl          (float)         [create,query,edit]
        Specifies the length above which bones should be assigned the largeBoneRadius.
    
    - largeBoneRadius : lbr          (float)         [create,query,edit]
        Specifies the radius for bones whose length is above the largeBoneLength
    
    - poWeightH : pwH                (float)         [create,query,edit]
        Specifies the position/orientation weight of the ikHandle.C: The default is 1.Q:
        When queried, this flag returns a float.
    
    - priorityH : pH                 (int)           [create,query,edit]
        Specifies the priority of the ikHandle.C: The default is on.Q: When queried,
        this flag returns an int.
    
    - scaleCompensateJ : scJ         (bool)          [create,query,edit]
        Specifies if scale compensate is enabled.C: The default is on.Q: When queried,
        this flag returns an int.
    
    - scaleJ : sJ                    (float, float, float) [create,query,edit]
        Sets the scale for the joints created by the tool.C: The default is 1 1 1.Q:
        When queried, this flag returns an array of three floats.
    
    - scaleOrientationJ : soJ        (float, float, float) [create,query,edit]
        Sets the current value for the scale orientation. If autoJointOrient in on,
        these values will be ignored.C: The default is 0 0 0.Q: When queried, this flag
        returns an array of three floats.
    
    - secondaryAxisOrient : sao      (unicode)       [create,query,edit]
        Specifies the orientation of the secondary rotate axis. Valid string choices
        are: xup, xdown, yup, ydown, zup, zdown, none.
    
    - smallBoneLength : sbl          (float)         [create,query,edit]
        Specifies the length below which bones should be assigned the smallBoneRadius.
    
    - smallBoneRadius : sbr          (float)         [create,query,edit]
        Specifies the radius for bones whose length is below the smallBoneLength.
    
    - snapHandleH : snH              (bool)          [create,query,edit]
        Sepcifies if snapping is enabled for the ikHandle. C: The default is on.Q: When
        queried, this flag returns an int.
    
    - solverTypeH : stH              (unicode)       [create,query,edit]
        Sets the name of the solver to use with the ikHandle. C: The default is the
        solver set to the default in the user preferences.Q: When queried, this flag
        returns a string.
    
    - stickyH : sH                   (unicode)       [create,query,edit]
        Specifies if the ikHandle is sticky or not. If stickyis passed then the ikHandle
        will be sticky. If offis used then ikHandle stickiness will be turned off.C: The
        default is off.Q: When queried, this flag returns a string.
    
    - symmetry : sym                 (bool)          [create,query,edit]
        Automaticaly create a symmetry joint based if symmetry is on. C: The default is
        off.Q: When queried, this flag returns an int.
    
    - symmetryAxis : sa              (unicode)       [create,query,edit]
        Automaticaly create a symmetry joint use x, y , z axis or combination to do the
        symmetry. C: The default is x.Q: When queried, this flag returns a string.
    
    - variableBoneSize : vbs         (bool)          [create,query,edit]
        Specifies whether or not variable bone length and radius settings should be
        used.
    
    - weightH : wH                   (float)         [create,query,edit]
        Specifies the weight of the ikHandle. The weight is relative to the other
        ikHandles in the scene.C: The default is 1.Q: When queried, this flag returns a
        float.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.jointCtx`
    """
    pass
def timeEditorClipLayer(*args, **kwargs):
    """
    Time Editor clip layers commands
    
    Flags:
    - addAttribute : aa              (unicode)       [edit]
        Add given plug to a layer with a supplied layerId.
    
    - addLayer : al                  (unicode)       [edit]
        Add a new layer with a given name.
    
    - addObject : ao                 (unicode)       [edit]
        Add given object with all its attributes in the clip to a layer with a supplied
        layerId.
    
    - allLayers : all                (bool)          [query]
        Return all layers given clip ID.
    
    - attribute : a                  (unicode)       [edit]
        The attribute path to key.
    
    - attributeKeyable : ak          (unicode)       [query]
        Return whether specified attribute is keyable.
    
    - clipId : cid                   (int)           [edit]
        ID of the clip this layer command operates on. In query mode, this flag can
        accept a value.
    
    - index : idx                    (int)           [edit]
        Layer index, used when adding new layer at specific location in the stack.
    
    - keySiblings : ks               (bool)          [edit]
        If set to true, additional attributes might be keyed while keying to achieve
        desired result.
    
    - layerId : lid                  (int)           [edit]
        Layer ID used in conjunction with other edit flags. In query mode, this flag can
        accept a value.
    
    - layerName : ln                 (unicode)       [query,edit]
        Edit layer name. In query mode, return the layer name given its layer ID and
        clip ID.
    
    - mode : m                       (int)           [edit]
        To control the playback speed of the clip by animation curve: 0 : additive1 :
        additive override2 : override3 : override passthrough
    
    - mute : mu                      (bool)          [edit]
        Mute/unmute a layer given its layer ID and clip ID.
    
    - name : n                       (bool)          [query]
        Query the attribute name of a layer given its layer ID and clip ID.
    
    - path : pt                      (unicode)       [edit]
        Full path of a layer or a clip on which to operate. For example:
        composition1|track1|clip1|layer1; composition1|track1|group|track1|clip1. In
        query mode, this flag can accept a value.
    
    - removeAttribute : ra           (unicode)       [edit]
        Remove given plug from a layer with a supplied layerId.
    
    - removeLayer : rl               (bool)          [edit]
        Remove layer with an ID.
    
    - removeObject : ro              (unicode)       [edit]
        Remove given object with all its attributes in the clip to a layer with a
        supplied layerId.
    
    - resetSolo : rs                 (bool)          [edit]
        Unsolo all soloed layers in a given clip ID.
    
    - setKeyframe : k                (bool)          [edit]
        Set keyframe on specified attributes on specified layer of a clip. Use -clipId
        to indicate the specified clip. Use -layerId to indicate the specified layer of
        the clip. Use -attribute to indicate the specified attributes (if no attribute
        flag is used, all attribute will be keyed). Use -zeroKeying to indicate that
        zero offset from original animation should be keyed.
    
    - solo : sl                      (bool)          [edit]
        Solo/unsolo a layer given its layers ID and clip ID.
    
    - zeroKeying : zk                (bool)          [edit]
        Indicate if the key to set should be zero offset from original animation.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeEditorClipLayer`
    """
    pass
def StitchTogetherOptions(*args, **kwargs): pass
def format(*args, **kwargs):
    """
    This command takes a format string, where the format string contains format
    specifiers.  The format specifiers have a number associated with them relating
    to which parameter they represent to allow for alternate ordering of the passed-
    in values for other languages by merely changing the format string
    
    Flags:
    - stringArg : s                  (unicode)       [create]
        Specify the arguments for the format string.                               Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.format`
    """
    pass
def EnableTimeChangeUndoConsolidation(*args, **kwargs): pass
def SetVertexNormal(*args, **kwargs): pass
def ClearCurrentCharacterList(*args, **kwargs): pass
def MoveNearestPickedKeyToolDeactivate(*args, **kwargs): pass
def saveAllShelves(*args, **kwargs):
    """
    This command writes all shelves that are immediate children of the specified
    control layout to the prefs directory.
    
    
    Derived from mel command `maya.cmds.saveAllShelves`
    """
    pass
def pluginDisplayFilter(*args, **kwargs):
    """
    Register, deregister or query a plugin display filter. Plug-ins can use this
    command to register their own display filters which will appear in the 'Show'
    menus on Maya's model panels.
    
    Flags:
    - classification : cls           (unicode)       [create,query]
        The classification used to filter objects in Viewport 2.0. This classification
        is the same as MFnPlugin::registerNode(). If the node was registered with
        multiple classifications, use the one beginning with drawdb. The default value
        of this flag is an empty string (). It will not filter any objects in Viewport
        2.0.
    
    - deregister : dr                (bool)          [create]
        Deregister a plugin display filter.
    
    - exists : ex                    (bool)          [create]
        Returns true if the specified filter exists, false otherwise. Other flags are
        ignored.
    
    - label : l                      (unicode)       [create,query]
        The string to be displayed for this filter in the UI. E.g. in the 'Show' menu of
        a model panel. The default value of this flag is the same as the plugin display
        filter name.
    
    - listFilters : lf               (bool)          [query]
        Returns an array of all plugin display filters.
    
    - register : r                   (bool)          [create]
        Register a plugin display filter. The -register is implied if both -register and
        -deregister flags are missing in create mode. You are responsible for
        deregistering any filters which you register. Filters are reference counted,
        meaning that if you register the same filter twice then you will have to
        deregister it twice as well.                                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pluginDisplayFilter`
    """
    pass
def polyMergeFacet(*args, **kwargs):
    """
    The second face becomes a hole in the first face.The new holed face is located
    either on the first, last, or between both selected faces, depending on the
    mode. Both faces must belong to the same object.Facet flags are mandatory.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - firstFacet : ff                (int)           [create,query,edit]
        The number of the first (outer) face to merge.
    
    - frozen : fzn                   (bool)          []
    
    - mergeMode : mm                 (int)           [create,query,edit]
        This flag specifies how faces are merged: 0: moves second face to first one 1:
        moves both faces to average 2: moves first face to second one 3, 4, 5: same as
        above, except faces are projected but not centred 6: Nothing moves. C: Default
        is None (6).
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - secondFacet : sf               (int)           [create,query,edit]
        The number of the second (hole) face to merge.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyMergeFacet`
    """
    pass
def ReverseCurveOptions(*args, **kwargs): pass
def HideTexturePlacements(*args, **kwargs): pass
def ParticleCollisionEvents(*args, **kwargs): pass
def CreateFluidCache(*args, **kwargs): pass
def CreateSpotLightOptions(*args, **kwargs): pass
def OpenMashEditor(*args, **kwargs): pass
def AddBlendShape(*args, **kwargs): pass
def TimeEditorMuteSelectedTracks(*args, **kwargs): pass
def DetachSurfacesOptions(*args, **kwargs): pass
def PruneCluster(*args, **kwargs): pass
def move(*args, **kwargs): pass
def deformerWeights(*args, **kwargs):
    """
    Command to import and export deformer weights to and from a simple XML  file.
    The weight data is stored in a per-vertex fashion along with a  point
    cloudcorresponding to the vertices from the geometry input to  the deformer.
    For example a cluster deformer would have the following information:  On import
    the weights are then mapped back to a specified deformer  based on the specified
    mapping method. Note that the geometry used to  perform the mapping association
    is not the visible shape but rather  the incoming geometry to the deformer. For
    example, in the case of a  skin cluster this would be the bind pose geometry.
    
    Flags:
    - attribute : at                 (unicode)       [create,query,edit]
        Specify the long name of deformer attribute that should be imported/exported
        along with the deformerWeights. i.e. -at envelope-at skinningMethodetc.. No
        warning or error is given if a specified attribute does not exist on a
        particular deformer, making it possible to use this command with multiple
        deformers without aborting or slowing down the import/export process.  Currently
        supports numeric attributes and matrix attributes
    
    - defaultValue : dv              (float)         [create,query,edit]
        Manually set the default value. Default values are values that are not written
        to file. For example, for blendShapes the default value is automatically set to
        1.0 and these values are not written to disk. For skinClusters the value is 0.0.
        If all weights should be forced to be written to disk, set a defaultValue =
        -1.0.
    
    - deformer : df                  (unicode)       [create,query,edit]
        Specify the deformer whose weights should be exported or imported. If a pattern
        is supplied for the deformer name (i.e: cluster\*), only the first deformer that
        matches the pattern will be imported/exported unless used in conjunction with
        the -skip option
    
    - export : ex                    (bool)          [create,query,edit]
        Export the given deformer
    
    - format : fm                    (unicode)       [create,query,edit]
        Specify either XMLor JSONas the file extension to save as.
    
    - ignoreName : ig                (bool)          [create,query,edit]
        Ignore the names of the layers on import, just use the order of the layers
        instead. This can be used when joint names have been changed. Leaving it on only
        name that match on import will be write to the deformer.
    
    - im : im                        (bool)          [create,query,edit]
        Import weights to the specified deformer. See the method flag for details on how
        the weights will be mapped to the destination deformer.
    
    - method : m                     (unicode)       [create,query,edit]
        Specify the method used to map the weight during import. Valid values are:
        index, nearest, barycentric, bilinearand over. The indexmethod uses the vertex
        index to map the weights onto the object. This is most useful when the
        destination object shares the same topology as the exported data. The
        nearestmethod finds the nearest vertex in the imported data set and sets the
        weight value to that value. This is best used when mapping a higher resolution
        mesh to a lower resolution. The barycentricand bilinearmethods are only
        supported with polygon mesh exported with -vc/vertexConnections flag. The
        barycentricmethod finds the nearest triangle of the input geometry and rescales
        the weights at the triangle vertices according to the barycentric weights to
        each vertex of the nearest triangle. The bilinearmethod finds the nearest convex
        quad of the input geometry and rescales the weights at the quad vertices
        according to the bilinear weights to each vertex of the nearest convex quad. For
        non-quad polygon, the bilinearmethod will fall back to barycentricmethod. The
        overmethod is similar to the indexmethod but the weights on the destination mesh
        are not cleared prior to mapping, so that unmatched indices keep their weights
        intact.
    
    - path : p                       (unicode)       [create,query,edit]
        The path to the given file. Default to the current project.
    
    - positionTolerance : pt         (float)         [create,query,edit]
        The position tolerance is used to determine the radius of search for the nearest
        method. This flag is only used with import. Defaults to a huge number.
    
    - remap : r                      (unicode)       [create,query,edit]
        Remap maps source regular expression to destination format. It maps any name
        that matches the regular expression (before the semi-colon) to the expression
        format (after the semi-colon). For example, -remap test:(.\*);$1will rename all
        items in the test namespace to the global namespace. Accepts $1, $2, .., $9 as
        pattern holders in the expression format. Remap flag must be used together with
        import or export. When working with import, the name of the object from the xml
        file matching the regular expression is remapped to object in scene. When
        working with export, the name of the object from the scene matching the regular
        expression is remapped to object in xml file.
    
    - shape : sh                     (unicode)       [create,query,edit]
        Specify the source shape. Export will write out all the deformers on the shape
        node into one file. If a pattern is supplied for the shape name (i.e:
        pCylinder\*), only the first shape that matches the pattern will be
        imported/exported unless used in conjunction with the -skip option.
    
    - skip : sk                      (unicode)       [create,query,edit]
        Skip any deformer, shape, or layer that whose name matches the given regular
        expression string
    
    - vertexConnections : vc         (bool)          [create,query,edit]
        Export vertex connection information, which is required for -m/-method
        barycentricand bilinear. The flag is only used with -ex/-export flag. The vertex
        connection information is automatically loaded during import if available in xml
        file.
    
    - weightPrecision : wp           (int)           [create,query,edit]
        Sets the output decimal precision for exported weights. The default value is 3.
    
    - weightTolerance : wt           (float)         [create,query,edit]
        The weight tolerance is used to decide if a given weight value is close enough
        to the default value that it does not need to be included. This flag is only
        used with export. The default value is .001.
    
    - worldSpace : ws                (bool)          [create,query,edit]
        For spatially based association methods (nearest), the position should be based
        on the world space position rather then the local object space.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deformerWeights`
    """
    pass
def polySuperShape(*args, **kwargs):
    """
    Flags:
    - createUV : uv                  (int)           []
    
    - ellipseMirror : em             (bool)          []
    
    - hExponent : he                 (float)         []
    
    - hExponent1 : he1               (float)         []
    
    - hExponent2 : he2               (float)         []
    
    - hMultiplier1 : hm1             (float)         []
    
    - hMultiplier2 : hm2             (float)         []
    
    - hUltraExponent1 : u1           (float)         []
    
    - hUltraExponent2 : u2           (float)         []
    
    - hUltraExponent3 : u5           (float)         []
    
    - hUltraExponent4 : u6           (float)         []
    
    - hUltraExponent5 : u7           (float)         []
    
    - hUltraMixer : u3               (float)         []
    
    - hUltraMultiplier1 : u0         (float)         []
    
    - hUltraMultiplier2 : u4         (float)         []
    
    - horizontalDivisions : hd       (int)           []
    
    - horizontalRevolutions : hr     (float)         []
    
    - internalRadius : ir            (float)         []
    
    - mergeVertices : mv             (bool)          []
    
    - radius : r                     (float)         []
    
    - shape : s                      (unicode)       []
    
    - ultraMirror : um               (bool)          []
    
    - vExponent : ve                 (float)         []
    
    - vExponent1 : ve1               (float)         []
    
    - vExponent2 : ve2               (float)         []
    
    - vMultiplier1 : vm1             (float)         []
    
    - vMultiplier2 : vm2             (float)         []
    
    - vUltraExponent1 : u9           (float)         []
    
    - vUltraExponent2 : u10          (float)         []
    
    - vUltraExponent3 : u13          (float)         []
    
    - vUltraExponent4 : u14          (float)         []
    
    - vUltraExponent5 : u15          (float)         []
    
    - vUltraMixer : u11              (float)         []
    
    - vUltraMultiplier1 : u8         (float)         []
    
    - vUltraMultiplier2 : u12        (float)         []
    
    - verticalDivisions : vd         (int)           []
    
    - verticalOffset : vo            (float)         []
    
    - verticalRevolutions : vr       (float)         []
    
    - xOffset : xo                   (float)         []
    
    - zOffset : zo                   (float)         []
    
    
    Derived from mel command `maya.cmds.polySuperShape`
    """
    pass
def ShowFluids(*args, **kwargs): pass
def ToggleCurrentFrame(*args, **kwargs): pass
def HypershadeGraphUpDownstream(*args, **kwargs): pass
def NParticleStyleWater(*args, **kwargs): pass
def ClosestPointOn(*args, **kwargs): pass
def nexMultiCutContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.nexMultiCutContext`
    """
    pass
def ShowObjectGeometry(*args, **kwargs): pass
def GpuCacheImportOptions(*args, **kwargs): pass
def HypershadeConvertToFileTextureOptionBox(*args, **kwargs): pass
def AddDynamicBuoyOptions(*args, **kwargs): pass
def CreateUVsBasedOnCameraOptions(*args, **kwargs): pass
def cMuscleWeightSave(*args, **kwargs):
    """
    Flags:
    - action : act                   (unicode)       []
    
    - axis : a                       (int)           []
    
    - file : f                       (unicode)       []
    
    - help : h                       (bool)          []
    
    - mode : m                       (unicode)       []
    
    - normalize : n                  (bool)          []
    
    - prune : pr                     (int)           []
    
    - replace : rep                  (unicode)       []
    
    - search : src                   (unicode)       []
    
    - space : scp                    (unicode)       []
    
    - system : sys                   (PyNode)        []
    
    - tolerance : tol                (float)         []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.cMuscleWeightSave`
    """
    pass
def polyBlendColor(*args, **kwargs):
    """
    Takes two color sets and blends them together into a third specified color set.
    
    Flags:
    - baseColorName : bcn            (unicode)       [query,edit]
        Name of the color set to blend from
    
    - blendFunc : bfn                (int)           [query,edit]
        Type of blending function to use
    
    - blendWeightA : bwa             (float)         [query,edit]
        Blend weight for linear and bilinear blending functions
    
    - blendWeightB : bwb             (float)         [query,edit]
        Blend weight for bilinear and channel blending functions
    
    - blendWeightC : bwc             (float)         [query,edit]
        Blend weight for channel functions
    
    - blendWeightD : bwd             (float)         [query,edit]
        Blend weight for channel functions
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - dstColorName : dst             (unicode)       [query,edit]
        Name of the color set to copy to
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - srcColorName : src             (unicode)       [query,edit]
        Name of the color set to copy from                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyBlendColor`
    """
    pass
def FBXImportForcedFileAxis(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportForcedFileAxis`
    """
    pass
def dR_cycleCustomCameras(*args, **kwargs): pass
def listDeviceAttachments(*args, **kwargs):
    """
    This command lists the current set of device attachments. The listing is in the
    form of the commands required to recreate them.  This includes both attachments
    and device mappings.
    
    Dynamic library stub function 
    
    Flags:
    - attribute : at                 (unicode)       [create]
        specify the attribute attachments to list
    
    - axis : ax                      (unicode)       [create]
        specify the axis attachments to list
    
    - clutch : c                     (unicode)       [create]
        List only attachment clutched with this button
    
    - device : d                     (unicode)       [create]
        specify which device attachments to list
    
    - file : f                       (unicode)       [create]
        Specify the name of the file to write out device attachments.
    
    - selection : sl                 (bool)          [create]
        This flag list only attachments on selection
    
    - write : w                      (bool)          [create]
        Write out device attachments to a file specified by the -f flag, is set.  If -f
        is not set, it'll write out to a file named for the device.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.listDeviceAttachments`
    """
    pass
def SetMeshGrabTool(*args, **kwargs): pass
def nurbsBoolean(*args, **kwargs):
    """
    This command performs a boolean operation.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - nsrfsInFirstShell : nsf        (int)           [create]
        The number of selection items comprising the first shell.
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - operation : op                 (int)           [create,query,edit]
        Type of Boolean operation. Default:0
    
    - smartConnection : sc           (bool)          [create]
        Look for any of the selection items having a boolean operation as history.
        Default is true.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    - tolerance : tlb                (float)         [create,query,edit]
        fitting tolerance. Default:0.01                  Common flags
    
    
    Derived from mel command `maya.cmds.nurbsBoolean`
    """
    pass
def FBXExportInputConnections(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportInputConnections`
    """
    pass
def delete(*args, **kwargs): pass
def renderLayerMembers(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderLayerMembers`
    """
    pass
def dR_multiCutPress(*args, **kwargs): pass
def scriptNode(*args, **kwargs):
    """
    scriptNodes contain scripts that are executed when a file is loaded or when the
    script node is deleted. If a script modifies a referenced node, the changes will
    be tracked as reference edits unless the scriptNode was created with the
    ignoreReferenceEdits flag. The scriptNode command is used to create, edit,
    query, and test scriptNodes. In query mode, return type is based on queried
    flag.
    
    Flags:
    - afterScript : afterScript      (unicode)       [create,query,edit]
        The script executed when the script node is deleted. C: The default is an empty
        string. Q: When queried, this flag returns a string.
    
    - beforeScript : bs              (unicode)       [create,query,edit]
        The script executed during file load. C: The default is an empty string. Q: When
        queried, this flag returns a string.
    
    - executeAfter : ea              (bool)          [create]
        Execute the script stored in the .after attribute of the scriptNode. This script
        is normally executed when the script node is deleted.
    
    - executeBefore : eb             (bool)          [create]
        Execute the script stored in the .before attribute of the scriptNode. This
        script is normally executed when the file is loaded.
    
    - ignoreReferenceEdits : ire     (bool)          [create]
        Sets whether changes made to referenced nodes during the execution of the script
        should be recorded as reference edits. This flag must be set when the scriptNode
        is created. If this flag is not set, changes to referenced nodes will be
        recorded as edits by default.
    
    - name : n                       (unicode)       [create]
        When creating a new scriptNode, this flag specifies the name of the node. If a
        non-unique name is used, the name will be modified to ensure uniqueness.
    
    - scriptType : st                (int)           [create,query,edit]
        Specifies when the script is executed. The following values may be used:
        0Execute on demand.1Execute on file load or on node deletion.2Execute on file
        load or on node deletion when not in batch mode. 3Internal4Execute on software
        render5Execute on software frame render6Execute on scene configuration7Execute
        on time changedC: The default value is 0. Q: When queried, this flag returns an
        int.
    
    - sourceType : stp               (unicode)       [create,query,edit]
        Sets the language type for both the attached scripts. Valid values are
        mel(enabled by default), and python.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scriptNode`
    """
    pass
def XgmSplineCacheImportOptions(*args, **kwargs): pass
def SetKeyTranslate(*args, **kwargs): pass
def OutlinerRevealSelected(*args, **kwargs): pass
def drawExtrudeFacetCtx(*args, **kwargs):
    """
    Flags:
    - degree : d                     (int)           []
    
    - divisions : div                (int)           []
    
    - exists : ex                    (bool)          []
    
    - facesTogether : ft             (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.drawExtrudeFacetCtx`
    """
    pass
def hudSliderButton(*args, **kwargs): pass
def HypershadeSelectBakeSets(*args, **kwargs): pass
def ToggleSymmetryDisplay(*args, **kwargs): pass
def xgmClumpMap(*args, **kwargs):
    """
    Flags:
    - computeMemory : cm             (bool)          []
    
    - controlMap : cmd               (unicode)       []
    
    - controlMask : cmm              (unicode)       []
    
    - description : d                (unicode)       []
    
    - fxmodule : fx                  (unicode)       []
    
    - groupId : g                    (int)           []
    
    - mapDir : md                    (unicode)       []
    
    - point : p                      (float, float, float) []
    
    - pointDir : pd                  (unicode)       []
    
    - progressBar : pb               (bool)          []
    
    - radiusVariance : rv            (unicode)       []
    
    - texelsPerUnit : tpu            (float)         []
    
    
    Derived from mel command `maya.cmds.xgmClumpMap`
    """
    pass
def ToggleShowResults(*args, **kwargs): pass
def renameUI(*args, **kwargs):
    """
    This command renames the UI object passed as first arument to the new name
    specified as second argument. If the new name is a duplicate, or not valid, then
    re-naming fails and the old name is returned.
    
    This command renames the UI object passed as first arument to the new name
    specified as second argument. If the new name is a duplicate, or not valid, then
    re-naming fails and the old name is returned.
    
    
    Derived from mel command `maya.cmds.renameUI`
    
    
    Derived from mel command `maya.cmds.renameUI`
    """
    pass
def ConnectionEditor(*args, **kwargs): pass
def CreateHingeConstraintOptions(*args, **kwargs): pass
def SetCMCNone(*args, **kwargs): pass
def getFluidAttr(*args, **kwargs):
    """
    Returns values of built-in fluid attributes such as density, velocity, etc., for
    individual grid cells or for all cells in the grid.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Specifies the fluid attribute for which to display values.  Valid attributes are
        force, velocity, density, falloff, fuel, color, and temperature.  (Note that
        getting force values is an alternate way of getting velocity values at one time
        step.)
    
    - lowerFace : lf                 (bool)          [create]
        Only valid with -at velocity.  Since velocity values are stored on the edges of
        each voxel and not at the center, using voxel based indices to set velocity
        necessarily affects neighboring voxels.  Use this flag to only set velocity
        components on the lower left three faces of a voxel, rather than all six.
    
    - xIndex : xi                    (int)           [create]
        Only return values for cells with this X index
    
    - xvalue : x                     (bool)          []
        Only get the first component of the vector-valued attribute specified by the
        -at/attributeflag.
    
    - yIndex : yi                    (int)           [create]
        Only return values for cells with this Y index
    
    - yvalue : y                     (bool)          []
        Only get the second component of the vector-valued attribute specified by the
        -at/attributeflag.
    
    - zIndex : zi                    (int)           [create]
        Only return values for cells with this Z index
    
    - zvalue : z                     (bool)          []
        Only get the third component of the vector-valued attribute specified by the
        -at/attributeflag.                                    Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getFluidAttr`
    """
    pass
def curveMoveEPCtx(*args, **kwargs):
    """
    The curveMoveEPCtx command creates a new context for moving curve edit points
    using a manipulator.  Edit points can only be moved one at a time.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveMoveEPCtx`
    """
    pass
def prependListItem(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.prependListItem`
    """
    pass
def Unfold3DuvUpdateCommand(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.Unfold3DuvUpdateCommand`
    """
    pass
def XgmSetCutBrushTool(*args, **kwargs): pass
def EditPolygonType(*args, **kwargs): pass
def BaseLevelComponentDisplay(*args, **kwargs): pass
def ViewAlongAxisNegativeY(*args, **kwargs): pass
def polyMergeEdgeCtx(*args, **kwargs):
    """
    Sews two border edges together.The new edge is located either on the first,
    last, or between both selected edges, depending on the mode. Both edges must
    belong to the same object, and orientations must match (i.e. normals on
    corresponding faces must point in the same direction).Edge flags are mandatory.
    Create a new context to merge edges on polygonal objects
    
    Flags:
    - activeNodes : anq              (bool)          [query]
        Return the active nodes in the tool
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - firstEdge : fe                 (int)           [create,query,edit]
        First edge to merge. Invalid default value to force the value to be set.
        Default:-1
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - immediate : im                 (bool)          [edit]
        Acts on the object not the tool defaults
    
    - mergeMode : mm                 (int)           [create,query,edit]
        Merge mode : 0=first, 1=halfway between both edges, 2=second. Default:1
    
    - mergeTexture : mt              (bool)          [create,query,edit]
        Boolean which is used to decide if uv coordinates should be merged or not -
        along with the geometry. Default:false
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - previous : pv                  (bool)          [edit]
        Reset to previously stored values
    
    - reset : rs                     (bool)          [edit]
        Reset to default values
    
    - secondEdge : se                (int)           [create,query,edit]
        Second edge to merge. Invalid default value to force the value to be set.
        Default:-1                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    - toolNode : tnq                 (bool)          [query]
        Return the node used for tool defaults                  Common poly modifier
        operation flags
    
    
    Derived from mel command `maya.cmds.polyMergeEdgeCtx`
    """
    pass
def HypershadeSortReverseOrder(*args, **kwargs): pass
def NodeEditorPaste(*args, **kwargs): pass
def xgmMoveDescription(*args, **kwargs):
    """
    Flags:
    - descriptionOnly : deo          (bool)          []
    
    - name : n                       (unicode)       []
    
    - palette : p                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmMoveDescription`
    """
    pass
def SetPreferredAngleOptions(*args, **kwargs): pass
def polyEditEdgeFlow(*args, **kwargs): pass
def adskAsset(*args, **kwargs):
    """
    Flags:
    - assetID : a                    (unicode)       []
    
    - library : l                    (unicode)       []
    
    - resolved : r                   (bool)          []
    
    
    Derived from mel command `maya.cmds.adskAsset`
    """
    pass
def UVSetEditor(*args, **kwargs): pass
def PaintHairFollicles(*args, **kwargs): pass
def PfxFlipTubeDir(*args, **kwargs): pass
def XgmSetLengthBrushTool(*args, **kwargs): pass
def ExtrudeOptions(*args, **kwargs): pass
def FBXGetTakeCount(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeCount`
    """
    pass
def CreatePassiveRigidBody(*args, **kwargs): pass
def RenderSequence(*args, **kwargs): pass
def subdDisplayMode(*args, **kwargs):
    """
    Flags:
    - hideFaceGadgets : hfg          (bool)          []
    
    - showComponentsAsNumerals : scn (bool)          []
    
    - showFaceRegions : sfr          (bool)          []
    
    - showVisualEdgeVertices : svv   (bool)          []
    
    - showVisualEdges : sve          (bool)          []
    
    - subdivEdgeMask : sem           (int)           []
    
    
    Derived from mel command `maya.cmds.subdDisplayMode`
    """
    pass
def LightCentricLightLinkingEditor(*args, **kwargs): pass
def SetKeyOptions(*args, **kwargs): pass
def LassoTool(*args, **kwargs): pass
def SelectTool(*args, **kwargs): pass
def TexSculptDeactivateBrushStrength(*args, **kwargs): pass
def polyCircularizeEdge(*args, **kwargs):
    """
    Mirror all the faces of the selected object.
    
    Flags:
    - alignment : al                 (int)           [create,query,edit]
        How the circle should be  oriented relative to the surface Default:0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createCurve : cc               (bool)          [create]
        If true then the operation can create a curve.
    
    - divisions : d                  (int)           []
    
    - evenlyDistribute : ed          (bool)          [create,query,edit]
        Should the point be evenly distributed around the circle Default:true
    
    - frozen : fzn                   (bool)          []
    
    - inputCurve : inc               (PyNode)        [create]
        This flag specifies the name of the curve to be used as input for the operation.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normalOffset : no              (float)         []
    
    - normalOrientation : nor        (int)           [create,query,edit]
        What calculation to use to get circle plane normal Default:0
    
    - radialOffset : ro              (float)         [create,query,edit]
        The amount the circle points should be translated along radius Default:0.0
    
    - relaxInterior : ri             (float)         []
    
    - smoothingAngle : sa            (float)         [create,query,edit]
        The angle that decides which resulting faces are hard or soft Default:30.0
    
    - supportingEdges : se           (int)           []
    
    - twist : t                      (float)         []
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCircularizeEdge`
    """
    pass
def getDefaultBrush(*args, **kwargs):
    """
    The command returns the name of the default Paint Effects brush.
    
    
    Derived from mel command `maya.cmds.getDefaultBrush`
    """
    pass
def BrushPresetBlend(*args, **kwargs): pass
def MergeVertexTool(*args, **kwargs): pass
def polySphericalProjection(*args, **kwargs):
    """
    TpolyProjCmdBase is a base class for the command to create a mapping on the
    selected polygonal faces. Projects a spherical map onto an object.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createNewMap : cm              (bool)          [create,query]
        This flag when set true will create a new map with a the name passed in, if the
        map does not already exist.
    
    - frozen : fzn                   (bool)          []
    
    - imageCenter : ic               (float, float)  [create,query,edit]
        This flag specifies the center point of the 2D model layout. C: Default is 0.5
        0.5. Q: When queried, this flag returns a float[2].
    
    - imageCenterX : icx             (float)         [create,query,edit]
        This flag specifies X for the center point of the 2D model layout. C: Default is
        0.5. Q: When queried, this flag returns a float.
    
    - imageCenterY : icy             (float)         [create,query,edit]
        This flag specifies Y for the center point of the 2D model layout. C: Default is
        0.5. Q: When queried, this flag returns a float.
    
    - imageScale : imageScale        (float, float)  [create,query,edit]
        This flag specifies the UV scale : Enlarges or reduces the 2D version of the
        model in U or V space relative to the 2D centerpoint. C: Default is 1.0 1.0. Q:
        When queried, this flag returns a float[2].
    
    - imageScaleU : isu              (float)         [create,query,edit]
        This flag specifies the U scale : Enlarges or reduces the 2D version of the
        model in U space relative to the 2D centerpoint. C: Default is 1.0. Q: When
        queried, this flag returns a float.
    
    - imageScaleV : isv              (float)         [create,query,edit]
        This flag specifies the V scale : Enlarges or reduces the 2D version of the
        model in V space relative to the 2D centerpoint. C: Default is 1.0. Q: When
        queried, this flag returns a float.
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        This flag specifies if the projection node should be inserted before or after
        deformer nodes already applied to the shape. Inserting the projection after the
        deformer leads to texture swimming during animation and is most often
        undesirable. C: Default is on.
    
    - keepImageRatio : kir           (bool)          [create]
        True means keep any image ratio
    
    - mapDirection : md              (unicode)       [create]
        This flag specifies the mapping direction. 'x', 'y' and 'z' projects the map
        along the corresponding axis. 'c' projects along the current camera viewing
        direction. 'p' does perspective projection if current camera is perspective. 'b'
        projects along the best plane fitting the objects selected.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - perInstance : pi               (bool)          [create]
        True if the new map is per-instance, otherwise it is shared.
    
    - projectionCenter : pc          (float, float, float) [create,query,edit]
        This flag specifies the origin point from which the map is projected. C: Default
        is 0.0 0.0 0.0. Q: When queried, this flag returns a float[3].
    
    - projectionCenterX : pcx        (float)         [create,query,edit]
        This flag specifies X for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionCenterY : pcy        (float)         [create,query,edit]
        This flag specifies Y for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionCenterZ : pcz        (float)         [create,query,edit]
        This flag specifies Z for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionHeight : ph          (float)         []
    
    - projectionHorizontalSweep : phs (float)         [create,query,edit]
        The angle swept horizontally by the projection.  The range is [0, 360].
    
    - projectionScale : ps           (float, float)  [create,query,edit]
        This flag specifies the width and the height of the map relative to the 3D
        projection axis. C: Default is 180.0 90.0. Q: When queried, this flag returns a
        float[2].
    
    - projectionScaleU : psu         (float)         [create,query,edit]
        This flag specifies the width of the map relative to the 3D projection axis :
        the scale aperture. The range is [0, 360]. C: Default is 180.0. Q: When queried,
        this flag returns a float.
    
    - projectionScaleV : psv         (float)         [create,query,edit]
        This flag specifies the height of the map relative to the 3D projection axis :
        the scale height. C: Default is 90.0. Q: When queried, this flag returns a
        float.
    
    - radius : r                     (float)         [create,query,edit]
        Used by the UI : Manipulator.
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        This flag specifies the mapping rotate angles. C: Default is 0.0 0.0 0.0. Q:
        When queried, this flag returns a float[3].
    
    - rotateX : rx                   (float)         [create,query,edit]
        This flag specifies X mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float[3].
    
    - rotateY : ry                   (float)         [create,query,edit]
        This flag specifies Y mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        This flag specifies Z mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float.
    
    - rotationAngle : ra             (float)         [create,query,edit]
        This flag specifies the rotation angle in the mapping space. When the angle is
        positive, then the map rotates counterclockwise on the mapped model, whereas
        when it is negative then the map rotates clockwise on the mapped model. C:
        Default is 10.0. Q: When queried, this flag returns a float.
    
    - seamCorrect : sc               (bool)          [create,query,edit]
        This flag specifies to perform a seam correction on the mapped faces.
        Common poly modifier operation flags
    
    - smartFit : sf                  (bool)          [create]
        True means use the smart fit algorithm
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySphericalProjection`
    """
    pass
def PinSelectionOptions(*args, **kwargs): pass
def cmdaiSetParameter(*args, **kwargs): pass
def ClosestPointOnOptions(*args, **kwargs): pass
def HideLattices(*args, **kwargs): pass
def TogglePolygonFaceTrianglesDisplay(*args, **kwargs): pass
def CreateCameraAim(*args, **kwargs): pass
def xgmGeoRender(*args, **kwargs):
    """
    Flags:
    - autoBindSkin : abs             (bool)          []
    
    - combineMesh : cm               (bool)          []
    
    - convertSelected : cs           (bool)          []
    
    - createGuideJoints : cgj        (bool)          []
    
    - createStripJoints : csj        (bool)          []
    
    - curvature : c                  (float)         []
    
    - guideJointPlacementType : gjt  (int)           []
    
    - insertWidthSpan : iws          (bool)          []
    
    - jointNumOnGuide : gjn          (int)           []
    
    - jointNumOnStrip : sjn          (int)           []
    
    - maxInfluences : mi             (int)           []
    
    - progress : pb                  (bool)          []
    
    - stripJointPlacementType : sjt  (int)           []
    
    - useWidthRamp : uwr             (bool)          []
    
    - uvInTiles : t                  (bool)          []
    
    - uvLayoutType : lt              (int)           []
    
    - uvTileSeparation : ts          (float)         []
    
    - visibleOnly : vo               (bool)          []
    
    - widthSpanNum : wsn             (int)           []
    
    
    Derived from mel command `maya.cmds.xgmGeoRender`
    """
    pass
def polyNormal(*args, **kwargs): pass
def hikGetEffectorIdFromName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.hikGetEffectorIdFromName`
    """
    pass
def SculptMeshDeactivateBrushSize(*args, **kwargs): pass
def EnableAllGeometryCache(*args, **kwargs): pass
def polyCreateFacet(*args, **kwargs):
    """
    Create a new polygonal object with the specified face, which will be closed.
    List of arguments must have at least 3 points.
    
    Flags:
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - hole : hl                      (bool)          [create]
        Add a hole. The following points will define a hole. Holes can be defined either
        clockwise or counterclockwise.  Note that this flag is not recommended for use
        in Python.  When specifying facets with the point flag in Python, pass in an
        empty point ()when you want to start specifying a hole.
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - point : p                      (float, float, float) [create]
        Adds a new point to the face. Coordinates of points are given in world
        reference.  The point flag may also be passed with no arguments.  That indicates
        that the following points will specify a hole.  Passing the point flag with no
        arguments is the same as using the holeflag, except that it will work in Python.
    
    - subdivision : s                (int)           [create,query,edit]
        This flag specifies the level of subdivision. Subdivides edges into the given
        number of edges. C: Default is 1 (no subdivision). Q: When queried, this flag
        returns an int.
    
    - texture : tx                   (int)           [create,query,edit]
        Specifies how the face is mapped. 0 - None; 1 - Normalize; 2 - Unitize C:
        Default is 0 (no mapping). Q: When queried, this flag returns an intFlag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCreateFacet`
    """
    pass
def ToggleOriginAxis(*args, **kwargs): pass
def PolyExtrudeFacesOptions(*args, **kwargs): pass
def ChamferVertexOptions(*args, **kwargs): pass
def MakeBoats(*args, **kwargs): pass
def AddSelectionAsInBetweenTargetShape(*args, **kwargs): pass
def HideMarkers(*args, **kwargs): pass
def pointOnCurve(*args, **kwargs):
    """
    This command returns information for a point on a NURBS curve. If no flag is
    specified, it assumes p/position by default.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - curvatureCenter : cc           (bool)          [create]
        Returns the (x,y,z) center of curvature of the specified point on the curve
    
    - curvatureRadius : cr           (bool)          [create]
        Returns the radius of curvature of the specified point on the curve
    
    - frozen : fzn                   (bool)          []
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normal : no                    (bool)          [create]
        Returns the (x,y,z) normal of the specified point on the curve
    
    - normalizedNormal : nn          (bool)          [create]
        Returns the (x,y,z) normalized normal of the specified point on the curve
    
    - normalizedTangent : nt         (bool)          [create]
        Returns the (x,y,z) normalized tangent of the specified point on the curve
    
    - parameter : pr                 (float)         [query,edit]
        The parameter value on curve Default:0.0
    
    - position : p                   (bool)          [create]
        Returns the (x,y,z) position of the specified point on the curve
    
    - tangent : t                    (bool)          [create]
        Returns the (x,y,z) tangent of the specified point on the curve
    
    - turnOnPercentage : top         (bool)          [query,edit]
        Whether the parameter is normalized (0,1) or not Default:false
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pointOnCurve`
    """
    pass
def combinationShape(*args, **kwargs): pass
def polyCheck(*args, **kwargs):
    """
    Dumps a description of internal memory representation of poly objects. If no
    objects are specified in the command line, the objects from the active list are
    used. Default behaviour is to print only a summary. Use the flags above to get
    more details on a specific part of the object.
    
    Flags:
    - edge : e                       (bool)          [create]
        Check edge descriptions. If no flag is set, a complete check is performed.
    
    - face : f                       (bool)          [create]
        Check face descriptions. If no flag is set, a complete check is performed.
    
    - faceOffset : fo                (bool)          [create]
        Check face offset descriptions. If no flag is set, a complete check is
        performed.
    
    - openFile : of                  (unicode)       [create]
        Opens a file that contains a poly description, as dumped out by the debug
        commands.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCheck`
    """
    pass
def RemoveInbetween(*args, **kwargs): pass
def polyBlindData(*args, **kwargs): pass
def subdCollapse(*args, **kwargs):
    """
    This command converts a takes a subdivision surface, passed as the argument, and
    produces a subdivision surface with a number of hierarchy levels removed.
    Returns the name of the subdivision surface created and optionally the DG node
    that does the conversion.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - level : l                      (int)           [create,query,edit]
        The level that will now become the base mesh. Default:0
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Common flags
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdCollapse`
    """
    pass
def TimeEditorClipLoopToggle(*args, **kwargs): pass
def PerformanceSettingsWindow(*args, **kwargs): pass
def separator(*args, **kwargs): pass
def polyUVCoverage(*args, **kwargs):
    """
    Return the UV space coverage of the specified components. If no objects are
    specified in the command line, then components from selection list will be used.
    
    Flags:
    - uvRange : ur                   (float, float, float, float) [create]
        UV space range for calculating the coverage The 4 values specify the minimum U,
        V and maximum U, V in that order. Default is 0.0 0.0 1.0 1.0.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyUVCoverage`
    """
    pass
def DeleteTextureReferenceObject(*args, **kwargs): pass
def timeWarp(*args, **kwargs): pass
def stringArrayIntersector(*args, **kwargs):
    """
    The stringArrayIntersector command creates and edits an object which is able to
    efficiently intersect large string arrays. The intersector object maintains a
    sense of the intersection so far, and updates the intersection when new string
    arrays are provided using the -i/intersect flag. Note that the string
    intersector object may be deleted using the deleteUI command.
    
    Flags:
    - allowDuplicates : ad           (bool)          [create]
        Should the intersector allow duplicates in the input arrays (true), or combine
        all duplicate entries into a single, unique entry (false). This flag must be
        used when initially creating the intersector. Default is 'false'.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - intersect : i                  (unicode)       [create,edit]
        Intersect the specified string array with the current intersection being
        maintained by the intersector.
    
    - reset : r                      (bool)          [edit]
        Reset the intersector to begin a new intersection.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.stringArrayIntersector`
    """
    pass
def PlaybackRangeStartEnd(*args, **kwargs): pass
def RegionKeysTool(*args, **kwargs): pass
def HypershadeDuplicateWithConnections(*args, **kwargs): pass
def blendShapePanel(*args, **kwargs): pass
def GlobalDiskCacheControl(*args, **kwargs): pass
def PolygonNormalEditTool(*args, **kwargs): pass
def dynPaintCtx(*args, **kwargs):
    """
    Flags:
    - brushDrag : bd                 (float)         []
    
    - brushMass : bm                 (float)         []
    
    - displayQuality : dq            (float)         []
    
    - doProject : dp                 (int)           []
    
    - dragBrushSize : dbs            (unicode)       []
    
    - drawAsMesh : dam               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - inputSamples : inputSamples    (int)           []
    
    - paintAtDepth : pd              (bool)          []
    
    - pixelMode : pxm                (int)           []
    
    - pressureMapping1 : pm1         (int)           []
    
    - pressureMapping2 : pm2         (int)           []
    
    - pressureMapping3 : pm3         (int)           []
    
    - pressureMax1 : px1             (float)         []
    
    - pressureMax2 : px2             (float)         []
    
    - pressureMax3 : px3             (float)         []
    
    - pressureMin1 : ps1             (float)         []
    
    - pressureMin2 : ps2             (float)         []
    
    - pressureMin3 : ps3             (float)         []
    
    - sampleSeparation : sp          (float)         []
    
    - setSelection : ss              (bool)          []
    
    - surfaceOffset : sof            (float)         []
    
    - usePressure : usp              (bool)          []
    
    
    Derived from mel command `maya.cmds.dynPaintCtx`
    """
    pass
def XgConvertToPolygon(*args, **kwargs): pass
def AddBifrostEmitter(*args, **kwargs): pass
def SubdivSurfaceMatchTopology(*args, **kwargs): pass
def OpenBugReport(*args, **kwargs): pass
def singleProfileBirailSurface(*args, **kwargs):
    """
    This cmd creates a railed surface by sweeping the profile curve along the two
    rail curves. One of the requirements for surface creation is the profile curve
    must intersect the two rail curves. If the profile is a surface curve i.e.
    isoparm, curve on surface or trimmed edge then tangent continuity across the
    surface underlying the profile may be enabled using the flag -tp1 true. The
    first argument represetns the profile curve, the second and third the rails.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    - tangentContinuityProfile1 : tp1 (bool)          [create,query,edit]
        Need to be tangent continuous across the profile. The profile must be a surface
        curve. Default:false
    
    - transformMode : tm             (int)           [create,query,edit]
        transform mode ( Non proportional, proportional ). Non proportional is default
        value. Default:0                  Common flags
    
    
    Derived from mel command `maya.cmds.singleProfileBirailSurface`
    """
    pass
def AnimationTurntableOptions(*args, **kwargs): pass
def FBXImportFillTimeline(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportFillTimeline`
    """
    pass
def SoftModDeformerOptions(*args, **kwargs): pass
def CreateSubdivSurfaceOptions(*args, **kwargs): pass
def polyConnectComponents(*args, **kwargs): pass
def workspaceLayoutManager(*args, **kwargs):
    """
    The Workspace Layout Manager loads and saves the layout of the various toolbars
    and windows in the user interface. This command allows listing and managing
    their properties.
    
    Flags:
    - collapseMainWindowControls : cmw (unicode, bool) [create]
        Saves main window layout and collapses all other controls in main window except
        the given one (first parameter) if it does not have any size constraint. Second
        parameter specifies if main window UI elements should be hidden or not.
    
    - current : cu                   (bool)          [create,query]
        Get the name of the current layout.
    
    - delete : d                     (unicode)       [create]
        Delete the given workspace. The string is the name of the layout, not the file
        name.
    
    - i : i                          (unicode)       [create]
        Import the given workspace file to the workspaces directory. The string is an
        absolute path.
    
    - listLayouts : ll               (bool)          [create]
        List the names of all registered layouts.
    
    - listModuleLayouts : lml        (bool)          [create]
        List the names of module layouts.
    
    - listUserLayouts : lul          (bool)          [create]
        List the names of user layouts.
    
    - modified : m                   (unicode)       [create]
        Check whether or not the specified layout has been modified.
    
    - parentWorkspaceControl : pwc   (unicode)       [create]
        Returns the parent workspace control of the given UI (panel) or an empty string
        if it does not exist.
    
    - reset : rs                     (bool)          [create]
        Reset the current workspace to its original layout. Factory layouts will be
        reverted to default while user layouts will be reloaded from disk.
    
    - restoreMainWindowControls : rmw (bool)          [create]
        Restores the main window layout to the one saved with the
        -cmw/-collapseMainWindowControlsflag. The loaded workspace file will be deleted
        once it is restored.
    
    - save : s                       (bool)          [create]
        Save the current layout.
    
    - saveAs : sa                    (unicode)       [create]
        Save the current layout under the specified name.
    
    - setCurrent : sc                (unicode)       [create]
        Load the given workspace.  The string is the name of the layout, not the file
        name.
    
    - setCurrentCallback : scc       (unicode)       [create]
        MEL only.  The string is interpreted as a MEL callback, which is called each
        time a layout is set as current (with -setCurrentflag). The callback is of the
        form: global proc MySetCurrentCallback(string $layoutName)
    
    - setModifiedCallback : smc      (unicode)       [create]
        MEL only.  The string is interpreted as a MEL callback, which is called each
        time a layout is modified or restored, that is, each time the -modifiedflag
        value changes. The callback is of the form: global proc MySetModifiedCallback()
    
    - type : t                       (unicode)       [create]
        Get the type of the specified layout: FACTORY, FACTORY_OVERRIDE, MODULE,
        MODULE_OVERRIDE or USER.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.workspaceLayoutManager`
    """
    pass
def RenameJointsFromLabels(*args, **kwargs): pass
def FBXExportApplyConstantKeyReducer(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportApplyConstantKeyReducer`
    """
    pass
def containerProxy(*args, **kwargs):
    """
    Creates a new container with the same published interface, dynamic attributes
    and attribute values as the specified container but with fewer container
    members. This proxy container can be used as a reference proxy so that values
    can be set on container attributes without loading in the full container. The
    proxy container will contain one or more locator nodes. The first locator has
    dynamic attributes that serve as stand-ins for the original published
    attributes. The remaining locators serve as stand-ins for any dag nodes that
    have been published as parent or as child and will be placed at the world space
    location of the published parent/child nodes. The expected usage of container
    proxies is to serve as a reference proxy for a referenced container. For
    automated creation, export and setup of the proxy see the
    doExportContainerProxy.mel script which is invoked by the Export Container
    Proxymenu item.                  In query mode, return type is based on queried
    flag.
    
    Flags:
    - fromTemplate : ft              (unicode)       [create]
        Specifies the name of a template file which will be used to create the new
        container proxy. Stand-in attributes will be created and published for all the
        numeric attributes on the proxy.
    
    - type : typ                     (unicode)       [create]
        Specifies the type of container node to use for the proxy. This flag is only
        valid in conjunction with the fromTemplate flag. When creating a proxy for an
        existing container, the type created will always be identical to that of the
        source container. The default value for this flag is 'container'.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.containerProxy`
    """
    pass
def xgmSplineGeometryConvert(*args, **kwargs):
    """
    Flags:
    - autoBindSkin : abs             (bool)          []
    
    - combineMesh : cm               (bool)          []
    
    - convertSelected : cs           (bool)          []
    
    - createGuideJoints : cgj        (bool)          []
    
    - createStripJoints : csj        (bool)          []
    
    - curvature : c                  (float)         []
    
    - guideJointPlacementType : gjt  (int)           []
    
    - insertWidthSpan : iws          (bool)          []
    
    - jointNumOnGuide : gjn          (int)           []
    
    - jointNumOnStrip : sjn          (int)           []
    
    - maxInfluences : mi             (int)           []
    
    - stripJointPlacementType : sjt  (int)           []
    
    - useWidthRamp : uwr             (bool)          []
    
    - uvInTiles : t                  (bool)          []
    
    - uvLayoutType : lt              (int)           []
    
    - uvTileSeparation : ts          (float)         []
    
    - widthSpanNum : wsn             (int)           []
    
    
    Derived from mel command `maya.cmds.xgmSplineGeometryConvert`
    """
    pass
def SetFullBodyIKKeysKeyToPin(*args, **kwargs): pass
def setNClothStartState(*args, **kwargs): pass
def transformCompare(*args, **kwargs):
    """
    Compares two transforms passed as arguments. If they are the same, returns 0. If
    they are different, returns 1. If no transforms are specified in the command
    line, then the transforms from the active list are used.
    
    Flags:
    - root : r                       (bool)          [create]
        Compare the root only, rather than the entire hierarchy below the roots.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.transformCompare`
    """
    pass
def keyframeStats(*args, **kwargs): pass
def ProfilerToolShowSelected(*args, **kwargs): pass
def HypershadePublishConnections(*args, **kwargs): pass
def partition(*args, **kwargs): pass
def nConstraintPointToSurfaceOptions(*args, **kwargs): pass
def dR_symmetryTGL(*args, **kwargs): pass
def AssignNewMaterial(*args, **kwargs): pass
def CombinePolygons(*args, **kwargs): pass
def editRenderLayerMembers(*args, **kwargs):
    """
    This command is used to query and edit memberships to render layers. Only
    transform and geometry nodes may be members. At render time, all descendants of
    the members of a render layer will also be included in the render layer.
    
    Flags:
    - fullNames : fn                 (bool)          [query]
        (Query only.) If set then return the full DAG paths of the objects in the layer.
        Otherwise return just the name of the object.
    
    - noRecurse : nr                 (bool)          [create]
        If set then only add selected objects to the render layer.  Otherwise all
        descendants of the selected objects will also be added. This flag may be applied
        to adding or removing objects from the layer.
    
    - remove : r                     (bool)          [create]
        Remove the specified objects from the render layer.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.editRenderLayerMembers`
    """
    pass
def nConstraintTearableSurfaceOptions(*args, **kwargs): pass
def emit(*args, **kwargs):
    """
    The emitaction allows users to add particles to an existing particle object
    without the use of an emitter.  At the same time, it allows them to set any per-
    particle attribute for the particles that are created with the action.The
    particles created do not become a part of the initial state for the particle
    object, and will disappear when the scene is rewound unless they are saved into
    the initial state by the user explicitly.  In addition, a particle object will
    accept particles from an emit action ONLY at frames greater than or equal to its
    start frame.  For example, if you want to use the emit action to create
    particles at frame -5, you must set startFrame for that particle shape to -5 or
    less.Unlike many commands or actions, the emit action uses the order of its
    flags as important information as to how it works.  The -objectand
    -positionflags can appear anywhere in the argument list.  The -attributeand the
    value flags are interpreted based on their order.  Any value flags after an
    -attribute flag and before the next -attribute flag will set the values for the
    attribute specified by the closest -attribute flag before them in the argument
    list.  See the Examplessection below for more detail on how these flags
    work.Currently, no creation expression is executed for the new particles unless
    they are created from within a particle expression defined with the
    dynExpressioncommand or the Expression Editor.  If you want any particular
    values put into the particles at the time they are created, then those values
    should be set using the -attribute, -vectorValue, and -floatValueflags.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Specifies the attribute on the particle object that any value flags following it
        and before the next -attribute flag will be associated with.  The same attribute
        can be specified later in the command to pick up where the first one left off.
        The attributes used must be per-particle attributes.  This will accept both long
        and short names for the attributes. Note the per-particle attribute must already
        exist on the particle object prior to being specified via this command flag.
    
    - floatValue : fv                (float)         [create]
        Sets the float value to be used for the currentattribute of the currentparticle.
        By current attribute, it is meant the attribute specified by the most recent
        -attribute flag.  By current particle, it is meant the particle in the list of
        -position flags that corresponds to the number of values that  have been set for
        the currentattribute.  If the current attribute is a vector-per-particle
        attribute, then the float value specified will be used for all three components
        of the vector.
    
    - object : o                     (unicode)       [create]
        This flag takes the name of a particleShape or the transform directly above it
        in the DAG as its parent.  It specifies which object to add the particles to.
        This flag must be passed, as the selection list is ignored for this action.
    
    - position : pos                 (float, float, float) [create]
        Specifies the positions in the particle object's space (usually world space)
        where the particles are to be created. One particle is created for each
        occurence of this flag.
    
    - vectorValue : vv               (float, float, float) [create]
        Sets the vector value to be used for the currentattribute of the
        currentparticle.  By current attribute, it is meant the attribute specified by
        the most recent -attribute flag.  By current particle, it is meant the particle
        in the list of -position flags that corresponds to the number of values that
        have been set for the currentattribute.  If the current attribute is a float-
        per-particle attribute, then the length of the vector described by this flag
        will be used.  The length is described as SQR( xVal2+ yVal2+ zVal2.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.emit`
    """
    pass
def editImportedStatus(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.editImportedStatus`
    """
    pass
def closeCurve(*args, **kwargs): pass
def panelConfiguration(*args, **kwargs):
    """
    This command creates a panel configuration object. Typically you would not call
    this method command directly. Instead use the Panel Editor. Once a panel
    configuration is created you can make it appear in the main Maya window by
    selecting it from any panel's Panels-Saved Layoutsmenu.
    
    Flags:
    - addPanel : ap                  (bool, unicode, unicode, unicode, unicode) [create,edit]
        Adds the specified panel to the configuration.  Arguments are: isFixed, label
        string, type string, create string, edit string.
    
    - configString : cfs             (unicode)       [create,query,edit]
        Specifies the string that arranges the panels.
    
    - createStrings : cs             (bool)          [query]
        Returns an string array of the panel creation strings.
    
    - defaultImage : di              (unicode)       [create,query]
        The default image for this configuration. Once the default image is set it may
        not be changed. If an image is set with the -i/imageflag then it's value will
        take precedence.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - editStrings : es               (bool)          [query]
        Returns an string array of the panel edit strings.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - image : i                      (unicode)       [create,query,edit]
        The user specified image for this configuration. Use this flag to override the
        default image.
    
    - isFixedState : isFixedState    (bool)          [query]
        Returns an integer array of whether the panels have fixed states or not.
    
    - label : l                      (unicode)       [create,query,edit]
        Configuration label.
    
    - labelStrings : ls              (bool)          [query]
        Returns an string array of the panel labels.
    
    - numberOfPanels : np            (bool)          [query]
        Returns the number of panels in the configuration.
    
    - removeAllPanels : rap          (bool)          [edit]
        Removes the last panel in the config.
    
    - removeLastPanel : rlp          (bool)          [edit]
        Removes the last panel in the config.
    
    - replaceCreateString : rcs      (int, unicode)  [edit]
        Replaces the specified create string.  The index is 1 based.
    
    - replaceEditString : res        (int, unicode)  [edit]
        Replaces the specified edit string.  The index is 1 based.
    
    - replaceFixedState : rfs        (int, bool)     [edit]
        Replaces the specified fixed state value (true|false).  The index is 1 based.
    
    - replaceLabel : rl              (int, unicode)  [edit]
        Replaces the specified label.  The index is 1 based.
    
    - replacePanel : rp              (int, bool, unicode, unicode, unicode, unicode) [create,edit]
        Replaces the specified panel in the configuration.  Arguments are: index,
        isFixed, label string, type string, create string, edit string. The index is 1
        based.
    
    - replaceTypeString : rts        (int, unicode)  [edit]
        Replaces the specified type string.  The index is 1 based.
    
    - sceneConfig : sc               (bool)          [create,query,edit]
        Specifies whether the configuration is associated with the scene. Scene
        configurations are created when the scene is opened and deleted when the scene
        is closed.
    
    - typeStrings : ts               (bool)          [query]
        Returns an string array of the panel types.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
    
    - userCreated : uc               (bool)          [create,query,edit]
        Returns true if the configuration was created by the user. If it is user
        created, the configuration will show up in the RMB menu in the toolbox's saved
        layouts.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.panelConfiguration`
    """
    pass
def Quadrangulate(*args, **kwargs): pass
def launchImageEditor(*args, **kwargs):
    """
    Launch the appropriate application to edit/view the image files specified. This
    command works only on the Macintosh and Windows platforms.
    
    Flags:
    - editImageFile : eif            (unicode)       [create]
        If the file is a PSD, then the specified verison of Photoshop is launched, and
        the file is opened in it. If file is any other image type, then the preferred
        image editor is launched, and the file is opened in it.
    
    - viewImageFile : vif            (unicode)       [create]
        Opens up an Image editor to view images.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.launchImageEditor`
    """
    pass
def DuplicateFaceOptions(*args, **kwargs): pass
def recordDevice(*args, **kwargs):
    """
    Starts and stops server side device recording. The data is recorded at the
    device rate. Once recorded, the data may be brought into Maya with the applyTake
    command. See also: enableDevice, applyTake, readTake, writeTake In query mode,
    return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - cleanup : c                    (bool)          [create]
        Removes the recorded data from the device.
    
    - data : da                      (bool)          [query]
        Specifies if the device has recorded data. If the device is recording at the
        time of query, the flag will return false. Q: When queried, this flag returns an
        int.
    
    - device : d                     (unicode)       [create]
        Specifies which device(s) to start record recording. The listed device(s) will
        start recording regardless of their record enable state. C: The default is to
        start recording all devices that are record enabled.
    
    - duration : dr                  (int)           [create,query]
        Duration (in seconds) of the recording. When the duration expires, the device
        will still be in a recording state and must be told to stop recording. C: The
        default is 60. Q: When queried, this flag returns an int.
    
    - playback : p                   (bool)          [create,query]
        If any attribute is connected to an animation curve, the animation curve will
        play back while recording the device(s) including any animation curves attached
        to attributes being recorded. C: The default is false. Q: When queried, this
        flag returns an int.
    
    - state : st                     (bool)          [create,query]
        Start or stop device recording. C: The default is true. Q: When queried, this
        flag returns an int.
    
    - wait : w                       (bool)          [create]
        If -p/playback specified, wait until playback completion before returning
        control to the user. This flag is ignored if -p is not used.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.recordDevice`
    """
    pass
def StitchEdgesTool(*args, **kwargs): pass
def OpenLearningPath(*args, **kwargs): pass
def ShowAllComponents(*args, **kwargs): pass
def HypershadeSelectUpStream(*args, **kwargs): pass
def mirrorShape(*args, **kwargs):
    """
    Flags:
    - mirrorAxis : ma                (unicode)       []
    
    
    Derived from mel command `maya.cmds.mirrorShape`
    """
    pass
def hotkeyMapSet(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.hotkeyMapSet`
    """
    pass
def AddAnimationOffset(*args, **kwargs): pass
def NormalizeWeights(*args, **kwargs): pass
def UnparentOptions(*args, **kwargs): pass
def dR_selectPress(*args, **kwargs): pass
def contextInfo(*args, **kwargs):
    """
    This command allows you to get information on named contexts.
    
    Flags:
    - apiImage1 : ip1                (unicode)       []
    
    - c : c                          (bool)          [create]
        Return the class type of the named context.
    
    - escapeContext : esc            (bool)          [create]
        Return the command string that will allow you to exit the current tool.
    
    - exists : ex                    (bool)          [create]
        Return true if the context exists, false if it does not exists (or is internal
        and therefore untouchable)
    
    - image1 : i1                    (bool)          [create]
        Returns the name of an xpm associated with the named context.
    
    - image2 : i2                    (bool)          [create]
        Returns the name of an xpm associated with the named context.
    
    - image3 : i3                    (bool)          [create]
        Returns the name of an xpm associated with the named context.
    
    - title : t                      (bool)          [create]
        Return the title string of the named context.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.contextInfo`
    """
    pass
def clearShear(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.clearShear`
    """
    pass
def ExtendCurve(*args, **kwargs): pass
def dR_viewRight(*args, **kwargs): pass
def DeleteAttribute(*args, **kwargs): pass
def CreateNURBSSphereOptions(*args, **kwargs): pass
def nClothReplaceFramesOpt(*args, **kwargs): pass
def QuickRigEditor(*args, **kwargs): pass
def InteractivePlayback(*args, **kwargs): pass
def promptDialog(*args, **kwargs): pass
def nexConnectCtx(*args, **kwargs):
    """
    Flags:
    - appendMesh : apm               (unicode)       []
    
    - bevelEdge : bed                (float)         []
    
    - bridgeCurveType : bct          (int)           []
    
    - bugReport : bug                (bool)          []
    
    - cameraToPoly : ctp             (bool)          []
    
    - canDoConnect : cdc             (bool)          []
    
    - cancelManip : cam              (bool)          []
    
    - capslock : cap                 (bool)          []
    
    - connItemSel : cis              (int)           []
    
    - connectMode : sm               (bool)          []
    
    - contextTweakMode : ctm         (bool)          []
    
    - curSlideMesh : csm             (unicode)       []
    
    - debugString : deb              (bool)          []
    
    - extrudePoly : epl              (float)         []
    
    - extrudeVert : evr              (float, float)  []
    
    - extrudeVertDivisions : evd     (int)           []
    
    - getManipVal : gmv              (unicode, unicode) []
    
    - getSplitCmd : gsc              (bool)          []
    
    - hasPolySelection : hps         (bool)          []
    
    - hasValidSel : hs               (bool)          []
    
    - hideManip : hm                 (bool)          []
    
    - hiliteSymmetrize : hsy         (bool)          []
    
    - iconpath : ico                 (unicode)       []
    
    - isGoodForBevel : gbe           (bool)          []
    
    - isGoodForBridge : gfb          (bool)          []
    
    - isGoodForExtrude : gfe         (bool)          []
    
    - keepFacesTogether : kft        (int)           []
    
    - lastSewNode : lsn              (unicode)       []
    
    - lockSelected : ls              (bool)          []
    
    - manipOrientation : mo          (float, float, float) []
    
    - manipOrientationX : mox        (float)         []
    
    - manipOrientationY : moy        (float)         []
    
    - manipOrientationZ : moz        (float)         []
    
    - manipPos : mp                  (float, float, float) []
    
    - manipPosX : mpx                (float)         []
    
    - manipPosY : mpy                (float)         []
    
    - manipPosZ : mpz                (float)         []
    
    - manipScaleX : msx              (float)         []
    
    - manipScaleY : msy              (float)         []
    
    - manipScaleZ : msz              (float)         []
    
    - manipUndoNotify : mun          (bool)          []
    
    - manipVal : mv                  (unicode, unicode, float) []
    
    - modelPanelType : mpt           (unicode, unicode) []
    
    - multiCompMode : mcm            (int)           []
    
    - numConnItems : nci             (bool)          []
    
    - polynames : pn                 (bool)          []
    
    - prevManipVal : pmv             (float)         []
    
    - quadDrawClearDots : qcd        (bool)          []
    
    - resetCustom : rc               (unicode)       []
    
    - resetManip : rm                (bool)          []
    
    - restoreSelection : res         (unicode)       []
    
    - rmbComplete : rmc              (bool)          []
    
    - selCount : cnt                 (unicode)       []
    
    - selFlip : sef                  (bool)          []
    
    - selSym : ses                   (bool)          []
    
    - selectHilite : sh              (bool)          []
    
    - selectLocked : sl              (bool)          []
    
    - skipSelTypeCB : ssc            (bool)          []
    
    - stickyIsDown : sid             (bool)          []
    
    - straighten : str               (bool)          []
    
    - unlockAll : ua                 (bool)          []
    
    - updateManips : upm             (bool)          []
    
    - useRefMesh : urm               (bool)          []
    
    
    Derived from mel command `maya.cmds.nexConnectCtx`
    """
    pass
def muMessageAdd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.muMessageAdd`
    """
    pass
def NextGreasePencilFrame(*args, **kwargs): pass
def Birail3Options(*args, **kwargs): pass
def U3DBrushPressureOff(*args, **kwargs): pass
def deleteNclothCache(*args, **kwargs): pass
def planarSrf(*args, **kwargs):
    """
    This command computes a planar trimmed surface given planar boundary curves that
    form a closed region.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - degree : d                     (int)           [create,query,edit]
        The degree of the resulting surface: 1 - linear, 3 - cubic Default:3
    
    - frozen : fzn                   (bool)          []
    
    - keepOutside : ko               (bool)          [create,query,edit]
        If true, keep the regions outside the given curves. Default:false
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)
    
    - range : rn                     (bool)          [create]
        Force a curve range on complete input curve.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - tolerance : tol                (float)         [create,query,edit]
        The distance tolerance for the cvs of the curves to be in the same plane.
        Default:0.01                  Common flags
    
    
    Derived from mel command `maya.cmds.planarSrf`
    """
    pass
def HypershadeDisplayAsSmallSwatches(*args, **kwargs): pass
def MakeFluidCollideOptions(*args, **kwargs): pass
def dR_extrudeTool(*args, **kwargs): pass
def subdEditUV(*args, **kwargs):
    """
    Command edits uvs on subdivision surfaces. When used with the query flag, it
    returns the uv values associated with the specified components.
    
    Flags:
    - angle : a                      (float)         [create,query]
        Specifies the angle value (in degrees) that the uv values are to be rotated by.
    
    - pivotU : pu                    (float)         [create,query]
        Specifies the pivot value, in the u direction, about which the scale or rotate
        is to be performed.
    
    - pivotV : pv                    (float)         [create,query]
        Specifies the pivot value, in the v direction, about which the scale or rotate
        is to be performed.
    
    - relative : r                   (bool)          [create,query]
        Specifies whether this command is editing the values relative to the currently
        existing values. Default is true;
    
    - rotateRatio : rr               (float)         [create,query]
        Specifies the ratio value that the uv values are to be rotated by Default is 1.0
    
    - rotation : rot                 (bool)          [create,query]
        Specifies whether this command is editing the values with rotation values
    
    - scale : s                      (bool)          [create,query]
        Specifies whether this command is editing the values with scale values
    
    - scaleU : su                    (float)         [create,query]
        Specifies the scale value in the u direction.
    
    - scaleV : sv                    (float)         [create,query]
        Specifies the scale value in the v direction.
    
    - uValue : u                     (float)         [create,query]
        Specifies the value, in the u direction - absolute if relative flag is false..
    
    - uvSetName : uvs                (unicode)       [create,query]
        Specifies the name of the uv set to edit uvs on. If not specified will use the
        current uv set if it exists.
    
    - vValue : v                     (float)         [create,query]
        Specifies the value, in the v direction - absolute if relative flag is false..
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdEditUV`
    """
    pass
def CurveUtilitiesMarkingMenuPopDown(*args, **kwargs): pass
def Create3DContainerOptions(*args, **kwargs): pass
def Birail1(*args, **kwargs): pass
def PolySpinEdgeForward(*args, **kwargs): pass
def AutoPaintMarkingMenuPopDown(*args, **kwargs): pass
def ScaleCurvatureOptions(*args, **kwargs): pass
def xgmAddGuide(*args, **kwargs):
    """
    Flags:
    - default : d                    (bool)          []
    
    - faceId : f                     (int)           []
    
    - patch : p                      (unicode)       []
    
    - position : pos                 (float, float)  []
    
    - push : pu                      (bool)          []
    
    - temp : t                       (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmAddGuide`
    """
    pass
def dR_softSelDistanceTypeObject(*args, **kwargs): pass
def SnapToGridRelease(*args, **kwargs): pass
def PolyBrushMarkingMenu(*args, **kwargs): pass
def duplicate(*args, **kwargs): pass
def nConstraintPointToSurface(*args, **kwargs): pass
def OutlinerCollapseAllItems(*args, **kwargs): pass
def FluidsToPolygons(*args, **kwargs): pass
def setStartupMessage(*args, **kwargs):
    """
    Update the startup window message.  Also know as the 'Splash Screen', this is
    the window that appears while the application is starting up.
    
    
    Derived from mel command `maya.cmds.setStartupMessage`
    """
    pass
def ToggleVertices(*args, **kwargs): pass
def DecreaseGammaFine(*args, **kwargs): pass
def TransferAttributes(*args, **kwargs): pass
def containerTemplate(*args, **kwargs):
    """
    A container template is a description of a container's published interface. This
    command provides the ability to create and save a template file for a container
    or load an existing template file.  Once a template exists, the user can query
    the template information.                In query mode, return type is based on
    queried flag.
    
    Flags:
    - addBindingSet : abs            (unicode)       [create,edit]
        This argument is used to add a new binding set with the given name to a
        template. A default binding set will be created. If the binding set already
        exists, the force flag must be used to replace the existing binding set. When
        used with the fromContainer option, default bindings will be entered based on
        the current bindings of the designated container. When used without a reference
        container, the binding set will be made with placeholder entries. The template
        must be saved before the new binding set is permanently stored with the template
        file.
    
    - addNames : an                  (bool)          [edit]
        In edit mode, when used with the fromContainer flag, any published name on the
        container not present as an attribute on the template will be added to the
        template.
    
    - addView : av                   (unicode)       [create,edit]
        This argument is used to add a new view with the given name to a template. By
        default a view containing a flat list of all template attributes will be
        created.  The layoutMode flag provides more layout options. The template must be
        saved before the new view is permanently stored with the template file.
    
    - allKeyable : ak                (bool)          [create,edit]
        Used when the fromSelection flag is true and fromContainer is false. If true we
        will use all keyable attributes to define the template or the view, if false we
        use the attributes passed in with the attribute flag.
    
    - attribute : at                 (unicode)       [create,edit]
        If fromSelection is true and allKeyable is false, this attribute name will be
        used to create an attribute item in the template file.
    
    - attributeList : al             (unicode)       [create,query,edit]
        Used in query mode, returns a list of attributes contained in the template
        definition.
    
    - baseName : bn                  (unicode)       [create,query]
        Used in query mode, returns the base name of the template. The basename is the
        template name with any package qualifiers stripped off.
    
    - bindingSetList : bsl           (unicode)       [create,query]
        Used in query mode, returns a list of all binding sets defined on the template.
    
    - childAnchor : can              (bool)          [create,query]
        This flag can be optionally specified when querying the publishedNodeList. The
        resulting list will contain only childAnchor published nodes.
    
    - delete : d                     (bool)          [create]
        Delete the specified template and its file. All objects that are associated with
        this template or contained in the same template file will be deleted. To simply
        unload a template without permanently deleting its file, use unload instead.
    
    - exists : ex                    (bool)          [query]
        Returns true or false depending upon whether the specified template exists. When
        used with the matchFile argument, the query will return true if the template
        exists and the filename it was loaded from matches the filename given.
    
    - expandCompounds : ec           (bool)          [create,edit]
        This argument is used to determine how compound parent attributes and their
        children will be added to generated views when both are published to the
        container. When true, the compound parent and all compound child attributes
        published to the container will be included in the view. When false, only the
        parent attribute is included in the view. Note: if only the child attributes are
        published and not the parent, the children will be included in the view, this
        flag is only used in the situation where both parent and child attributes are
        published to the container. The default value is false.
    
    - fileName : fn                  (unicode)       [create,query]
        Specifies the filename associated with the template.  This argument can be used
        in conjunction with load, save or query modes. If no filename is associated with
        a template, a default file name based on the template name will be used.  It is
        recommended but not required that the filename and template name correspond.
    
    - force : f                      (bool)          [create]
        This flag is used with some actions to allow them to proceed with an overwrite
        or destructive operation. When used with load, it will allow an existing
        template to be reloaded from a file.  When used in create mode, it will allow an
        existing template to be recreated (for example when using fromContainer argument
        to regenerate a template).
    
    - fromContainer : fc             (unicode)       [create]
        This argument is used in create or edit mode to specify a container node to be
        used for generating the template contents. In template creation mode, the
        template definition will be created based on the list of published attributes in
        the specified container. In edit mode, when used with the addNames flag or with
        no other flag, any published name on the container not present as an attribute
        on the template will be added to the template. This flag is also used in
        conjunction with flags such as addView.
    
    - fromSelection : fs             (bool)          [create,edit]
        If true, we will use the active selection list to create the template or the
        view. If allKeyable is also true then we will create the template from all
        keyable attributes in the selection, otherwise we will create the template using
        the attributes specified with the attribute flag.
    
    - layoutMode : lm                (int)           [create]
        This argument is used to specify the layout mode when creating a view. Values
        correspond as follows: 0: layout in flat list (default when not creating view
        from container) 1: layout grouped by node (default if creating view from
        container) The fromContainer or fromSelection argument is required to provide
        the reference container or selection for layout modes that require node
        information.  Note that views can only refer to defined template attributes.
        This means that when using the fromContainer or from Selection flag to add a
        view to an existing template, only attributes that are defined on both the
        template and the container or the current selection will be included in the view
        (i.e. published attributes on the container that are not defined in the template
        will be ignored).
    
    - load : l                       (bool)          []
        Load an existing template from a file. If a filename is specified for the
        template, the entire file (and all templates in it) will be loaded. If no file
        is specified, a default filename will be assumed, based on the template name.
    
    - matchFile : mf                 (unicode)       [query]
        Used in query mode in conjunction with other flags this flag specifies an
        optional file name that is to be matched as part of the query operation.
    
    - matchName : mn                 (unicode)       [query]
        Used in query mode in conjunction with other flags this flag specifies an
        optional template name that is to be matched as part of the query operation. The
        base template name is used for matching, any template with the same basename
        will be matched even across different packages.
    
    - parentAnchor : pan             (bool)          [create,query]
        This flag can be optionally specified when querying the publishedNodeList. The
        resulting list will contain only parentAnchor published nodes.
    
    - publishedNodeList : pnl        (unicode)       [create,query,edit]
        Used in query mode, returns a list of published nodes contained in the template
        definition. By default all published nodes on the template will be returned. The
        list of published nodes can be limited to only include certain types of
        published nodes using one of the childAnchor, parentAnchor or rootTransform
        flags. If an optional flag is are specified, only nodes of the specified type
        will be returned.
    
    - removeBindingSet : rbs         (unicode)       [create,edit]
        This argument is used to remove the named binding set from the template. The
        template must be saved before the binding set is permanently removed from the
        template file.
    
    - removeView : rv                (unicode)       [create,edit]
        This argument is used to remove the named view from the template. The template
        must be saved before the view is permanently removed from the template file.
    
    - rootTransform : rtn            (bool)          [create,query]
        This flag can be optionally specified when querying the publishedNodeList. The
        resulting list will contain only rootTransform published nodes.
    
    - save : s                       (bool)          [create]
        Save the specified template to a file. If a filename is specified for the
        template, the entire file (and all templates associated with it) will be saved.
        If no file name is specified, a default filename will be assumed, based on the
        template name.
    
    - searchPath : sp                (unicode)       [query,edit]
        The template searchPath is an ordered list of all locations that are being
        searched to locate template files (first location searched to last location
        searched). The template search path setting is stored in the current workspace
        and can also be set and queried as the file rule entry for 'templates' (see the
        workspace command for more information). In edit mode, this flag allows the
        search path setting to be customized. When setting the search path value, the
        list should conform to a path list format expected on the current platform.
        This means that paths should be separated by a semicolon (;) on Windows and a
        colon (:) on Linux and MacOSX. Environment variables can also be used.
        Additional built-in paths may be added automatically by maya to the customized
        settings. In query mode, this flag returns the current contents of the search
        path; all paths, both customized and built-in, will be included in the query
        return value.
    
    - silent : si                    (bool)          [create,query,edit]
        Silent mode will suppress any error or warning messages that would normally be
        reported from the command execution.  The return values are unaffected.
    
    - templateList : tl              (unicode)       [query]
        Used in query mode, returns a list of all loaded templates. This query can be
        used with optional matchFile and matchName flags. When used with the matchFile
        flag, the list of templates will be restricted to those associated with the
        specified file.  When used with the matchName flag, the list of templates will
        be restricted to those matching the specified template name.
    
    - unload : u                     (bool)          [create]
        Unload the specified template.  This action will not delete the associated
        template file if one exists, it merely removes the template definition from the
        current session.
    
    - updateBindingSet : ubs         (unicode)       [create,edit]
        This argument is used to update an existing binding set with new bindings. When
        used with the fromContainer argument binding set entries with be replaced or
        merged in the binding set based on the bindings of the designated container. If
        the force flag is used, existing entries in the binding set are replaced with
        new values. When force is not used, only new entries are merged into the binding
        set, any existing entries will be left as-is. When used without a reference
        container, the binding set will be updated with placeholder entries. The
        template must be saved before the new binding set is permanently stored with the
        template file.
    
    - useHierarchy : uh              (bool)          [create,edit]
        If true, and the fromSelection flag is set, the selection list will expand to
        include it's hierarchy also.
    
    - viewList : vl                  (unicode)       [create,query]
        Used in query mode, returns a list of all views defined on the template.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.containerTemplate`
    """
    pass
def dR_connectPress(*args, **kwargs): pass
def CreateNURBSCone(*args, **kwargs): pass
def UVEditorResetAllToDefault(*args, **kwargs): pass
def SelectLinesMask(*args, **kwargs): pass
def setUITemplate(*args, **kwargs):
    """
    This command sets the current(default) command template for the ELF commands.
    The special name NONE can be used to set no templates current. See
    uiTemplatecommand also.
    
    Flags:
    - popTemplate : ppt              (bool)          [create]
        Pop the current template off of the stack and sets the next template on the
        stack to be current.
    
    - pushTemplate : pst             (bool)          [create]
        Push the current template onto a stack that can later be popped.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setUITemplate`
    """
    pass
def DisplayShadedAndTextured(*args, **kwargs): pass
def RandomizeShellsOptions(*args, **kwargs): pass
def SelectAllRigidConstraints(*args, **kwargs): pass
def truncateFluidCache(*args, **kwargs):
    """
    This command sets the end time of a fluid cache to the current time. If the
    current time is less than the end time of the cache, the cache is truncated so
    that only the portion of the cache up to and including the current time is
    preserved.                 In query mode, return type is based on queried flag.
    
    
    Derived from mel command `maya.cmds.truncateFluidCache`
    """
    pass
def surface(*args, **kwargs): pass
def TransformNoSelectOnTool(*args, **kwargs): pass
def pause(*args, **kwargs):
    """
    Pause for a specified number of seconds for canned demos or for test scripts to
    allow user to view results.
    
    Flags:
    - seconds : sec                  (int)           [create]
        Pause for the specified number of seconds.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pause`
    """
    pass
def BezierSetAnchorSmooth(*args, **kwargs): pass
def SelectPreviousObjectsMudbox(*args, **kwargs): pass
def warning(*args, **kwargs):
    """
    The warning command is provided so that the user can issue warning messages from
    his/her scripts. The string argument is displayed in the command window (or
    stdout if running in batch mode) after being prefixed with a warning message
    heading and surrounded by the appropriate language separators (# for Python, //
    for Mel).
    
    Flags:
    - noContext : n                  (bool)          [create]
        Do not include the context information with the warning message.
    
    - showLineNumber : sl            (bool)          [create]
        Obsolete. Will be deleted in the next version of Maya. Use the checkbox in the
        script editor that enables line number display instead.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.warning`
    """
    pass
def thumbnailCaptureComponent(*args, **kwargs):
    """
    This command is used to generate a thumbnail/playblast sequence from the scene.
    In query mode, return type is based on queried flag.
    
    Flags:
    - capture : c                    (bool)          [create]
        Create a new component to capture a sequence of image for the current scene.
    
    - capturedFrameCount : cfc       (bool)          [query]
        Query only. Return the number of frames that have been captured.
    
    - closeCurrentSession : ccs      (bool)          [create]
        Delete the current thumbnail component (preview image will be destroyed).
    
    - delete : d                     (bool)          [create]
        Delete the generated image sequence and preview for the current capture session.
    
    - endFrame : ef                  (int)           [create,query]
        Set the end captured frame. Only valid when the -c/captureflag is set. If
        -sf/startFrameis set and not -ef/endFrame, or if endFrame is smaller than
        startFrame, endFrame will be automatically set to startFrame.
    
    - fileDialogCallback : fdc       (unicode)       [create]
        MEL only. Set the callback file dialog which is called after the capture
        component window has been closed. Only valid when the -c/captureflag is set.
    
    - fileDialogProcessing : fdp     (bool)          []
    
    - isSessionOpened : iso          (bool)          [query]
        Returns true if a thumbnail/playblast capture session is currently running
        (already opened and still not cancelled/saved).
    
    - launchedFromOptionsBox : lfo   (bool)          [query]
        Returns true if the thumbnail capture component was launched through the options
        dialog box, else false.
    
    - previewPath : pp               (bool)          [query]
        Returns the generated preview path (the first frame of generated sequence
        resized to 100x100 px).
    
    - removeProjectThumbnail : rpt   (unicode)       [create]
        Remove all captured thumbnail/playblast from the given project file path.
    
    - save : s                       (unicode)       [create]
        Save the generated image sequence for the given file to disk. The file path must
        be an absolute path.
    
    - selectedFileName : sfn         (bool)          []
    
    - startFrame : sf                (int)           [create,query]
        Set the start captured frame. Only valid when -c/captureflag is set.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.thumbnailCaptureComponent`
    """
    pass
def PolygonPasteOptions(*args, **kwargs): pass
def NodeEditorShapeMenuStateNoShapes(*args, **kwargs): pass
def WedgePolygonOptions(*args, **kwargs): pass
def AlembicOpen(*args, **kwargs): pass
def FBXGetTakeComment(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeComment`
    """
    pass
def polySelectConstraint(*args, **kwargs):
    """
    Changes the global polygonal selection constraints.              In query mode,
    return type is based on queried flag.
    
    Flags:
    - angle : a                      (int)           [create,query]
        0(off) 1(on).
    
    - anglePropagation : ap          (bool)          [create,query]
        If true, selection will be extended to all connected components whose normal is
        close to any of the normals of the original selection (see angleTolerance)
    
    - angleTolerance : at            (float)         [create,query]
        When angle propagation is turned on, this controls what is the maximum
        difference of the normal vectors where the selection propagates.
    
    - anglebound : ab                (float, float)  [create,query]
        min and max angles.  The given value should be in the current units that Maya is
        using.  See the examples for how to check the current unit. For vertices :
        angle between the 2 edges owning the vertex. For edges :        angle between
        the 2 faces owning the edge.
    
    - border : bo                    (bool)          [create,query]
        Use -uvConstraint trueto edit/query UV view constraint.If true, selection will
        be extended to all connected border components so that the whole loopis
        selected. It also removes all nonborder components from the existing selection
        (compatibility mode)
    
    - borderPropagation : bp         (bool)          [create,query]
        If true, selection will be extended to all connected border components so that
        the whole loopis selected.
    
    - convexity : c                  (int)           [create,query]
        0(off) 1(concave) 2(convex).
    
    - crease : cr                    (bool)          [create,query]
        If true, selection will be extended to all connected creased components.
    
    - disable : dis                  (bool)          [create]
        Toggles offall constraints for all component types, but leaves the other
        constraint parameters. This flag may be used together with other ones toggling
        some constraints on: if so, all constraints are disabled first (no matter the
        position of the -disable flag in the command line) then the specified ones are
        activated.
    
    - dist : d                       (int)           [create,query]
        0(off) 1(to point) 2(to axis) 3(to plane).
    
    - distaxis : da                  (float, float, float) [create,query]
        axis. (Normal to the plane in case of distance to plane).
    
    - distbound : db                 (float, float)  [create,query]
        min and max distances.
    
    - distpoint : dp                 (float, float, float) [create,query]
        point. (Axis/plane origin in case of distance to axis/plane).
    
    - edgeDistance : ed              (int)           [create]
        Maximum distance (number of edges) to extend the edge selection for Contiguous
        Edgespropagate mode. 0 means to ignore the distance constraint.
    
    - geometricarea : ga             (int)           [create,query]
        0(off) 1(on).
    
    - geometricareabound : gab       (float, float)  [create,query]
        min and max areas.
    
    - holes : h                      (int)           [create,query]
        0(off) 1(holed) 2(non holed).
    
    - length : l                     (int)           [create,query]
        0(off) 1(on).
    
    - lengthbound : lb               (float, float)  [create,query]
        min and max lengths.
    
    - loopPropagation : lp           (bool)          [create,query]
        If true, edge selection will be extended to a loop.
    
    - max2dAngle : m2a               (float)         [create]
        Maximum angle between two consecutive edges in the 2d tangent plane for
        Contiguous Edgespropagate mode.
    
    - max3dAngle : m3a               (float)         [create]
        Maximum angle between two consecutive edges in 3d space for Contiguous
        Edgespropagate mode.
    
    - mode : m                       (int)           [create,query]
        0(Off) 1(Next) 2(Current and Next) 3(All and Next). Off :             no
        constraints are used at all. Next :             constraints will be used to
        filter next selections. Current and Next :    constraints will be aplied on
        current selection and then used to filter next selections. All and Next :
        all items satisfying constraints are selected.
    
    - nonmanifold : nm               (int)           [create,query]
        0(off) 1(on)
    
    - oppositeEdges : oe             (bool)          [create]
        Use the opposite edges
    
    - order : order                  (int)           [create,query]
        0(off) 1(on).
    
    - orderbound : orb               (int, int)      [create,query]
        min and max orders. number of owning edges.
    
    - orient : o                     (int)           [create,query]
        0(off) 1(orientation) 2(direction).
    
    - orientaxis : oa                (float, float, float) [create,query]
        axis.
    
    - orientbound : ob               (float, float)  [create,query]
        min and max angles.  The given value should be in the current units that Maya is
        using.  See the examples for how to check the current unit.
    
    - planarity : p                  (int)           [create,query]
        0(off) 1(non planar) 2(planar).
    
    - propagate : pp                 (int)           [create,query]
        0(Off) 1(More) 2(Less) 3(Border) 4(Contiguous Edges) 5(Grow Along Loop) 6(Shrink
        Along Loop). More :        will add current selection border to current
        selection. Less :        will remove current selection border from current
        selection. Border :    will keep only current selection border. Contiguous Edges
        :    Add edges aligned with the current edges selected. The direction and number
        of edges selected is controlled by the -m2a, -m3a, and -ed flags. Grow Along
        Loop:    Will grow current selection along loop, support face, edge, vertex and
        UV. Shrink Along Loop:    Will shrink current selection along loop, support
        face, edge, vertex and UV.
    
    - random : r                     (int)           [create,query]
        0(off) 1(on).
    
    - randomratio : rr               (float)         [create,query]
        ratio [0,1].
    
    - returnSelection : rs           (bool)          [create]
        If true, current selection will not be modified, instead the new selection will
        be returned as result.
    
    - ringPropagation : rp           (bool)          [create,query]
        If true, edge selection will be extended to a ring.
    
    - shell : sh                     (bool)          [create,query]
        If true, selection will be extended to all connected components so that the
        whole piece of object is selected.
    
    - size : sz                      (int)           [create,query]
        0(off) 1(triangles) 2(quads) 3(nsided).
    
    - smoothness : sm                (int)           [create,query]
        0(off) 1(hard) 2(smooth).
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that would restore all the current
        settings.
    
    - textured : tx                  (int)           [create,query]
        0(off) 1(mapped) 2(unmapped).
    
    - texturedarea : ta              (int)           [create,query]
        0(off) 1(Area specified is unsigned) 2(Area specified is signed).
    
    - texturedareabound : tab        (float, float)  [create,query]
        min and max areas.
    
    - textureshared : ts             (int)           [create,query]
        0(off) 1(on). This option will select any UVs on the currentMap which are shared
        by more than one vertex
    
    - topology : tp                  (int)           [create,query]
        0(off) 1(non triangulatable) 2(lamina) 3(non triangulatable and lamina)
    
    - type : t                       (int)           [create,query]
        0x0000(none) 0x0001(vertex) 0x8000(edge) 0x0008(face) 0x0010(texture
        coordinates)
    
    - uvBorderSelection : ubs        (bool)          [create,query]
        This flag only works on UV viewIf true, selection will be extended to all UV
        border components It also removes all components not on UV border from the
        existing selection
    
    - uvConstraint : uvc             (bool)          [create]
        If true, applicable constraint flags will work on UV view.       In query mode,
        this flag can accept a value.
    
    - uvEdgeLoopPropagation : ulp    (bool)          [create,query]
        Use -uvConstraint trueto edit/query UV view constraint.If true, UV edge
        selection will be extended to a loop.
    
    - uvEdgeRingPropagation : urp    (bool)          [create,query]
        This flag only works on UV viewIf true, UV edge selection will be extended to a
        ring.
    
    - uvFaceOrientation : ufo        (int)           [create,query]
        This flag only works on UV view0(Off) 1(Front Face) 2(Back Face).
    
    - uvShell : uv                   (bool)          [create,query]
        If true, selection will be extended to all connected components in UV space
    
    - visibility : v                 (int)           [create,query]
        0(off) 1(on).
    
    - visibilityangle : va           (float)         [create,query]
        angle [0,360].
    
    - visibilitypoint : vp           (float, float, float) [create,query]
        point.
    
    - where : w                      (int)           [create,query]
        0(off) 1(on border) 2(inside).
    
    - wholeSensitive : ws            (bool)          [create,query]
        Tells how to select faces : either by picking anywhere inside the face (if true)
        or by picking on the face center marker (if false).                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySelectConstraint`
    """
    pass
def nurbsToSubdivPref(*args, **kwargs):
    """
    This command sets the values used by the nurbs-to-subdivision surface
    preference.  This preference is used by the nurbs creation commands and is saved
    between Maya sessions. To query any of the flags, use the -queryflag. For more
    information on the flags, see the node documentation for the
    nurbsToSubdivProcnode. In query mode, return type is based on queried flag.
    
    Flags:
    - bridge : br                    (int)           [create,query]
        Valid values are 0, 1, 2 or 3.
    
    - capType : ct                   (int)           [create,query]
        Valid values are 0 or 1.
    
    - collapsePoles : cp             (bool)          [create,query]
    
    - matchPeriodic : mp             (bool)          [create,query]
    
    - maxPolyCount : mpc             (int)           [create,query]
    
    - offset : o                     (float)         [create,query]
    
    - reverseNormal : rn             (bool)          [create,query]
    
    - solidType : st                 (int)           [create,query]
        Valid values are 0, 1 or 2.
    
    - trans00 : t00                  (float)         [create,query]
    
    - trans01 : t01                  (float)         [create,query]
    
    - trans02 : t02                  (float)         [create,query]
    
    - trans10 : t10                  (float)         [create,query]
    
    - trans11 : t11                  (float)         [create,query]
    
    - trans12 : t12                  (float)         [create,query]
    
    - trans20 : t20                  (float)         [create,query]
    
    - trans21 : t21                  (float)         [create,query]
    
    - trans22 : t22                  (float)         [create,query]
    
    - trans30 : t30                  (float)         [create,query]
    
    - trans31 : t31                  (float)         [create,query]
    
    - trans32 : t32                  (float)         [create,query]
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nurbsToSubdivPref`
    """
    pass
def FlipUVs(*args, **kwargs): pass
def StraightenCurves(*args, **kwargs): pass
def Turbulence(*args, **kwargs): pass
def polyFlipEdge(*args, **kwargs): pass
def InTangentLinear(*args, **kwargs): pass
def polyDisc(*args, **kwargs):
    """
    Flags:
    - radius : r                     (float)         []
    
    - sides : s                      (int)           []
    
    - subdivisionMode : sm           (int)           []
    
    - subdivisions : sd              (int)           []
    
    
    Derived from mel command `maya.cmds.polyDisc`
    """
    pass
def GrowLoopPolygonSelectionRegion(*args, **kwargs): pass
def SendAsNewSceneMudbox(*args, **kwargs): pass
def PrelightPolygonOptions(*args, **kwargs): pass
def TimeEditorCreateAdditiveLayer(*args, **kwargs): pass
def SaveFluidStateAs(*args, **kwargs): pass
def showHidden(*args, **kwargs):
    """
    The showHiddencommand is used to make invisible objects visible.  If no flags
    are specified, only the objects given to the command will be made visible. If a
    parent of an object is invisible, the object will still be invisible.
    Invisibility is inherited. To ensure the object becomes visible, use the
    -a/above flag. This forces all invisible ancestors of the object(s) to be
    visible. If the -b/below flag is used, any invisible objects below the object
    will be made visible.  To make all objects visible, use the -all/allObjects
    flag. See also:hide
    
    Flags:
    - above : a                      (bool)          [create]
        Make objects and all their invisible ancestors visible.
    
    - allObjects : all               (bool)          [create]
        Make all invisible objects visible.
    
    - below : b                      (bool)          [create]
        Make objects and all their invisible descendants visible.
    
    - lastHidden : lh                (bool)          [create]
        Show everything that was hidden with the last hide command.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.showHidden`
    """
    pass
def bezierInfo(*args, **kwargs):
    """
    This command provides a queryable interface for Bezier curve shapes.
    
    Flags:
    - anchorFromCV : afc             (int)           [create]
        Returns the Bezier anchor index from a given CV index
    
    - cvFromAnchor : cfa             (int)           [create]
        Returns the CV index for a given Bezier anchor index
    
    - isAnchorSelected : ias         (bool)          [create]
        Returns 1 if an anchor CV is currently selected. 0, otherwise.
    
    - isTangentSelected : its        (bool)          [create]
        Returns 1 if a tangent CV is currently selected. 0, otherwise.
    
    - onlyAnchorsSelected : oas      (bool)          [create]
        Returns 1 if the only CV components selected are anchor CVs. 0, otherwise.
    
    - onlyTangentsSelected : ots     (bool)          [create]
        Returns 1 if the only CV components selected are tangent CVs. 0, otherwise.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.bezierInfo`
    """
    pass
def dR_coordSpaceCustom(*args, **kwargs): pass
def ModifyDisplacementPress(*args, **kwargs): pass
def GraphEditorEnableCurveSelection(*args, **kwargs): pass
def bifMeshExport(*args, **kwargs):
    """
    Flags:
    - directory : dir                (unicode)       []
    
    - endFrame : ef                  (int)           []
    
    - help : h                       (bool)          []
    
    - mesh : m                       (unicode)       []
    
    - startFrame : sf                (int)           []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.bifMeshExport`
    """
    pass
def ToggleIKAllowRotation(*args, **kwargs): pass
def ConvertSelectionToVertices(*args, **kwargs): pass
def ToggleBorderEdges(*args, **kwargs): pass
def poseInterpolator(*args, **kwargs):
    """
    Flags:
    - addPose : ap                   (unicode)       []
    
    - deletePose : dp                (unicode)       []
    
    - drivers : d                    (bool)          []
    
    - exportPoses : ex               (unicode)       []
    
    - goToPose : gtp                 (unicode)       []
    
    - importPoses : im               (unicode)       []
    
    - index : i                      (bool)          []
    
    - kernelWidth : kw               (unicode)       []
    
    - mirror : m                     (unicode)       []
    
    - name : n                       (unicode)       []
    
    - pose : p                       (unicode, unicode) []
    
    - poseNames : pn                 (bool)          []
    
    - rename : rn                    (unicode, unicode) []
    
    - searchAndReplace : sr          (unicode, unicode) []
    
    - updatePose : up                (unicode)       []
    
    
    Derived from mel command `maya.cmds.poseInterpolator`
    """
    pass
def FrameSelected(*args, **kwargs): pass
def twoPointArcCtx(*args, **kwargs):
    """
    The twoPointArcCtx command creates a new context for creating two point circular
    arcs
    
    Flags:
    - degree : d                     (int)           [create,query,edit]
        Valid values are 1 or 3. Default degree 3.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - spans : s                      (int)           [create,query,edit]
        Default is 4.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.twoPointArcCtx`
    """
    pass
def keyframe(*args, **kwargs): pass
def extrude(*args, **kwargs): pass
def EnterEditMode(*args, **kwargs): pass
def SewUVs(*args, **kwargs): pass
def polyMapCut(*args, **kwargs): pass
def SlideEdgeTool(*args, **kwargs): pass
def CreateTextureDeformerOptions(*args, **kwargs): pass
def OutlinerDoHide(*args, **kwargs): pass
def MoveRight(*args, **kwargs): pass
def setDynStartState(*args, **kwargs): pass
def saveFluid(*args, **kwargs):
    """
    A command to save the current state of the fluid to the initial state cache. The
    grids to be saved are determined by the cache attributes: cacheDensity,
    cacheVelocity, etc. These attributes are normally set from the options on Set
    Initial State. The cache must be set up before invoking this command.
    In query mode, return type is based on queried flag.
    
    Flags:
    - currentTime : ct               (int)           [create,query,edit]
        cache state of fluid at current time
    
    - endTime : et                   (int)           [create,query,edit]
        end Time for cacheing
    
    - startTime : st                 (int)           [create,query,edit]
        start Time for cacheing                                    Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.saveFluid`
    """
    pass
def TesselateSubdivSurfaceOptions(*args, **kwargs): pass
def ParticleFill(*args, **kwargs): pass
def HighQualityDisplay(*args, **kwargs): pass
def canvas(*args, **kwargs): pass
def ShowJoints(*args, **kwargs): pass
def ToggleUVIsolateViewSelected(*args, **kwargs): pass
def XgmSplineCacheExportOptions(*args, **kwargs): pass
def FBIKLabelSpine(*args, **kwargs): pass
def DeleteAllLattices(*args, **kwargs): pass
def displayPref(*args, **kwargs):
    """
    This command sets/queries the state of global display parameters.
    In query mode, return type is based on queried flag.
    
    Flags:
    - activeObjectPivots : aop       (bool)          [create,query]
        Sets the display state for drawing pivots for active objects.
    
    - defaultFontSize : dfs          (int)           []
    
    - displayAffected : da           (bool)          [create,query]
        Turns on/off the special coloring of objects that are affected by the objects
        that are currently in the selection list. If one of the curves in a loft were
        selected and this feature were turned on, then the lofted surface would be
        highlighted because it is affected by the loft curve.
    
    - displayGradient : dgr          (bool)          [create,query]
        Set whether to display the background using a colored gradient as opposed to a
        constant background color.
    
    - fontSettingMode : fm           (int)           []
    
    - ghostFrames : gf               (int, int, int) [create,query]
        Sets the ghosting frame preferences: steps before, steps after and step size.
    
    - lineWidth : lw                 (float)         []
    
    - materialLoadingMode : mld      (unicode)       [create,query]
        Sets the material loading mode when loading the scene.  Possible values for the
        string argument are immediate, deferredand parallel.
    
    - maxHardwareTextureResolution : mhr (bool)          [query]
        Query the maximum allowable hardware texture resolution available on the current
        video card. This maximum can vary between different video cards and different
        operating systems.
    
    - maxTextureResolution : mtr     (int)           [create,query]
        Sets the maximum hardware texture resolution to be used when creating hardware
        textures for display. The maximum will be clamped to the maximum allowable
        texture determined for the hardware at the time this command is invoked. Use the
        -maxHardwareTextureResolution to retrieve this maximum value. Existing hardware
        textures are not affected. Only newly created textures will be clamped to this
        maximum.
    
    - purgeExistingTextures : pet    (bool)          [create]
        Purge any existing hardware textures. This will force a re-evaluation of
        hardware textures used for display, and thus may take some time to evaluate.
    
    - regionOfEffect : roe           (bool)          [create,query]
        Turns on/off the display of the region of curves/surfaces that is affected by
        changes to selected CVs and edit points.
    
    - shadeTemplates : st            (bool)          [create,query]
        Turns on/off the display of templated surfaces as shaded in shaded display mode.
        If its off, templated surfaces appear in wireframe.
    
    - smallFontSize : sfs            (int)           []
    
    - textureDrawPixel : tdp         (bool)          [create,query]
        Sets the display mode for drawing image planes. True for use of gltexture calls
        for perspective views. This flag should not normally be needed. Image Planes may
        display faster on Windows but can result in some display artifacts.
    
    - wireframeOnShadedActive : wsa  (unicode)       [create,query]
        Sets the display state for drawing the wireframe on active shaded objects.
        Possible values for the string argument are full, reducedand none.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayPref`
    """
    pass
def DisableAllGeometryCache(*args, **kwargs): pass
def PruneWire(*args, **kwargs): pass
def ShowFollicles(*args, **kwargs): pass
def SetDrivenKeyOptions(*args, **kwargs): pass
def extendCurve(*args, **kwargs): pass
def hotkeyCtx(*args, **kwargs):
    """
    This command sets the hotkey context for the entire application.
    In query mode, return type is based on queried flag.
    
    Flags:
    - addClient : ac                 (unicode)       [create]
        Associates a client to the given hotkey context type. This flag needs to be used
        with the flag typewhich specifies the context type.
    
    - clientArray : ca               (bool)          [query]
        Returns an array of the all context clients associated to the hotkey context
        type. This flag needs to be used with the flag typewhich specifies the context
        type.
    
    - currentClient : cc             (unicode)       [create,query]
        Current client for the given hotkey context type. This flag needs to be used
        with the flag typewhich specifies the context type.
    
    - insertTypeAt : ita             (unicode, unicode) [create]
        Inserts a new hotkey context type in the front of the given type. The first
        argument specifies an existing type. If it's empty, the new context type will be
        inserted before Globalcontext type. The second argument specifies the name of
        new context type.
    
    - removeAllClients : rac         (bool)          [create]
        Removes all the clients associated to the hotkey context type. This flag needs
        to be used with the flag typewhich specifies the context type.
    
    - removeClient : rc              (unicode)       [create]
        Removes a client associated to the hotkey context type. This flag needs to be
        used with the flag typewhich specifies the context type.
    
    - removeType : rt                (unicode)       [create]
        Removes the given hotkey context type.
    
    - type : t                       (unicode)       [create,query]
        Specifies the context type. It's used together with the other flags such as
        currentClient, addClient, removeClientand so on.
    
    - typeArray : ta                 (bool)          [query]
        Returns a string array containing the names of all hotkey context types, ordered
        by priority.
    
    - typeExists : te                (unicode)       [query]
        Returns true|false depending upon whether the specified hotkey context type
        exists.       Flag can have multiple arguments, passed either as a tuple or a
        list.
    
    
    Derived from mel command `maya.cmds.hotkeyCtx`
    """
    pass
def HypershadeImport(*args, **kwargs): pass
def NURBSSmoothnessFineOptions(*args, **kwargs): pass
def OptimizeSceneOptions(*args, **kwargs): pass
def ShowPlanes(*args, **kwargs): pass
def nurbsCopyUVSet(*args, **kwargs):
    """
    This is only a sample command for debugging purposes, which makes a copy of the
    implicit st parameterization on a nurbs surface to be the 1st explicit uvset.
    
    
    Derived from mel command `maya.cmds.nurbsCopyUVSet`
    """
    pass
def SendToUnitySetProject(*args, **kwargs): pass
def GraphCutOptions(*args, **kwargs): pass
def HypershadeCreateTab(*args, **kwargs): pass
def SmoothingLevelDecrease(*args, **kwargs): pass
def quit(*args, **kwargs): pass
def AddFloorContactPlane(*args, **kwargs): pass
def CreateVolumeSphere(*args, **kwargs): pass
def UnpublishParentAnchor(*args, **kwargs): pass
def displaySurface(*args, **kwargs):
    """
    This command toggles display options on the specified or active surfaces.
    Typically this command applies to NURBS or poly mesh surfaces and ignores other
    type of objects.
    
    Flags:
    - flipNormals : flp              (bool)          [query]
        flip normal direction on the surface
    
    - twoSidedLighting : two         (bool)          [query]
        toggle if the surface should be considered two-sided.  If it's single-sided,
        drawing and rendering may use single sided lighting and back face cull to
        improve performance.
    
    - xRay : x                       (bool)          [query]
        toggle X ray mode (make surface transparent)                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displaySurface`
    """
    pass
def AssignToonShaderSolid(*args, **kwargs): pass
def snapTogetherCtx(*args, **kwargs):
    """
    The snapTogetherCtx command creates a tool for snapping surfaces together.
    
    Flags:
    - clearSelection : cs            (bool)          [create,query,edit]
        Sets whether the tool should clear the selection on entry to the tool. Default
        true.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - setOrientation : so            (bool)          [create,query,edit]
        Sets whether the tool should orient as well as moving an item. Default true.
    
    - snapPolygonFace : spf          (bool)          [create,query,edit]
        Sets whether the tool should snap the cursor to polygon face centers. Default
        false.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.snapTogetherCtx`
    """
    pass
def listHistory(*args, **kwargs): pass
def dagObjectHit(*args, **kwargs):
    """
    Flags:
    - cache : ch                     (bool)          []
    
    - menu : mn                      (unicode)       []
    
    - multiple : m                   (bool)          []
    
    - targetSize : ts                (int)           []
    
    
    Derived from mel command `maya.cmds.dagObjectHit`
    """
    pass
def FBXExportSplitAnimationIntoTakes(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportSplitAnimationIntoTakes`
    """
    pass
def deleteHistoryAheadOfGeomCache(*args, **kwargs): pass
def XgmSplineCacheReplace(*args, **kwargs): pass
def sbs_GetWorkflow(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetWorkflow`
    """
    pass
def SetMBSDivide(*args, **kwargs): pass
def OutlinerToggleDAGOnly(*args, **kwargs): pass
def XgPreRendering(*args, **kwargs): pass
def nClothCache(*args, **kwargs): pass
def dgcontrol(*args, **kwargs):
    """
    Flags:
    - iomode : iom                   (bool)          []
    
    
    Derived from mel command `maya.cmds.dgcontrol`
    """
    pass
def ToggleToolMessage(*args, **kwargs): pass
def CutKeys(*args, **kwargs): pass
def characterize(*args, **kwargs):
    """
    This command is used to scan a joint hierarchy for predefined joint names or
    labels. If the required joints are found, human IK effectors will be created to
    control the skeleton using full-body IK. Alternatively, you can manually create
    all of the components required for fullbody IK, and use this command to hook
    them up. Fullbody IK needs 3 major components: the user input skeleton (sk), the
    fk skeleton on which keys are set (fk) and the hik effectors (ik).  Together fk
    and ik provide parameters to the fullbody IK engine, which solves for the output
    and plots it onto sk. This command usage is used internally by Maya when
    importing data from fbx files, but is not generally recommended. Note that a
    minimum set of required joint names or joint labels  must be found in order for
    the characterize command to succeed. Please refer to the Maya documentation for
    details on properly naming or labeling your skeleton. The skeleton should also
    be z-facing, with its y-axis up, its left hand parallel to positive x-axis and
    right hand parallel to negative x-axis. END_COMMENT
    
    Flags:
    - activatePivot : apv            (bool)          [edit]
        Activates a pivot that has been properly placed.  After activating this new
        pivot, you will now be able to rotate and translate about this pivot. A pivot
        behaves in all ways the same as an effector (it IS an effector, except that it
        is offset from the normal position of the effector to allow one to rotate about
        a different point.
    
    - addAuxEffector : aae           (bool)          [edit]
        Adds an auxilliary (secondary) effector to an existing effector.
    
    - addFloorContactPlane : afp     (bool)          [edit]
        Adds a floor contact plane to one of the hands or feet.  With this plane, you
        will be able to adjust the floor contact height.  Select a hand or foot effector
        and then issue the characterize command with this flag.
    
    - addMissingEffectors : ame      (bool)          [edit]
        This flag tells the characterize command to look for any effectors that can be
        added to the skeleton. For example, if the user has deleted some effectors or
        added fingers to an existing skeleton, characterize -e -addMissingEffectorscan
        be used to restore them.
    
    - attributeFromHIKProperty : ahk (unicode)       [query]
        Query for the attribute name associated with a MotionBuilder property.
    
    - attributeFromHIKPropertyMode : mhk (unicode)       [query]
        Query for the attribute name associated with a MotionBuilder property mode.
    
    - autoActivateBodyPart : aab     (bool)          [query,edit]
        Query or change whether auto activation of character nodes representing body
        parts should be enabled.
    
    - changePivotPlacement : cpp     (bool)          [edit]
        Reverts a pivot back into pivot placement mode.  A pivot that is in placement
        mode will not participate in full body manipulation until it has been activated
        with the -activatePivot flag.
    
    - effectors : ef                 (unicode)       [create]
        Specify the effectors to be used by human IK by providing 2 pieces of
        information for each effector:  1) the partial path of the effector and 2) the
        name of the full body effector this represents.  1) and 2) are to be separated
        by white space, and multiple entries separated by ,. Normally, the effectors are
        automatically created.  This flag is for advanced users only.
    
    - fkSkeleton : fk                (unicode)       [create,edit]
        Specify the fk skeleton to be used by human IK by providing 2 pieces of
        information for each joint of the FK skeleton:  1) the partial path of the joint
        and 2) the name of the full body joint this represents.  1) and 2) are to be
        separated by white space, and multiple entries separated by ,. Normally, the fk
        control skeleton is automatically created.  This flag is for advanced users
        only.
    
    - name : nm                      (unicode)       [create]
        At characterization (FBIK creation) time, use this flag to name your FBIK
        character. This will affect the name of the hikHandle node and the control rig
        will be put into a namespace that matches the name of your character.  If you do
        not specify the character name, a default one will be used. At the moment edit
        and query of the character name is not supported.
    
    - pinHandFeet : phf              (bool)          [create]
        When the character is first being characterized, pin the hands and feet by
        default.
    
    - placeNewPivot : pnp            (bool)          [edit]
        Creates a new pivot and puts it into placement mode.  Note that you will not be
        able to do full body manipulation about this pivot until you have activated it
        with the -activatePivot flag. A pivot behaves in all ways the same as an
        effector (it IS an effector, except that it is offset from the normal position
        of the effector to allow one to rotate about a different point). A new pivot
        created with this flag allow you to adjust the offset interactively before
        activating it.
    
    - posture : pos                  (unicode)       [create]
        Specifies the posture of the character. Valid options are bipedand quadruped.
        The default is biped.
    
    - sourceSkeleton : sk            (unicode)       [create,edit]
        This flag can be used to characterize a skeleton that has not been named or
        labelled according to the FBIK guidelines. It specifies the association between
        the actual joint names and the expected FBIK joint names. The format of the
        string is as follows: For each joint that the user wants to involve in the
        solve:  1) the partial path of the joint and 2) the name of the full body joint
        this represents.  1) and 2) are to be separated by white space, and multiple
        entries separated by ,.
    
    - stancePose : sp                (unicode)       [create,query]
        Specify the default stance pose to be used by human IK.  The stance pose is
        specified by providing 2 pieces of information for each joint involved in the
        solve: 1) the partial path to the joint and 2) 9 numbers representing
        translation rotation and scale. 1) and 2) are to be separated by white space,
        and multiple entries separated by ,. Normally, the stance pose is taken from the
        selected skeleton.  This flag is for advanced users only.
    
    - type : typ                     (unicode)       [create]
        Specifies the technique used by the characterization to identify the joint type.
        Valid options are labeland name. When labelis used, the joints must be labelled
        using the guidelines described in the Maya documentation. When name is used, the
        joint names must follow the naming conventions described in the Maya
        documentation. The default is name. This flag cannot be used in conjunction with
        the sourceSkeleton flag.                                   Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.characterize`
    """
    pass
def graphSelectContext(*args, **kwargs):
    """
    This command can be used to create a selection context for the hypergraph
    editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.graphSelectContext`
    """
    pass
def offsetSurface(*args, **kwargs): pass
def AbcImport(*args, **kwargs):
    """
    Flags:
    - connect : ct                   (unicode)       []
    
    - createIfNotFound : crt         (bool)          []
    
    - debug : d                      (bool)          []
    
    - excludeFilterObjects : eft     (unicode)       []
    
    - filterObjects : ft             (unicode)       []
    
    - fitTimeRange : ftr             (bool)          []
    
    - help : h                       (bool)          []
    
    - mode : m                       (unicode)       []
    
    - recreateAllColorSets : rcs     (bool)          []
    
    - removeIfNoUpdate : rm          (bool)          []
    
    - reparent : rpr                 (unicode)       []
    
    - setToStartFrame : sts          (bool)          []
    
    
    Derived from mel command `maya.cmds.AbcImport`
    """
    pass
def CreateInstancerPivot(*args, **kwargs): pass
def ShrinkPolygonSelectionRegion(*args, **kwargs): pass
def artBuildPaintMenu(*args, **kwargs):
    """
    ??
    
    
    Derived from mel command `maya.cmds.artBuildPaintMenu`
    """
    pass
def sculptTarget(*args, **kwargs):
    """
    This command is used to specify the blend shape target to be modified by the
    sculpting tools and transform manipulators.
    
    Flags:
    - after : af                     (bool)          [create,edit]
        If the default behavior for insertion/appending into/onto the existing chain is
        not the desired behavior then this flag can be used to force the command to
        place the deformer node after the selected node in the chain even if a new
        geometry shape has to be created in order to do so. Works in create mode (and
        edit mode if the deformer has no geometry added yet).
    
    - afterReference : ar            (bool)          [create,edit]
        The -afterReference flag is used to specify deformer ordering in a hybrid way
        that choses between -before and -after automatically. If the geometry being
        deformed is referenced then the -after mode is used when adding the new
        deformer, otherwise the -before mode is used. The net effect when using
        -afterReference to build deformer chains is that internal shape nodes in the
        deformer chain will only appear at reference file boundaries, leading to
        lightweight deformer networks that may be more amicable to reference swapping.
    
    - before : bf                    (bool)          [create,edit]
        If the default behavior for insertion/appending into/onto the existing chain is
        not the desired behavior then this flag can be used to force the command to
        place the deformer node before the selected node in the chain even if a new
        geometry shape has to be created in order to do so. Works in create mode (and
        edit mode if the deformer has no geometry added yet).
    
    - deformerTools : dt             (bool)          []
        Returns the name of the deformer tool objects (if any) as string string ...
    
    - exclusive : ex                 (unicode)       [create]
        Puts the deformation set in a deform partition.
    
    - frontOfChain : foc             (bool)          [create,edit]
        This command is used to specify that the new deformer node should be placed
        ahead (upstream) of existing deformer and skin nodes in the shape's history (but
        not ahead of existing tweak nodes). The input to the deformer will be the
        upstream shape rather than the visible downstream shape, so the behavior of this
        flag is the most intuitive if the downstream deformers are in their reset
        (hasNoEffect) position when the new deformer is added. Works in create mode (and
        edit mode if the deformer has no geometry added yet).
    
    - geometry : g                   (unicode)       [edit]
        The specified object will be added to the list of objects being deformed by this
        deformer object, unless the -rm flag is also specified. When queried, this flag
        returns string string string ...
    
    - geometryIndices : gi           (bool)          []
        Complements the -geometry flag in query mode. Returns the multi index of each
        geometry.
    
    - ignoreSelected : ignoreSelected (bool)          [create]
        Tells the command to not deform objects on the current selection list
    
    - inbetweenWeight : ibw          (float)         [edit]
        Specifies the in between target weight of the blend shape node that will be made
        editable by the sculpting and transform tools.
    
    - includeHiddenSelections : ihs  (bool)          [create]
        Apply the deformer to any visible and hidden objects in the selection list.
        Default is false.
    
    - name : n                       (unicode)       [create]
        Used to specify the name of the node being created.
    
    - parallel : par                 (bool)          [create,edit]
        Inserts the new deformer in a parallel chain to any existing deformers in the
        history of the object. A blendShape is inserted to blend the parallel results
        together. Works in create mode (and edit mode if the deformer has no geometry
        added yet).
    
    - prune : pr                     (bool)          [edit]
        Removes any points not being deformed by the deformer in its current
        configuration from the deformer set.
    
    - regenerate : r                 (bool)          [edit]
        When this flag is specified a new shape is created for the specified blend shape
        target, if the shape does not already exist. The name of the new shape is
        returned.
    
    - remove : rm                    (bool)          [edit]
        Specifies that objects listed after the -g flag should be removed from this
        deformer.
    
    - snapshot : s                   (int)           [edit]
        This flag should only be used internally to add in-between target. When this
        flag is specified a snapshot of the shape will be taken for the specified in-
        between target when it does not exist yet. This flag specifies the base shape
        index and must be used with the -target and -inbetweenWeight flags, which
        specify the in-between target.
    
    - split : sp                     (bool)          [create,edit]
        Branches off a new chain in the dependency graph instead of inserting/appending
        the deformer into/onto an existing chain. Works in create mode (and edit mode if
        the deformer has no geometry added yet).
    
    - target : t                     (int)           [edit]
        Specifies the target index of the blend shape node that will be made editable by
        the sculpting and transform tools.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sculptTarget`
    """
    pass
def intFieldGrp(*args, **kwargs): pass
def DisableSelectedIKHandles(*args, **kwargs): pass
def hotBox(*args, **kwargs): pass
def EmitFromObjectOptions(*args, **kwargs): pass
def Bend(*args, **kwargs): pass
def attachDeviceAttr(*args, **kwargs):
    """
    This command associates a device/axis pair with a node/attribute pair. When the
    device axis moves, the value of the attribute is set to the value of the axis.
    This value can be scaled and offset using the setAttrScale command. In query
    mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - attribute : at                 (unicode)       [create]
        specify the attribute to attach to
    
    - axis : ax                      (unicode)       [create]
        specify the axis to attach from.
    
    - camera : cam                   (bool)          [create]
        This flag attaches the device/axis to the current camera. The mapping between
        device axes and camera controls is uses a heuristic based on the device
        descripton. The interaction is a copy of the mouse camera navigation controls.
    
    - cameraRotate : cr              (bool)          [create]
        This flag attaches the device/axis to the current cameras rotation controls.
    
    - cameraTranslate : ct           (bool)          [create]
        This flag attaches the device/axis to the current cameras translate controls.
    
    - clutch : c                     (unicode)       [create]
        specify a clutch button.  This button must be down for the command string to be
        executed. If no clutch is specified the command string is executed everytime the
        device state changes
    
    - device : d                     (unicode)       [create]
        specify which device to assign the command string.
    
    - selection : sl                 (bool)          [create]
        This flag attaches to the nodes in the selection list. This is different from
        the default arguments of the command since changing the selection will change
        the attachments.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attachDeviceAttr`
    """
    pass
def ModifyPaintValueRelease(*args, **kwargs): pass
def xgmDirectionBrushContext(*args, **kwargs):
    """
    Flags:
    - alignToSurface : alignToSurface (bool)          []
    
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - flood : f                      (bool)          []
    
    - floodMode : fm                 (int)           []
    
    - freezeMode : frm               (int)           []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - increment : inc                (float)         []
    
    - maxAngle : max                 (float)         []
    
    - minAngle : min                 (float)         []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectMode : sem               (int)           []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmDirectionBrushContext`
    """
    pass
def HypershadeToggleNodeSwatchSize(*args, **kwargs): pass
def NodeEditorPinByDefault(*args, **kwargs): pass
def listSets(*args, **kwargs): pass
def xformConstraint(*args, **kwargs):
    """
    This command allows you to change the transform constraint used by the transform
    tools during component transforms.              In query mode, return type is
    based on queried flag.
    
    Flags:
    - alongNormal : n                (int)           [query,edit]
        When set the transform constraint will first be applied along the vertex normals
        of the components being transformed. When queried, returns the current state of
        this option.
    
    - live : l                       (bool)          [query]
        Query-only flag that can be used to check whether the current live surface will
        be used as a transform constraint.
    
    - type : t                       (unicode)       [create,query,edit]
        Set the type of transform constraint to use. When queried, returns the current
        transform constraint as a string. none - no constraintsurface - constrain
        components to their surfaceedge - constrain components to surface edgesFlag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.xformConstraint`
    """
    pass
def xgmBindPatches(*args, **kwargs):
    """
    Flags:
    - append : a                     (bool)          []
    
    - bindMap : bm                   (bool)          []
    
    - description : d                (unicode)       []
    
    - grooming : g                   (bool)          []
    
    - guides : gi                    (bool)          []
    
    - mapInvert : mi                 (bool)          []
    
    - mapReplace : mr                (unicode)       []
    
    - replace : r                    (bool)          []
    
    - rotateGuideToAlignWithNewNormal : rgn (bool)          []
    
    - unbind : u                     (bool)          []
    
    - uvBasedGuideTransfer : ugt     (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmBindPatches`
    """
    pass
def xgmSculptLayerMerge(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmSculptLayerMerge`
    """
    pass
def dR_quadDrawRelease(*args, **kwargs): pass
def PaintLatticeWeightsTool(*args, **kwargs): pass
def AddToCurrentSceneMudbox(*args, **kwargs): pass
def GraphEditor(*args, **kwargs): pass
def XgmSetLengthBrushToolOption(*args, **kwargs): pass
def VisorWindow(*args, **kwargs): pass
def FBIKLabelCenter(*args, **kwargs): pass
def renderSetupFind(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderSetupFind`
    """
    pass
def hyperGraph(*args, **kwargs): pass
def CreatePlatonicSolidOptions(*args, **kwargs): pass
def IKSplineHandleToolOptions(*args, **kwargs): pass
def paint3d(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.paint3d`
    """
    pass
def greasePencilHelper(*args, **kwargs):
    """
    Flags:
    - brushType : bt                 (int)           []
    
    - contextName : cn               (unicode)       []
    
    - setColor : sc                  (float, float, float) []
    
    - updateVar : uv                 (unicode, float) []
    
    
    Derived from mel command `maya.cmds.greasePencilHelper`
    """
    pass
def polyAppendFacetCtx(*args, **kwargs):
    """
    Create a new context to append facets on polygonal objects               In
    query mode, return type is based on queried flag.
    
    Flags:
    - append : ap                    (bool)          [create,query,edit]
        Allows to switch to polyCreateFacetCtx tool
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - isRotateAvailable : isr        (bool)          [query]
        Tells if the control associated to rotate flag is available. If several edges
        are already selected and they are not aligned (thus there is no rotation axis)
        the rotation is no longer available.
    
    - maximumNumberOfPoints : mp     (int)           [create,query,edit]
        Allows the ability to set a upper bound on the number of points in interactively
        place before polygon is created. A value less than 2 will mean that there is no
        upper bound.
    
    - planarConstraint : pc          (bool)          [create,query,edit]
        Allows/avoid new facet to be non-planar. If on, all new points will be projected
        onto current facet plane. Selected edges will be checked as well.
    
    - rotate : r                     (float)         [create,query,edit]
        Rotate current facet around the first edge selected.
    
    - subdivision : s                (int)           [create,query,edit]
        Number of sub-edges created for each new edge. Default is 1.
    
    - texture : tx                   (int)           [create,query,edit]
        Number of textures. Default is 1.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyAppendFacetCtx`
    """
    pass
def CreateNURBSCircle(*args, **kwargs): pass
def SelectUVBackFacingComponents(*args, **kwargs): pass
def TexSculptInvertPin(*args, **kwargs): pass
def OptimizeScene(*args, **kwargs): pass
def BrushPresetBlendShapeOff(*args, **kwargs): pass
def MirrorCutPolygonGeometry(*args, **kwargs): pass
def polySpinEdge(*args, **kwargs):
    """
    Flags:
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - offset : off                   (int)           []
    
    - reverse : rev                  (bool)          []
    
    
    Derived from mel command `maya.cmds.polySpinEdge`
    """
    pass
def SplitPolygonTool(*args, **kwargs): pass
def parentConstraint(*args, **kwargs): pass
def softSelectOptionsCtx(*args, **kwargs):
    """
    Flags:
    - buttonDown : btd               (bool)          []
    
    - buttonUp : btu                 (bool)          []
    
    - colorCurve : cc                (unicode)       []
    
    - condition : cdn                (bool)          []
    
    - enableFalseColor : efc         (int)           []
    
    - enabled : en                   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falloffCurve : fc              (unicode)       []
    
    - falloffMode : fm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - size : sz                      (float)         []
    
    - uvSize : uvs                   (float)         []
    
    
    Derived from mel command `maya.cmds.softSelectOptionsCtx`
    """
    pass
def PixelMoveDown(*args, **kwargs): pass
def HideCameraManipulators(*args, **kwargs): pass
def ConvertPaintEffectsToPolyOptions(*args, **kwargs): pass
def scaleKey(*args, **kwargs): pass
def minimizeApp(*args, **kwargs):
    """
    This command minimizes (iconifies) all of the application's windows into a
    single desktop icon.  To restore the application click on the desktop icon.
    
    
    Derived from mel command `maya.cmds.minimizeApp`
    """
    pass
def polySplitEdge(*args, **kwargs): pass
def shotTrack(*args, **kwargs):
    """
    This command is used for inserting and removing tracks related to the shots
    displayed in the Sequencer. It can also be used to modify the track state, for
    example, to lock or mute a track.             In query mode, return type is
    based on queried flag.
    
    Flags:
    - insertTrack : it               (int)           [create]
        This flag is used to insert a new empty track at the track index specified.
    
    - lock : l                       (bool)          [create,query,edit]
        This flag specifies whether shots on a track are to be locked or not.
    
    - mute : m                       (bool)          [create,query,edit]
        This flag specifies whether shots on a track are to be muted or not.
    
    - numTracks : nt                 (int)           [query]
        To query the number of tracks
    
    - removeEmptyTracks : ret        (bool)          [create]
        This flag is used to remove all tracks that have no clips.
    
    - removeTrack : rt               (int)           [create]
        This flag is used to remove the track with the specified index.  The track must
        have no clips on it before it can be removed.
    
    - selfmute : sm                  (bool)          [create,query,edit]
        This flag specifies whether shots on a track are to be muted or not (unlike
        mute, this disregards soloing).
    
    - solo : so                      (bool)          [create,query,edit]
        This flag specifies whether shots on a track are to be soloed or not.
    
    - swapTracks : st                (int, int)      [create]
        This flag is used to swap the contents of two specified tracks.
    
    - title : t                      (unicode)       [create,query,edit]
        This flag specifies the title for the track.
    
    - track : tr                     (int)           [create,query,edit]
        Specify the track on which to operate by using the track's trackNumber.
    
    - unsolo : uso                   (bool)          [query]
        This flag specifies whether shots on a track are to be unsoloed or not.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shotTrack`
    """
    pass
def SculptPolygonsTool(*args, **kwargs): pass
def EnableGlobalStitch(*args, **kwargs): pass
def event(*args, **kwargs): pass
def ToggleOutliner(*args, **kwargs): pass
def PolyMergeEdges(*args, **kwargs): pass
def ChangeUIPrefs(*args, **kwargs): pass
def ArchiveScene(*args, **kwargs): pass
def spring(*args, **kwargs): pass
def AddShrinkWrapSurfaces(*args, **kwargs): pass
def HideNURBSSurfaces(*args, **kwargs): pass
def RemoveInfluence(*args, **kwargs): pass
def timeEditorComposition(*args, **kwargs):
    """
    Commands related to composition management inside Time Editor.
    
    Flags:
    - active : act                   (bool)          [query,edit]
        Query or edit the active composition.
    
    - allCompositions : acp          (bool)          [query]
        Return all compositions inside Time Editor.
    
    - createTrack : ct               (bool)          [create]
        Create a default track when creating a new composition.
    
    - delete : delete                (bool)          [query,edit]
        Delete the composition.
    
    - duplicateFrom : df             (unicode)       [create]
        Duplicate the composition.
    
    - rename : ren                   (unicode, unicode) [edit]
        Rename the composition of the first name to the second name.
    
    - tracksNode : tn                (bool)          [query]
        Query the tracks node of a composition.                                    Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timeEditorComposition`
    """
    pass
def OneClickMenuExecute(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickMenuExecute`
    """
    pass
def TimeEditorClipRazor(*args, **kwargs): pass
def CreateDiskCache(*args, **kwargs): pass
def CreateRigidBodySolver(*args, **kwargs): pass
def sequenceManager(*args, **kwargs): pass
def stroke(*args, **kwargs): pass
def DeleteVertex(*args, **kwargs): pass
def ToggleRotationPivots(*args, **kwargs): pass
def RemoveBifrostAccelerator(*args, **kwargs): pass
def HypershadeExportSelectedNetwork(*args, **kwargs): pass
def nClothDisplayCurrentMesh(*args, **kwargs): pass
def blendTwoAttr(*args, **kwargs): pass
def FBIKLabelCollar(*args, **kwargs): pass
def AddMashDeformer(*args, **kwargs): pass
def HypergraphIncreaseDepth(*args, **kwargs): pass
def dynPaintEditor(*args, **kwargs): pass
def assignShaderToType(*args, **kwargs):
    """
    Flags:
    - groupIdNode : gr               (unicode)       []
    
    - meshNode : me                  (unicode)       []
    
    - shaderGroup : sg               (unicode)       []
    
    
    Derived from mel command `maya.cmds.assignShaderToType`
    """
    pass
def optionMenuGrp(*args, **kwargs): pass
def XgExportCollections(*args, **kwargs): pass
def CreateSubdivSphere(*args, **kwargs): pass
def scriptedPanel(*args, **kwargs): pass
def ToggleProxyDisplay(*args, **kwargs): pass
def SoftModTool(*args, **kwargs): pass
def OpenChannelBox(*args, **kwargs): pass
def FBXImportResamplingRateSource(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportResamplingRateSource`
    """
    pass
def dirmap(*args, **kwargs):
    """
    Use this command to map a directory to another directory. The first argument is
    the directory to map, and the second is the destination directory to map to.
    Directories must both be absolute paths, and should be separated with forward
    slashes ('/'). The mapping is case-sensitive on all platforms. This command can
    be useful when moving projects to another machine where some textures may not be
    contained in the Maya project, or when a texture archive moves to a new
    location. This command is not necessary when moving a (self-contained) project
    from one machine to another - instead copy the entire project over and set the
    Maya project to the new location. For one-time directory moves, if the command
    is enabled and the mapping configured correctly, when a scene is opened and
    saved the mapped locations will be reflected in the filenames saved with the
    file. To set up a permanent mapping the command should be enabled and the
    mappings set up in a script which is executed every time you launch Maya
    (userSetup.mel is sourced on startup). The directory mappings and enabled state
    are not preserved between Maya sessions. This command requires one mainflag that
    specifies the action to take. Flags are:-[m|um|gmd|gam|cd|en]
    
    Flags:
    - convertDirectory : cd          (unicode)       [create]
        Convert a file or directory. Returns the name of the mapped file or directory,
        if the command is enabled. If the given string contains one of the mapped
        directories, the return value will have that substring replaced with the mapped
        one. Otherwise the given argument string will be returned. If the command is
        disabled the given argument is always returned. Checks are not made for whether
        the file or directory exists. If the given string is a directory it should have
        a trailing '/'.
    
    - enable : en                    (bool)          [create,query]
        Enable directory mapping. Directory mapping is off when you start Maya. If
        enabled, when opening Maya scenes, file texture paths (and other file paths)
        will be converted when the scene is opened. The -cd flag only returns mapped
        directories when -enable is true. Query returns whether mapping has been
        enabled.
    
    - getAllMappings : gam           (bool)          [create]
        Get all current mappings. Returns string array of current mappings in format:
        [redirect1, replacement1, ... redirectN, replacementN]
    
    - getMappedDirectory : gmd       (unicode)       [create]
        Get the mapped redirected directory. The given argument must exactly match the
        first string used with the -mapDirectory flag.
    
    - mapDirectory : m               (unicode, unicode) [create]
        Map a directory - the first argument is mapped to the second. Neither directory
        needs to exist on the local machine at the time of invocation.
    
    - unmapDirectory : um            (unicode)       [create]
        Unmap a directory. The given argument must exactly match the argument used with
        the -mapDirectory flag.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dirmap`
    """
    pass
def AssignNewPfxToon(*args, **kwargs): pass
def renderSetupLocalOverride(*args, **kwargs):
    """
    Flags:
    - state : st                     (bool)          []
    
    
    Derived from mel command `maya.cmds.renderSetupLocalOverride`
    """
    pass
def containerPublish(*args, **kwargs):
    """
    This is an accessory command to the container command which is used for some
    advanced publishing operations on the container. For example, the
    publishConnectionsflag on the container will publish all the connections, but
    this command can be used to publish just the inputs, outputs, or to collapse the
    shared inputs into a single attribute before publishing.           In query
    mode, return type is based on queried flag.
    
    Flags:
    - bindNode : bn                  (unicode, unicode) [create,query,edit]
        Bind the specified node to the published node name.
    
    - bindTemplateStandins : bts     (bool)          [create,query,edit]
        This flag will create a temporary stand-in attribute for any attributes that
        exist in the template but are not already bound. This enables you to set values
        for unbound attributes.
    
    - inConnections : ic             (bool)          [create]
        Specifies that the unpublished connections to nodes in the container from
        external nodes should be published.
    
    - mergeShared : ms               (bool)          [create]
        For use with the inConnections flag. Indicates that when an external attribute
        connects to multiple internal attributes within the container, a single
        published attribute should be used to correspond to all of the internal
        attributes.
    
    - outConnections : oc            (bool)          [create]
        Specifies that the unpublished connections from nodes in the container to
        external nodes should be published.
    
    - publishNode : pn               (unicode, unicode) [create,query,edit]
        Publish a name and type. When first published, nothing will be bound. To bind a
        node to the published name, use the bindNode flag.
    
    - unbindNode : ubn               (unicode)       [create,query,edit]
        Unbind the node that is published with the name specified by the flag.
    
    - unpublishNode : upn            (unicode)       [create,query,edit]
        Unpublish the specified published node name.                               Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.containerPublish`
    """
    pass
def DeleteAllLights(*args, **kwargs): pass
def RenderDiagnostics(*args, **kwargs): pass
def manipMoveContext(*args, **kwargs): pass
def setNodeTypeFlag(*args, **kwargs):
    """
    This command sets static data on the specified node type. This will affect the
    class of node type as a whole.  The argument passed may be the name of the node
    type or the node type tag.  Node type tags may be found using the objectType
    command.
    
    Flags:
    - display : dsp                  (bool)          [create,query]
        Sets whether the node type will appear in the UI or not.  Setting display to
        false will cause the node type to not appear in the UI. Query mode to obtain the
        value of the display flag.
    
    - threadSafe : ts                (bool)          [create,query]
        This flag is obsolete.  Has no effect.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setNodeTypeFlag`
    """
    pass
def SetHairStartPositionFromCurrent(*args, **kwargs): pass
def connectAttr(*args, **kwargs): pass
def transformLimits(*args, **kwargs):
    """
    The transformLimits command allows us to set, edit, or query the limits of the
    transformation that can be applied to objects. We can also turn any limits off
    which may have been previously set. When an object is first created, all the
    transformation limits are off by default.Transformation limits allow us to
    control how much an object can be transformed. This is most useful for joints,
    although it can be used any place we would like to limit the movement of an
    object.Default values are:( -1, 1) for translation, ( -1, 1) for scaling, and
    (-45,45) for rotation. In query mode, return type is based on queried flag.
    
    Flags:
    - enableRotationX : erx          (bool, bool)    [query]
        enable/disable the lower and upper x-rotation limitsWhen queried, it returns
        boolean boolean
    
    - enableRotationY : ery          (bool, bool)    [query]
        enable/disable the lower and upper y-rotation limitsWhen queried, it returns
        boolean boolean
    
    - enableRotationZ : erz          (bool, bool)    [query]
        enable/disable the lower and upper z-rotation limitsWhen queried, it returns
        boolean boolean
    
    - enableScaleX : esx             (bool, bool)    [query]
        enable/disable the lower and upper x-scale limitsWhen queried, it returns
        boolean boolean
    
    - enableScaleY : esy             (bool, bool)    [query]
        enable/disable the lower and upper y-scale limitsWhen queried, it returns
        boolean boolean
    
    - enableScaleZ : esz             (bool, bool)    [query]
        enable/disable the lower and upper z-scale limitsWhen queried, it returns
        boolean boolean
    
    - enableTranslationX : etx       (bool, bool)    [query]
        enable/disable the  ower and upper x-translation limitsWhen queried, it returns
        boolean boolean
    
    - enableTranslationY : ety       (bool, bool)    [query]
        enable/disable the lower and upper y-translation limitsWhen queried, it returns
        boolean boolean
    
    - enableTranslationZ : etz       (bool, bool)    [query]
        enable/disable the lower and upper z-translation limitsWhen queried, it returns
        boolean boolean
    
    - remove : rm                    (bool)          [create]
        turn all the limits off and reset them to their default values
    
    - rotationX : rx                 (float, float)  [query]
        set the lower and upper x-rotation limitsWhen queried, it returns angle angle
    
    - rotationY : ry                 (float, float)  [query]
        set the lower and upper y-rotation limitsWhen queried, it returns angle angle
    
    - rotationZ : rz                 (float, float)  [query]
        set the lower and upper z-rotation limitsWhen queried, it returns angle angle
    
    - scaleX : sx                    (float, float)  [query]
        set the lower and upper x-scale limitsWhen queried, it returns float float
    
    - scaleY : sy                    (float, float)  [query]
        set the lower and upper y-scale limitsWhen queried, it returns float float
    
    - scaleZ : sz                    (float, float)  [query]
        set the lower and upper z-scale limitsWhen queried, it returns float float
    
    - translationX : tx              (float, float)  [query]
        set the lower and upper x-translation limitsWhen queried, it returns linear
        linear
    
    - translationY : ty              (float, float)  [query]
        set the lower and upper y-translation limitsWhen queried, it returns linear
        linear
    
    - translationZ : tz              (float, float)  [query]
        set the lower and upper z-translation limitsWhen queried, it returns linear
        linearFlag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.transformLimits`
    """
    pass
def HypershadeRefreshSelectedSwatchesOnDisk(*args, **kwargs): pass
def ToggleSceneTimecode(*args, **kwargs): pass
def dR_targetWeldPress(*args, **kwargs): pass
def artAttrSkinPaint(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.artAttrSkinPaint`
    """
    pass
def AssignOfflineFileFromRefEdOptions(*args, **kwargs): pass
def ComponentEditor(*args, **kwargs): pass
def AddSelectionAsTargetShape(*args, **kwargs): pass
def UnfoldUV(*args, **kwargs): pass
def HIKUiControl(*args, **kwargs):
    """
    Flags:
    - ctrlName : cn                  (unicode)       []
    
    - maxWidth : mxw                 (int)           []
    
    - minWidth : mnw                 (int)           []
    
    
    Derived from mel command `maya.cmds.HIKUiControl`
    """
    pass
def nConstraintTransform(*args, **kwargs): pass
def panelHistory(*args, **kwargs):
    """
    This command creates a panel history object.  The object is targeted on a
    particular paneLayout and thereafter notes changes in panel configurations
    within that paneLayout, building up a history list.  The list can be stepped
    through backwards or forwards.
    
    Flags:
    - back : b                       (bool)          [edit]
        Go back one level on the history list.
    
    - clear : cl                     (bool)          [edit]
        Clear the history stack
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - forward : f                    (bool)          [edit]
        Go forward one level on the history list.
    
    - historyDepth : hd              (int)           [query,edit]
        Specifies how many levels of history are maintained.
    
    - isEmpty : ie                   (bool)          [query]
        Returns true if there is currently no panel history.
    
    - suspend : s                    (bool)          [edit]
        Specifies whether to suspend or resume updates to the panel history. Useful for
        chunking a number of changes into one history event.
    
    - targetPane : tp                (unicode)       [create,query]
        Specifies which paneLayout the history will be maintained for.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
    
    - wrap : w                       (bool)          [query,edit]
        Specifies whether the history will wrap at the end and beginning.  This value is
        true by default.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.panelHistory`
    """
    pass
def imagePlane(*args, **kwargs): pass
def emitter(*args, **kwargs): pass
def ToggleHelpLine(*args, **kwargs): pass
def redo(*args, **kwargs):
    """
    Takes the most recently undone command from the undo list and redoes it.
    
    
    Derived from mel command `maya.cmds.redo`
    """
    pass
def EnableRigidBodies(*args, **kwargs): pass
def DuplicateWithTransform(*args, **kwargs): pass
def OpenLightEditor(*args, **kwargs): pass
def nClothAppendOpt(*args, **kwargs): pass
def StitchEdgesToolOptions(*args, **kwargs): pass
def ShowAnimationUI(*args, **kwargs): pass
def HypershadeSetTraversalDepthZero(*args, **kwargs): pass
def selectKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to select keyframes within the
    graph editor In query mode, return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectKeyCtx`
    """
    pass
def rigidBody(*args, **kwargs): pass
def menu(*args, **kwargs): pass
def OffsetCurveOnSurfaceOptions(*args, **kwargs): pass
def PaintEffectsToPolyOptions(*args, **kwargs): pass
def spotLightPreviewPort(*args, **kwargs): pass
def clipSchedule(*args, **kwargs):
    """
    This command is used to create, edit and query clips and blends in the Trax
    editor. It operates on the clipScheduler node attached to the character. In
    query mode, if no flags are specified, returns an array of strings in this form:
    (clipName,clipIndex,clipStart,clipSourceStart,clipSourceEnd,clipScale,clipPreCyc
    le,clipPostCycle,clipHold)
    
    Flags:
    - allAbsolute : aa               (bool)          [query,edit]
        Set all channels to be calculated with absolute offsets.  This flag cannot be
        used in conjunction with the ar/allRelative, ra/rotationsAbsolute or
        da/defaultAbsolute flags.
    
    - allRelative : ar               (bool)          [query,edit]
        Set all channels to be calculated with relative offsets.  This flag cannot be
        used in conjunction with the aa/allAbsolute, ra/rotationsAbsolute or
        da/defaultAbsolute flags.
    
    - blend : b                      (int, int)      [create,query]
        This flag is used to blend two clips, whose indices are provided as flag
        arguments.
    
    - blendNode : bn                 (int, int)      [query]
        This query only flag list all of the blend nodes associated with the blend
        defined by the two clip indices. This flag returns a string array. In query
        mode, this flag can accept a value.
    
    - blendUsingNode : bun           (unicode)       [create]
        This flag is used to blend using an existing blend node. It is used in
        conjunction with the blend flag. The blend flag specifies the clip indices for
        the blend. The name of an existing animBlend node should be supplied supplied as
        an argument for the blendUsingNode flag.
    
    - character : ch                 (bool)          [query]
        This flag is used to query which characters this scheduler controls. It returns
        an array of strings.
    
    - clipIndex : ci                 (int)           [create,query]
        Specify the index of the clip to schedule. In query mode, returns an array of
        strings in this form:
        (clipName,index,start,sourceStart,sourceEnd,scale,preCycle,postCycle) In query
        mode, this flag can accept a value.
    
    - cycle : c                      (float)         [create,query]
        This flag is now obsolete. Use the postCycle flag instead.
    
    - defaultAbsolute : da           (bool)          [query,edit]
        Sets all top-level channels except rotations in the clip to relative, and the
        remaining channels to absolute. This is the default during clip creation if no
        offset flag is specified.  This flag cannot be used in conjunction with the
        aa/allAbsolute, ar/allRelative, or ra/rotationsAbsolute flags.
    
    - enable : en                    (bool)          [create,query]
        This flag is used to enable or disable a clip. It must be used in conjunction
        with the ci/clipIndex flag. The specified clip will be enabled or disabled.
    
    - group : grp                    (bool)          [create]
        This flag is used to add (true) or remove (false) a list of clips (specified
        with groupIndex) into a group.
    
    - groupIndex : gri               (int)           [create]
        This flag specifies a multiple number of clips to be added or removed from a
        group.
    
    - groupName : gn                 (unicode)       [create,query]
        This flag is used to specify the group that should be added to.  If no group by
        that name exists and new group is created with that name.  By default if this is
        not specified a new group will be created.
    
    - hold : ph                      (time)          [create,query]
        Specify how long to hold the last value of the clip after its normal or cycled
        end.
    
    - insertTrack : it               (int)           [create]
        This flag is used to insert a new empty track at the track index specified.
    
    - instance : instance            (unicode)       [create]
        Create an instanced copy of the named clip. An instanced clip is one that is
        linked to an original clip. Thus, changes to the animation curve of the original
        curve will also modify all instanced clips. The name of the instanced clip is
        returned as a string.
    
    - listCurves : lc                (bool)          [create,query]
        This flag is used to list the animation curves associated with a clip. It should
        be used in conjunction with the clipIndex flag, which specifies the clip of
        interest.
    
    - listPairs : lp                 (bool)          [query]
        This query only flag returns a string array containing the channels in a
        character that are used by a clip and the names of the animation curves that
        drive the channels. Each string in the string array consists of the name of a
        channel, a space, and the name of the animation curve animating that channel.
        This flag must be used with the ci/clipIndex flag.
    
    - lock : l                       (bool)          [query,edit]
        This flag specifies whether clips on a track are to be locked or not. Must be
        used in conjuction with the track flag.
    
    - mute : m                       (bool)          [query,edit]
        This flag specifies whether clips on a track are to be muted or not. Must be
        used in conjuction with the track flag.
    
    - name : n                       (unicode)       [create,query]
        This flag is used to query the name of the clip node associated with the
        specified clip index, or to specify the name of the instanced clip during
        instancing. In query mode, this flag can accept a value.
    
    - postCycle : poc                (float)         [create,query]
        Specify the number of times to repeat the clip after its normal end.
    
    - preCycle : prc                 (float)         [create,query]
        Specify the number of times to repeat the clip before its normal start.
    
    - remove : rm                    (bool)          [create]
        This flag is used to remove a clip from the timeline. It must be used in
        conjunction with the ci/clipIndex flag. The specified clip will be removed from
        the timeline, but will still exist in the library and any instanced clips will
        remain in the timeline. To permanently remove a clip from the scene, the clip
        command should be used instead.
    
    - removeBlend : rb               (int, int)      [create]
        This flag is used to remove an existing blend between two clips, whose indices
        are provided as flag arguments.
    
    - removeEmptyTracks : ret        (bool)          [create]
        This flag is used to remove all tracks that have no clips.
    
    - removeTrack : rt               (int)           [create]
        This flag is used to remove the track with the specified index.  The track must
        have no clips on it before it can be removed.
    
    - rotationsAbsolute : ra         (bool)          [query,edit]
        Set all channels except rotations to be calculated with relative offsets.
        Rotation channels will be calculated with absolute offsets.  This flag cannot be
        used in conjunction with the aa/allAbsolute, ar/allRelative or
        da/defaultAbsolute flags.
    
    - scale : sc                     (float)         [create,query]
        Specify the amount to scale the clip. Values must be greater than 0.
    
    - shift : sh                     (int)           [create]
        This flag allows multiple clips to be shifted by a certain number of tracks and
        works in conjunction with the shiftIndex flag.  The flag specifies the number of
        tracks to shift the associated clips.  Positive values shift the clips down an
        negative values shift the clips up.
    
    - shiftIndex : shi               (int)           [create]
        This flag allows multiple clips to be shifted by a certain number of tracks and
        works in conjunction with the shiftAmount flag.  The flag specifies the index of
        the clip to shift.  This flag can be used multiple times on the command line to
        specify a number of clips to shift.
    
    - solo : so                      (bool)          [query,edit]
        This flag specifies whether clips on a track are to be soloed or not. Must be
        used in conjuction with the track flag.
    
    - sourceClipName : scn           (bool)          [create,query]
        This flag is used to query the name of the source clip node associated with the
        specified clip index.
    
    - sourceEnd : se                 (time)          [create,query]
        Specify where to end in the source clip's animation curves
    
    - sourceStart : ss               (time)          [create,query]
        Specify where to start in the source clip's animation curves
    
    - start : s                      (time)          [create,query]
        Specify the placement of the start of the clip
    
    - track : t                      (int)           [create,query]
        Specify the track to operate on. For example, which track to place a clip on,
        which track to mute/lock/solo.  In query mode, it may be used in conjuction with
        the clipIndex flag to return the track number of a clip, where track 1 is the
        first track of the character. In query mode, this flag can accept a value.
    
    - weight : w                     (float)         [create,query]
        This flag is used in to set or query the weight of the clip associated with the
        specified clip index.
    
    - weightStyle : ws               (int)           [create,query]
        This flag is used to set or query the weightStyle attribute of the clip
        associated with the specified clip index.                                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipSchedule`
    """
    pass
def ExtendFluidOptions(*args, **kwargs): pass
def RemoveBlendShape(*args, **kwargs): pass
def applyAttrPattern(*args, **kwargs):
    """
    Take the attribute structure described by a pre-defined pattern and apply it
    either to a node (as dynamic attributes) or a node type (as extension
    attributes). The same pattern can be applied more than once to different nodes
    or node types as the operation duplicates the attribute structure described by
    the pattern.  See the 'createAttrPatterns' command for a description of how to
    create a pattern.
    
    Flags:
    - nodeType : nt                  (unicode)       [create]
        Name of the node type to which the attribute pattern is to be applied. This flag
        will cause a new extension attribute tree to be created, making the new
        attributes available on all nodes of the given type. If it is not specified then
        either a node name must be specified or a node must be selected for application
        of dynamic attributes.
    
    - patternName : pn               (unicode)       [create]
        The name of the pattern to apply. The pattern with this name must have been
        previously created using the createAttrPatterns command.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.applyAttrPattern`
    """
    pass
def NodeEditorGraphAllShapes(*args, **kwargs): pass
def nClothRestToInput(*args, **kwargs): pass
def DeleteCurrentSet(*args, **kwargs): pass
def CreateNailConstraint(*args, **kwargs): pass
def assignViewportFactories(*args, **kwargs):
    """
    Sets viewport factories for displays as materials or textures.           In
    query mode, return type is based on queried flag.
    
    Flags:
    - materialFactory : mf           (unicode)       [create,query,edit]
        Set or query the materialFactory for the node type.
    
    - nodeType : nt                  (unicode)       [create,query,edit]
        The node type.
    
    - textureFactory : tf            (unicode)       [create,query,edit]
        Set or query the textureFactory for the node type.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.assignViewportFactories`
    """
    pass
def SetPreferredAngle(*args, **kwargs): pass
def RaiseMainWindow(*args, **kwargs): pass
def IntersectSurfaces(*args, **kwargs): pass
def trackCtx(*args, **kwargs):
    """
    This command can be used to create a track context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - trackGeometry : tg             (bool)          [create,query,edit]
        Toggle whether the drag should try to track geometry. The context will compute a
        track plane by intersecting the initial press with geometry or the live object.
    
    - trackScale : ts                (float)         [create,query,edit]
        Specify the distance to the track plane from the camera. The smaller the scale
        the slower the drag.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.trackCtx`
    """
    pass
def propModCtx(*args, **kwargs):
    """
    Controls the proportional move context.
    
    Flags:
    - animCurve : ac                 (unicode)       [create,query,edit]
        Name of the anim curve to use as a drop-off curve. Only the 0 -side of the curve
        will be used and the distance will be mapped to seconds.  The profile of the
        curve will be used as the profile for propmod function.
    
    - animCurveFalloff : acf         (float, float)  [create,query,edit]
        The profile of the curve will be used as the profile for propmod function in
        both U and V. This will be scaled in U, V according to the paramters provided.
        The ratio of the U, V scaling parameters will dictate the footprint of the
        fuction while the curve itself provides the magnitudes.
    
    - animCurveParam : acp           (unicode)       [create,query,edit]
        Name of the anim curve to use as a drop-off curve. Only the 0 -side of the curve
        will be used and the distance will be mapped to seconds, where 1 second maps to
        0.01 units in parametric space.
    
    - direction : d                  (float, float, float) [create,query,edit]
        Direction along which to compute the distance for the distance based drop-off
        functions.  The default is (1 1 1)
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - linear : l                     (float)         [create,query,edit]
        If using linear drop-off function, this is its slope.  The default of -0.1 means
        the point at the locator moves with it and the point 10 units away doesn't move
        at all.
    
    - linearParam : lp               (float, float)  [create,query,edit]
        If using parametric linear drop-off function, these specify its limits along the
        U and V directions.
    
    - nurbsCurve : nc                (unicode)       [create,query,edit]
        Name of the nurbs curve to use as a drop-off curve. The closest point distance
        would be used as the drop off percentage.
    
    - powerCutoff : pc               (float)         [create,query,edit]
        If using the power drop-off function, this is its distance cutoff value.  The
        default is 10.0.
    
    - powerCutoffParam : pcp         (float, float)  [create,query,edit]
        If using the power drop-off function, these specify one of it's limits, 0 for U,
        and 1 and V.  The default cutoff is 10.0.
    
    - powerDegree : pd               (float)         [create,query,edit]
        If using the power drop-off function, this is its degree.  The default is 3.
    
    - powerDegreeParam : pdp         (float)         [create,query,edit]
        If using the power drop-off function, this is its degree.  The default is 3.
    
    - script : s                     (unicode)       [create,query,edit]
        The name of the script to use to compute the drop-off. The script takes 6 floats
        as input - first 3 are the position of the move locator, the next 3 the position
        of the point to be manipulated.  The script should return a drop-off coefficient
        which could be negative or zero.
    
    - scriptParam : sp               (unicode)       [create,query,edit]
        The name of the script to use to compute the drop-off. The script takes 4 floats
        as input - first 2 are the parametric position of the move locator, the next 2
        the parametric position of the point to be manipulated.  The script should
        return a drop-off coefficient which could be negative or zero.
    
    - type : t                       (int)           [create,query,edit]
        Choose the type for the drop-off function.  Legal values are 1 for linear, 2 for
        power, 3 for script, 4 for anim curve. The default is 1.
    
    - worldspace : ws                (bool)          [create,query,edit]
        Set the space in which the tool works. True for world space, false for
        parametric space.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.propModCtx`
    """
    pass
def NodeEditorAddIterationStatePorts(*args, **kwargs): pass
def BoundaryOptions(*args, **kwargs): pass
def tumble(*args, **kwargs):
    """
    The tumble command revolves the camera(s) by varying the azimuth and elevation
    angles in the perspective window. When both the azimuth and the elevation angles
    are supplied on the command line, the camera is firstly tumbled for the azimuth
    angle, then tumbled for the elevation angle. When no camera name is supplied,
    this command is applied to the camera in the active view. The camera's rotate
    pivot will override a specified pivot point if the rotate pivot is not at the
    camera's eye point.
    
    Flags:
    - azimuthAngle : aa              (float)         [create]
        Degrees to change the azimuth angle.
    
    - elevationAngle : ea            (float)         [create]
        Degrees to change the elevation angle.
    
    - localTumble : lt               (int)           [create]
        Describes what point the camera will tumble around: 0 for the camera's tumble
        pivot, 1 for the camera's center of interest, and 2 for the camera's local axis,
        offset by its tumble pivot.
    
    - pivotPoint : pp                (float, float, float) [create]
        Three dimensional point used as the pivot point in the world space.
    
    - rotationAngles : ra            (float, float)  [create]
        Two values in degrees to change the azimuth and elevation angles.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.tumble`
    """
    pass
def U3DBrushPressureOn(*args, **kwargs): pass
def cmdFileOutput(*args, **kwargs):
    """
    This command will open a text file to receive all of the commands and results
    that normally get printed to the Script Editor window or console. The file will
    stay open until an explicit -close with the correct file descriptor or a
    -closeAll, so care should be taken not to leave a file open. To enable logging
    to commence as soon as Maya starts up, the environment variable
    MAYA_CMD_FILE_OUTPUT may be specified prior to launching Maya. Setting
    MAYA_CMD_FILE_OUTPUT to a filename will create and output to that given file. To
    access the descriptor after Maya has started, use the -query and -open flags
    together.
    
    Flags:
    - close : c                      (int)           [create]
        Closes the file corresponding to the given descriptor. If -3 is returned, the
        file did not exist. -1 is returned on error, 0 is returned on successful close.
    
    - closeAll : ca                  (bool)          [create]
        Closes all open files.
    
    - open : o                       (unicode)       [create,query]
        Opens the given file for writing (will overwrite if it exists and is writable).
        If successful, a value is returned to enable status queries and file close. -1
        is returned if the file cannot be opened for writing. The -open flag can also be
        specified in -query mode. In query mode, if the named file is currently opened,
        the descriptor for the specified file is returned, otherwise -1 is returned.
        This is an easy way to check if a given file is currently open.
    
    - status : s                     (int)           [create,query]
        Queries the status of the given descriptor. -3 is returned if no such file
        exists, -2 indicates the file is not open, -1 indicates an error condition, 0
        indicates file is ready for writing.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cmdFileOutput`
    """
    pass
def GetHIKNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetHIKNode`
    """
    pass
def attachGeometryCache(*args, **kwargs): pass
def MakeHoleTool(*args, **kwargs): pass
def SelectAllHairSystem(*args, **kwargs): pass
def CustomPolygonDisplay(*args, **kwargs): pass
def CreateAnnotateNode(*args, **kwargs): pass
def SelectIsolate(*args, **kwargs): pass
def AutobindContainer(*args, **kwargs): pass
def ScaleToolMarkingMenuPopDown(*args, **kwargs): pass
def PolygonApplyColor(*args, **kwargs): pass
def arnoldCopyAsAdmin(*args, **kwargs):
    """
    Flags:
    - file : f                       (unicode)       []
    
    - output : o                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.arnoldCopyAsAdmin`
    """
    pass
def geometryMergeCacheOpt(*args, **kwargs): pass
def PolyConvertToLoopAndDuplicate(*args, **kwargs): pass
def CameraModeOrthographic(*args, **kwargs): pass
def DeleteAllMotionPaths(*args, **kwargs): pass
def PaintEffectPanelDeactivate(*args, **kwargs): pass
def FrameAllInAllViews(*args, **kwargs): pass
def posePanel(*args, **kwargs): pass
def geometryAppendCacheOpt(*args, **kwargs): pass
def TransferShadingSets(*args, **kwargs): pass
def Delete(*args, **kwargs): pass
def CreateConstraintClip(*args, **kwargs): pass
def dR_connectRelease(*args, **kwargs): pass
def CreateNURBSCylinderOptions(*args, **kwargs): pass
def UVEditorToggleTextureBorderDisplay(*args, **kwargs): pass
def hitTest(*args, **kwargs):
    """
    The hitTestcommand hit-tests a point in the named control and returns a list of
    items underneath the point. The point is specified in pixels with the origin
    (0,0) at the top-left corner. This position is compatible with the coordinates
    provided by a drop-callback. The types of items that may be returned depends
    upon the specific control; not all controls currently support hit-testing.
    
    
    Derived from mel command `maya.cmds.hitTest`
    """
    pass
def SaveHIKCharacterDefinition(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.SaveHIKCharacterDefinition`
    """
    pass
def MarkingMenuPopDown(*args, **kwargs): pass
def RigidBodySolver(*args, **kwargs): pass
def dR_modeUV(*args, **kwargs): pass
def DisplayUVWireframe(*args, **kwargs): pass
def RebuildCurveOptions(*args, **kwargs): pass
def Tension(*args, **kwargs): pass
def SelectAllSculptObjects(*args, **kwargs): pass
def NodeEditorConnectSelectedNodes(*args, **kwargs): pass
def SetMeshEraseTool(*args, **kwargs): pass
def PolygonSelectionConstraints(*args, **kwargs): pass
def turbulence(*args, **kwargs): pass
def NodeEditorToggleAttrFilter(*args, **kwargs): pass
def WhatsNewStartupDialogOff(*args, **kwargs): pass
def duplicateSurface(*args, **kwargs):
    """
    The duplicateSurface command takes a surface patch (face) and and returns the 3D
    surface. Connected patches are returned as a single surface.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - faceCountU : fcu               (int)           [create,query,edit]
        Number of faces in U direction Default:1
    
    - faceCountV : fcv               (int)           [create,query,edit]
        Number of faces in V direction Default:1
    
    - firstFaceU : ffu               (int)           [create,query,edit]
        First face (U direction index) Default:0
    
    - firstFaceV : ffv               (int)           [create,query,edit]
        First face (V direction index) Default:0
    
    - frozen : fzn                   (bool)          []
    
    - local : l                      (bool)          [create]
        Copy the transform of the surface and connect to the local space version
        instead.
    
    - mergeItems : mi                (bool)          [create]
        Merge component results where possible. For example, instead of returning a[1]
        and a[2], return a[1:2].
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    - object : o                     (bool)          []
    
    
    Derived from mel command `maya.cmds.duplicateSurface`
    """
    pass
def cmdArnoldExportOperators(*args, **kwargs): pass
def AlignCurveOptions(*args, **kwargs): pass
def FBXImportConstraints(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportConstraints`
    """
    pass
def dynControl(*args, **kwargs):
    """
    Flags:
    - autoCreate : ac                (bool)          []
    
    - oversample : os                (int)           []
    
    - particleCache : pc             (bool)          []
    
    - particleLOD : pld              (float)         []
    
    - particlesOn : po               (bool)          []
    
    - rigidOn : ro                   (bool)          []
    
    - seed : sd                      (int)           []
    
    - startTime : st                 (time)          []
    
    - traceDepth : td                (int)           []
    
    
    Derived from mel command `maya.cmds.dynControl`
    """
    pass
def fluidDeleteCacheFrames(*args, **kwargs): pass
def HypershadeAddOnNodeCreate(*args, **kwargs): pass
def GraphEditorNeverDisplayTangents(*args, **kwargs): pass
def TurbulenceOptions(*args, **kwargs): pass
def IncreaseExposureFine(*args, **kwargs): pass
def TagAsController(*args, **kwargs): pass
def PaintTransferAttributes(*args, **kwargs): pass
def ResetLattice(*args, **kwargs): pass
def curveRGBColor(*args, **kwargs):
    """
    This command creates, changes or removes custom curve colors, which are used to
    draw the curves in the Graph Editor. The custom curve names may contain the
    wildcards ?, which marches a single character, and \*, which matches any number
    of characters. These colors are part of the UI and not part of the saved data
    for a model.  This command is not undoable.
    
    Flags:
    - hueSaturationValue : hsv       (bool)          [create,query]
        Indicates that rgb values are really hsv values.
    
    - list : l                       (bool)          [create]
        Writes out a list of all curve color names and their values.
    
    - listNames : ln                 (bool)          [create]
        Returns an array of all curve color names.
    
    - remove : r                     (bool)          [create]
        Removes the named curve color.
    
    - resetToFactory : rf            (bool)          [create]
        Resets all the curve colors to their factory defaults.
    
    - resetToSaved : rs              (bool)          [create]
        Resets all the curve colors to their saved values.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveRGBColor`
    """
    pass
def PreviousGreasePencilFrame(*args, **kwargs): pass
def HypershadeOpenPropertyEditorWindow(*args, **kwargs): pass
def LoadHIKEffectorSetState(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.LoadHIKEffectorSetState`
    """
    pass
def ModifyOpacityRelease(*args, **kwargs): pass
def GraphEditorLockChannel(*args, **kwargs): pass
def TimeEditorCreatePoseClip(*args, **kwargs): pass
def geometryDeleteCacheOpt(*args, **kwargs): pass
def CopyFlexor(*args, **kwargs): pass
def xgmPreview(*args, **kwargs):
    """
    Flags:
    - cache : ca                     (bool)          []
    
    - clean : c                      (bool)          []
    
    - progress : pb                  (bool)          []
    
    - queryrender : qr               (bool)          []
    
    - regionFX : fx                  (unicode)       []
    
    - rerender : r                   (bool)          []
    
    - selected : s                   (bool)          []
    
    - shadow : sha                   (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmPreview`
    """
    pass
def ToggleCVs(*args, **kwargs): pass
def OpenModelingToolkit(*args, **kwargs): pass
def keyframeRegionInsertKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to insert keys within the
    keyframe region of the dope sheet editor
    
    Flags:
    - breakdown : bd                 (bool)          [query,edit]
        Specifies whether or not to create breakdown keys
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionInsertKeyCtx`
    """
    pass
def lsUI(*args, **kwargs): pass
def cmdPhysicalSky(*args, **kwargs): pass
def frameLayout(*args, **kwargs): pass
def Export(*args, **kwargs): pass
def ShapeEditorDuplicateTarget(*args, **kwargs): pass
def filter(*args, **kwargs):
    """
    Dynamic library stub function
    """
    pass
def ShowRenderingUI(*args, **kwargs): pass
def vectorize(*args, **kwargs):
    """
    Flags:
    - browserView : bv               (bool)          []
    
    - byFrame : bf                   (float)         []
    
    - camera : c                     (unicode)       []
    
    - combineFillsEdges : cfe        (bool)          []
    
    - currentFrame : cf              (bool)          []
    
    - curveTolerance : ct            (float)         []
    
    - customExtension : ce           (unicode)       []
    
    - detailLevel : dl               (int)           []
    
    - edgeColor : ec                 (int, int, int) []
    
    - edgeDetail : ed                (bool)          []
    
    - edgeStyle : es                 (unicode)       []
    
    - edgeWeight : ew                (float)         []
    
    - endFrame : ef                  (float)         []
    
    - filenameFormat : ff            (unicode)       []
    
    - fillStyle : fs                 (unicode)       []
    
    - flashVersion : fv              (int)           []
    
    - frameRate : fr                 (int)           []
    
    - height : h                     (int)           []
    
    - hiddenEdges : he               (bool)          []
    
    - highlightLevel : hl            (int)           []
    
    - highlights : hi                (bool)          []
    
    - imageFormat : imageFormat      (unicode)       []
    
    - layer : l                      (PyNode)        []
    
    - minEdgeAngle : mea             (float)         []
    
    - outlinesAtIntersections : oai  (bool)          []
    
    - outputFileName : of            (unicode)       []
    
    - pixelAspectRatio : par         (float)         []
    
    - reflectionDepth : rd           (int)           []
    
    - reflections : rf               (bool)          []
    
    - renderLayers : rl              (bool)          []
    
    - renderOptimization : ro        (unicode)       []
    
    - renderView : rv                (bool)          []
    
    - secondaryCurveFitting : scf    (bool)          []
    
    - shadows : sh                   (bool)          []
    
    - showBackFaces : sb             (bool)          []
    
    - startFrame : sf                (float)         []
    
    - svgAnimation : sa              (unicode)       []
    
    - svgCompression : sc            (bool)          []
    
    - width : w                      (int)           []
    
    
    Derived from mel command `maya.cmds.vectorize`
    """
    pass
def HIKBodyPartMode(*args, **kwargs): pass
def MoveSkinJointsTool(*args, **kwargs): pass
def NodeEditorToggleUseAssetsAndPublishedAttributes(*args, **kwargs): pass
def reproInstancer(*args, **kwargs):
    """
    Flags:
    - addObject : a                  (bool)          []
    
    - addProxy : ap                  (bool)          []
    
    - camera : cam                   (unicode)       []
    
    - displayType : dt               (int)           []
    
    - help : h                       (bool)          []
    
    - index : i                      (int)           []
    
    - indices : ids                  (bool)          []
    
    - levelOfDetail : lod            (int)           []
    
    - move : m                       (int)           []
    
    - moveProxy : mp                 (int)           []
    
    - object : obj                   (unicode)       []
    
    - objects : obs                  (bool)          []
    
    - proxies : ps                   (bool)          []
    
    - proxy : p                      (unicode)       []
    
    - proxyIndex : pi                (int)           []
    
    - proxyIndices : pis             (bool)          []
    
    - proxyLod : pl                  (float)         []
    
    - removeObject : rm              (bool)          []
    
    - removeProxy : rmp              (bool)          []
    
    - rotationOrder : ro             (int)           []
    
    
    Derived from mel command `maya.cmds.reproInstancer`
    """
    pass
def polyMergeUV(*args, **kwargs): pass
def RotateToolMarkingMenu(*args, **kwargs): pass
def HyperGraphPanelUndoViewChange(*args, **kwargs): pass
def ParticleFillOptions(*args, **kwargs): pass
def sbs_SetAutoBake(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetAutoBake`
    """
    pass
def DisableSnapshots(*args, **kwargs): pass
def OneClickExecute(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickExecute`
    """
    pass
def FBXExportDeleteOriginalTakeOnSplitAnimation(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportDeleteOriginalTakeOnSplitAnimation`
    """
    pass
def DeleteAllNRigids(*args, **kwargs): pass
def TimeEditorPasteClips(*args, **kwargs): pass
def PublishConnections(*args, **kwargs): pass
def InsertEdgeLoopToolOptions(*args, **kwargs): pass
def ShowFur(*args, **kwargs): pass
def ToggleDisplacement(*args, **kwargs): pass
def HypershadeMoveTabUp(*args, **kwargs): pass
def NURBSSmoothnessRough(*args, **kwargs): pass
def nurbsCube(*args, **kwargs): pass
def SendToUnrealAll(*args, **kwargs): pass
def MoveUVTool(*args, **kwargs): pass
def TimeEditorImportAnimation(*args, **kwargs): pass
def ShowPolygonSurfaces(*args, **kwargs): pass
def file(*args, **kwargs): pass
def HypershadeDeleteAllTextures(*args, **kwargs): pass
def cmdArnoldDenoise(*args, **kwargs): pass
def AddInbetween(*args, **kwargs): pass
def CurlCurves(*args, **kwargs): pass
def polyBoolOp(*args, **kwargs): pass
def xgmSetArchiveSize(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmSetArchiveSize`
    """
    pass
def dolly(*args, **kwargs):
    """
    The dolly command moves a camera along the viewing direction in the world space.
    The viewing-direction and up-direction of the camera are not altered. There are
    two modes of operation: Relative mode: for a perspective camera, the camera is
    moved along its viewing direction, and the distance of travel is computed with
    respect to the current position of the camera in the world space. In relative
    mode, when the camera is moved, its COI is moved along with it, and is kept at
    the same distance, in front of the camera, as before applying the dolly
    operation. For orthographic camera, the viewing width of the camera is changed
    by scaling its ortho width by the new value specified on the command line.
    Absolute mode: for a perspective camera, the camera is moved along its viewing
    direction, to the distance that is computed with respect to the current position
    of the world center of interest (COI) of the camera. In the absolute mode, when
    the camera is moved, the COI of the camera is not moved with the camera, but it
    is fixed at its current location in space. For orthographic camera, the viewing
    width of the camera is changed by replacing its ortho width with the new value
    specified on the command line. This command may be applied to more than one
    cameras; objects that are not cameras are ignored. When no camera name supplied
    on the command line, this command is applied to all currently active cameras.
    The dolly command can be applied to either a perspective or an orthographic
    camera.
    
    Flags:
    - absolute : abs                 (bool)          [create]
        This flag modifies the behavior of the distance and orthoScale flags. When used
        in conjunction with the distance flag, the distance argument specifies how far
        the camera's eye point should be set from the camera's center of interest. When
        used with the orthoScale flag, the orthoScale argument specifies the camera's
        new ortho width.
    
    - distance : d                   (float)         [create]
        Unit distance to dolly a perspective camera.
    
    - dollyTowardsCenter : dtc       (bool)          [create]
        This flag controls whether the dolly is performed towards the center of the view
        (if true), or towards the point where the user clicks (if false). By default,
        dollyTowardsCenter is on.
    
    - orthoScale : os                (float)         [create]
        Scale to change the ortho width of an orthographic camera.
    
    - relative : rel                 (bool)          [create]
        This flag modifies the behavior of the distance and orthoScale flags. When used
        in conjunction with the distance flag, the camera eye and center of interest are
        both moved by the amount specified by the distance flag's argument. When used
        with the orthoScale flag, the orthoScale argument is used multiply the camera's
        ortho width.By default the relative flag is always on.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dolly`
    """
    pass
def AttachCurve(*args, **kwargs): pass
def ToggleEdgeMetadata(*args, **kwargs): pass
def SetMeshImprintTool(*args, **kwargs): pass
def rowLayout(*args, **kwargs): pass
def detachDeviceAttr(*args, **kwargs):
    """
    This command detaches connections between device axes and node attributes.  The
    command line arguments are the same as for the corresponding attachDeviceAttr
    except for the clutch argument which can not be used in this command. In query
    mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - all : all                      (bool)          [create]
        Delete all attachments on every device.
    
    - attribute : at                 (unicode)       [create]
        The attribute to detach. This flag must be used with the -d/device flag.
    
    - axis : ax                      (unicode)       [create]
        The axis to detach. This flag must be used with the -d/device flag.
    
    - device : d                     (unicode)       [create]
        Delete the attachment for this device. If the -ax/axis flag is not used, all of
        the attachments connected to this device are detached.
    
    - selection : sl                 (bool)          [create]
        Detaches selection attachments.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.detachDeviceAttr`
    """
    pass
def PointConstraint(*args, **kwargs): pass
def SymmetrizeUVUpdateCommand(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.SymmetrizeUVUpdateCommand`
    """
    pass
def XgmSplineCacheReplaceOptions(*args, **kwargs): pass
def XgPreview(*args, **kwargs): pass
def SetMaxInfluences(*args, **kwargs): pass
def OutlinerToggleOrganizeByLayer(*args, **kwargs): pass
def nClothCacheOpt(*args, **kwargs): pass
def ShowMeshFlattenToolOptions(*args, **kwargs): pass
def ToggleUVEditorIsolateSelectHUD(*args, **kwargs): pass
def pfxstrokes(*args, **kwargs):
    """
    This command will loop through all the Paint Effects strokes, including pfxHair
    nodes, and write the current state of all the tubes to a file. For normal stroke
    nodes tubes must be ON in the brush or there will be no output. For pfxHair
    nodes there will always be output, but the format is different than for stroke
    nodes(however one can assign a brush with tubes = ON to a pfxHair node, in which
    case it will output the same format as strokes). The general file format is
    ASCII, using commas to separate numerical values and newlines between blocks of
    data. The format used for pfxHair nodes presents the hair curves points in order
    from root to tip of the hair. The hairs follow sequentially in the following
    fashion: NumCvs pointX,pointY,pointZ, normalX,normalY,normalZ, width,
    colorR,colorG,colorB, paramU pointX,pointY,pointZ, normalX,normalY,normalZ,
    width, colorR,colorG,colorB, paramU etc... NumCvs pointX,pointY,pointZ,
    normalX,normalY,normalZ, width, colorR,colorG,colorB, paramU etc.. The format
    used to output files for brushes with tubes=ON is more complex. The tubes can
    branch and the order the segments are written is the same order they are drawn
    in. Slowly drawing a tall grass brush in the paint effects panel can help to
    illustrate the order the segments will appear in the file. New tubes can start
    growingbefore others are finished. There is no line for NumCvs. Instead all data
    for each segment appears on each line. The data on each line is the same as
    passed into the paint effects runtime function. See the argument list of
    paintRuntimeFunc.mel for the order and a description of these parameters. The
    parameters match up exactly in the order they appear on a line of the output
    file with the order of arguments to this function. If one wishes to parse the
    output file and connect the segments together into curves the branchId, parentId
    and siblingCnt parameters can help when sorting which segment connects to which
    line. Using the -postCallback option will write out the tubes data after it has
    been proessed by the runTime callback.
    
    Flags:
    - filename : fn                  (unicode)       [create]
        The output file.
    
    - postCallback : pc              (bool)          [create]
        Output information to the file after the Runtime Callback MEL function has been
        invoked. The default is to output the information prior to the callback.
    
    - selected : sl                  (bool)          [create]
        Only loop through the selected strokes.                                    Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pfxstrokes`
    """
    pass
def SetFluidAttrFromCurveOptions(*args, **kwargs): pass
def xgmCutBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmCutBrushToolCmd`
    """
    pass
def webBrowserPrefs(*args, **kwargs):
    """
    Flags:
    - preference : prf               (unicode, unicode) []
    
    
    Derived from mel command `maya.cmds.webBrowserPrefs`
    """
    pass
def ConvertHairSelectionToStartCurveEndCVs(*args, **kwargs): pass
def CreateLineModifier(*args, **kwargs): pass
def SetCurrentColorSet(*args, **kwargs): pass
def ParticleInstancerOptions(*args, **kwargs): pass
def DisplacementToPolygon(*args, **kwargs): pass
def UnfoldPackUVs3DInCurrentTile(*args, **kwargs): pass
def movieInfo(*args, **kwargs):
    """
    movieInfo provides a mechanism for querying information about movie files.
    
    Flags:
    - counter : cn                   (bool)          [create]
        Query the 'counter' flag of the movie's timecode format. If this is true, the
        timecode returned by the -timeCode flag will be a simple counter. If false, the
        returned timecode will be an array of integers (hours, minutes, seconds,
        frames).
    
    - dropFrame : df                 (bool)          [create]
        Query the 'drop frame' flag of the movie's timecode format.
    
    - frameCount : f                 (bool)          [create]
        Query the number of frames in the movie file
    
    - frameDuration : fd             (bool)          [create]
        Query the frame duration of the movie's timecode format.
    
    - height : h                     (bool)          [create]
        Query the height of the movie
    
    - movieTexture : mt              (bool)          [create]
        If set, the string argument is interpreted as the name of a movie texture node,
        and the command then operates on the movie loaded by that node.
    
    - negTimesOK : nt                (bool)          [create]
        Query the 'neg times OK' flag of the movie's timecode format.
    
    - numFrames : nf                 (bool)          [create]
        Query the whole number of frames per second of the movie's timecode format.
    
    - quickTime : qt                 (bool)          [create]
        Query whether the movie is a QuickTime movie.
    
    - timeCode : tc                  (bool)          [create]
        Query the timecode of the current movie frame.
    
    - timeCodeTrack : tt             (bool)          [create]
        Query whether the movie has a timecode track.
    
    - timeScale : ts                 (bool)          [create]
        Query the timescale of the movie's timecode format.
    
    - twentyFourHourMax : tf         (bool)          [create]
        Query the '24 hour max' flag of the movie's timecode format.
    
    - width : w                      (bool)          [create]
        Query the width of the movie                               Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.movieInfo`
    """
    pass
def Bevel(*args, **kwargs): pass
def ViewAlongAxisX(*args, **kwargs): pass
def HypershadeToggleZoomIn(*args, **kwargs): pass
def NodeEditorRenameActiveTab(*args, **kwargs): pass
def layoutDialog(*args, **kwargs): pass
def xgmDraRender(*args, **kwargs):
    """
    Flags:
    - basename : b                   (unicode)       []
    
    - progress : pb                  (bool)          []
    
    - shadow : sha                   (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmDraRender`
    """
    pass
def SetReFormTool(*args, **kwargs): pass
def dR_setRelaxAffectsAll(*args, **kwargs): pass
def UnlockNormals(*args, **kwargs): pass
def PaintOnViewPlane(*args, **kwargs): pass
def AffectSelectedObject(*args, **kwargs): pass
def xgmSplineQuery(*args, **kwargs):
    """
    Flags:
    - frozenSplineCount : fsc        (bool)          []
    
    - isCLReady : clr                (bool)          []
    
    - isSplineDescription : id       (bool)          []
    
    - listBoundMeshes : lm           (bool)          []
    
    - listLeadSplineDescription : lld (bool)          []
    
    - listSelectedSculptNodes : lss  (bool)          []
    
    - listSelectedSplineDescriptions : lsd (bool)          []
    
    - listSplineDescriptions : ld    (bool)          []
    
    - long : l                       (bool)          []
    
    - selectedSplineCount : ssc      (bool)          []
    
    - shape : s                      (bool)          []
    
    - splineCount : sc               (bool)          []
    
    - videoMemoryAvailable : vma     (bool)          []
    
    - videoMemoryDedicated : vmd     (bool)          []
    
    - videoMemoryUsed : vmu          (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmSplineQuery`
    """
    pass
def XgmSetNoiseBrushTool(*args, **kwargs): pass
def CreatePoseOptions(*args, **kwargs): pass
def FineLevelComponentDisplay(*args, **kwargs): pass
def greasePencilCtx(*args, **kwargs):
    """
    This is a tool context command for the grease pencil tool.               In
    query mode, return type is based on queried flag.
    
    Flags:
    - autoCreateFrames : acf         (bool)          [create,query,edit]
        Should frames be automatically created when drawing?
    
    - canDraw : cd                   (bool)          [query]
        Check to see if drawing is allowed
    
    - createOrEditFrame : cef        (int)           [query]
        Frame number for create or edit
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - exportArchive : eac            (unicode, unicode) [edit]
        Modify names of export archive
    
    - fileTextureSize : fts          (int)           [create,query,edit]
        Both width and height dimensions of the file texture (they are square).
    
    - greasePencilType : gpt         (int)           [create,query,edit]
        Grease pencil type. 1 = Pencil, 2 = Marker, 3 = Soft Pencil, 4 = Eraser
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importArchive : iac            (unicode)       [edit]
        Modify name of import archive
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - removeFrame : rf               (int)           [edit]
        Remove the given frame
    
    - resetBrushes : rb              (bool)          [query,edit]
        Should the brushes reset?
    
    - rgbcolor : rgb                 (float, float, float) [create,query,edit]
        Color of the grease pencil
    
    - sequenceNodeName : snn         (unicode)       [query]
        Query the name of the sequence node                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.greasePencilCtx`
    """
    pass
def CreatePolygonConeOptions(*args, **kwargs): pass
def IkfkjdsWin(*args, **kwargs): pass
def CreateVolumeCone(*args, **kwargs): pass
def LightningOptions(*args, **kwargs): pass
def polyMoveUV(*args, **kwargs): pass
def greaseRenderPlane(*args, **kwargs):
    """
    Flags:
    - axis : ax                      (float, float, float) []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - createUVs : cuv                (int)           []
    
    - frozen : fzn                   (bool)          []
    
    - height : h                     (float)         []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    - subdivisionsX : sx             (int)           []
    
    - subdivisionsY : sy             (int)           []
    
    - texture : tx                   (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.greaseRenderPlane`
    """
    pass
def SelectUVNonOverlappingComponents(*args, **kwargs): pass
def PostInfinityLinear(*args, **kwargs): pass
def TexSculptUnpinAll(*args, **kwargs): pass
def PasteKeysOptions(*args, **kwargs): pass
def CVCurveToolOptions(*args, **kwargs): pass
def MirrorJointOptions(*args, **kwargs): pass
def soloMaterial(*args, **kwargs):
    """
    Shows a preview of a specified material node output attribute.
    
    Flags:
    - attr : a                       (unicode)       [create,query]
        The attr flag specifies a node attribute to solo.
    
    - last : l                       (bool)          [create,query]
        Whether to solo the last material node and attribute.
    
    - node : n                       (unicode)       [create,query]
        The node flag specifies the node to solo.
    
    - unsolo : us                    (bool)          [create,query]
        Whether to remove soloing.                                 Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.soloMaterial`
    """
    pass
def PixelMoveLeft(*args, **kwargs): pass
def xgmCutBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - minLength : ml                 (float)         []
    
    - mode : m                       (unicode)       []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmCutBrushContext`
    """
    pass
def HideDeformingGeometry(*args, **kwargs): pass
def ConvertSelectionToFacePerimeter(*args, **kwargs): pass
def RedoPreviousIPRRender(*args, **kwargs): pass
def itemFilter(*args, **kwargs):
    """
    This command creates a named itemFilter object.  This object can be attached to
    selectionConnection objects, or to editors, in order to filter the item lists
    going through them.  Using union, intersection and difference filters, complex
    composite filters can be created.
    
    Flags:
    - byBin : bk                     (unicode)       [create,query,edit]
        The filter will only pass items whose bin list contains the given string as a
        bin name.This is a multi-use flag.If more than one occurance of this flag is
        used in a single command, the filter will accept a node if it matches at least
        one of the given bins (in other words, a union or logical or of all given bins.
    
    - byName : bn                    (unicode)       [create,query,edit]
        The filter will only pass items whose names match the given regular expression
        string.  This string can contain the special characters \* and ?.  '?' matches
        any one character, and '\*' matches any substring.
    
    - byScript : bs                  (unicode)       [create,query,edit]
        The filter will run a MEL script named by the given string on each item name.
        Items will pass the filter if the script returns a non-zero value. The script
        name string must be the name of a proc whose signature is:global proc int
        procName( string $name )or def procName(\*args, \*\*keywordArgs)if
        -pym/pythonModuleis specified. Note that if -secondScript is also used, it will
        always take precedence.
    
    - byType : bt                    (unicode)       [create,query,edit]
        The filter will only pass items whose typeName matches the given string.  The
        typeName of an object can be found using the nodeTypecommand.  This is a multi-
        use flag. If more than one occurance of this flag is used in a single command,
        the filter will accept a node if it matches at least one of the given types (in
        other words, a union or logical or of all given types.
    
    - category : cat                 (unicode)       [create,query,edit]
        A string for categorizing the filter.
    
    - classification : cls           (unicode)       [create,query,edit]
        Indicates whether the filter is a built-in or user filter. The string argument
        must be either builtInor user. The otherclassification is deprecated. Use
        userinstead.  Filters will not be deleted by a file new, and filter nodes will
        be hidden from the UI (ex: Attribute Editor, Hypergraph etc) and will not be
        accessible from the command-line.
    
    - clearByBin : cbk               (bool)          [create,edit]
        This flag will clear any existing bins associated with this filter.
    
    - clearByType : cbt              (bool)          [create,edit]
        This flag will clear any existing typeNames associated with this filter.
    
    - difference : di                (unicode, unicode) [create,query,edit]
        The filter will consist of the set difference of two other filters, whose names
        are the given strings. Items will pass this filter if and only if they pass the
        first filter but not the second filter.
    
    - exists : ex                    (bool)          [create]
        Returns true|false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - intersect : intersect          (unicode, unicode) [create,query,edit]
        The filter will consist of the intersection of two other filters, whose names
        are the given strings. Items will pass this filter if and only if they pass both
        of the contained filters.
    
    - listBuiltInFilters : lbf       (bool)          [query]
        Returns an array of all item filters with classification builtIn.
    
    - listOtherFilters : lof         (bool)          [query]
        The otherclassification is deprecated. Use userinstead. Returns an array of all
        item filters with classification other.
    
    - listUserFilters : luf          (bool)          [query]
        Returns an array of all item filters with classification user.
    
    - negate : neg                   (bool)          [create,query,edit]
        This flag can be used to cause the filter to invert itself, and reverse what
        passes and what fails.
    
    - parent : p                     (unicode)       [create,query,edit]
        Optional.  If specified, the filter's life-span is linked to that of the parent.
        When the parent goes out of scope, so does the filter.  If not specified, the
        filter will exist until explicitly deleted.
    
    - pythonModule : pym             (unicode)       [create,query,edit]
        Treat -bs/byScriptand -ss/secondScriptas Python functions located in the
        specified module.
    
    - secondScript : ss              (unicode)       [create,query,edit]
        Cannot be used in conjunction with the -bs flag.  The second script is for
        filtering whole lists at once, rather than individually.  Its signature must
        be:global proc string[] procName( string[] $name )or def procName(\*args,
        \*\*keywordArgs)if -pym/pythonModuleis specified. It should take in a list of
        items, and return a filtered list of items.
    
    - text : t                       (unicode)       [create,query,edit]
        Defines an annotation string to be stored with the filter
    
    - union : un                     (unicode, unicode) [create,query,edit]
        The filter will consist of the union of two other filters, whose names are the
        given strings. Items will pass this filter if they pass at least one of the
        contained filters.
    
    - uniqueNodeNames : unn          (bool)          [create,query,edit]
        Returns unique node names to script filters so there are no naming conflicts.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.itemFilter`
    """
    pass
def CreatePolygonGearOptions(*args, **kwargs): pass
def polyHelix(*args, **kwargs): pass
def hikGetNodeCount(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.hikGetNodeCount`
    """
    pass
def SculptSubdivsToolOptions(*args, **kwargs): pass
def EnableNRigids(*args, **kwargs): pass
def CreateShrinkWrap(*args, **kwargs): pass
def iconTextButton(*args, **kwargs): pass
def VolumeSkinBinding(*args, **kwargs): pass
def TogglePaintAtDepth(*args, **kwargs): pass
def CharacterMapper(*args, **kwargs): pass
def MoveCacheToInput(*args, **kwargs): pass
def MakeBrushSpring(*args, **kwargs): pass
def ArchiveSceneOptions(*args, **kwargs): pass
def AddToContainer(*args, **kwargs): pass
def HideSculptObjects(*args, **kwargs): pass
def GetHIKEffectorName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetHIKEffectorName`
    """
    pass
def commandLine(*args, **kwargs): pass
def polyCircularize(*args, **kwargs): pass
def polyProjection(*args, **kwargs):
    """
    Creates a mapping on the selected polygonal faces.  When construction
    history is created, the name of the new node is returned.  In other cases,
    the command returns nothing.
    
    Flags:
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off (where applicable).
    
    - createNewMap : cm              (bool)          [create]
        Create new map if it does not exist.
    
    - imageCenterX : icx             (float)         [create]
        Specifies the X (U) translation of the projected UVs.         Default is 0.5.
    
    - imageCenterY : icy             (float)         [create]
        Specifies the Y (V) translation of the projected UVs.         Default is 0.5.
    
    - imageScaleU : isu              (float)         [create]
        Specifies the U scale factor of the projected UVs.         Default is 1.
    
    - imageScaleV : isv              (float)         [create]
        Specifies the V scale factor of the projected UVs.         Default is 1.
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        Specifies if the projection node should be inserted         before or after
        deformer nodes already applied to the shape.         Inserting the projection
        after the deformer leads to texture         swimming during animation and is
        most often undesirable.         Default is on.
    
    - keepImageRatio : kir           (bool)          [create]
        Specifies if the xy scaling in the planar projection has to be         uniform.
        By setting this flag, the texture aspect ratio is         preserved.  This flag
        is ignored for cylindrical and spherical         projections.
    
    - mapDirection : md              (unicode)       [create]
        Specifies the direction of the projection.  By specifying this flag, the
        projection placement values (pcx, pcy, pcz, rx, ry, rz, psu, psv) are
        internally computed.  If both this flag and the projection values are
        specified, the projection values are ignored.         Valid Values are :
        X                       Projects along the X Axis                 Y
        Projects along the Y Axis                 Z                       Projects along
        the Z Axis                 bestPlane       Projects on the best plane fitting
        the object                 camera          Projects along the viewing direction
        perspective Creates perspective projection if current camera is perspective
        Default is bestPlane.
    
    - projectionCenterX : pcx        (float)         [create]
        Specifies the X coordinate of the center of the projection manipulator.
    
    - projectionCenterY : pcy        (float)         [create]
        Specifies the Y coordinate of the center of the projection manipulator.
    
    - projectionCenterZ : pcz        (float)         [create]
        Specifies the Z coordinate of the center of the projection manipulator.
    
    - projectionScaleU : psu         (float)         [create]
        Specifies the U scale component of the projection manipulator.
    
    - projectionScaleV : psv         (float)         [create]
        Specifies the V scale component of the projection manipulator.
    
    - rotateX : rx                   (float)         [create]
        Specifies the X-axis rotation of the projection manipulator.
    
    - rotateY : ry                   (float)         [create]
        Specifies the Y-axis rotation of the projection manipulator.
    
    - rotateZ : rz                   (float)         [create]
        Specifies the Z-axis rotation of the projection manipulator.
    
    - rotationAngle : ra             (float)         [create]
        Specifies the rotation of the projected UVs in the UV space.         Default is
        0.
    
    - seamCorrect : sc               (bool)          [create]
        Specifies if seam correction has to be done for spherical         and
        cylindrical projections.  This flag is ignored, if the         planar projection
        is specified.
    
    - smartFit : sf                  (bool)          [create]
        Specifies if the projection manipulator has to be placed         fitting the
        object.  Used for cylindrical and spherical         projections.  For smart
        fitting the planar projection, the         mapDirection flag has to be used,
        since there are several         options for smart fitting a planar projection.
    
    - type : t                       (unicode)       [create]
        Specify the type of mapping to be performed.         Valid values for the STRING
        are          planarcylindricalsphericalDefault is planar.
    
    - uvSetName : uvs                (unicode)       [create]
        Specifies name of the uv set to work on.                                   Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyProjection`
    """
    pass
def RemoveJoint(*args, **kwargs): pass
def dR_multiCutSlicePointCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_multiCutSlicePointCmd`
    """
    pass
def CreateEmptySet(*args, **kwargs): pass
def CreateShot(*args, **kwargs): pass
def PerspGraphLayout(*args, **kwargs): pass
def setAttr(*args, **kwargs): pass
def polyUVRectangle(*args, **kwargs): pass
def rampColorPort(*args, **kwargs): pass
def DetachCurveOptions(*args, **kwargs): pass
def ProjectCurveOnMeshOptions(*args, **kwargs): pass
def subdAutoProjection(*args, **kwargs):
    """
    Projects a texture map onto an object, using several orthogonal projections
    simultaneously. The argument is a face selection list.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - layout : l                     (int)           [create,query,edit]
        What layout algorithm should be used: 0 UV pieces are aligned along the U axis.
        1 UV pieces are moved in a square shape.
    
    - layoutMethod : lm              (int)           [create,query,edit]
        Which layout method to use: 0 Block Stacking. 1 Shape Stacking.
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Common flags
    
    - optimize : o                   (int)           [create,query,edit]
        Use two different flavors for the cut generation. 0 Every face is assigned to
        the best plane. This optimizes the map distortion. 1 Small UV pieces are
        incorporated into larger ones, when the extra distortion introduced is
        reasonable. This tends to produce fewer UV pieces.
    
    - percentageSpace : ps           (float)         [create,query,edit]
        When layout is set to square, this value is a percentage of the texture area
        which is added around each UV piece. It can be used to ensure each UV piece uses
        different pixels in the texture. Maximum value is 5 percent.
    
    - planes : p                     (int)           [create,query,edit]
        Number of intermediate projections used. Valid numbers are 4, 5, 6, 8, and 12.
        C: Default is 6.
    
    - scale : sc                     (int)           [create,query,edit]
        How to scale the pieces, after projections: 0 No scale is applied. 1 Uniform
        scale to fit in unit square. 2 Non proportional scale to fit in unit square.
    
    - skipIntersect : si             (bool)          [create,query,edit]
        When on, self intersection of UV pieces are not tested. This makes the
        projection faster and produces fewer pieces, but may lead to overlaps in UV
        space.
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdAutoProjection`
    """
    pass
def PlaybackSteppedPreview(*args, **kwargs): pass
def createPolyPlaneCtx(*args, **kwargs):
    """
    Flags:
    - attachToSubdivisionsAll : asa  (bool)          []
    
    - attachToSubdivisionsHeight : ash (bool)          []
    
    - attachToSubdivisionsWidth : asw (bool)          []
    
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - subdivisionsHeight : sh        (int)           []
    
    - subdivisionsWidth : sw         (int)           []
    
    - width : w                      (float)         []
    
    
    Derived from mel command `maya.cmds.createPolyPlaneCtx`
    """
    pass
def RemoveBifrostField(*args, **kwargs): pass
def HypershadeGraphDownstream(*args, **kwargs): pass
def CreatePolygonSphericalHarmonicsOptions(*args, **kwargs): pass
def AddMashJiggleDeformer(*args, **kwargs): pass
def blindDataType(*args, **kwargs):
    """
    This command creates a blind data type, which is represented by a
    blindDataTemplate node in the DG. A blind data type can have one or more
    attributes. On the command line, the attributes should be ordered by type for
    best memory utilization, largest first: string, binary, double, float, int, and
    finally boolean. Once a blind data type is created, blind data of that type may
    be assigned using the polyBlindData command. Note that as well as polygon
    components, blind data may be assigned to objects and to NURBS patches. A blind
    data type may not be modified after it is created: in order to do so it must be
    deleted and recreated. Any existing blind data of that type would also need to
    be deleted and recreated. When used with the query flag, this command will
    return information about the attributes of the specified blind data type.
    
    Flags:
    - dataType : dt                  (unicode)       [create]
        Specifies the dataTypes that are part of BlindData node being created. Allowable
        strings are int, float, double, string, booleanand binary. Must be used togeter
        with the -ldn and -sdn flags to specify each attribute.
    
    - longDataName : ldn             (unicode)       [create]
        Specifies the long names of the datas that are part of BlindData node being
        created. Must be used togeter with the -dt and -sdn flags to specify each
        attribute.
    
    - longNames : ln                 (bool)          [create]
        Specifies that for a query command the long attributes names be listed.
    
    - shortDataName : sdn            (unicode)       [create]
        Specifies the short names of the data that are part of BlindData node being
        created. Must be used togeter with the -dt and -ldn flags to specify each
        attribute.
    
    - shortNames : sn                (bool)          [create]
        Specifies that for a query command the short attribute names be listed.
    
    - typeId : id                    (int)           [create]
        Specifies the typeId of the BlindData type being created.
    
    - typeNames : tn                 (bool)          [create]
        Specifies that for a query command the data types be listed.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.blindDataType`
    """
    pass
def NodeEditorGraphDownstream(*args, **kwargs): pass
def HypershadeCloseActiveTab(*args, **kwargs): pass
def optionVar(*args, **kwargs): pass
def shotRipple(*args, **kwargs):
    """
    When Ripple Edit Mode is enabled, neighboring shots to the shot that gets
    manipulated are moved in sequence time to either make way or close up gaps
    corresponding to that node's editing. Given some parameters about the shot edit
    that just took place, this command will choose which other shots to move, and
    move them the appropriate amounts If no shot name is provided, the command will
    attempt to use the first selected shot.               In query mode, return type
    is based on queried flag.
    
    Flags:
    - deleted : d                    (bool)          [create,query,edit]
        Specify whether this ripple edit is due to a shot deletion
    
    - endDelta : ed                  (time)          [create,query,edit]
        Specify the change in the end time in frames
    
    - endTime : et                   (time)          [create,query,edit]
        Specify the initial shot end time in the sequence timeline.
    
    - startDelta : sd                (time)          [create,query,edit]
        Specify the change in the start time in frames
    
    - startTime : st                 (time)          [create,query,edit]
        Specify the initial shot start time in the sequence timeline.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shotRipple`
    """
    pass
def dynParticleCtx(*args, **kwargs):
    """
    The particle context command creates a particle context. The particle context
    provides an interactive means to create particle objects. The particle context
    command also provides an interactive means to set the option values, through the
    Tool Property Sheet, for the particlecommand that the context will issue. In
    query mode, return type is based on queried flag.
    
    Flags:
    - conserve : c                   (float)         [query,edit]
        Conservation of momentum control (between 0 and 1). For smaller values, the
        field will tend to erase any existing velocity the object has (in other words,
        will not conserve momentum from frame to frame). A value of 1 (the default)
        corresponds to the true physical law of conservation of momentum.
    
    - cursorPlacement : cp           (bool)          [query,edit]
        Use the cursor to place the lower left and upper right of the grid.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - grid : gr                      (bool)          [query,edit]
        Create a particle grid.
    
    - gridSpacing : grs              (float)         [query,edit]
        Spacing between particles in the grid.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - jitterRadius : jr              (float)         [query,edit]
        Max radius from the center to place the particle instances.
    
    - lowerLeftX : llx               (float)         [query,edit]
        Lower left X position of the particle grid.
    
    - lowerLeftY : lly               (float)         [query,edit]
        Lower left Y position of the particle grid.
    
    - lowerLeftZ : llz               (float)         [query,edit]
        Lower left Z position of the particle grid.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - nucleus : nc                   (bool)          [query,edit]
        If set true then an nParticle is generated with a nucleus node connection.
        Otherwise a standard particle is created.
    
    - numJitters : nj                (int)           [query,edit]
        Number of jitters (instances) per particle.
    
    - particleName : pn              (unicode)       [query,edit]
        Particle name.
    
    - sketch : sk                    (bool)          [query,edit]
        Create particles in sketch mode.
    
    - sketchInterval : ski           (int)           [query,edit]
        Interval between particles, when in sketch mode.
    
    - textPlacement : tp             (bool)          [query,edit]
        Use the textfields to specify the lower left and upper right of/ the grid.
    
    - upperRightX : urx              (float)         [query,edit]
        Upper right X position of the particle grid.
    
    - upperRightY : ury              (float)         [query,edit]
        Upper right Y position of the particle grid.
    
    - upperZ : urz                   (float)         [query,edit]
        Upper right Z position of the particle grid.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dynParticleCtx`
    """
    pass
def XgImportCollections(*args, **kwargs): pass
def AddBoatLocatorOptions(*args, **kwargs): pass
def OpenChannelsLayers(*args, **kwargs): pass
def AssignNewSet(*args, **kwargs): pass
def SoftModToolOptions(*args, **kwargs): pass
def notifyPostRedo(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.notifyPostRedo`
    """
    pass
def subdMirror(*args, **kwargs):
    """
    This command takes a subdivision surface, passed as the argument, and produces a
    subdivision surface that is a mirror. Returns the name of the subdivision
    surface created and optionally the DG node that does the mirroring.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - xMirror : xm                   (bool)          [create,query,edit]
        Mirror the vertices in X Default:false
    
    - yMirror : ym                   (bool)          [create,query,edit]
        Mirror the vertices in Y Default:false
    
    - zMirror : zm                   (bool)          [create,query,edit]
        Mirror the vertices in Z Default:false                  Common flags
    
    
    Derived from mel command `maya.cmds.subdMirror`
    """
    pass
def polyCopyUV(*args, **kwargs): pass
def timeFieldGrp(*args, **kwargs): pass
def RenderFlagsWindow(*args, **kwargs): pass
def FBXExportBakeComplexStart(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportBakeComplexStart`
    """
    pass
def defaultLightListCheckBox(*args, **kwargs): pass
def manipMoveLimitsCtx(*args, **kwargs):
    """
    Create a context for the translate limits manipulator.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.manipMoveLimitsCtx`
    """
    pass
def listInputDevices(*args, **kwargs):
    """
    This command lists all input devices that maya knows about.
    
    Dynamic library stub function 
    
    Flags:
    - free : f                       (bool)          [create]
        List the free devices
    
    - primary : p                    (bool)          [create]
        List the primary devices
    
    - secondary : s                  (bool)          [create]
        List the secondary devices                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.listInputDevices`
    """
    pass
def SetInitialStateOptions(*args, **kwargs): pass
def translator(*args, **kwargs):
    """
    Set or query parameters associated with the file translators specified in as the
    argument.
    
    Flags:
    - defaultFileRule : dfr          (bool)          [query]
        Returns the default file rule value, can return as well
    
    - defaultOptions : do            (unicode)       [query]
        Return/set a string of default options used by this translator.
    
    - extension : ext                (bool)          [query]
        Returns the default file extension for this translator.
    
    - fileCompression : cmp          (unicode)       [query]
        Specifies the compression action to take when a file is saved. Possible values
        are compressed, uncompressedasCompressed.
    
    - filter : f                     (bool)          [query]
        Returns the filter string used for this translator.
    
    - list : l                       (bool)          [query]
        Return a string array of all the translators that are loaded.
    
    - loaded : ld                    (bool)          [query]
        Returns true if the given translator is currently loaded.
    
    - objectType : ot                (bool)          [query]
        This flag is obsolete. This will now return the same results as defaultFileRule
        going forward.
    
    - optionsScript : os             (bool)          [query]
        Query the name of the options script to use to post the user options UI. When
        this script is invoked it will expect the name of the parent layout in which the
        options will be displayed as well as the name of the callback to be invoked once
        the apply button has been depressed in the options area.
    
    - readSupport : rs               (bool)          [query]
        Returns true if this translator supports read operations.
    
    - writeSupport : ws              (bool)          [query]
        Returns true if this translator supports write operations.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.translator`
    """
    pass
def cMuscleRelaxSetup(*args, **kwargs):
    """
    Flags:
    - gensprings : gen               (bool)          []
    
    - help : h                       (bool)          []
    
    
    Derived from mel command `maya.cmds.cMuscleRelaxSetup`
    """
    pass
def DuplicateCurveOptions(*args, **kwargs): pass
def ToggleShowBufferCurves(*args, **kwargs): pass
def dR_targetWeldRelease(*args, **kwargs): pass
def GetHIKMatrixDecomposition(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetHIKMatrixDecomposition`
    """
    pass
def ConnectComponentsOptions(*args, **kwargs): pass
def nConstraintTransformOptions(*args, **kwargs): pass
def AddSelectionAsTargetShapeOptions(*args, **kwargs): pass
def enableDevice(*args, **kwargs):
    """
    Sets (or queries) the device enable state for actions involving the device.
    -monitoraffects all assignInputDevice and attachDeviceAttr actions for the named
    device-recordcontrols if the device is recorded (by default) by a recordDevice
    action-apply channelName [channelName ... ]controls if data from the  device
    channel is applied (by default) by applyTake to the param curves attached to the
    named channel.Disabling a channel for applyTake cause applyTake to ignore the
    enable state of all childchannels -- treating them as disabled. In query mode,
    return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - apply : a                      (bool)          [create,query]
        enable/disable applyTakefor the specified channel(s)
    
    - device : d                     (unicode)       [create,query]
        specifies the device to change
    
    - enable : en                    (bool)          [create,query]
        enable (or disable) monitor/record/apply
    
    - monitor : m                    (bool)          [create,query]
        enables/disables visible update for the device (default)
    
    - record : rec                   (bool)          [create,query]
        enable/disable recordDevicedevice recording                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.enableDevice`
    """
    pass
def popupMenu(*args, **kwargs): pass
def inheritTransform(*args, **kwargs):
    """
    This command toggles the inherit state of an object. If this flag is off the
    object will not inherit transformations from its parent. In other words
    transformations applied to the parent node will not affect the object and it
    will act as though it is under the world. If the -p flag is specified then the
    object's transformation will be modified to compensate when changing the inherit
    flag so the object will not change its world-space location. In query mode,
    return type is based on queried flag.
    
    Flags:
    - off : off                      (bool)          [create,query]
        turn off inherit state for the given object(s)
    
    - on : on                        (bool)          [create,query]
        turn on inherit state for the given object(s)
    
    - preserve : p                   (bool)          [create,query]
        preserve the objects world-space position by modifying the object(s)
        transformation matrix.
    
    - toggle : tgl                   (bool)          [create,query]
        toggle the inherit state for the given object(s) (default if no flags are given)
        -on turn on inherit state for the given object(s) -off turn off inherit state
        for the given object(s)                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.inheritTransform`
    """
    pass
def paramDimContext(*args, **kwargs):
    """
    Command used to register the paramDimCtx tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.paramDimContext`
    """
    pass
def bakePartialHistory(*args, **kwargs):
    """
    This command is used to bake sections of the construction history of a shape
    node when possible. A typical usage would be on a shape that has both modelling
    operations and deformers in its history. Using this command with the
    -prePostDeformers flag will bake the modeling portions of the graph, so that
    only the deformers remain. Note that not all modeling operations can be baked
    such that they create exactly the same effect after baking. For example, imagine
    the history contains a skinning operation followed by a smooth. Before baking,
    the smooth operation is performed each time the skin deforms, so it will smooth
    differently depending on the output of the skin. When the smooth operation is
    baked into the skinning, the skin will be reweighted based on the smooth points
    to attempt to approximate the original behavior. However, the skin node does not
    perform the smooth operation, it merely performs skinning with the newly
    calculated weights and the result will not be identical to before the bake. In
    general, modeling operations that occur before deformers can be baked precisely.
    Those which occur after can only be approximated. The -pre and -post flags allow
    you to control whether only the operations before or after the deformers are
    baked. When the command is used on an object with no deformers, the entire
    history will be deleted.
    
    Flags:
    - allShapes : all                (bool)          [create,query]
        Specifies that the bake operation should be performed on all shapes in the
        entire scene. By default, only selected objects are baked. If this option is
        specified and there are no shapes in the scene, then this command will do
        nothing and end successfully.
    
    - postSmooth : nps               (bool)          [create,query]
        Specifies whether or not a smoothing operation should be done on skin vertices.
        This smoothing is only done on vertices that are found to deviate largely from
        other vertex values.  The default is false.
    
    - preCache : pc                  (bool)          [create,query]
        Specifies baking of any history operations that occur before the caching
        operation, including deformers. In query mode, returns a list of the nodes that
        will be baked.
    
    - preDeformers : pre             (bool)          [create,query]
        Specifies baking of any modeling operations in the history that occur before the
        deformers. In query mode, returns a list of the nodes that will be baked.
    
    - prePostDeformers : ppt         (bool)          [create,query]
        Specifies baking of all modeling operations in the history whether they are
        before or after the deformers in the history. If neither the -prePostDeformers
        nor the -preDeformers flag is specified, prePostDeformers will be used as the
        default. In query mode, returns a list of the nodes that will be baked.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.bakePartialHistory`
    """
    pass
def ShowMeshSmearToolOptions(*args, **kwargs): pass
def EditCharacterAttributes(*args, **kwargs): pass
def BakeNonDefHistoryOptions(*args, **kwargs): pass
def StitchSurfacePoints(*args, **kwargs): pass
def OpenMASHContentBrowser(*args, **kwargs): pass
def ShowCameraManipulators(*args, **kwargs): pass
def HypershadeShowConnectedAttrs(*args, **kwargs): pass
def reroot(*args, **kwargs):
    """
    This command will reroot a skeleton. The selected joint or the given joint at
    the command line will be the new    root of the skeleton. All ikHandles passing
    through the selected joint or above it will be deleted. The given(or selected)
    joint should not have skin attached. The    command works on the given or
    selected joint. No options or flags are necessary.
    
    
    Derived from mel command `maya.cmds.reroot`
    """
    pass
def TimeEditorCreateOverrideLayer(*args, **kwargs): pass
def OffsetSurfacesOptions(*args, **kwargs): pass
def PaintFluidsToolOptions(*args, **kwargs): pass
def menuBarLayout(*args, **kwargs): pass
def connectionInfo(*args, **kwargs):
    """
    The connectionInfocommand is used to get information about connection sources
    and destinations.  Unlike the isConnected command, this command needs only one
    end of the connection.
    
    Flags:
    - destinationFromSource : dfs    (bool)          [create]
        If the specified plug (or its ancestor) is a source, this flag returns the list
        of destinations connected from the source. (array of strings, empty array if
        none)
    
    - getExactDestination : ged      (bool)          [create]
        If the plug or its ancestor is connection destination, this returns the name of
        the plug that is the exact destination. (empty string if there is no such
        connection).
    
    - getExactSource : ges           (bool)          [create]
        If the plug or its ancestor is a connection source, this returns the name of the
        plug that is the exact source. (empty string if there is no such connection).
    
    - getLockedAncestor : gla        (bool)          [create]
        If the specified plug is locked, its name is returned.  If an ancestor of the
        plug is locked, its name is returned.  If more than one ancestor is locked, only
        the name of the closest one is returned.  If neither this plug nor any ancestors
        are locked, an empty string is returned.
    
    - isDestination : id             (bool)          [create]
        Returns true if the plug (or its ancestor) is the destination of a connection,
        false otherwise.
    
    - isExactDestination : ied       (bool)          [create]
        Returns true if the plug is the exact destination of a connection, false
        otherwise.
    
    - isExactSource : ies            (bool)          [create]
        Returns true if the plug is the exact source of a connection, false otherwise.
    
    - isLocked : il                  (bool)          [create]
        Returns true if this plug (or its ancestor) is locked
    
    - isSource : isSource            (bool)          [create]
        Returns true if the plug (or its ancestor) is the source of a connection, false
        otherwise.
    
    - sourceFromDestination : sfd    (bool)          [create]
        If the specified plug (or its ancestor) is a destination, this flag returns the
        source of the connection. (string, empty if none)                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.connectionInfo`
    """
    pass
def dR_selectSimilar(*args, **kwargs): pass
def ToggleEditPivot(*args, **kwargs): pass
def applyMetadata(*args, **kwargs):
    """
    Define the values of a particular set of metadata on selected objects. This
    command is used in preservation of metadata through Maya file formats (.ma/.mb).
    If any metadata already exists it will be kept and merged with the new metadata,
    overwriting duplicate entries. (i.e. if this command specifies data at index N
    and you already have a value at index N then the one this command specifies will
    be the new value and the old one will cease to exist.)  Unlike the
    editMetadatacommand it is not necessary to first use the addMetadatacommand or
    API equivalent to attach a metadata stream to the object, this command will do
    both assignment of structure and of metadata values. You do have to use the
    dataStructurecommand or API equivalent to create the structure being assigned
    first though.  The formatted input will be in a form expected by the data
    associations serializer (see adsk::Data::AssociationsSerializer for more
    information). The specific serialization type will be the default 'raw' if the
    formatflag is not used.  For example the rawformat input string channel
    face\n[STREAMDATA]\nendChannels\nendAssociationswith no flags is equivalent to
    the input [STREAMDATA]\nendChannelswith the channelflag set to 'face'
    
    Flags:
    - format : fmt                   (unicode)       [create]
        Name of the data association format type to use in the value flag parsing.
        Default value is raw.
    
    - scene : scn                    (bool)          [create]
        Use this flag when you want to apply metadata to the scene as a whole rather
        than to any individual nodes. If you use this flag and have nodes selected the
        nodes will be ignored and a warning will be displayed. Scene metadata is
        incompatible with referenced scenes. Node associated metadata from referenced
        files will still be readable from master scenes but scene specific metadata of
        referenced files will not be accessible from a any master scene. This will
        ensure that referenced files metadata will not end up corrupting the master file
        scene-metadata.
    
    - value : v                      (unicode)       [create]
        String containing all of the metadata to be assigned to the selected object.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.applyMetadata`
    """
    pass
def CreatePolygonSphericalHarmonics(*args, **kwargs): pass
def FBXLoadMBImportPresetFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXLoadMBImportPresetFile`
    """
    pass
def dR_viewXrayTGL(*args, **kwargs): pass
def makeIdentity(*args, **kwargs):
    """
    The makeIdentity command is a quick way to reset the selected transform and all
    of its children down to the shape level by the identity transformation.  You can
    also specify which of transform, rotate or scale is applied down from the
    selected transform. The identity transformation means: translate = 0, 0, 0rotate
    = 0, 0, 0scale = 1, 1, 1shear = 1, 1, 1If a transform is a joint, then the
    translateattribute may not be 0, but will be used to position the joints so that
    they preserve their world space positions.  The translate flag doesn't apply to
    joints, since joints must preserve their world space positions.  Only the rotate
    and scale flags are meaningful when applied to joints. If the -a/apply flag is
    true, then the transforms that are reset are accumulated and applied to the all
    shapes below the modified transforms, so that the shapes will not move. The
    pivot positions are recalculated so that they also will not move in world space.
    If this flag is false, then the transformations are reset to identity, without
    any changes to preserve position.
    
    Flags:
    - apply : a                      (bool)          [create]
        If this flag is true, the accumulated transforms are applied to the shape after
        the transforms are made identity, such that the world space positions of the
        transforms pivots are preserved, and the shapes do not move. The default is
        false.
    
    - jointOrient : jo               (bool)          [create]
        If this flag is set, the joint orient on joints will be reset to align with
        worldspace.
    
    - normal : n                     (int)           [create]
        If this flag is set to 1, the normals on polygonal objects will be frozen.  This
        flag is valid only when the -apply flag is on. If this flag is set to 2, the
        normals on polygonal objects will be frozen only if its a non-rigid
        transformation matrix. ie, a transformation that does not contain shear, skew or
        non-proportional scaling. The default behaviour is not to freeze normals.
    
    - preserveNormals : pn           (bool)          [create]
        If this flag is true, the normals on polygonal objects will be reversed if the
        objects are negatively scaled (reflection). This flag is valid only when the
        -apply flag is on.
    
    - rotate : r                     (bool)          [create]
        If this flag is true, only the rotation is applied to the shape. The rotation
        will be changed to 0, 0, 0. If neither translate nor rotate nor scale flags are
        specified, then all (t, r, s) are applied.
    
    - scale : s                      (bool)          [create]
        If this flag is true, only the scale is applied to the shape. The scale factor
        will be changed to 1, 1, 1. If neither translate nor rotate nor scale flags are
        specified, then all (t, r, s) are applied.
    
    - translate : t                  (bool)          [create]
        If this flag is true, only the translation is applied to the shape. The
        translation will be changed to 0, 0, 0. If neither translate nor rotate nor
        scale flags are specified, then all (t, r, s)  are applied.  (Note: the
        translate flag is not meaningful when applied to joints, since joints are made
        to preserve their world space position.  This flag will have no effect on
        joints.)                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.makeIdentity`
    """
    pass
def CreateOceanWake(*args, **kwargs): pass
def nClothRestToInputStart(*args, **kwargs): pass
def ToggleMeshPoints(*args, **kwargs): pass
def getMelRepresentation(args, recursionLimit='None', maintainDicts='True'):
    """
    Will return a list which contains each element of the iterable 'args' converted to a mel-friendly representation.
    
    :Parameters:
        recursionLimit : int or None
            If an element of args is itself iterable, recursionLimit specifies the depth to which iterable elements
            will recursively search for objects to convert; if ``recursionLimit==0``, only the elements
            of args itself will be searched for PyNodes -  if it is 1, iterables within args will have getMelRepresentation called
            on them, etc.  If recursionLimit==None, then there is no limit to recursion depth.
    
        maintainDicts : bool
            In general, all iterables will be converted to tuples in the returned copy - however, if maintainDicts==True,
            then iterables for which ``util.isMapping()`` returns True will be returned as dicts.
    """
    pass
def JointToolOptions(*args, **kwargs): pass
def SelectSimilarOptions(*args, **kwargs): pass
def nodeCast(*args, **kwargs):
    """
    Given two nodes, a source node of type A and a target node of type B, where type
    A is either type B or a sub-type of B, this command will replace the target node
    with the source node. That is, all node connections, DAG hierarchy and attribute
    values on the target node will be removed from the target node and placed on the
    source node. This operation will fail if either object is referenced, locked or
    if the nodes do not share a common sub-type. This operation is atomic. If the
    given parameters fail, then the source and target nodes will remain in their
    initial state prior to execution of the command. IMPORTANT: the command will
    currently ignore instance connections and instance objects.  It will also ignore
    reference nodes.
    
    Flags:
    - copyDynamicAttrs : cda         (bool)          [create]
        If the target node contains any dynamic attributes that are not defined on the
        source node, then create identical dynamic attricutes on the source node and
        copy the values and connections from the target node into them.
    
    - disableAPICallbacks : dsa      (bool)          [create]
        add comment
    
    - disableScriptJobCallbacks : dsj (bool)          [create]
        add comment
    
    - disconnectUnmatchedAttrs : dua (bool)          [create]
        If the node that is being swapped out has any connections that do not exist on
        the target node, then indicate if the connection should be disconnected. By
        default these connections are not removed because they cannot be restored if the
        target node is swapped back with the source node.
    
    - force : f                      (bool)          [create]
        Forces the command to do the node cast operation even if the nodes do not share
        a common base object. When this flag is specified the command will try to do the
        best possible attribute matching when swapping the command.  It is
        notrecommended to use the '-swapValues/sv' flag with this flag.
    
    - swapNames : sn                 (bool)          [create]
        Swap the names of the nodes. By default names are not swapped.
    
    - swapValues : sv                (bool)          [create]
        Indicates if the commands should exchange attributes on the common attributes
        between the two nodes.  For example, if the nodes are the same base type as a
        transform node, then rotate, scale, translate values would be copied over.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nodeCast`
    """
    pass
def NodeEditorCloseActiveTab(*args, **kwargs): pass
def BreakTangent(*args, **kwargs): pass
def dR_activeHandleX(*args, **kwargs): pass
def U3DBrushSizeOff(*args, **kwargs): pass
def MakeHoleToolOptions(*args, **kwargs): pass
def HIKSetBodyPartKey(*args, **kwargs): pass
def dR_gridAllTGL(*args, **kwargs): pass
def subdListComponentConversion(*args, **kwargs):
    """
    This command converts subdivision surface components from one or more types to
    another one or more types, and returns the list of the conversion. It does not
    change the currently selected objects. Use the -in/internalflag to specify
    conversion to connectedvs. containedcomponents.  For example, if the internal
    flag is specified when converting from subdivision surface vertices to faces,
    then only faces that are entirely contained by the vertices will be returned.
    If the internal flag is not specified, then all faces that are connected to the
    vertices will be returned.
    
    Flags:
    - border : bo                    (bool)          [create]
        Convert to a border.
    
    - fromEdge : fe                  (bool)          [create]
        Indicates the component type to convert from: Edges
    
    - fromFace : ff                  (bool)          [create]
        Indicates the component type to convert from: Faces
    
    - fromUV : fuv                   (bool)          [create]
        Indicates the component type to convert from: UVs
    
    - fromVertex : fv                (bool)          [create]
        Indicates the component type to convert from: Vertex
    
    - internal : internal            (bool)          [create]
        Applicable when converting from smallercomponent types to larger ones. Specifies
        conversion to connectedvs. containedcomponents. See examples below.
    
    - toEdge : te                    (bool)          [create]
        Indicates the component type to convert to: Edges
    
    - toFace : tf                    (bool)          [create]
        Indicates the component type to convert to: Faces
    
    - toUV : tuv                     (bool)          [create]
        Indicates the component type to convert to: UVs
    
    - toVertex : tv                  (bool)          [create]
        Indicates the component type to convert to: Vertices
    
    - uvShell : uvs                  (bool)          [create]
        Will return UV components within the same UV shell. Only works with -tuv and
        -fuv flags.
    
    - uvShellBorder : uvb            (bool)          [create]
        Will return UV components on the border within the same UV shell. Only works
        with -tuv and -fuv flags.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdListComponentConversion`
    """
    pass
def xgmNoiseBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - correlation : cor              (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - flood : f                      (bool)          []
    
    - freezeMode : frm               (int)           []
    
    - frequency : fre                (float)         []
    
    - globalSelection : gs           (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - magnitude : mag                (float)         []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - preserveLength : ll            (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmNoiseBrushContext`
    """
    pass
def CreateBezierCurveTool(*args, **kwargs): pass
def srtContext(*args, **kwargs):
    """
    This command can be used to create a combined transform (translate/scale/rotate)
    context.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.srtContext`
    """
    pass
def PanePop(*args, **kwargs): pass
def PolygonApplyColorOptions(*args, **kwargs): pass
def BakeAllNonDefHistory(*args, **kwargs): pass
def ScriptEditor(*args, **kwargs): pass
def polyMoveFacet(*args, **kwargs):
    """
    Modifies facet of a polygonal object. Translate, move, rotate or scale facets.
    
    Flags:
    - attraction : att               (float)         [create,query,edit]
        Attraction, related to magnet. The range is [-2.0, 2.0]. Default:0.0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - frozen : fzn                   (bool)          []
    
    - gain : ga                      (float)         [create,query,edit]
        Gain factor per component. Can be painted using Artisan. Default:1.0
    
    - gravity : g                    (float, float, float) [create,query,edit]
        The gravity vector. Default:0.0, -1.0, 0.0
    
    - gravityX : gx                  (float)         [create,query,edit]
        Gravity X coord.
    
    - gravityY : gy                  (float)         [create,query,edit]
        Gravity Y coord.
    
    - gravityZ : gz                  (float)         [create,query,edit]
        Gravity Z coord.
    
    - localCenter : lc               (int)           [create,query,edit]
        Local center on the edge : 0=Middle point, 1=Start point, 2=End point. Default:0
    
    - localDirection : ld            (float, float, float) [create,query,edit]
        Direction to determine X axis for local space. Default:1.0, 0.0, 0.0
    
    - localDirectionX : ldx          (float)         [create,query,edit]
        X coord of the X axis.
    
    - localDirectionY : ldy          (float)         [create,query,edit]
        Y coord of the X axis.
    
    - localDirectionZ : ldz          (float)         [create,query,edit]
        Z coord of the X axis.
    
    - localRotate : lr               (float, float, float) [create,query,edit]
        The local rotations. Default:0.0, 0.0, 0.0
    
    - localRotateX : lrx             (float)         [create,query,edit]
        Local rotate X coord. The range is [0, 360].
    
    - localRotateY : lry             (float)         [create,query,edit]
        Local rotate Y coord. The range is [0, 360].
    
    - localRotateZ : lrz             (float)         [create,query,edit]
        Local rotate Z coord : Rotation along the normal. The range is [0, 360].
    
    - localScale : ls                (float, float, float) [create,query,edit]
        Local Scale. Default:1.0, 1.0, 1.0
    
    - localScaleX : lsx              (float)         [create,query,edit]
        Scale X coord.
    
    - localScaleY : lsy              (float)         [create,query,edit]
        Scale Y coord.
    
    - localScaleZ : lsz              (float)         [create,query,edit]
        Scale Z coord.
    
    - localTranslate : lt            (float, float, float) [create,query,edit]
        Local translate. Default:0.0, 0.0, 0.0
    
    - localTranslateX : ltx          (float)         [create,query,edit]
        Local translation X coord.
    
    - localTranslateY : lty          (float)         [create,query,edit]
        Local translation Y coord.
    
    - localTranslateZ : ltz          (float)         [create,query,edit]
        Local translation Z coord : Move along the normal.
    
    - magnX : mx                     (float)         [create,query,edit]
        Magnet X coord.
    
    - magnY : my                     (float)         [create,query,edit]
        Magnet Y coord.
    
    - magnZ : mz                     (float)         [create,query,edit]
        Magnet Z coord.
    
    - magnet : m                     (float, float, float) [create,query,edit]
        The magnet vector. Default:0.0, 0.0, 0.0
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - offset : off                   (float)         [create,query,edit]
        Local offset. Faces are moved this distance towards the inside of the face.
        Default:0.0
    
    - pivot : pvt                    (float, float, float) [create,query,edit]
        The pivot for scaling and rotation. Default:0.0, 0.0, 0.0
    
    - pivotX : pvx                   (float)         [create,query,edit]
        Pivot X coord.
    
    - pivotY : pvy                   (float)         [create,query,edit]
        Pivot Y coord.
    
    - pivotZ : pvz                   (float)         [create,query,edit]
        Pivot Z coord.
    
    - random : ran                   (float)         [create,query,edit]
        Random value for all parameters. Default:0.0
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        Rotation angles around X, Y, Z. Default:0.0, 0.0, 0.0
    
    - rotateX : rx                   (float)         [create,query,edit]
        Rotation angle around X.
    
    - rotateY : ry                   (float)         [create,query,edit]
        Rotation angle around Y.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        Rotation angle around Z.
    
    - scale : s                      (float, float, float) [create,query,edit]
        Scaling vector. Default:1.0, 1.0, 1.0
    
    - scaleX : sx                    (float)         [create,query,edit]
        Scale X coord.
    
    - scaleY : sy                    (float)         [create,query,edit]
        Scale Y coord.
    
    - scaleZ : sz                    (float)         [create,query,edit]
        Scale Z coord.
    
    - translate : t                  (float, float, float) [create,query,edit]
        Translation vector. Default:0.0, 0.0, 0.0
    
    - translateX : tx                (float)         [create,query,edit]
        Translation X coord.
    
    - translateY : ty                (float)         [create,query,edit]
        Translation Y coord.
    
    - translateZ : tz                (float)         [create,query,edit]
        Translation Z coord.
    
    - weight : w                     (float)         [create,query,edit]
        The weight, related to gravity. Default:0.0
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyMoveFacet`
    """
    pass
def dR_softSelDistanceTypeVolume(*args, **kwargs): pass
def PolyDisplayReset(*args, **kwargs): pass
def CameraRemoveFromExclusive(*args, **kwargs): pass
def nConstraintRemoveMembers(*args, **kwargs): pass
def isTrue(*args, **kwargs):
    """
    This commmand returns the state of the named condition. If the condition is
    true, it returns 1.  Otherwise it returns 0.
    
    
    Derived from mel command `maya.cmds.isTrue`
    """
    pass
def PaintEffectsToCurveOptions(*args, **kwargs): pass
def AddPondDynamicBuoy(*args, **kwargs): pass
def dR_viewJointsTGL(*args, **kwargs): pass
def SetRestPosition(*args, **kwargs): pass
def multiProfileBirailSurface(*args, **kwargs):
    """
    The cmd creates a railed surface by sweeping the profiles using two rail curves.
    The two rails are the last two arguments. For examples, if 5 curves are
    specified, they will correspond to curve1curve2curve3rail1rail2. In this case,
    the cmd creates a railed surface by sweeping the profile curve1to profile
    curve2, profile curve2to profile curve3along the two rail curves rail1, rail2.
    There must be atleast 3 profile curves followed by the two rail curves. The
    profile curves must intersect the two rail curves. The constructed may be made
    tangent continuous to the first and last profile using the flags -tp1, -tp2
    provided the profiles are surface curves i.e. isoparms, curve on surface or
    trimmed edge.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    - tangentContinuityProfile1 : tp1 (bool)          [create,query,edit]
        Tangent continuous across the first profile. The profile must be a surface
        curve. Default:false
    
    - tangentContinuityProfile2 : tp2 (bool)          [create,query,edit]
        Tangent continuous across the last profile. The profile must be a surface curve.
        Default:false
    
    - transformMode : tm             (int)           [create,query,edit]
        transform mode ( Non proportional, proportional ). Non proportional is default
        value. Default:0                  Common flags
    
    
    Derived from mel command `maya.cmds.multiProfileBirailSurface`
    """
    pass
def DeleteAllConstraints(*args, **kwargs): pass
def CreateContainer(*args, **kwargs): pass
def TransferVertexOrder(*args, **kwargs): pass
def dR_connectTool(*args, **kwargs): pass
def FBXImportShapes(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportShapes`
    """
    pass
def DeletePolyElements(*args, **kwargs): pass
def UVEditorUnpinAll(*args, **kwargs): pass
def attrCompatibility(*args, **kwargs):
    """
    This command is used by Maya to handle compatibility issues between file format
    versions by providing a mechanism to describe differences between two versions.
    Plug-in writers can make use of this command to handle attribute compatibility
    changes to files.The first optional command argument argument is a node type
    name and the second optional command argument is the short name of an
    attribute.Warning:Only use this command to describe changes in names or
    attributes of nodes that youhave written as plugins.  Do notuse this command to
    change information about builtin dependency graph nodes. Removing attributes on
    a plug-in node is a special case. Use a separate attrCompatibility call with
    pluginNode flag and name so that these attributes can be tracked even though the
    plug-in may not be loaded. Only one flag may be used per invocation of the
    command. If multiple flags are provided one will arbitrarily be chosen as the
    action to perform and the others will be silently ignored.
    
    Flags:
    - addAttr : a                    (bool)          [create]
        Add the given attribute to the named node.
    
    - clear : clr                    (bool)          [create]
        Clear out the compatibility table. This is only used internally for debugging
        purposes.
    
    - dumpTable : dmp                (bool)          [create]
        Dump the current contents of the compatibility table. This is only used
        internally for debugging purposes.
    
    - enable : e                     (bool)          [create]
        Enable or disable the compatibility table. This is only used internally for
        debugging purposes.
    
    - nodeRename : nr                (unicode)       [create]
        Replace all uses of the node type 'nodeName' with given string.
    
    - pluginNode : pn                (unicode)       [create]
        Registers the string argument as a plug-in node type. This is necessary for
        subsequent attrCompatibility calls that reference node attributes of unloaded
        plug-ins. Specifically, this works in the case when attributes are being
        removed.
    
    - removeAttr : rm                (bool)          [create]
        Remove the given attribute from the named node.
    
    - renameAttr : r                 (unicode)       [create]
        Change the short name of the attribute specified in the command's arguments to
        the new short name provided as a parameter to this flag. Once the mapping
        between short names has been established, Maya will handle the long names
        automatically.
    
    - type : typ                     (unicode)       [create]
        Change the type of the given attribute to the given type.
    
    - version : v                    (unicode)       [create]
        Set the version target for subsequent commands to the given string.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.attrCompatibility`
    """
    pass
def sets(*args, **kwargs): pass
def DistributeShellsOptions(*args, **kwargs): pass
def MarkingMenuPreferencesWindow(*args, **kwargs): pass
def SelectAllStrokes(*args, **kwargs): pass
def surfaceShaderList(*args, **kwargs):
    """
    Add/Remove a relationship between an object and the current shading group. In
    query mode, return type is based on queried flag.
    
    Flags:
    - add : add                      (PyNode)        [create]
        add object(s) to shader group list.
    
    - remove : rm                    (PyNode)        [create]
        remove object(s) to shader group list.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.surfaceShaderList`
    """
    pass
def polySplit(*args, **kwargs): pass
def ToggleEditPoints(*args, **kwargs): pass
def toolHasOptions(*args, **kwargs):
    """
    This command queries a tool to see if it has options. If it does, it returns
    true. Otherwise it returns false.
    
    
    Derived from mel command `maya.cmds.toolHasOptions`
    """
    pass
def LoadHIKCharacterDefinition(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.LoadHIKCharacterDefinition`
    """
    pass
def CreatePolygonCone(*args, **kwargs): pass
def timeControl(*args, **kwargs): pass
def PolygonSoftenEdge(*args, **kwargs): pass
def ExpressionEditor(*args, **kwargs): pass
def WireToolOptions(*args, **kwargs): pass
def setRenderPassType(*args, **kwargs):
    """
    This command will set the passID of a renderPass node and create the custom
    attributes specified by the corresponding render pass definition.  If the render
    pass node already has a passID assigned to it, attributes that are no longer
    required become hidden, and new attributes are unhidden and/or created as
    needed.  This allows passIDs to be changed back and forth without losing
    attribute data.  It also allows common attributes to be transported from one
    render pass type to another.
    
    Flags:
    - defaultDataType : d            (bool)          [create]
        If set, the render pass will use its default data type.
    
    - numChannels : n                (int)           [create]
        Specify the number of channels to use in the render pass. Note that this flag is
        only valid if there is an implementation supporting the requested number of
        channels.
    
    - type : t                       (unicode)       [create]
        Specify the pass type to assign to the pass node(s).
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setRenderPassType`
    """
    pass
def AlignUVOptions(*args, **kwargs): pass
def FBXExportShowUI(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportShowUI`
    """
    pass
def geometryDeleteCacheFrames(*args, **kwargs): pass
def polySubdivideFacet(*args, **kwargs):
    """
    Subdivides a face into quads or triangles. In quad mode, a center point is
    introduced at the center of each face and midpoints are inserted on all the
    edges of each face. New faces (all quadrilaterals) are built by adding edges
    from the midpoints towards the center. In triangle mode, only the center point
    is created; new faces (all triangles) are created by connecting the center point
    to all the existing vertices of the face. Default : one subdivision step in quad
    mode (polySubdFacet -dv 1 -m 0;)
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - divisions : dv                 (int)           [create,query,edit]
        This number specifies how many times to recursively subdivide the selected
        faces. For example, with divisions set to 3 in quad mode, each initial
        quadrilateral will be recursively subdivided into 4 subfaces 3 times, yielding a
        total of 4 \* 4 \* 4 = 64 faces. C: Default is 1. Q: When queried, this flag
        returns an int.
    
    - divisionsU : duv               (int)           [create,query,edit]
        The number of subdivision steps to perform along the U direction. A square face
        will be subdivided into 4^(divisions) faces in quad mode, 4\*3^(divisions-1) in
        triangle mode.
    
    - divisionsV : dvv               (int)           [create,query,edit]
        The number of subdivision steps to perform along the V direction. A square face
        will be subdivided into 4^(divisions) faces in quad mode, 4\*3^(divisions-1) in
        triangle mode.
    
    - frozen : fzn                   (bool)          []
    
    - mode : m                       (int)           [create,query,edit]
        The subdivision mode. 0: subdivision into quads 1: subdivision into triangles C:
        Default is 0. Q: When queried, this flag returns an int.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    - subdMethod : sbm               (int)           [create,query,edit]
        Type of subdivision to use: 0 - exponential - traditional subdivision 1 - linear
        - number of faces per edge grows linearly                  Common poly modifier
        operation flags
    
    
    Derived from mel command `maya.cmds.polySubdivideFacet`
    """
    pass
def FBXExportCacheFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportCacheFile`
    """
    pass
def StraightenUVBorder(*args, **kwargs): pass
def Twist(*args, **kwargs): pass
def unapplyOverride(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.unapplyOverride`
    """
    pass
def polyForceUV(*args, **kwargs):
    """
    A set of functionalities can be called through this command.  The input for this
    command is a set of faces.  Based on the arguments passed, the UVs for these
    selected faces can be created. Project UVs based on the camera:(UV creation)
    Based on the current view direction/orientation, the UVs are generated and
    assigned to the faces.  Any previously assigned UV information will be lost.
    Best Plane Projection:(UV creation) The UVs are computed based on the plane
    defined by the user, and is applied to the selected faces.  This tool has 2
    phases.  In the first phase, the faces to be mapped (faces to which UVs are to
    be created) are selected. In the second phase, the points (vertices, CVs) that
    define the projecting plane are selected.  Any previously assigned UV
    information will be lost. Unitize:(UV creation) A new set of unitized UVs are
    generated and assigned to the faces.         Any previously assigned UV
    information will be lost. Unshare:(UV creation) Force the specified UV to be
    unshared by possibly creating new UVs.  Any previously assigned UV information
    will be lost.
    
    Flags:
    - cameraProjection : cp          (bool)          [create]
        Project the UVs based on the camera position/orientation
    
    - createNewMap : cm              (bool)          [create]
        Create new map if it does not exist.
    
    - flipHorizontal : fh            (bool)          [create]
        OBSOLETE flag.  Use polyFlipUV instead.
    
    - flipVertical : fv              (bool)          [create]
        OBSOLETE flag.  Use polyFlipUV instead.
    
    - g : g                          (bool)          [create]
        OBSOLETE flag.
    
    - local : l                      (bool)          [create]
        OBSOLETE flag.
    
    - normalize : nor                (unicode)       [create]
        OBSOLETE flag.  Use polyNormalizeUV instead.
    
    - numItems : ni                  (int)           [create]
        This flag is only used for the best plane texturingof polygonal faces.  This
        flag should be followed by a         selection list. If not specified, the
        selected objects will         be used (in the order they were selected). This
        flag specifies the number of items (leading) in the         selection list that
        should be used for the mapping.         The trailing items will be used for
        computing the         plane (See example below).  The best plane texturingis
        better suited for using interactively from within its context.         You can
        type BestPlaneTexturingToolin the command window OR (EditPolygons-Texture-
        BestPlaneTexturing         from the Menu) to enter its context.
    
    - preserveAspectRatio : par      (bool)          [create]
        OBSOLETE flag.
    
    - unitize : uni                  (bool)          [create]
        To unitize the UVs of the selected faces
    
    - unshare : u                    (bool)          [create]
        To unshare tye specified UV
    
    - uvSetName : uvs                (unicode)       [create]
        Specifies name of the uv set to work on                                    Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyForceUV`
    """
    pass
def IncrementFluidCenter(*args, **kwargs): pass
def hikCharacterToolWidget(*args, **kwargs):
    """
    Flags:
    - aspectRatio : ar               (bool)          []
    
    - backgroundSize : bsz           (bool)          []
    
    - configFilename : cf            (unicode)       []
    
    - fkVisible : fkv                (bool)          []
    
    - ikVisible : ikv                (bool)          []
    
    - keyingMode : km                (int)           []
    
    - layoutParentName : lpn         (unicode)       []
    
    - minimumSize : msz              (int, int)      []
    
    - navigationPostCallback : npo   (unicode)       []
    
    - refreshCallback : rcb          (unicode)       []
    
    - refreshScale : rs              (bool)          []
    
    - releaseAllPinning : rap        (bool)          []
    
    - selectedIDs : si               (bool)          []
    
    - setupCharacter : sc            (unicode)       []
    
    - updateCharacter : uc           (bool)          []
    
    
    Derived from mel command `maya.cmds.hikCharacterToolWidget`
    """
    pass
def SetVertexNormalOptions(*args, **kwargs): pass
def TagAsControllerParent(*args, **kwargs): pass
def PaintVertexColorTool(*args, **kwargs): pass
def curveSketchCtx(*args, **kwargs):
    """
    The curveSketchCtx command creates a new curve sketch context, also known as the
    pencil context.
    
    Flags:
    - degree : d                     (int)           [create,query,edit]
        Valid values are 1 or 3
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveSketchCtx`
    """
    pass
def ProfilerTool(*args, **kwargs): pass
def HypershadePerspLayout(*args, **kwargs): pass
def SaveInitialStateAll(*args, **kwargs): pass
def formLayout(*args, **kwargs): pass
def unknownNode(*args, **kwargs):
    """
    Allows querying of the data stored for unknown nodes (nodes that are defined by
    a plug-in that Maya could not load when loading a scene file).
    
    Flags:
    - plugin : p                     (bool)          [query]
        In query mode return the name of the plug-in from which the unknown node
        originated. If no plug-in then the empty string is returned.
    
    - realClassName : rcn            (bool)          [query]
        Return the real class name of the node.
    
    - realClassTag : rct             (bool)          [query]
        Return the real class IFF tag of the node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.unknownNode`
    """
    pass
def xgmPatchInfo(*args, **kwargs):
    """
    Flags:
    - description : d                (bool)          []
    
    - faceIds : f                    (bool)          []
    
    - geometry : g                   (bool)          []
    
    - patch : p                      (unicode)       []
    
    - rename : r                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmPatchInfo`
    """
    pass
def reverseSurface(*args, **kwargs): pass
def ArtPaintSkinWeightsToolOptions(*args, **kwargs): pass
def ClusterCurve(*args, **kwargs): pass
def viewSet(*args, **kwargs):
    """
    This command positions the camera to one of the pre-defined positions. If the
    fit flag is set in conjunction with persp, top, side, or front, the view is
    fitbased on the list of selected objects (if there are any) or on all the
    objects if nothing is selected. Notice that the fit flag cannot be set in
    conjunction with view along axis commands like viewX. If a camera is not
    specified, the camera in the active view will be used. If no flag is specified,
    the camera is set to the home position. In query mode, return type is based on
    queried flag.
    
    Flags:
    - animate : an                   (bool)          [create]
        Specifies that the transition between camera positions should be animated.
    
    - back : b                       (bool)          [create]
        Moves the camera to the back position.
    
    - bottom : bo                    (bool)          [create]
        Moves the camera to the bottom position.
    
    - fit : fit                      (bool)          [create,query]
        Apply a viewFit after positioning camera to persp, top, side, or front.
    
    - fitFactor : ff                 (float)         [create]
        Specifies how much of the view should be filled with the fitteditems
    
    - front : f                      (bool)          [create]
        Moves the camera to the front position.
    
    - home : h                       (bool)          [create]
        Executes the camera's home attribute command. Before the string is executed, all
        occurances of %camerawill be replaced by the camera's name. Use the camera
        command to set a camera's home command.
    
    - keepRenderSettings : krs       (bool)          [create,query]
        Retain the 'renderable' flag vaue on the view. Especially important if it
        switches from perspective to orthographic and then back again.
    
    - leftSide : ls                  (bool)          [create]
        Moves the camera to the left side position.
    
    - namespace : ns                 (unicode)       [create]
        Specifies a namespace that should be excluded. All objects in the specified
        namespace will be excluded from the fit process.
    
    - nextView : nv                  (bool)          [create,query]
        Moves the camera to the next position.
    
    - persp : p                      (bool)          [create]
        Moves the camera to the persp position.
    
    - previousView : pv              (bool)          [create,query]
        Moves the camera to the previous position.
    
    - rightSide : rs                 (bool)          [create]
        Moves the camera to the right side position.
    
    - side : s                       (bool)          [create]
        Moves the camera to the (right) side position (deprecated).
    
    - t : t                          (bool)          []
    
    - top : t                        (bool)          [create]
        Moves the camera to the top position.
    
    - viewNegativeX : vnx            (bool)          [create]
        Moves the camera to view along negative X axis.
    
    - viewNegativeY : vny            (bool)          [create]
        Moves the camera to view along negative Y axis.
    
    - viewNegativeZ : vnz            (bool)          [create]
        Moves the camera to view along negative Z axis.
    
    - viewX : vx                     (bool)          [create]
        Moves the camera to view along X axis.
    
    - viewY : vy                     (bool)          [create]
        Moves the camera to view along Y axis.
    
    - viewZ : vz                     (bool)          [create]
        Moves the camera to view along Z axis.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.viewSet`
    """
    pass
def curve(*args, **kwargs): pass
def substituteGeometry(*args, **kwargs):
    """
    This command can be used to replace the geometry which is already connected to
    deformers with a new geometry. The weights on the old geometry will be
    retargeted to the new geometry.
    
    Flags:
    - disableNonSkinDeformers : dnd  (bool)          [create]
        This flag controls the state of deformers other than skin deformers after the
        substitution has taken place. If the flag is true then non-skin deformer nodes
        are left in a disabled state at the completion of the command. Default value is
        false.
    
    - newGeometryToLayer : ngl       (bool)          [create]
        Create a new layer for the new geometry.
    
    - oldGeometryToLayer : ogl       (bool)          [create]
        Create a new layer and move the old geometry to this layer
    
    - reWeightDistTolerance : wdt    (float)         [create]
        Specify the distance tolerance value to be used for retargeting weights. While
        transferring weights the command tries to find the corresponding vertices by
        overlapping the geometries with all deformers disabled. Sometimes this results
        in selection of unrelated vertices. (Example when a hole in the old geometry has
        been filled with new vertices in the new geometry.) This distance tolerance
        value is used to detect this kind of faults and either ignore these cases or to
        vary algorithm to find more corresponding vertices.
    
    - retainOldGeometry : rog        (bool)          [create]
        A copy of the old geometry should be retained                              Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.substituteGeometry`
    """
    pass
def CopySkinWeights(*args, **kwargs): pass
def ToggleCacheVisibility(*args, **kwargs): pass
def OpenNodeAttrRef(*args, **kwargs): pass
def ExtrudeVertex(*args, **kwargs): pass
def FrameSelectedInAllViews(*args, **kwargs): pass
def keyframeRegionTrackCtx(*args, **kwargs):
    """
    This command can be used to create a track context for the dope sheet editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionTrackCtx`
    """
    pass
def DragOptions(*args, **kwargs): pass
def OutlinerToggleOrganizeByClip(*args, **kwargs): pass
def XgmSplineGeometryConvert(*args, **kwargs): pass
def ExportOfflineFileFromRefEd(*args, **kwargs): pass
def ShareUVInstances(*args, **kwargs): pass
def dR_contextChanged(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_contextChanged`
    """
    pass
def Smoke(*args, **kwargs): pass
def SubdividePolygon(*args, **kwargs): pass
def pointConstraint(*args, **kwargs): pass
def ATOMTemplate(*args, **kwargs): pass
def HIKCharacterControlsTool(*args, **kwargs): pass
def rigidSolver(*args, **kwargs): pass
def TestTextureOptions(*args, **kwargs): pass
def polyMergeVertex(*args, **kwargs):
    """
    Merge vertices within a given threshold.Since this allows merging any vertices
    that lie on the same object it is possible for the resulting geometry to be non-
    manifold.First, perform comparison of pairs of selected vertices. Pairs that lie
    within given distance of one another are merged, along with the edge between
    them.Second, any selected vertices which share an edge are merged if the
    distance between them is within the specified distance.Unlike Merge Edges, Merge
    Vertices will perform the merge even if the edges adjoining the vertices do not
    have matching orientation (i.e. normals of adjacent faces do not point in the
    same direction). As this restriction is not enforced while merging vertices,
    resulting geometry can be non-manifold.If alwaysMergeTwoVertices is set and
    there are only two vertices, tolerance is ignored and the vertices will be
    merged.Resulting mesh may have extra vertices or edges to ensure geometry is
    valid.
    
    Flags:
    - alwaysMergeTwoVertices : am    (bool)          [create,query,edit]
        This flag specifies whether to always merge if only two vertices are selected
        regardless of distance. C: Default is false. Q: When queried, this flag returns
        a boolean.
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - distance : d                   (float)         [create,query,edit]
        This flag specifies the distance within which vertices will be merged. C:
        Default is 0.0 (i.e. vertices are coincident). Q: When queried, this flag
        returns a double.
    
    - frozen : fzn                   (bool)          []
    
    - mergeToComponents : mtc        (unicode)       [create,query,edit]
        Optionally defines the position to merge all of the vertices to.  If set, the
        distance flag will be ignored, and instead the center point of the set
        components will be calculated and all vertices will be merged to that location.
        C: Default is empty string. Q: When queried, this flag returns a string.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - texture : tx                   (bool)          [create,query,edit]
        This flag specifies whether the texture is sewn in addition to the 3d edge C:
        Default is true. Q: When queried, this flag returns a boolean.
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyMergeVertex`
    """
    pass
def ParticleInstancer(*args, **kwargs): pass
def checkDefaultRenderGlobals(*args, **kwargs):
    """
    To query whether or not the defaultRenderGlobals node has been modified since
    the last file save, use `ls -modified`. To force the scene to be dirty/clean use
    `file -modified`                  In query mode, return type is based on queried
    flag.
    
    
    Derived from mel command `maya.cmds.checkDefaultRenderGlobals`
    """
    pass
def CreatePolygonHelix(*args, **kwargs): pass
def FBXExportEmbeddedTextures(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportEmbeddedTextures`
    """
    pass
def DeleteAllRigidConstraints(*args, **kwargs): pass
def allNodeTypes(*args, **kwargs):
    """
    This command returns a list containing the type names of every kind of creatable
    node registered with the system. Note that some node types are abstract and
    cannot be created. These will not show up on this list. (e.g. transform and
    polyShape both inherit from dagObject, but dagObject  cannot be created directly
    so it will not appear on this list.)
    
    Flags:
    - includeAbstract : ia           (bool)          [create]
        Show every node type, even the abstract ones which cannot be created via the
        'createNode' command. These will have the suffix (abstract)appended to them in
        the list.                              Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.allNodeTypes`
    """
    pass
def PublishRootTransform(*args, **kwargs): pass
def InsertKeyToolDeactivate(*args, **kwargs): pass
def ShowGeometry(*args, **kwargs): pass
def FBXPushSettings(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXPushSettings`
    """
    pass
def dR_extrudeBevelPress(*args, **kwargs): pass
def HypershadeOpenGraphEditorWindow(*args, **kwargs): pass
def NURBSToPolygonsOptions(*args, **kwargs): pass
def OptimzeUVsOptions(*args, **kwargs): pass
def NodeEditorDeleteNodes(*args, **kwargs): pass
def nurbsCurveRebuildPref(*args, **kwargs):
    """
    Flags:
    - degree : d                     (int)           []
    
    - endKnots : end                 (int)           []
    
    - fitRebuild : fr                (int)           []
    
    - keepControlPoints : kcp        (bool)          []
    
    - keepEndPoints : kep            (bool)          []
    
    - keepRange : kr                 (int)           []
    
    - keepTangents : kt              (bool)          []
    
    - rebuildType : rt               (int)           []
    
    - smartSurfaceCurve : scr        (bool)          []
    
    - spans : s                      (int)           []
    
    - tolerance : tol                (float)         []
    
    
    Derived from mel command `maya.cmds.nurbsCurveRebuildPref`
    """
    pass
def SendToUnrealSelection(*args, **kwargs): pass
def HypershadeDeleteUnusedNodes(*args, **kwargs): pass
def cmdArnoldFlushQuads(*args, **kwargs): pass
def makeSingleSurface(*args, **kwargs):
    """
    This command performs a stitch and tessellate operation.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - chordHeight : cht              (float)         []
    
    - chordHeightRatio : chr         (float)         []
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - delta : d                      (float)         []
    
    - edgeSwap : es                  (bool)          []
    
    - format : f                     (int)           []
    
    - fractionalTolerance : ft       (float)         []
    
    - frozen : fzn                   (bool)          []
    
    - matchNormalDir : mnd           (bool)          []
    
    - minEdgeLength : mel            (float)         []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normalizeTrimmedUVRange : ntr  (bool)          []
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygonCount : pc              (int)           []
    
    - polygonType : pt               (int)           []
    
    - stitchTolerance : st           (float)         [edit]
        Stitch tolerance. Default:0.1                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    - uNumber : un                   (int)           []
    
    - uType : ut                     (int)           []
    
    - useChordHeight : uch           (bool)          []
    
    - useChordHeightRatio : ucr      (bool)          []
    
    - vNumber : vn                   (int)           []
    
    - vType : vt                     (int)           []
    
    
    Derived from mel command `maya.cmds.makeSingleSurface`
    """
    pass
def Snap2PointsTo2Points(*args, **kwargs): pass
def ShowSelectedObjects(*args, **kwargs): pass
def CurveFlow(*args, **kwargs): pass
def Create2DContainer(*args, **kwargs): pass
def UntemplateObject(*args, **kwargs): pass
def drag(*args, **kwargs): pass
def AttachSurfaceWithoutMoving(*args, **kwargs): pass
def illustratorCurves(*args, **kwargs):
    """
    The illustratorCurves command creates NURBS curves from an input Adobe(R)
    Illustrator(R) file.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - illustratorFilename : ifn      (unicode)       [create]
        Input Adobe(R) Illustrator(R) file name.
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - scaleFactor : sf               (float)         []
    
    - tolerance : tl                 (float)         [create,query,edit]
        CVs on the output curve get snapped if the distance between two contiguous CVs
        are lesser than this tolerance value. Default:0.001f                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.illustratorCurves`
    """
    pass
def listInputDeviceButtons(*args, **kwargs):
    """
    This command lists all of the buttons of the specified input device specified as
    an argument.
    
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.listInputDeviceButtons`
    """
    pass
def CreateEmptyUVSetOptions(*args, **kwargs): pass
def SetMeshKnifeTool(*args, **kwargs): pass
def dgControl(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.dgControl`
    """
    pass
def PointOnPolyConstraintOptions(*args, **kwargs): pass
def HypershadeCreateNewTab(*args, **kwargs): pass
def SetMeshFillTool(*args, **kwargs): pass
def OutlinerToggleShowMuteInformation(*args, **kwargs): pass
def XgmCreateInteractiveGroomSplines(*args, **kwargs): pass
def xgmGrabBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmGrabBrushToolCmd`
    """
    pass
def nClothCreate(*args, **kwargs): pass
def ToggleUVTextureImage(*args, **kwargs): pass
def ShowMeshFoamyToolOptions(*args, **kwargs): pass
def CreatePolygonSVG(*args, **kwargs): pass
def xgmRebuildCurve(*args, **kwargs):
    """
    Flags:
    - addLength : al                 (float)         []
    
    - addPercent : ap                (float)         []
    
    - distance : d                   (float)         []
    
    - frequency : f                  (float)         []
    
    - keepOriginal : k               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmRebuildCurve`
    """
    pass
def ogsRender(*args, **kwargs):
    """
    Renders an image or a sequence using the OGS rendering engine
    
    Flags:
    - activeMultisampleType : mst    (unicode)       [query,edit]
        Query the current active multisample type.
    
    - activeRenderOverride : cro     (unicode)       [query,edit]
        Set or query the current active render override.
    
    - activeRenderTargetFormat : fpt (unicode)       [query,edit]
        Query the current active floating point target format.
    
    - availableFloatingPointTargetFormat : afp (bool)          [query,edit]
        Returns the names of available floating point render target format.
    
    - availableMultisampleType : amt (bool)          [query,edit]
        Returns the names of available multisample type.
    
    - availableRenderOverrides : aro (bool)          [query,edit]
        Returns the names of available render overrides.
    
    - camera : cam                   (unicode)       [create,query,edit]
        Specify the camera to use.  Use the first available camera if the camera
        given is not found.
    
    - currentFrame : cf              (bool)          [create,query,edit]
        Render the current frame.
    
    - currentView : cv               (bool)          [create,query,edit]
        When turned on, only the current view will be rendered.
    
    - enableFloatingPointRenderTarget : efp (bool)          [query,edit]
        Enable/disable floating point render target.
    
    - enableMultisample : ems        (bool)          [query,edit]
        Enable/disable multisample.
    
    - frame : f                      (float)         [create,edit]
        Specify the frame to render.
    
    - height : h                     (int)           [create,query,edit]
        The height flag pass the height to the ogsRender command. If not used,     the
        height is taken from the render globals settings.
    
    - layer : l                      (PyNode)        [create,query,edit]
        Render the specified render layer.         Only this render layer will be
        rendered,         regardless of the renderable attribute value of the render
        layer.         The layer name will be appended to the output image file name.
        The specified render layer becomes the current render layer before rendering,
        and remains as current render layer after the rendering.
    
    - noRenderView : nrv             (bool)          [create,query,edit]
        When turned on, the render view is not updated after image computation
    
    - width : w                      (int)           [create,query,edit]
        The width flag pass the width to the ogsRender command. If not used,     the
        width is taken from the render globals settings.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ogsRender`
    """
    pass
def SetCurrentUVSet(*args, **kwargs): pass
def componentEditor(*args, **kwargs):
    """
    This command creates a new component editor in the current layout.
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - floatField : ff                (unicode)       [create,query,edit]
        assigns a float field that the component editor will use for editing groups of
        values.
    
    - floatSlider : fs               (unicode)       [create,query,edit]
        assigns a float slider that the component editor will use for editing groups of
        values.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - hidePathName : hpn             (bool)          [create,query,edit]
        Hides path name of displayed element.  By default this flag is set to false.
    
    - hideZeroColumns : hzc          (bool)          [create,query,edit]
        Hides columns whose elements are all zero.  By default this flag is set to
        false.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockInput : li                 (bool)          [create,query,edit]
        Prevents the editor from responding to changes in the active list. Independent
        of selection connection.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - newTab : nt                    (unicode, unicode, unicode) [create,edit]
        Creates a new tab, named by the first argument, based on an existing tab, given
        as the second argument using elements from a set, given in the third argument
    
    - operationCount : oc            (bool)          [query]
        returns the total number of operation types known to the component editor.
    
    - operationLabels : ol           (bool)          [query]
        returns a string array containing the names for all operation types known to the
        editor.
    
    - operationType : ot             (int)           [create,query,edit]
        Tells the editor which of its known operation types it should be performing.
        This is a 0-based index.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - precision : pre                (int)           [create,query,edit]
        Specifies the maximum number of digits displayed to the right of the decimal
        place.  Can be 0 to 20.
    
    - removeTab : rt                 (unicode)       [edit]
        Removes the tab based on the set provided
    
    - selected : sl                  (bool)          [query]
        Returns a list of strings, containing the labels of the currently selected
        columns
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - setOperationLabel : sol        (int, unicode)  [edit]
        uses the string as the new name for the existing operation type specified by the
        integer index. Note that there is no messaging system which allows UI to be
        informed of changes made by this flag.
    
    - showObjects : so               (bool)          [create]
        Restricts the display to columns that are in the current active list.
    
    - showSelected : ss              (bool)          [create,edit]
        Restricts the display to those columns which are currently selected. By default
        this flag is set to false, so all columns are selected. The results from this
        flag obey the current -hideZeroColumns setting.
    
    - sortAlpha : sa                 (bool)          [create,query,edit]
        Controls alphabetical (true), or hierarchical sorting of columns
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.componentEditor`
    """
    pass
def fileInfo(*args, **kwargs): pass
def TimeEditorOpenContentBrowser(*args, **kwargs): pass
def GetProperty2StateAttrNameFromHIKEffectorId(*args, **kwargs):
    """
    Flags:
    - pull : p                       (int)           []
    
    - reachR : rr                    (int)           []
    
    - reachT : rt                    (int)           []
    
    
    Derived from mel command `maya.cmds.GetProperty2StateAttrNameFromHIKEffectorId`
    """
    pass
def DisplayHairCurvesCurrentAndStart(*args, **kwargs): pass
def hotkeyCheck(*args, **kwargs): pass
def frameBufferName(*args, **kwargs):
    """
    Returns the frame buffer name for a given renderPass renderLayer and camera
    combination. Optionally, this command can apply a name truncation algorithm so
    that the frameBuffer name will respect the maximum length imposed by the
    destination file format, if applicable.
    
    Flags:
    - autoTruncate : a               (bool)          [create]
        use this flag to apply a name truncation algorithm so that the frameBuffer name
        will respect the maximum length imposed by the destination file format, if
        applicable.
    
    - camera : c                     (unicode)       [create]
        Specify a camera
    
    - renderLayer : l                (unicode)       [create]
        Specify a renderer layer
    
    - renderPass : p                 (unicode)       [create]
        Specify a renderer pass                                    Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.frameBufferName`
    """
    pass
def BevelPolygonOptions(*args, **kwargs): pass
def memory(*args, **kwargs):
    """
    Used to query essential statistics on memory availability and usage. By default
    memory sizes are returned in bytes. Since Maya's command engine only supports
    32-bit signed integers, any returned value which cannot fit into 31 bits will be
    truncated to 2,147,483,647 and a warning message displayed. To avoid having
    memory sizes truncated use one of the memory size flags to return the value in
    larger units (e.g. megabytes) or use the asFloat flag to return the value as a
    float.
    
    Flags:
    - adjustedVirtualMemory : av     (bool)          [create]
        Returns size of adjusted virtual memory allocated by the process. The adjustment
        is done by computing an offset when the application is launched that will be
        subtracted from the process virtual memory in order to give the adjusted value.
        The returned size is an approximation of the memory used by the process that can
        be more reliable in some cases, for instance on platforms where display drivers
        can reserve large ranges of memory addresses, therefore increasing the size of
        the process virtual memory, even though those addresses are actually not used.
    
    - asFloat : af                   (bool)          [create]
        Causes numeric values to be returned as floats rather than ints. This can be
        useful if you wish to retain some of the significant digits lost when using the
        unit size flags.
    
    - debug : dbg                    (bool)          [create]
        Print debugging statistics on arena memory (if it exists)
    
    - freeMemory : fr                (bool)          [create]
        Returns size of free memory
    
    - gigaByte : gb                  (bool)          [create]
        Return memory sizes in gigabytes (1024\*1024\*1024 bytes)
    
    - heapMemory : he                (bool)          [create]
        Returns size of memory heap
    
    - kiloByte : kb                  (bool)          [create]
        Return memory sizes in kilobytes (1024 bytes)
    
    - megaByte : mb                  (bool)          [create]
        Return memory sizes in megabytes (1024\*1024 bytes)
    
    - pageFaults : pf                (bool)          [create]
        Returns number of page faults
    
    - pageReclaims : pr              (bool)          [create]
        Returns number of page reclaims
    
    - physicalMemory : phy           (bool)          [create]
        Returns size of physical memory
    
    - processResidentMemory : prm    (bool)          []
    
    - processVirtualMemory : pv      (bool)          [create]
        Returns size of virtual memory allocated by the process
    
    - summary : sum                  (bool)          [create]
        Returns a summary of memory usage. The size flags are ignored and all memory
        sizes are given in megabytes.
    
    - swapFree : swf                 (bool)          [create]
        Returns size of free swap
    
    - swapLogical : swl              (bool)          [create]
        Returns size of logical swap
    
    - swapMax : swm                  (bool)          [create]
        Returns maximum swap size
    
    - swapPhysical : swp             (bool)          [create]
        Returns size of physical swap
    
    - swapReserved : swr             (bool)          [create]
        Returns size of reserved swap
    
    - swapVirtual : swv              (bool)          [create]
        Returns size of virtual swap
    
    - swaps : sw                     (bool)          [create]
        Returns number of swaps                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.memory`
    """
    pass
def setKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to set keys within the graph
    editor
    
    Flags:
    - breakdown : bd                 (bool)          [query,edit]
        Specifies whether or not to create breakdown keys
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setKeyCtx`
    """
    pass
def ViewAlongAxisY(*args, **kwargs): pass
def makePaintable(*args, **kwargs):
    """
    Make attributes of nodes paintable to Attribute Paint Tool. This command is used
    to register new attributes to the Attribute Paint tool as paintable. Once
    registered the attributes will be recognized by the Attribute Paint tool and the
    user will be able to paint them.             In query mode, return type is based
    on queried flag.
    
    Flags:
    - activate : ac                  (bool)          [create,query]
        Activate / deactivate the given paintable attribute. Used to filter out some
        nodes in the attribute paint tool.
    
    - activateAll : aca              (bool)          [create,query]
        Activate / deactivate all the registered paintable attributes. Used to filter
        out some nodes in the attribute paint tool.
    
    - altAttribute : aa              (unicode)       [create,query]
        Define an alternate attribute which will also receive the same values. There can
        be multiple such flags.
    
    - attrType : at                  (unicode)       [create,query]
        Paintable attribute type.    Supported types: intArray, doubleArray,
        vectorArray, multiInteger, multiFloat, multiDouble, multiVector.
    
    - clearAll : ca                  (bool)          [create,query]
        Removes all paintable attribute definitions.
    
    - remove : rm                    (bool)          [create,query]
        Make the attribute not paintable any more.
    
    - shapeMode : sm                 (unicode)       [create,query]
        This flag controls how Artisan correlates the paintable node to a corresponding
        shape node.  It is used for attributes of type multi of multi, where the first
        multi dimension corresponds to the shape index (i.e. cluster nodes). At present,
        only one value of this flag is supported: deformer. By default this flag is an
        empty string, which means that there is a direct indexing (no special mapping
        required) of the attribute with respect to vertices on the shape.
    
    - uiName : ui                    (unicode)       [create,query]
        UI name. Default is the attribute name.                                    Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.makePaintable`
    """
    pass
def NodeEditorSelectUpStream(*args, **kwargs): pass
def VortexOptions(*args, **kwargs): pass
def polyMoveVertex(*args, **kwargs): pass
def columnLayout(*args, **kwargs): pass
def xgmLengthBrushContext(*args, **kwargs):
    """
    Flags:
    - brushFalloffCurve : bfc        (unicode)       []
    
    - brushFalloffType : bft         (unicode)       []
    
    - brushSymmetryTolerance : bso   (float)         []
    
    - brushSymmetryType : bst        (int)           []
    
    - collisionDistance : cd         (float)         []
    
    - defaultBrushFalloffCurve : dbf (unicode)       []
    
    - defaultRootToTipCurve : drt    (unicode)       []
    
    - enableCollision : ec           (bool)          []
    
    - enableRootToTip : ert          (bool)          []
    
    - exists : ex                    (bool)          []
    
    - falseColor : fc                (bool)          []
    
    - falseColorCurve : fcc          (unicode)       []
    
    - filterBackface : fb            (bool)          []
    
    - filterBackfaceEndAngle : fea   (float)         []
    
    - filterBackfaceStartAngle : fsa (float)         []
    
    - flood : f                      (bool)          []
    
    - freezeMode : frm               (int)           []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - increment : inc                (float)         []
    
    - maxLength : max                (float)         []
    
    - minLength : min                (float)         []
    
    - offsetHotkeyInterval : ohi     (float)         []
    
    - operation : op                 (int)           []
    
    - overallColorIntensity : oci    (float)         []
    
    - preselectionHighlight : ps     (bool)          []
    
    - preselectionHighlightB : psb   (float)         []
    
    - preselectionHighlightG : psg   (float)         []
    
    - preselectionHighlightR : psr   (float)         []
    
    - radius : r                     (float)         []
    
    - rootToTipCurve : rtc           (unicode)       []
    
    - scaleMode : scm                (int)           []
    
    - selectMode : sem               (int)           []
    
    - selectionHighlight : sh        (bool)          []
    
    - selectionHighlightB : shb      (float)         []
    
    - selectionHighlightG : shg      (float)         []
    
    - selectionHighlightR : shr      (float)         []
    
    - showFrozen : sf                (bool)          []
    
    - showFrozenB : sfb              (float)         []
    
    - showFrozenG : sfg              (float)         []
    
    - showFrozenR : sfr              (float)         []
    
    - strength : st                  (float)         []
    
    - useGlobalRadius : ugr          (bool)          []
    
    - volumeCenterOffset : vco       (float)         []
    
    - volumeSearchRadius : vsr       (float)         []
    
    
    Derived from mel command `maya.cmds.xgmLengthBrushContext`
    """
    pass
def PaintReduceWeightsTool(*args, **kwargs): pass
def AlembicExportAll(*args, **kwargs): pass
def XgmSetNoiseBrushToolOption(*args, **kwargs): pass
def FitBSpline(*args, **kwargs): pass
def hotkey(*args, **kwargs): pass
def CreatePolygonDisc(*args, **kwargs): pass
def ImportOptions(*args, **kwargs): pass
def ToggleCustomNURBSComponents(*args, **kwargs): pass
def ikSpringSolverCallbacks(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.ikSpringSolverCallbacks`
    """
    pass
def grid(*args, **kwargs): pass
def myTestCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.myTestCmd`
    """
    pass
def SelectUVTool(*args, **kwargs): pass
def PreInfinityLinear(*args, **kwargs): pass
def rebuildSurface(*args, **kwargs): pass
def SubdivSmoothnessHullOptions(*args, **kwargs): pass
def TexSewActivateBrushSize(*args, **kwargs): pass
def PasteSelected(*args, **kwargs): pass
def MirrorSubdivSurface(*args, **kwargs): pass
def GraphDeleteOptions(*args, **kwargs): pass
def HypershadeConvertPSDToLayeredTexture(*args, **kwargs): pass
def sortCaseInsensitive(*args, **kwargs):
    """
    This command sorts all the strings of an array in a case insensitive way.
    
    
    Derived from mel command `maya.cmds.sortCaseInsensitive`
    """
    pass
def PixelMoveRight(*args, **kwargs): pass
def HideGeometry(*args, **kwargs): pass
def ConvertSelectionToUVEdgeLoop(*args, **kwargs): pass
def bezierCurveToNurbs(*args, **kwargs): pass
def xgmNullRender(*args, **kwargs):
    """
    Flags:
    - percent : per                  (float)         []
    
    - progress : pb                  (bool)          []
    
    - selected : s                   (bool)          []
    
    - visibleOnly : vo               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmNullRender`
    """
    pass
def joint(*args, **kwargs): pass
def colorManagementCatalog(*args, **kwargs):
    """
    This non-undoable action performs additions and removals of custom color
    transforms from the Autodesk native color transform catalog.  Once a custom
    color transform has been added to the catalog, it can be used in the same way as
    the builtin Autodesk native color transforms.
    
    Flags:
    - addTransform : adt             (unicode)       [create]
        Add transform to collection.
    
    - editUserTransformPath : eut    (unicode)       [create]
        Edit the user transform directory. By changing the directory, all custom
        transforms currently added could be changed, and new ones could appear.
    
    - listSupportedExtensions : lse  (bool)          [create]
        List the file extensions that are supported by add transform.  This list is
        valid for all transform types, and therefore this flag does not require use of
        the type flag.
    
    - listTransformConnections : ltc (bool)          [create]
        List the transforms that can be used as source (for viewand outputtypes) or
        destination (for inputand rendering spacetypes) to connect a custom transform to
        the rest of the transform collection.
    
    - path : pth                     (unicode)       [create]
        In addTransform mode, the path to the transform data file.
    
    - queryUserTransformPath : qut   (bool)          [create]
        Query the user transform directory.
    
    - removeTransform : rmt          (unicode)       [create]
        Remove transform from collection.
    
    - transformConnection : tcn      (unicode)       [create]
        In addTransform mode, an existing transform to which the added transform will be
        connected. For an input transform or rendering space transform, this will be a
        destination. For a view or output transform, this will be a source.
    
    - type : typ                     (unicode)       [create]
        The type of transform added, removed, or whose transform connections are to be
        listed. Must be one of view, rendering space, input, or output.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorManagementCatalog`
    """
    pass
def SelectAllAssets(*args, **kwargs): pass
def EnableSelectedIKHandles(*args, **kwargs): pass
def SubdivSurfacePolygonProxyMode(*args, **kwargs): pass
def TogglePaintOnPaintableObjects(*args, **kwargs): pass
def flushUndo(*args, **kwargs):
    """
    Removes everything from the undo queue, freeing up memory.
    
    
    Derived from mel command `maya.cmds.flushUndo`
    """
    pass
def CleanupPolygonOptions(*args, **kwargs): pass
def MoveLeft(*args, **kwargs): pass
def polySubdivideEdge(*args, **kwargs):
    """
    Subdivides an edge into two or more subedges. Default : divide edge into two
    edges of equal length.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - divisions : dv                 (int)           [create,query,edit]
        The maximum number of vertices to be inserted in each edge. This number may be
        reduced if it creates edges shorter than the specified minimum length. C:
        Default is 1 (divide edges in half). Q: When queried, this flag returns an int.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - size : s                       (float)         [create,query,edit]
        The minimum length of each subedge created. If the given subdivision creates
        edges that are shorter than this length, the number of divisions is changed to
        respect min length. C: Default is 0.0. Q: When queried, this flag returns a
        float.
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polySubdivideEdge`
    """
    pass
def ToggleUVEditorUVStatisticsHUDOptions(*args, **kwargs): pass
def gridLayout(*args, **kwargs): pass
def MakeBrushSpringOptions(*args, **kwargs): pass
def HideStrokes(*args, **kwargs): pass
def TangentsPlateau(*args, **kwargs): pass
def RemoveLatticeTweaks(*args, **kwargs): pass
def hikGlobals(*args, **kwargs):
    """
    Sets global HumanIK flags for the application.
    
    Flags:
    - releaseAllPinning : rap        (bool)          [query,edit]
        Sets the global release all pinning hik flag. When this flag is set, all pinning
        states are ignored.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hikGlobals`
    """
    pass
def commandLogging(*args, **kwargs): pass
def TimeEditorClipScaleEnd(*args, **kwargs): pass
def CreateExpressionClipOptions(*args, **kwargs): pass
def CreateSoftBodyOptions(*args, **kwargs): pass
def ctxCompletion(*args, **kwargs):
    """
    This command tells the current context to finish what it is doing and create any
    objects that is is working on.
    
    
    Derived from mel command `maya.cmds.ctxCompletion`
    """
    pass
def setAttrMapping(*args, **kwargs):
    """
    This command applies an offset and scale to a specified device attachment. This
    command is different than the setInputDeviceMapping command, which applies a
    mapping to a device axis. The value from the device is multiplied by the scale
    and the offset is added to this product. With an absolute mapping, the attached
    attribute gets the resulting value. If the mapping is relative, the resulting
    value is added to the previous calculated value. The calculated value will also
    take into account the setInputDeviceMapping, if it was defined. As an example,
    if the space ball is setup with absolute attachment mappings, pressing in one
    direction will cause the attached attribute to get a constant value. If a
    relative mapping is used, and the spaceball is pressed in one direction, the
    attached attribute will get a constantly increasing (or constantly decreasing)
    value. Note that the definition of relative is different than the definition
    used by the setInputDeviceMapping command. In general, both a relative
    attachment mapping (this command) and a relative device mapping
    (setInputDeviceMapping) should not be used together one the same axis. In query
    mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - absolute : a                   (bool)          [create]
        Make the mapping absolute.
    
    - attribute : at                 (unicode)       [create]
        The attribute used in the attachment.
    
    - axis : ax                      (unicode)       [create]
        The axis on the device used in the attachment.
    
    - clutch : c                     (unicode)       [create]
        The clutch button used in the attachment.
    
    - device : d                     (unicode)       [create]
        The device used in the attachment.
    
    - offset : o                     (float)         [create]
        Specify the offset value.
    
    - relative : r                   (bool)          [create]
        Make the mapping relative.
    
    - scale : s                      (float)         [create]
        Specify the scale value.
    
    - selection : sl                 (bool)          [create]
        This flag specifies the mapping should be on the selected objects
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setAttrMapping`
    """
    pass
def nConstraintSlideOnSurfaceOptions(*args, **kwargs): pass
def DetachSkinOptions(*args, **kwargs): pass
def PlaybackStop(*args, **kwargs): pass
def HypershadeDuplicateWithoutNetwork(*args, **kwargs): pass
def xgmSplineApplyRenderOverride(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmSplineApplyRenderOverride`
    """
    pass
def RemoveBindingSet(*args, **kwargs): pass
def HypershadeGraphRemoveUnselected(*args, **kwargs): pass
def boneLattice(*args, **kwargs): pass
def nexTRSContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.nexTRSContext`
    """
    pass
def CreatePolygonSuperEllipse(*args, **kwargs): pass
def GpuCacheExportSelectionOptions(*args, **kwargs): pass
def UpdateCurrentScene3dsMax(*args, **kwargs): pass
def dynPref(*args, **kwargs):
    """
    This action modifies and queries the current state of autoCreate rigid bodies,
    run up to current time, and  run up from(previous time or start time). In query
    mode, return type is based on queried flag.
    
    Flags:
    - autoCreate : ac                (bool)          [create,query]
        If on, autoCreate rigid bodies.
    
    - echoCollision : ec             (bool)          [create,query]
        If on, will cause particle systems to echo to the Script Editor the command that
        they are running for each particle collision event. If off, only the output of
        the command will be echoed.
    
    - runupFrom : rf                 (int)           [create,query]
        If on, run up from previous time; if 2, run up from start time
    
    - runupToCurrentTime : rt        (bool)          [create,query]
        If on, run up the scene to current time
    
    - saveOnQuit : sq                (bool)          [create,query]
        If on, save the current values of preferences to userPrefs file.
    
    - saveRuntimeState : sr          (bool)          [create,query]
        If on, runtime state as well as initial state of all particle objects will be
        saved to file. If off, only initial state will be saved.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dynPref`
    """
    pass
def polyIterOnPoly(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.polyIterOnPoly`
    """
    pass
def lockNode(*args, **kwargs):
    """
    Locks or unlocks one or more dependency nodes. A locked node is restricted in
    the following ways:  It may not be deleted.It may not be renamed.Its parenting
    may not be changed.Attributes may not be added to or removed from it.Locked
    attributes may not be unlocked.Unlocked attributes may not be locked.Note that
    an unlocked attribute of a locked node may still have its value set, or
    connections to it made or broken. For more information on attribute locking, see
    the setAttrcommand.  If no node names are specified then the current selection
    list is used.  There are a few special behaviors when locking containers.
    Containers are automatically expanded to their constituent objects. When a
    container is locked, members of the container may not be unlocked and the
    container membership may not be modified. Containers may also be set to lock
    unpublished attributes. When in this state, unpublished member attributes may
    not have existing connections broken, new connections cannot be made, and values
    on unconnected attributes may not be modified. Parenting is allowed to change on
    members of locked containers that have been published as parent or child
    anchors.
    
    Flags:
    - ignoreComponents : ic          (bool)          [create,query]
        Normally, the presence of a component in the list of objects to be locked will
        cause the command to fail with an error. But if this flag is supplied then
        components will be silently ignored.
    
    - lock : l                       (bool)          [create,query]
        Specifies the new lock state for the node. The default is true.
    
    - lockName : ln                  (bool)          [create,query]
        Specifies the new lock state for the node's name.
    
    - lockUnpublished : lu           (bool)          [create,query]
        Used in conjunction with the lock flag. On a container, lock or unlock all
        unpublished attributes on the members of the container. For non-containers, lock
        or unlock unpublished attributes on the specified node.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.lockNode`
    """
    pass
def orbit(*args, **kwargs):
    """
    The orbit command revolves the camera(s) horizontally and/or vertically in the
    perspective window. The rotation axis is with respect to the camera. To revolve
    horizontally: the rotation axis is the camera up direction vector. To revolve
    vertically: the rotation axis is the camera left direction vector. When both the
    horizontal and the vertical angles are supplied on the command line, the camera
    is firstly revolved horizontally, then revolved vertically. This command may be
    applied to more than one camera; objects that are not cameras are ignored. When
    no camera name supplied, this command is applied to all currently active
    cameras.
    
    Flags:
    - horizontalAngle : ha           (float)         [create]
        Angle to revolve horizontally.
    
    - pivotPoint : pp                (float, float, float) [create]
        Used as the pivot point in the world space.
    
    - rotationAngles : ra            (float, float)  [create]
        Angle to revolve horizontally and vertically.
    
    - verticalAngle : va             (float)         [create]
        Angle to revolve vertically.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.orbit`
    """
    pass
def AddDivisionsOptions(*args, **kwargs): pass
def CreateUVShellAlongBorder(*args, **kwargs): pass
def ToggleReflection(*args, **kwargs): pass
def iconTextScrollList(*args, **kwargs): pass
def SoloLastOutput(*args, **kwargs): pass
def OpenCharacterGenerator(*args, **kwargs): pass
def displayCull(*args, **kwargs):
    """
    This command is responsible for setting the display culling property of back
    faces of surfaces. In query mode, return type is based on queried flag.
    
    Flags:
    - backFaceCulling : bfc          (bool)          [create,query]
        Enable/disable culling of back faces.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayCull`
    """
    pass
def scriptJob(*args, **kwargs): pass
def dR_modeMulti(*args, **kwargs): pass
def adskSceneMetadataCmd(*args, **kwargs):
    """
    Flags:
    - channelName : c                (unicode)       []
    
    - data : d                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.adskSceneMetadataCmd`
    """
    pass
def RenderGlobalsWindow(*args, **kwargs): pass
def manipOptions(*args, **kwargs):
    """
    Changes the global manipulator parameters                In query mode, return
    type is based on queried flag.
    
    Flags:
    - enableSmartDuplicate : esd     (bool)          [create,query]
        Enables Shift-Duplicate option on t/r/s manips.
    
    - enableSmartExtrude : ese       (bool)          [create,query]
        Enables Shift-Extrude option on t/r/s manips.
    
    - forceRefresh : fr              (bool)          [create]
        Force a refresh if there is any deferred evaluation.
    
    - handleSize : hs                (float)         [create,query]
        Sets the maximum handles size in pixels, for small handles
    
    - hideManipOnCtrl : hmc          (bool)          [create,query]
        Hide transform manip when the Ctrl key is pressed.
    
    - hideManipOnShift : hms         (bool)          [create,query]
        Hide transform manip when the Shift key is pressed.
    
    - hideManipOnShiftCtrl : hsc     (bool)          [create,query]
        Hide transform manip when the Shift and Ctrl keys are both pressed.
    
    - linePick : lp                  (float)         [create,query]
        Set the width of picking zone for long handles
    
    - lineSize : ls                  (float)         [create,query]
        Set the width of long handles (drawn as lines)
    
    - middleMouseRepositioning : mm  (bool)          [create,query]
        Specify if the middle mouse should reposition
    
    - pivotRotateHandleOffset : pro  (int)           [create,query]
        Set the offset of the pivot rotation handle.
    
    - planeHandleOffset : pho        (int)           [create,query]
        Set the offset of the planar drag handles.
    
    - pointSize : ps                 (float)         [create,query]
        Set the size of points (used to display previous states)
    
    - preselectHighlight : psh       (bool)          [create,query]
        Set whether manip handles should be highlighted when moving mouse.
    
    - refreshMode : rm               (int)           [create,query]
        Set the global refresh mode.
    
    - relative : r                   (bool)          [create]
        All values are interpreted as multiplication factors instead of final values.
    
    - rememberActiveHandle : rah     (bool)          [create,query]
        Set whether manip handles should be remembered after selection change.
    
    - rememberActiveHandleAfterToolSwitch : rhs (bool)          [create,query]
        Set whether manip handles should be remembered after manipulator change.
    
    - scale : s                      (float)         [create,query]
        Global scaling factor of all manipulators
    
    - showExtrudeSliders : ses       (bool)          [create,query]
        Specify if the extrude sliders are to be shown on the manip
    
    - showPivotRotateHandle : spr    (bool)          [create,query]
        Toggles the visibility of the pivot rotation handle.
    
    - showPlaneHandles : sph         (bool)          [create,query]
        Toggles the visibility of the planar drag handles.
    
    - smartDuplicateType : sdt       (int)           [create,query]
        Change Shift-Duplicate or Shift-Extrude between Copy and Instance on t/r/s
        manips.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.manipOptions`
    """
    pass
def SetKeyRotate(*args, **kwargs): pass
def OutlinerExpandAllSelectedItems(*args, **kwargs): pass
def treeLister(*args, **kwargs): pass
def HypershadeRevertToDefaultTabs(*args, **kwargs): pass
def ToggleSurfaceFaceCenters(*args, **kwargs): pass
def adskAssetListUI(*args, **kwargs): pass
def ToggleViewCube(*args, **kwargs): pass
def artAttrSkinPaintCtx(*args, **kwargs):
    """
    This is a context command to set the flags on the artAttrContext, which is the
    base context for attribute painting operations. All commands require the name of
    the context as the last argument as this provides the name of the context to
    create, edit or query. This is a context command to set the flags on the Paint
    skin weights tool context. In query mode, return type is based on queried flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - activeListChangedProc : alp    (unicode)       [create,query,edit]
        Accepts a string that contains a MEL command that is invoked whenever the active
        list changes. There may be some situations where the UI, for example, needs to
        be updated, when objects are selected/deselected in the scene. In query mode,
        the name of the currently registered MEL command is returned and this will be an
        empty string if none is defined.
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - alphaclamp : alc               (unicode)       [create,query,edit]
        Specifies if the weight value should be alpha clamped to the lower and upper
        bounds. There are four options here: none- no clamping is performed, lower-
        clamps only to the lower bound, upper- clamps only to the upper bounds, both-
        clamps to the lower and upper bounds. C: Default is none.  Q: When queried, it
        returns a string.
    
    - alphaclamplower : acl          (float)         [create,query,edit]
        Specifies the lower bound for the alpha values. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - alphaclampupper : acu          (float)         [create,query,edit]
        Specifies the upper bound for the alpha values. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - attrSelected : asl             (unicode)       [query]
        Returns a name of the currently selected attribute. Q: When queried, it returns
        a string.
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clamp : cl                     (unicode)       [create,query,edit]
        Specifies if the weight value should be clamped to the lower and upper bounds.
        There are four options here: none- no clamping is performed, lower- clamps only
        to the lower bound, upper- clamps only to the upper bounds, both- clamps to the
        lower and upper bounds. C: Default is none.  Q: When queried, it returns a
        string.
    
    - clamplower : cll               (float)         [create,query,edit]
        Specifies the lower bound for the values. C: Default is 0.0.  Q: When queried,
        it returns a float.
    
    - clampupper : clu               (float)         [create,query,edit]
        Specifies the upper bound for the values. C: Default is 1.0.  Q: When queried,
        it returns a float.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - colorAlphaValue : cl1          (float)         [create,query,edit]
        The Alpha value of the color.
    
    - colorRGBAValue : cl4           (float, float, float, float) [create,query,edit]
        The RGBA value of the color.
    
    - colorRGBValue : cl3            (float, float, float) [create,query,edit]
        The RGB value of the color.
    
    - colorRamp : cr                 (unicode)       [create,query,edit]
        Allows a user defined color ramp to be used to map values to colors.
    
    - colorfeedback : cf             (bool)          [create,query,edit]
        Sets on/off the color feedback display. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorfeedbackOverride : cfo    (bool)          [create,query,edit]
        Sets on/off the color feedback override. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorrangelower : crl          (float)         [create,query,edit]
        Specifies the value that maps to black when color feedback mode is on. C:
        Default is 0.0.  Q: When queried, it returns a float.
    
    - colorrangeupper : cru          (float)         [create,query,edit]
        Specifies the value that maps to the maximum color when color feedback mode is
        on. C: Default is 1.0.  Q: When queried, it returns a float.
    
    - dataTypeIndex : dti            (int)           [query,edit]
        When the selected paintable attribute is a vectorArray, it specifies which field
        to paint on.
    
    - disablelighting : dl           (bool)          [create,query,edit]
        If color feedback is on, this flag determines whether lighting is disabled or
        not for the surfaces that are affected. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - duringStrokeCmd : dsk          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command during the stroke, each time the
        mouse is dragged. C: Default is no command. Q: When queried, it returns the
        current command
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - filterNodes : fon              (bool)          [edit]
        Sets the node filter.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - influence : inf                (unicode)       [query,edit]
        Specifies which joint has been selected by the user for painting. Q: When
        queried, it returns a string.
    
    - interactiveUpdate : iu         (bool)          [create,query,edit]
        Specifies how often to transfer the painted values into the attribute. TRUE:
        transfer them continuously(many times per stroke) FALSE: transfer them only at
        the end of a stroke (on mouse button release). C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - maxvalue : mxv                 (float)         [create,query,edit]
        Specifies the maximum value for each attribute. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - minvalue : miv                 (float)         [create,query,edit]
        Specifies the minimum value for each attribute. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objattrArray : oaa             (unicode)       [query]
        An array of all paintable attributes. Each element of the array is a string with
        the following information: NodeType.NodeName.AttributeName.MenuType. \*MenuType:
        type (level) of the item in the Menu (UI). Q: When queried, it returns a string.
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintNodeArray : pna           (unicode)       [query]
        An array of paintable nodes. Q: When queried, it returns a string.
    
    - paintSelectMode : psm          (int)           [query,edit]
        Specifies whether the paint select tool: adds to selection (1) removes from
        selection (2), toggles selection (3) Q: When queried, it returns an int as
        defined above.
    
    - paintattrselected : pas        (unicode)       [edit]
        An array of selected paintable attributes. Each element of the array is a string
        with the following information: NodeType.NodeName.AttributeName.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - rampMaxColor : rxc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is greater than or equal to
        the maximum value.
    
    - rampMinColor : rmc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is less than or equal to the
        minimum value.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - selectedattroper : sao         (unicode)       [create,query,edit]
        Sets the edit weight operation. Four edit weights operations are provided :
        absolute- the value of the weight is replaced by the current one, additive- the
        value of the weight is added to the current one, scale- the value of the weight
        is multiplied by the current one, smooth- the value of the weight is divided by
        the current one. C: Default is absolute.  Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - skinPaintMode : spm            (int)           [query,edit]
        Specifies whether the skin paint tool is in paint skin weights mode (1) Marquee
        select mode (0), or paint select mode (2) Q: When queried, it returns an int as
        defined above.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - toolOffProc : tfp              (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned off. For example, cloth invokes
        clothPaintToolOffwhen the cloth paint tool is turned on. Define this callback if
        your tool requires special functionality when your tool is deactivated. It is
        typical that if you implement a toolOffProc you will want to implement a
        toolOnProc as well (see the -toolOnProc flag. In query mode, the name of the
        currently registered MEL command is returned and this will be an empty string if
        none is defined.
    
    - toolOnProc : top               (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned on. For example, cloth invokes clothPaintToolOnwhen
        the cloth paint tool is turned on. Define this callback if your tool requires
        special functionality when your tool is activated. It is typical that if you
        implement a toolOnProc you will want to implement a toolOffProc as well (see the
        -toolOffProc flag. In query mode, the name of the currently registered MEL
        command is returned and this will be an empty string if none is defined.
    
    - useColorRamp : ucr             (bool)          [create,query,edit]
        Specifies whether the user defined color ramp should be used to map values from
        to colors.  If this is turned off, the default greyscale feedback will be used.
    
    - useMaxMinColor : umc           (bool)          [create,query,edit]
        Specifies whether the out of range colors should be used.  See rampMinColor and
        rampMaxColor flags for further details.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - value : val                    (float)         [create,query,edit]
        Specifies the value for each attribute. C: Default is 0.0.  Q: When queried, it
        returns a float.
    
    - whichTool : wst                (unicode)       [create,query,edit]
        The string defines the name of the tool to be used for the Artisan context. An
        example is artClothPaint. In query mode, the tool name for the given context is
        returned. Note: due to the way MEL works, always specify the -query flag last
        when specifying a flag that takes arguments.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace
    
    - xrayJoints : xry               (bool)          [query,edit]
        Specifies whether joints should be displayed in xray mode while painting Q: When
        queried, it returns a boolean.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artAttrSkinPaintCtx`
    """
    pass
def xgmGuideContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmGuideContext`
    """
    pass
def SelectCurveCVsFirst(*args, **kwargs): pass
def ConnectNodeToIKFK(*args, **kwargs): pass
def CreateHairOptions(*args, **kwargs): pass
def cMuscleBindSticky(*args, **kwargs):
    """
    Flags:
    - cbind : c                      (bool)          []
    
    - dist : d                       (float)         []
    
    - help : h                       (bool)          []
    
    - mindex : mi                    (int)           []
    
    - muscle : mus                   (PyNode)        []
    
    - system : sys                   (PyNode)        []
    
    
    Derived from mel command `maya.cmds.cMuscleBindSticky`
    """
    pass
def ShowMeshImprintToolOptions(*args, **kwargs): pass
def polyUVOverlap(*args, **kwargs):
    """
    Return the required result on the specified components. If no objects are
    specified in the command line, then components from selection list will be used.
    
    Flags:
    - nonOverlappingComponents : noc (bool)          [create]
        Return non-overlapping components based on selected/specified components
    
    - overlappingComponents : oc     (bool)          [create]
        Return overlapping components based on selected/specified components
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyUVOverlap`
    """
    pass
def nConstraintWeldBorders(*args, **kwargs): pass
def paramDimension(*args, **kwargs): pass
def CreateControlRig(*args, **kwargs): pass
def encodeString(*args, **kwargs):
    """
    This action will take a string and encode any character that would need to be
    escaped before being sent to some other command. Such characters include:double
    quotesnewlinestabs
    
    
    Derived from mel command `maya.cmds.encodeString`
    """
    pass
def referenceEdit(*args, **kwargs): pass
def polyEditUV(*args, **kwargs):
    """
    Command edits uvs on polygonal objects. When used with the query flag, it
    returns the uv values associated with the specified components.
    
    Flags:
    - angle : a                      (float)         [create,query]
        Specifies the angle value (in degrees) that the uv values are to be rotated by.
    
    - pivotU : pu                    (float)         [create,query]
        Specifies the pivot value, in the u direction, about which the scale or rotate
        is to be performed.
    
    - pivotV : pv                    (float)         [create,query]
        Specifies the pivot value, in the v direction, about which the scale or rotate
        is to be performed.
    
    - relative : r                   (bool)          [create,query]
        Specifies whether this command is editing the values relative to the currently
        existing values. Default is true;
    
    - rotateRatio : rr               (float)         [create,query]
        Specifies the ratio value that the uv values are to be rotated by Default is 1.0
    
    - rotation : rot                 (bool)          [create,query]
        Specifies whether this command is editing the values with rotation values
    
    - scale : s                      (bool)          [create,query]
        Specifies whether this command is editing the values with scale values
    
    - scaleU : su                    (float)         [create,query]
        Specifies the scale value in the u direction.
    
    - scaleV : sv                    (float)         [create,query]
        Specifies the scale value in the v direction.
    
    - uValue : u                     (float)         [create,query]
        Specifies the value, in the u direction - absolute if relative flag is false..
    
    - uvSetName : uvs                (unicode)       [create,query]
        Specifies the name of the uv set to edit uvs on. If not specified will use the
        current uv set if it exists.
    
    - vValue : v                     (float)         [create,query]
        Specifies the value, in the v direction - absolute if relative flag is false..
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyEditUV`
    """
    pass
def EditOversamplingForCacheSettings(*args, **kwargs): pass
def BakeSurfaceToTexture(*args, **kwargs): pass
def swatchDisplayPort(*args, **kwargs): pass
def resampleFluid(*args, **kwargs):
    """
    A command to extend the fluid grid, keeping the voxels the same size, and
    keeping the existing contents of the fluid in the same place. Note that the
    fluid transform is also modified to make this possible.            In query
    mode, return type is based on queried flag.
    
    Flags:
    - resampleDepth : rd             (int)           [create,query,edit]
        Change depth resolution to this value
    
    - resampleHeight : rh            (int)           [create,query,edit]
        Change height resolution to this value
    
    - resampleWidth : rw             (int)           [create,query,edit]
        Change width resolution to this value                              Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.resampleFluid`
    """
    pass
def HypershadeSortByTime(*args, **kwargs): pass
def NodeEditorIncreaseTraversalDepth(*args, **kwargs): pass
def timer(*args, **kwargs):
    """
    Allow simple timing of scripts and commands. The resolution of this timer is at
    the level of your OS's gettimeofday()function.  Note:This command does not
    handle stacked calls. For example, this code below will give an incorrect answer
    on the second timer -ecall.timer -s; timer -s; timer -e; timer -e; To do this
    use named timers: timer -s; timer -s -name innerTimer; timer -e -name
    innerTimer; timer -e; I the -e flag or -lap flag return the time elapsed since
    the last 'timer -s' call.I the -s flag has no return value.
    
    Flags:
    - endTimer : e                   (bool)          [create]
        Stop the timer and return the time elapsed since the timer was started (in
        seconds). Once a timer is turned off it no longer exists, though it can be
        recreated with a new start
    
    - lapTime : lap                  (bool)          [create]
        Get the lap time of the timer (time elapsed since start in seconds). Unlike the
        endflag this keeps the timer running.
    
    - name : n                       (unicode)       [create]
        Use a named timer for the operation. If this is omitted then the default timer
        is assumed.
    
    - startTimer : s                 (bool)          [create]
        Start the timer.                                   Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timer`
    """
    pass
def menuEditor(*args, **kwargs): pass
def OneClickDispatch(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickDispatch`
    """
    pass
def PaintHairBaldness(*args, **kwargs): pass
def removeListItem(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.removeListItem`
    """
    pass
def wireContext(*args, **kwargs):
    """
    This command creates a tool that can be used to create a wire deformer.
    
    Flags:
    - crossingEffect : ce            (float)         [create,query,edit]
        Set the amount of convolution filter effect. Varies from fully convolved at 0 to
        a simple additive effect at 1. Default is 0.
    
    - deformationOrder : do          (unicode)       [create,query,edit]
        Set the appropriate flag that determines the position in in the deformation
        hierarchy.
    
    - dropoffDistance : dds          (float)         [create,query,edit]
        Set the dropoff Distance for the wires.
    
    - envelope : en                  (float)         [create,query,edit]
        Set the envelope value for the deformer. Default is 1.0
    
    - exclusive : exc                (bool)          [create,query,edit]
        Set exclusive mode on or off.
    
    - exclusivePartition : ep        (unicode)       [create,query,edit]
        Set the name of an exclusive partition.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - groupWithBase : gw             (bool)          [create,query,edit]
        Groups the wire with the base wire so that they can easily be moved together to
        create a ripple effect. Default is false.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - holder : ho                    (bool)          [create,edit]
        Controls whether the user can specify holders for the wires from the wire
        context. A holder is a curve that you can use to limit the wire's deformation
        region. Default is false.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - localInfluence : li            (float)         [create,query,edit]
        Set the amount of local influence a wire has with respect to other wires.
        Default is 0.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.wireContext`
    """
    pass
def SelectComponentToolMarkingMenuPopDown(*args, **kwargs): pass
def polyCollapseEdge(*args, **kwargs): pass
def ExtrudeFace(*args, **kwargs): pass
def FBXUICallBack(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXUICallBack`
    """
    pass
def applyTake(*args, **kwargs):
    """
    This command takes data in a device (refered to as a take) and converts it into
    a form that may be played back and reviewed. The take can either be imported
    through the readTake action, or recorded by the recordDevice action. The take is
    either converted into animation curves or if the -preview flag is used, into
    blendDevice nodes. The command looks for animation curves attached to the target
    attributes of a device attachment. If animation curves exist, the take is pasted
    over the existing curves. If the curves do not exist, new animation curves are
    created. If devices are not specified, all of the devices with take data and
    that are enabled for applyTake, will have their data applied. See also:
    recordDevice, enableDevice, readTake, writeTake
    
    Dynamic library stub function 
    
    Flags:
    - channel : c                    (unicode)       [create]
        This flag overrides the set channel enable value. If a channel is specified, it
        will be enabled. C: The default is all applyTake enabled channels for the
        device(s).
    
    - device : d                     (unicode)       [create]
        Specifies which device contains the take. C: The default is all applyTake
        enabled devices.
    
    - filter : f                     (unicode)       [create]
        This flag specifies the filters to use during the applyTake. If this flag is
        used multiple times, the ordering of the filters is from left to right. C: The
        default is no filters.
    
    - preview : p                    (bool)          [create]
        Applies the take to blendDevice nodes attached to the target attributes
        connected to the device attachments. Animation curves attached to the attributes
        will not be altered, but for the time that preview data is defined, the preview
        data will be the data used during playback. C: The default is to not preview.
    
    - recurseChannel : rc            (bool)          [create]
        When this flag is used, the children of the channel(s) specified by -c/channel
        are also applied. C: The default is all of the enabled channels.
    
    - reset : r                      (bool)          [create]
        Resets the blendDevice nodes affected by -preview. The preview data is removed
        and if animation curves exist, they are used during playback.
    
    - specifyChannel : sc            (bool)          [create]
        This flag is used with -c/channel flag. When used, applyTake will only work on
        the channels listed with the -c/channel flag. C: The default is all of the
        enabled channels.
    
    - startTime : st                 (time)          [create]
        The default start time for a take is determined at record time. The startTime
        option sets the starting time of the take in the current animation units. C: The
        default is the first time stamp of the take. If a time stamp does not exist for
        the take, 0 is used.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.applyTake`
    """
    pass
def nClothRestToMesh(*args, **kwargs): pass
def DeleteKeys(*args, **kwargs): pass
def CreatePartition(*args, **kwargs): pass
def dR_visorTGL(*args, **kwargs): pass
def attachCurve(*args, **kwargs): pass
def NodeEditorConnectOnDrop(*args, **kwargs): pass
def LODGenerateMeshesOptions(*args, **kwargs): pass
def SelectTimeWarp(*args, **kwargs): pass
def psdChannelOutliner(*args, **kwargs):
    """
    Dynamic library stub function
    """
    pass
def baseView(*args, **kwargs):
    """
    A view defines the layout information for the attributes of a particular node
    type or container.  Views can be selected from a set of built-in views or may be
    defined on an associated container template. This command queries the view-
    related information for a container node or for a given template.  The
    information returned from this command will be based on the view-related
    settings in force on the container node at the time of the query (i.e. the
    container's view mode, template name, view name attributes), when applicable.
    In query mode, return type is based on queried flag.
    
    Flags:
    - itemInfo : ii                  (unicode)       [query]
        Used in query mode in conjunction with the itemList flag. The command will
        return a list of information for each item in the view, the information fields
        returned for each item are determined by this argument value. The information
        fields will be listed in the string array returned. The order in which the
        keyword is specified will determine the order in which the data will be returned
        by the command. One or more of the following keywords, separated by colons ':'
        are used to specify the argument value. itemIndex  : sequential item number
        (0-based)itemName   : item name (string)itemLabel  : item display label
        (string)itemDescription : item description field (string)itemLevel  : item
        hierarchy level (0-n)itemIsGroup : (boolean 0 or 1) indicates whether or not
        this item is a groupitemIsAttribute : (boolean 0 or 1) indicates whether or not
        this item is an attributeitemNumChildren: number of immediate children (groups
        or attributes) of this itemitemAttrType : item attribute type
        (string)itemCallback : item callback field (string)
    
    - itemList : il                  (bool)          [query]
        Used in query mode, the command will return a list of information for each item
        in the view.  The viewName flag is used to select the view to query. The
        information returned about each item is determined by the itemInfo argument
        value. For efficiency, it is best to query all necessary item information at one
        time (to avoid recomputing the view information on each call).
    
    - viewDescription : vd           (bool)          [query]
        Used in query mode, returns the description field associated with the selected
        view. If no description was defined for this view, the value will be empty.
    
    - viewLabel : vb                 (bool)          [query]
        Used in query mode, returns the display label associated with the view. An
        appropriate label suitable for the user interface will be returned based on the
        selected view.  Use of the view label is usually more suitable than the view
        name for display purposes.
    
    - viewList : vl                  (bool)          [query]
        Used in query mode, command will return a list of all views defined for the
        given target (container or template).
    
    - viewName : vn                  (unicode)       [query]
        Used in query mode, specifies the name of the queried view when used in
        conjunction with a template target. When used in conjunction with a container
        target, it requires no string argument, and returns the name of the currently
        active view associated with the container; this value may be empty if the
        current view is not a valid template view or is generated by one of the built-in
        views modes. For this reason, the view label is generally more suitable for
        display purposes. In query mode, this flag can accept a value.Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.baseView`
    """
    pass
def dR_activeHandleXY(*args, **kwargs): pass
def BrushAnimationMarkingMenu(*args, **kwargs): pass
def MergeUV(*args, **kwargs): pass
def nurbsCurveToBezier(*args, **kwargs): pass
def ShowMeshWaxToolOptions(*args, **kwargs): pass
def U3DBrushSizeOn(*args, **kwargs): pass
def cmdaiMaterialx(*args, **kwargs): pass
def HairScaleTool(*args, **kwargs): pass
def MakeLightLinks(*args, **kwargs): pass
def SelectAllImagePlanes(*args, **kwargs): pass
def subdMapCut(*args, **kwargs): pass
def CreateBlendShape(*args, **kwargs): pass
def TimeEditorDeleteClips(*args, **kwargs): pass
def BakeDeformerTool(*args, **kwargs): pass
def SculptMeshActivateBrushSize(*args, **kwargs): pass
def PolygonBooleanDifference(*args, **kwargs): pass
def dR_softSelStickyPress(*args, **kwargs): pass
def PolyExtrudeEdgesOptions(*args, **kwargs): pass
def CenterViewOfSelection(*args, **kwargs): pass
def copyDeformerWeights(*args, **kwargs):
    """
    Command to copy or mirror the deformer weights accross one  of the three major
    axes.  The command can be used to mirror  weights either from one surface to
    another or within the  same surface.                 In query mode, return type
    is based on queried flag.
    
    Flags:
    - destinationDeformer : dd       (unicode)       [create,query,edit]
        Specify the deformer used by the destination shape
    
    - destinationShape : ds          (unicode)       [create,query,edit]
        Specify the destination deformed shape
    
    - mirrorInverse : mi             (bool)          [create,query,edit]
        Values are mirrored from the positive side to the negative.  If this flag is
        used then the direction is inverted.
    
    - mirrorMode : mm                (unicode)       [create,query,edit]
        The mirrorMode flag defines the plane of mirroring (XY, YZ, or XZ) when the
        mirror flag is used. The default plane is XY.
    
    - noMirror : nm                  (bool)          [create,query,edit]
        When the no mirror flag is used, the weights are copied instead of mirrored.
    
    - smooth : sm                    (bool)          [create,query,edit]
        When the smooth flag is used, the weights are smoothly interpolated between the
        closest vertices, instead of assigned from the single closest.
    
    - sourceDeformer : sd            (unicode)       [create,query,edit]
        Specify the deformer whose weights should be mirrored.  When queried, returns
        the deformers used by the source shapes.
    
    - sourceShape : ss               (unicode)       [create,query,edit]
        Specify the source deformed shape
    
    - surfaceAssociation : sa        (unicode)       [create,query,edit]
        The surfaceAssociation flag controls how the weights are transferred between the
        surfaces: closestPoint, rayCast, or closestComponent. The default is
        closestComponent.
    
    - uvSpace : uv                   (unicode, unicode) [create,query,edit]
        The uvSpace flag indicates that the weight transfer should occur in UV space,
        based on the source and destination UV sets specified.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.copyDeformerWeights`
    """
    pass
def FreezeTransformationsOptions(*args, **kwargs): pass
def HideLights(*args, **kwargs): pass
def TransformNoSelectOffTool(*args, **kwargs): pass
def DeleteAllFluids(*args, **kwargs): pass
def CreateCurveField(*args, **kwargs): pass
def regionSelectKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to scale keyframes within the
    graph editor using the region select tool.
    
    Flags:
    - bottomManip : bot              (float)         [query]
        Get a point located inside the bottom manipulator of the region box, in screen
        space.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - leftManip : lft                (float)         [query]
        Get a point located inside the left manipulator of the region box, in screen
        space.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - rightManip : rgt               (float)         [query]
        Get a point located inside the right manipulator of the region box, in screen
        space.
    
    - topManip : top                 (float)         [query]
        Get a point located inside the top manipulator of the region box, in screen
        space.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.regionSelectKeyCtx`
    """
    pass
def FBIKLabelRight(*args, **kwargs): pass
def dR_nexCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.dR_nexCmd`
    """
    pass
def ToggleInViewMessage(*args, **kwargs): pass
def UVGatherShells(*args, **kwargs): pass
def DeleteSurfaceFlow(*args, **kwargs): pass
def psdTextureFile(*args, **kwargs):
    """
    Creates a Photoshop file with UVSnap shot image and the layer set names as the
    input.
    
    Dynamic library stub function 
    
    Flags:
    - channelRGB : chc               (unicode, int, int, int, int) [create]
        (M) Layer set names, index, red, green and blue values are given as input. Using
        this flag, the layers created can be filled with specified colors.  This is a
        multi use flag.  The index specifies the placement order of layer sets in the
        created file.
    
    - channels : chs                 (unicode, int, bool) [create]
        (M) Layer set names and index are given as input. This is a multi use flag. A
        layer set with the given name will be created.  The second argument is the index
        which specifies the placement order of layer sets in the created file. The third
        argument is a boolean, if truea layer is created inside the layer set ,
        falsecreates an  empty layer set
    
    - imageFileName : ifn            (unicode, unicode, int) [create]
        Image file name, Layerset name and index.  The image in the file will be
        transferred to layer set specified.  The index specifies the placement order of
        layer sets in the created psd file.  The image file specified can be in any of
        the formats supported by maya (ex. iff, jpg, gif, tif etc.)
    
    - psdFileName : psf              (unicode)       [create]
        PSD file name.
    
    - snapShotImageName : ssi        (unicode)       [create]
        Image file name on the disk containing UV snapshot / reference image.
    
    - uvSnapPostionTop : uvt         (bool)          [create]
        Specifies the position of UV snapshot image layer  in the PSD file.
        Truepositions this layer at the top and Falsepositions the layer at the bottom
        next to the background layer in the PSD file
    
    - xResolution : xr               (int)           [create]
        X - resolution of the image.
    
    - yResolution : yr               (int)           [create]
        Y - resolution of the image.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.psdTextureFile`
    """
    pass
def MatchPivots(*args, **kwargs): pass
def dR_movePress(*args, **kwargs): pass
def bifSaveFrame(*args, **kwargs):
    """
    Flags:
    - attribute : a                  (unicode)       []
    
    - directory : dir                (unicode)       []
    
    - help : h                       (bool)          []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.bifSaveFrame`
    """
    pass
def ReferenceEditor(*args, **kwargs): pass
def HypershadeDisplayNoShapes(*args, **kwargs): pass
def SelectAllSubdivGeometry(*args, **kwargs): pass
def CreateJiggleDeformer(*args, **kwargs): pass
def ParentBaseWire(*args, **kwargs): pass
def GetToonExample(*args, **kwargs): pass
def timeEditor(*args, **kwargs): pass
def ToggleEffectsMeshDisplay(*args, **kwargs): pass
def PolygonSoftenHarden(*args, **kwargs): pass
def XgConvertInteractiveGroomToPoly(*args, **kwargs): pass
def AddBifrostCollider(*args, **kwargs): pass
def snapshotBeadContext(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.snapshotBeadContext`
    """
    pass
def AnimationSweepOptions(*args, **kwargs): pass
def FBXImportMergeBackNullPivots(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportMergeBackNullPivots`
    """
    pass
def FBIKLabelRoot(*args, **kwargs): pass
def fluidDeleteCacheOpt(*args, **kwargs): pass
def StraightenUVBorderOptions(*args, **kwargs): pass
def cacheFile(*args, **kwargs):
    """
    Creates one or more cache files on disk to store attribute data for a span of
    frames. The caches can be created for points/normals on a geometry (using the
    pts/points or pan/pointsAndNormals flag), for vectorArray output data (using the
    oa/outAttr flag), or for additional node specific data (using the
    cnd/cacheableNode flag for those nodes that support it). When the ia/inAttr flag
    is used, connects a cacheFile node that associates the data file on disk with
    the attribute. Frames can be replaced/appended to an existing cache with the
    rcf/replaceCachedFrame and apf/appendFrame flag.  Replaced frames are never
    deleted. They are stored in the same directory as the original cache files with
    the name provided by the f/fileName flag. If no file name is provided, the
    cacheFile name is prefixed with backupfollowed by a unique number. Single file
    caches are backed up in their entirety. To revert to an older version, simply
    attach to this cache. One file per frame caches only backup the description file
    and the frames that were replaced. To recover these types of caches, the user
    must rename these files to the original name.
    
    Flags:
    - appendFrame : apf              (bool)          [create]
        Appends data to the cache for the times specified by the startTime and endTime
        flags. If no time is provided, appends the current time. Must be used in
        conjunction with the pts/points or cnd/cacheableNode flag. Any overwritten
        frames will not be deleted, but renamed as specified by the f/fileName flag.
    
    - attachFile : af                (bool)          [create]
        Used to indicate that rather than creating a cache file, that an existing cache
        file on disk should be attached to an attribute in the scene. The inAttr flag is
        used to specify the attribute.
    
    - cacheFileNode : cfn            (unicode)       [create]
        Specifies the name of the cache file node(s) we are appending/replacing to if
        more than one cache is attached to the specified geometries.
    
    - cacheFormat : cf               (unicode)       [create,query]
        Cache file format, default is Maya's .mcx format, but others available via
        plugin
    
    - cacheInfo : ci                 (unicode)       [create,query]
        In create mode, used to specify a mel script returning a string array. When
        creating the cache, this mel script will be executed and the returned strings
        will be written to the .xml description file of the cache. In query mode,
        returns descriptive info stored in the cacheFile such as the user name, Maya
        scene name and maya version number.
    
    - cacheableAttrs : cat           (unicode)       [query]
        Returns the list of cacheable attributes defined on the accompanying cache node.
        This argument requires the use of the cacheableNode flag.
    
    - cacheableNode : cnd            (unicode)       [create]
        Specifies the name of a cacheable node whose contents will be cached. A
        cacheable node is a node that is specially designed to work with the caching
        mechanism.  An example of a cacheable node is a nCloth node.
    
    - channelIndex : chi             (bool)          [create,query]
        A query-only flag which returns the channel index for the selected geometry for
        the cacheFile node specified using the cacheFileNode flag.
    
    - channelName : cnm              (unicode)       [create,query]
        When attachFile is used, used to indicate the channel in the file that should be
        attached to inAttr.  If not specified, the first channel in the file is used. In
        query mode, allows user to query the channels associated with a description
        file.
    
    - convertPc2 : pc2               (bool)          [create]
        Convert a PC2 file to the Maya cache format (true), or convert Maya cache to pc2
        format (false)
    
    - createCacheNode : ccn          (bool)          [create]
        Used to indicate that rather than creating a cache file, that a cacheFile node
        should be created related to an existing cache file on disk.
    
    - creationChannelName : cch      (unicode)       [create]
        When creating a new cache, this multi-use flag specifies the channels to be
        cached. The names come from the cacheable channel names defined by the object
        being cached. If this flag is not used when creating a cache, then all cacheable
        channels are cached.
    
    - dataSize : dsz                 (bool)          [query]
        This is a query-only flag that returns the size of the data being cached per
        frame. This flag is to be used in conjunction with the cacheableNode, points,
        pointsAndNormals and outAttr flags.
    
    - deleteCachedFrame : dcf        (bool)          [create]
        Deletes cached data for the times specified by the startTime/endTime flags. If
        no time is provided, deletes the current frame. Must be used in conjunction with
        the pts/points or cnd/cacheableNode flag. Deleted frames will not be removed
        from disk, but renamed as specified by the f/fileName flag.
    
    - descriptionFileName : dfn      (bool)          [query]
        This is a query-only flag that returns the name of the description file for an
        existing cacheFile node. Or if no cacheFile node is specified, it returns the
        description file name that would be created based on the other flags specified.
    
    - directory : dir                (unicode)       [create,query]
        Specifies the directory where the cache files will be located. If the directory
        flag is not specified, the cache files will be placed in the project data
        directory.
    
    - doubleToFloat : dtf            (bool)          [create]
        During cache creation, double data is stored in the file as floats.  This helps
        cut down file size.
    
    - endTime : et                   (time)          [create]
        Specifies the end frame of the cache range.
    
    - fileName : f                   (unicode)       [create,query]
        Specifies the base file name for the cache files. If more than one object is
        being cached and the format is OneFilePerFrame, each cache file will be prefixed
        with this base file name. In query mode, returns the files associated with the
        specified cacheFile node. When used with rpf/replaceCachedFrame or
        apf/appendFrame specifies the name of the backup files. If not specified,
        replaced frames will be stored with a default name. In query mode, this flag can
        accept a value.
    
    - format : fm                    (unicode)       [create]
        Specifies the distribution format of the cache.  Valid values are OneFileand
        OneFilePerFrame
    
    - geometry : gm                  (bool)          [query]
        A query flag which returns the geometry controlled by the specified cache node
    
    - inAttr : ia                    (unicode)       [create]
        Specifies the name of the attribute that the cache file will drive. This file is
        optional when creating cache files. If this flag is not used during create mode,
        the cache files will be created on disk, but will not be driving anything in the
        scene. This flag is required when the attachFile flag is used.
    
    - inTangent : it                 (unicode)       [create]
        Specifies the in-tangent type when interpolating frames before the replaced
        frame(s). Must be used with the ist/interpStartTime and iet/interpEndTime flags.
        Valid values are linear, smoothand step.
    
    - interpEndTime : iet            (time)          [create]
        Specifies the frame until which there will be linear interpolation, beginning at
        endTime. Must be used with the rpf/replaceCachedFrame or apf/appendFrame flag.
        Interpolation is achieved by removing frames between endTime and interpEndTime
        from the cache. Removed frames will be renamed as specified by the f/fileName
        flag.
    
    - interpStartTime : ist          (time)          [create]
        Specifies the frame from which to begin linear interpolation, ending at
        startTime. Must be used with the rpf/replaceCachedFrame or apf/appendFrame
        flags. Interpolation is achieved by removing  frames between interpStartTime and
        startTime from the cache. These removed frames will will be renamed as specified
        by the f/fileName flag.
    
    - noBackup : nb                  (bool)          [create]
        Specifies that backup files should not be created for any files that may be
        over-written during append, replace or delete cache frames. Can only be used
        with the apf/appendFrame, rpf/replaceCachedFrame or dcf/deleteCachedFrame flags.
    
    - outAttr : oa                   (unicode)       [create]
        Specifies the name of the attribute that will be cached to disk.
    
    - outTangent : ot                (unicode)       [create]
        Specifies the out-tangent type when interpolating frames after the replaced
        frame(s). Must be used with the ist/interpStartTime and iet/interpEndTime flags.
        Valid values are linear, smoothand step.
    
    - pc2File : pcf                  (unicode)       [create]
        Specifies the full path to the pc2 file.  Must be used in conjunction with the
        pc2 flag.
    
    - pointCount : pc                (bool)          [query]
        A query flag which returns the number of points stored in the cache file. The
        channelName flag should be used to specify the channel to be queried.
    
    - points : pts                   (unicode)       [create]
        Specifies the name of a geometry whose points will be cached.
    
    - pointsAndNormals : pan         (unicode)       [create]
        Specifies the name of a geometry whose points and normals will be cached. The
        normals is per-vertex per-polygon. The normals cache cannot be imported back to
        geometry. This flag can only be used to export cache file. It cannot be used
        with the apf/appendFrame, dcf/deleteCachedFrame and rpf/replaceCachedFrame
        flags.
    
    - prefix : p                     (bool)          [create]
        Indicates that the specified fileName should be used as a prefix for the
        cacheName.
    
    - refresh : r                    (bool)          [create]
        When used during cache creation, forces a screen refresh during caching. This
        causes the cache creation to be slower but allows you to see how the simulation
        is progressing during the cache.
    
    - replaceCachedFrame : rcf       (bool)          [create]
        Replaces cached data for the times specified by the startTime/endTime flags. If
        no time is provided, replaces cache file for the current time. Must be used in
        conjunction with the pts/points or cnd/cacheableNode flag. Replaced frames will
        not be deleted, but renamed as specified by the f/fileName flag.
    
    - replaceWithoutSimulating : rws (bool)          [edit]
        When replacing cached frames, this flag specifies whether the replacement should
        come from the cached node without simulating or from advancing time and letting
        the simulation run.  This flag is valid only when neither the startTime nor
        endTime flags are used or when both the startTime and endTime flags specify the
        same time value.
    
    - runupFrames : rf               (int)           [create,query,edit]
        Specifies the number of frames of runup to simulate ahead of the starting frame.
        The value must be greater than or equal to 0.  The default is 2.
    
    - sampleMultiplier : spm         (int)           [create,query,edit]
        Specifies the sample rate when caches are being created as a multiple of
        simulation Rate. If the value is 1, then a sample will be cached everytime the
        time is advanced.  If the value is 2, then every other sample will be cached,
        and so on.  The default is 1.
    
    - simulationRate : smr           (time)          [create,query,edit]
        Specifies the simulation rate when caches are being created.  During cache
        creation, the time will be advanced by the simulation rate, until the end time
        of the cache is reached or surpassed.  The value is given in frames. The default
        value is 1 frame.
    
    - singleCache : sch              (bool)          [create]
        When used in conjunction with the points, pointsAndNormal or cacheableNode flag,
        specifies whether multiple geometries should be put into a single cache or to
        create one cache per geometry (default).
    
    - startTime : st                 (time)          [create]
        Specifies the start frame of the cache range.
    
    - staticCache : sc               (bool)          [create,query]
        If false, during cache creation, do not save a cache for the object if it
        appears to have no animation or deformation. If true, save a cache even if the
        object appears to have no animation or deformation. Default is true. In query
        mode, when supplied a shape, the flag returns true if the shape appears to have
        no animation or deformation.
    
    - worldSpace : ws                (bool)          [create]
        If the points flag is used, turning on this flag will result in the world space
        positions of the points being written. The expected use of this flag is for
        cache export.                                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cacheFile`
    """
    pass
def FBXExportQuaternion(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportQuaternion`
    """
    pass
def GraphEditorStackedView(*args, **kwargs): pass
def TwistOptions(*args, **kwargs): pass
def createLayeredPsdFile(*args, **kwargs):
    """
    Creates a  layered PSD file with image names as input to individual layers
    
    Dynamic library stub function 
    
    Flags:
    - imageFileName : ifn            (unicode, unicode, unicode) [create]
        Layer name, blend mode, Image file name  The image in the file will be
        transferred to layer specified. The image file specified can be in any of the
        formats supported by maya (ex. iff, jpg, gif, tif etc.). The blend mode options
        are : Normal, Dissolve, Dark, Multiply, Color Burn, Linear Burn, Lighten,
        Screen, Color Dodge, Linear Dogde, Overlay, Soft Light, Hard Light, Dissolve,
        Vivid Light, Linear Light, Pin Light, Hard Mix, Difference, Exclusion, Hue,
        Saturation, Color,  Luminosity
    
    - psdFileName : psf              (unicode)       [create]
        PSD file name.
    
    - xResolution : xr               (int)           [create]
        X - resolution of the image.
    
    - yResolution : yr               (int)           [create]
        Y - resolution of the image.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.createLayeredPsdFile`
    """
    pass
def TangentConstraint(*args, **kwargs): pass
def SetFullBodyIKKeysAll(*args, **kwargs): pass
def PaintVertexColorToolOptions(*args, **kwargs): pass
def ResetReflectionOptions(*args, **kwargs): pass
def ProfilerToolReset(*args, **kwargs): pass
def HypershadePinByDefault(*args, **kwargs): pass
def SavePreferences(*args, **kwargs): pass
def Gravity(*args, **kwargs): pass
def CollapseSubdivSurfaceHierarchyOptions(*args, **kwargs): pass
def radioButton(*args, **kwargs): pass
def MakeShadowLinks(*args, **kwargs): pass
def ToggleInViewEditor(*args, **kwargs): pass
def CopyVertexSkinWeights(*args, **kwargs): pass
def ubercam(*args, **kwargs):
    """
    Use this command to create a ubercamwith equivalent behavior to all cameras used
    by shots in the sequencer.
    
    
    Derived from mel command `maya.cmds.ubercam`
    """
    pass
def ToggleCameraNames(*args, **kwargs): pass
def OpenProductResearch(*args, **kwargs): pass
def latticeDeformKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to deform key frames with
    lattice manipulator.  This context only works in the graph editor.
    
    Flags:
    - envelope : ev                  (float)         [query,edit]
        Specifies the influence of the lattice.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - latticeColumns : lc            (int)           [query,edit]
        Specifies the number column points the lattice contains.
    
    - latticeRows : lr               (int)           [query,edit]
        Specifies the number of rows the lattice contains.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - scaleLatticePts : slp          (bool)          [query,edit]
        Specifies if the selected lattice points should scale around the pick point. If
        this value is false the the default operation is 'move'                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.latticeDeformKeyCtx`
    """
    pass
def DuplicateEdgesOptions(*args, **kwargs): pass
def u3dOptimize(*args, **kwargs):
    """
    Flags:
    - borderintersection : bi        (bool)          []
    
    - iterations : ite               (int)           []
    
    - mapsize : ms                   (int)           []
    
    - power : pow                    (int)           []
    
    - roomspace : rs                 (int)           []
    
    - surfangle : sa                 (float)         []
    
    - triangleflip : tf              (bool)          []
    
    
    Derived from mel command `maya.cmds.u3dOptimize`
    """
    pass
def cmdScrollFieldReporter(*args, **kwargs): pass
def freezeOptions(*args, **kwargs):
    """
    This command provides access to the options used by the evaluation manager to
    handle propagation and recognition of when a node is in a frozen state. See the
    individual flags for the different options available. These values are all
    stored as user preferences and persist across sessions.
    
    Flags:
    - displayLayers : dl             (bool)          [create,query]
        If this option is enabled then any nodes that are in an enabled, invisible
        display layer will be considered to be frozen, and the frozen state will
        propagate accordingly.
    
    - downstream : dn                (unicode)       [create,query]
        Controls how frozen state is propagated downstream from currently frozen nodes.
        Valid values are nonefor no propagation, safefor propagation downstream only
        when all upstream nodes are frozen, and forcefor propagation downstream when any
        upstream node is frozen.
    
    - explicitPropagation : ep       (bool)          [create,query]
        When turned on this will perform an extra pass when the evaluation graph is
        constructed to perform intelligent propagation of the frozen state to related
        nodes as specified by the currently enabled options of the evaluation graph. See
        also runtimePropagation. This option performs more thorough propagation of the
        frozen state, but requires extra time for recalculating the evaluation graph.
    
    - invisible : inv                (bool)          [create,query]
        If this option is enabled then any nodes that are invisible, either directly or
        via an invisible parent node, will be considered to be frozen, and the frozen
        state will propagate accordingly.
    
    - referencedNodes : rn           (bool)          [create,query]
        If this option is enabled then any nodes that are referenced in from a frozen
        referenced node will also be considered to be frozen, and the frozen state will
        propagate accordingly.
    
    - runtimePropagation : rt        (bool)          [create,query]
        When turned on this will allow the frozen state to propagate during execution of
        the evaluation graph. See also explicitPropagation. This option allows frozen
        nodes to be scheduled for evaluation, but once it discovers a node that is
        frozen it will prune the evaluation based on the current set of enabled options.
        It only works in the downstream direction.
    
    - upstream : up                  (unicode)       [create,query]
        Controls how frozen state is propagated upstream from currently frozen nodes.
        Valid values are nonefor no propagation, safefor propagation upstream only when
        all downstream nodes are frozen, and forcefor propagation upstream when any
        downstream node is frozen.                               Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.freezeOptions`
    """
    pass
def SmokeOptions(*args, **kwargs): pass
def ShotPlaylistEditor(*args, **kwargs): pass
def HypershadeSelectShadingGroupsAndMaterials(*args, **kwargs): pass
def SubdividePolygonOptions(*args, **kwargs): pass
def NEmitFromObject(*args, **kwargs): pass
def NormalizeUVs(*args, **kwargs): pass
def pointCurveConstraint(*args, **kwargs):
    """
    The command enables direct manipulation of a NURBS curve. It does so by apply a
    position constraint at the specified parameter location on the NURBS curve. If
    construction history for the cmd is enabled, a locator is created to enable
    subsequent interactive manipulation of the curve. The locator position may be
    key framed or transformed and the curve1will try to match the position of the
    locator. The argument is a curve location
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - pointConstraintUVW : puv       (float, float, float) [create,query,edit]
        Point constraint parameter space location on input NURBS Object
    
    - pointWeight : pw               (float)         [create,query,edit]
        Point constraint weight. Determines how strong an influence the constraint has
        on the input NURBS object. Default:1.0
    
    - position : p                   (float, float, float) [create]
        The new desired position in space for the nurbs object at the specified
        parameter space component. If not specified, the position is taken to be the one
        evaluated at the parameter space component on the nurbs object.
    
    - replaceOriginal : rpo          (bool)          [create]
        Create in place(i.e., replace).                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    - weight : w                     (float)         [create]
        weight of the lsq constraint. The larger the weight, the least squares
        constraint is strictly met.                  Common flags
    
    
    Derived from mel command `maya.cmds.pointCurveConstraint`
    """
    pass
def polyMirrorFace(*args, **kwargs):
    """
    Mirror all the faces of the selected object.
    
    Flags:
    - axis : a                       (int)           [create,query,edit]
        Axis to mirror the object along Default:0
    
    - axisDirection : ad             (int)           [create,query,edit]
        Direction to mirror the object along Default:1
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - cutMesh : cm                   (bool)          []
    
    - direction : d                  (int)           [create,query,edit]
        Direction to mirror the object along Default:0
    
    - firstNewFace : fnf             (int)           []
    
    - flipUVs : fuv                  (int)           []
    
    - frozen : fzn                   (bool)          []
    
    - keepVertexIDs : kv             (bool)          []
    
    - lastNewFace : lnf              (int)           []
    
    - mergeMode : mm                 (int)           [create,query,edit]
        Merge mode to apply Default:1
    
    - mergeThreshold : mt            (float)         [create,query,edit]
        Tolerance to determine whether vertices should be merged. Default:0.001
    
    - mergeThresholdType : mtt       (int)           [create,query,edit]
        Merge mode to apply Default:0
    
    - mirrorAxis : ma                (int)           [create,query,edit]
        Mirror axis type selection Default:2
    
    - mirrorPlaneCenter : pc         (float, float, float) []
    
    - mirrorPlaneCenterX : pcx       (float)         []
    
    - mirrorPlaneCenterY : pcy       (float)         []
    
    - mirrorPlaneCenterZ : pcz       (float)         []
    
    - mirrorPlaneRotate : ro         (float, float, float) []
    
    - mirrorPlaneRotateX : rx        (float)         []
    
    - mirrorPlaneRotateY : ry        (float)         []
    
    - mirrorPlaneRotateZ : rz        (float)         []
    
    - mirrorPosition : mps           (float)         [create,query,edit]
        Custom mirror axis position Default:0.0
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - pivot : p                      (float, float, float) [create,query,edit]
        Pivot point of the mirror plane. Default:0.0, 0.0, 0.0
    
    - pivotX : px                    (float)         [create,query,edit]
        Translation X coord.
    
    - pivotY : py                    (float)         [create,query,edit]
        Translation Y coord.
    
    - pivotZ : pz                    (float)         [create,query,edit]
        Translation Z coord.
    
    - scalePivotX : spx              (float)         []
    
    - scalePivotY : spy              (float)         []
    
    - scalePivotZ : spz              (float)         []
    
    - smoothingAngle : sa            (float)         []
    
    - userSpecifiedPivot : pu        (bool)          []
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyMirrorFace`
    """
    pass
def createPolyPlatonicSolidCtx(*args, **kwargs):
    """
    Flags:
    - axis : ax                      (int)           []
    
    - createUVs : cuv                (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - doSubdivisionsCapsEdit : dsc   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sideLength : sl                (float)         []
    
    - solidType : st                 (int)           []
    
    
    Derived from mel command `maya.cmds.createPolyPlatonicSolidCtx`
    """
    pass
def clearDynStartState(*args, **kwargs): pass
def ExportSkinWeightMapsOptions(*args, **kwargs): pass
def hotkeySet(*args, **kwargs):
    """
    Manages hotkey sets in Maya. A hotkey set holds hotkey to command mapping
    information. Default hotkey sets are hotkey sets that are shipped together with
    Maya. They are locked and cannot be altered. A new hotkey set is always
    duplicated from an existing hotkey set. In create mode, users can choose to
    specify which hotkey set to duplicate by using the -source flag. A duplicated
    hotkey set is independent from the source hotkey set.
    
    Flags:
    - current : cu                   (bool)          [create,query,edit]
        Sets the hotkey set as the current active hotkey set. In query mode, returns the
        name of the current hotkey set.
    
    - delete : delete                (bool)          [edit]
        Deletes the hotkey set if it exists. Other flags are ignored. Returns true|false
        depending on the delete operation.
    
    - exists : ex                    (bool)          [create]
        Returns true|false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - export : ep                    (unicode)       [edit]
        Exports a hotkey set. The argument is used to specify a full path of the output
        file.
    
    - hotkeySetArray : hsa           (bool)          [query]
        Returns a string array of all existing hotkey set names.
    
    - ip : ip                        (unicode)       [edit]
        Imports a hotkey set. The argument is used to specify a full path of the hotkey
        set file to import.
    
    - rename : re                    (unicode)       [edit]
        Renames an existing hotkey set. All white spaces will be replaced with '_'
        during operation.
    
    - source : src                   (unicode)       [create]
        Specifies the source hotkey set. If flag is not provided, the current active
        hotkey set is used.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hotkeySet`
    """
    pass
def FBXExportAudio(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportAudio`
    """
    pass
def DeleteAllStrokes(*args, **kwargs): pass
def blend2(*args, **kwargs):
    """
    This command creates a surface by blending between given curves. This is an
    enhancement (more user control) compared to blend which is now obsolete.
    
    Flags:
    - autoAnchor : aa                (bool)          [create,query,edit]
        If true and both paths are closed, automatically determine the value on the
        right rail so that they match Default:true
    
    - autoNormal : an                (bool)          [create,query,edit]
        If true, the direction of each starting tangent is computed based on given
        geometry. Default:true
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - crvsInFirstRail : cfr          (int)           [create,query,edit]
        Number of curves in the first rail of the blend.
    
    - flipLeftNormal : fln           (bool)          [create,query,edit]
        If true, flip the starting tangent off the left boundary. Default:false
    
    - flipRightNormal : frn          (bool)          [create,query,edit]
        If true, flip the starting tangent off the right boundary. Default:false
    
    - frozen : fzn                   (bool)          []
    
    - leftAnchor : la                (float)         [create,query,edit]
        The reference parameter on the left boundary where the blend surface starts in
        the case of the closed rail. Default:0.0
    
    - leftEnd : le                   (float)         [create,query,edit]
        The reference parameter on the left boundary where the blend surface ends.
        Default:1.0
    
    - leftStart : ls                 (float)         [create,query,edit]
        The reference parameter on the left boundary where the blend surface starts.
        Default:0.0
    
    - multipleKnots : mk             (bool)          [create,query,edit]
        If true, use the new blend which produces fully multiple interior knots
        Default:true
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    - positionTolerance : pt         (float)         [create,query,edit]
        The positional C(0) tolerance of the blend surface to the adjacent surfaces.
        Default:0.1
    
    - reverseLeft : rvl              (bool)          [create,query,edit]
        If true, reverse the direction off the left boundary.  autoDirection must be
        false for this value to be considered. Default:false
    
    - reverseRight : rvr             (bool)          [create,query,edit]
        If true, reverse the direction of the right boundary.  autoDirection must be
        false for this value to be considered. Default:false
    
    - rightAnchor : ra               (float)         [create,query,edit]
        The reference parameter on the right boundary where the blend surface starts in
        the case of the closed rail. Default:0.0
    
    - rightEnd : re                  (float)         [create,query,edit]
        The reference parameter on the right boundary where the blend surface ends.
        Default:1.0
    
    - rightStart : rs                (float)         [create,query,edit]
        The reference parameter on the right boundary where the blend surface starts.
        Default:0.0
    
    - tangentTolerance : tt          (float)         [create,query,edit]
        The tangent G(1) continuity tolerance of the blend surface to the adjacent
        surfaces. Default:0.1                  Common flags
    
    
    Derived from mel command `maya.cmds.blend2`
    """
    pass
def displayStats(*args, **kwargs):
    """
    Flags:
    - frameRate : fr                 (bool)          []
    
    
    Derived from mel command `maya.cmds.displayStats`
    """
    pass
def dR_customPivotTool(*args, **kwargs): pass
def TimeEditorRippleEditTogglePress(*args, **kwargs): pass
def QualityDisplayMarkingMenu(*args, **kwargs): pass
def InteractiveBindSkin(*args, **kwargs): pass
def messageLine(*args, **kwargs): pass
def ShowHairSystems(*args, **kwargs): pass
def ToggleDisplayGradient(*args, **kwargs): pass
def NewtonOptions(*args, **kwargs): pass
def Birail2Options(*args, **kwargs): pass
def SendToUnrealSetProject(*args, **kwargs): pass
def ShowResultsOptions(*args, **kwargs): pass
def SetMeshGrabUVTool(*args, **kwargs): pass
def HypershadeDisplayAsList(*args, **kwargs): pass
def cmdArnoldMtoARenderView(*args, **kwargs): pass
def FBXImportSkeletonDefinitionsAs(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportSkeletonDefinitionsAs`
    """
    pass
def XgmSplineSelectReplaceBySelectedFaces(*args, **kwargs): pass
def Snap2PointsTo2PointsOptions(*args, **kwargs): pass
def CurveSmoothnessRough(*args, **kwargs): pass
def Create3DContainerEmitter(*args, **kwargs): pass
def moveVertexAlongDirection(*args, **kwargs):
    """
    The command moves the selected vertex ( control vertex ) in the specified unit
    direction by the given magnitude. The vertex(ices) may also be moved in the
    direction of unit normal ( -n flag ). For NURBS surface vertices the direction
    of movement could also be either in tangent along U or tangent along V.  The
    flags -n, -u, -v and -d are mutually exclusive, ie. the selected vertices can be
    all moved in only -n or -u or -v or -d.
    
    Flags:
    - direction : d                  (float, float, float) [create]
        move the vertex along the direction as specified. The direction is normalized.
    
    - magnitude : m                  (float)         [create]
        move by the specified magnitude in the direction vector.
    
    - normalDirection : n            (float)         [create]
        move components in the direction of normal by the given magnitude at the
        respective components. The normal is 'normalized'.
    
    - uDirection : u                 (float)         [create]
        move components in the direction of tangent along U at the respective components
        where appropriate. The flag is ignored for polygons, NURBS curves. The u
        direction is normalized.
    
    - uvNormalDirection : uvn        (float, float, float) [create]
        move in the triad space [u,v,n] at the respective components by the specified
        displacements. The flag is ignored for polygons, NURBS curves.
    
    - vDirection : v                 (float)         [create]
        move components in the direction of tangent along V at the respective components
        where appropriate. The flag is ignored for polygons, NURBS curves.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.moveVertexAlongDirection`
    """
    pass
def sbs_GetEngine(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetEngine`
    """
    pass
def TranslateToolMarkingMenuPopDown(*args, **kwargs): pass
def ShowLightManipulators(*args, **kwargs): pass
def AttributeEditor(*args, **kwargs): pass
def ScaleConstraintOptions(*args, **kwargs): pass
def fileDialog2(*args, **kwargs): pass
def SetMeshMaskTool(*args, **kwargs): pass
def dgdebug(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.dgdebug`
    """
    pass
def PolyAssignSubdivHole(*args, **kwargs): pass
def PolygonCopyOptions(*args, **kwargs): pass
def XgmSplinePresetExport(*args, **kwargs): pass
def XgmCreateInteractiveGroomSplinesOption(*args, **kwargs): pass
def PaintCacheTool(*args, **kwargs): pass
def FluidGradients(*args, **kwargs): pass
def PerspGraphHypergraphLayout(*args, **kwargs): pass
def nClothCreateOptions(*args, **kwargs): pass
def dgeval(*args, **kwargs):
    """
    The dgevalcommand is used to force a dependency graph evaluate of a node or
    plug.  Used for debugging to find propagation problems. Normally the selection
    list is used to determine which objects to evaluate, but you can add to the
    selection list by specifying which objects you want on the command line.
    
    Flags:
    - src : src                      (bool)          [create]
        This flag is obsolete. Do not use.
    
    - verbose : v                    (bool)          [create]
        If this flag is used then the results of the evaluation(s) is/are printed on
        stdout.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgeval`
    """
    pass
def ShowMeshFreezeToolOptions(*args, **kwargs): pass
def ToggleVertMetadata(*args, **kwargs): pass
def pluginInfo(*args, **kwargs): pass
def XgmSetCombBrushTool(*args, **kwargs): pass
def connectControl(*args, **kwargs):
    """
    This command attaches a UI widget, specified as the first argument, to one or
    more dependency node attributes. The attributes/nodes don't have to exist yet,
    they will get looked up as needed. With no flag specified, this command works on
    these kinds of controls: floatField, floatScrollBar, floatSlider, intField,
    intScrollBar, intSlider, floatFieldGrp, intFieldGrp, checkBox, radioCollection,
    and optionMenu. With the indexflag, It will also work on the individual
    components of all other groups. This command sets up a two-way connectionbetween
    the control and the (first-specified) attribute. If this first attribute is
    changed in any way, the control will be appropriately updated to match its
    value. Summary: if you change the control, ALL the connected attributes change.
    If you change the FIRST attribute attached to the control, then the control will
    change. NOTE: the two-way connection will not be established if the attributes
    do not exist when the connectControlcommand is run. If the user later uses the
    control, the connection will be established at that time. To effectively use
    connectControlwith radioCollections and optionMenus, you must attach a piece of
    data to each radioButton and menuItem. This piece of data (an integer) can be
    attached using the dataflag in the radioButtonand menuItemcommands. When the
    button/item is selected, the attribute will be set to the value of its data.
    When the attribute is changed, the collection (or optionMenu) will switch to the
    item that matches the new attribute value. If no item matches, it will be left
    unchanged. There are some specialized controls that have connection capability
    (and more) built right into them. See attrFieldSliderGrp, attrFieldGrp, and
    attrColorSliderGrp. Using these classes can be easier than using connectControl.
    
    Flags:
    - fileName : fi                  (bool)          [create]
        This flag causes the connection to be treated as a filename, and the conversion
        from internal to external filename representation is made as the data is copied.
        This only applies to connections to Tfield controls.
    
    - index : index                  (int)           [create]
        This flag enables you to pick out a sub-control from a group that contains a
        number of different controls. For example, you can connect one field of a
        floatFieldGrp.  You must count each member of the group, including any text
        labels that may exist.  For example, if you have a check box group with a label,
        the label will count as index 1, and the first check box as index 2.  (Indices
        are 1-based)
    
    - preventContextualMenu : pcm    (bool)          [create]
        If true, this flag will block the right mouse button menu of the associated
        control attribute.
    
    - preventOverride : po           (bool)          [create]
        If true, this flag disallows overriding the control's attribute via the
        control's right mouse button menu.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.connectControl`
    """
    pass
def SetCutSewUVTool(*args, **kwargs): pass
def SelectLightsShadowingObject(*args, **kwargs): pass
def RandomizeFolliclesOptions(*args, **kwargs): pass
def ShowStrokePathCurves(*args, **kwargs): pass
def BezierSetAnchorBroken(*args, **kwargs): pass
def ViewAlongAxisZ(*args, **kwargs): pass
def HypershadeRenderPerspLayout(*args, **kwargs): pass
def WaveOptions(*args, **kwargs): pass
def SetRigidBodyCollision(*args, **kwargs): pass
def dR_renderLastTGL(*args, **kwargs): pass
def gpuCache(*args, **kwargs):
    """
    Flags:
    - allDagObjects : ado            (bool)          []
    
    - animTimeRange : atr            (bool)          []
    
    - clashOption : clo              (unicode)       []
    
    - compressLevel : cl             (int)           []
    
    - dataFormat : df                (unicode)       []
    
    - directory : dir                (unicode)       []
    
    - dumpHierarchy : dh             (unicode)       []
    
    - endTime : et                   (time)          []
    
    - fileName : f                   (unicode)       []
    
    - filePrefix : fp                (unicode)       []
    
    - gpuDriverVersion : gdv         (bool)          []
    
    - gpuManufacturer : gma          (bool)          []
    
    - gpuMemorySize : gms            (bool)          []
    
    - gpuModel : gmo                 (bool)          []
    
    - listFileEntries : lfe          (bool)          []
    
    - listShapeEntries : lse         (bool)          []
    
    - optimizationThreshold : ot     (int)           []
    
    - optimize : o                   (bool)          []
    
    - optimizeAnimationsForMotionBlur : omb (bool)          []
    
    - prompt : p                     (bool)          []
    
    - refresh : r                    (bool)          []
    
    - refreshAll : ra                (bool)          []
    
    - refreshSettings : rs           (bool)          []
    
    - sampleMultiplier : spm         (int)           []
    
    - saveMultipleFiles : smf        (bool)          []
    
    - showFailed : sf                (bool)          []
    
    - showGlobalStats : sgs          (bool)          []
    
    - showStats : ss                 (bool)          []
    
    - simulationRate : smr           (time)          []
    
    - startTime : st                 (time)          []
    
    - useBaseTessellation : ubt      (bool)          []
    
    - waitForBackgroundReading : wbr (bool)          []
    
    - writeMaterials : wm            (bool)          []
    
    - writeUVs : wuv                 (bool)          []
    
    
    Derived from mel command `maya.cmds.gpuCache`
    """
    pass
def sceneUIReplacement(*args, **kwargs):
    """
    This command returns existing scene based UI that can be utilized by the scene
    that is being loaded. It can also delete any such UI that is not used by the
    loading scene.
    
    Flags:
    - clear : cl                     (bool)          [create]
        Frees any resources allocated by the command.
    
    - deleteRemaining : dr           (bool)          [create]
        Delete any UI that is scene dependent and has not been referenced by this
        command since the last update.
    
    - getNextFilter : gf             (unicode, unicode) [create]
        Returns the next filter of the specified type with the specified name.
    
    - getNextPanel : gp              (unicode, unicode) [create]
        Returns the next panel of the specified type, preferably with the specified
        label.
    
    - getNextScriptedPanel : gsp     (unicode, unicode) [create]
        Returns the next scripted panel of the specified scripted panel type, preferably
        with the specified label.
    
    - update : u                     (unicode)       [create]
        Updates the state of the command to reflect the current state of the
        application.  The string argument is the name of the main window pane layout
        holding the panels.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sceneUIReplacement`
    """
    pass
def PaintShrinkWrapWeightsToolOptions(*args, **kwargs): pass
def AlembicImport(*args, **kwargs): pass
def subdToBlind(*args, **kwargs):
    """
    The subdivision surface hierarchical edits will get copied into blind data on
    the given polygon.  The polygon face count and topology must match the
    subdivision surface base mesh face count and topology. If they don't, the blind
    data will still appear, but is not guaranteed to produce the same result when
    converted back to a subdivision surface. The command takes a single subdivision
    surface and a single polygonal object.  Additional subdivision surfaces or
    polygonal objects will be ignored.
    
    Flags:
    - absolutePosition : ap          (bool)          [create]
        If set to true, the hierarchical edits are represented as the point positions,
        not the point offsets.  Most of the time, this is not desirable, but if you're
        just going to be merging/deleting a bunch of things and not move any vertices,
        then you could set it to true.  False is the default and saves the offsets.
    
    - includeCreases : ic            (bool)          [create]
        If set, the creases get transfered as well.  With it false, the subdivision
        surface created from the blind data + polygon will have lost all the craese
        information.  The default is false.
    
    - includeZeroOffsets : izo       (bool)          [create]
        If set, the zero offset will get included in the blind data.  This will greatly
        increase the size of the blind data, but will also let you keep all created
        vertices in the conversion back to polys.  This flag does not change the
        behaviour for the vertices up to and including level 2 as they're always
        created.  If not set, only the edited vertices will be included in the blind
        data.  This will still maintain the shape of your object faithfully.  The
        default is false.                             Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdToBlind`
    """
    pass
def XgmSetPartBrushTool(*args, **kwargs): pass
def xgmSetActive(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    - objName : o                    (unicode)       []
    
    - previewer : p                  (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmSetActive`
    """
    pass
def nurbsToPolygonsPref(*args, **kwargs):
    """
    This command sets the values used by the nurbs-to-polygons (or tesselate)
    preference.  This preference is used by Maya menu items and is saved between
    Maya sessions. To query any of the flags, use the -queryflag. For more
    information on the flags, see the node documentation for the
    nurbsTessellatenode. In query mode, return type is based on queried flag.
    
    Flags:
    - chordHeight : cht              (float)         [create,query]
    
    - chordHeightRatio : chr         (float)         [create,query]
    
    - delta3D : d                    (float)         [create,query]
    
    - edgeSwap : es                  (bool)          [create,query]
    
    - format : f                     (int)           [create,query]
        Valid values are 0, 1 and 2.
    
    - fraction : ft                  (float)         [create,query]
    
    - matchRenderTessellation : mrt  (int)           [create,query]
    
    - merge : m                      (int)           [create,query]
    
    - mergeTolerance : mt            (float)         [create,query]
    
    - minEdgeLen : mel               (float)         [create,query]
    
    - polyCount : pc                 (int)           [create,query]
    
    - polyType : pt                  (int)           [create,query]
    
    - uNumber : un                   (int)           [create,query]
    
    - uType : ut                     (int)           [create,query]
    
    - useChordHeight : uch           (bool)          [create,query]
    
    - useChordHeightRatio : ucr      (bool)          [create,query]
    
    - vNumber : vn                   (int)           [create,query]
    
    - vType : vt                     (int)           [create,query]
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nurbsToPolygonsPref`
    """
    pass
def InTangentFixed(*args, **kwargs): pass
def showSelectionInTitle(*args, **kwargs):
    """
    This command causes the title of the window specified as an argument to be
    linked to the current file and selection. When selection changes, the window
    title will change to show the current file name and the name of the last
    selected object.
    
    
    Derived from mel command `maya.cmds.showSelectionInTitle`
    """
    pass
def LoadHIKPropertySetState(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.LoadHIKPropertySetState`
    """
    pass
def TimeEditorRippleEditToggleRelease(*args, **kwargs): pass
def SendAsNewScene3dsMax(*args, **kwargs): pass
def PreflightPolygonOptions(*args, **kwargs): pass
def TexSewDeactivateBrushSize(*args, **kwargs): pass
def PasteUVs(*args, **kwargs): pass
def texMoveUVShellContext(*args, **kwargs):
    """
    This command can be used to create, edit, or query a texture editor move manip
    context. Note that the above flags control the global behaviour of all texture
    editor move manip contexts.  Changing one context independently is not allowed.
    Changing a context's behaviour using the above flags, will change all existing
    texture editor move manip contexts.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - iterations : it                (int)           [query,edit]
        Sets or queries the number of iterations to perform.
    
    - mask : m                       (bool)          [query,edit]
        Sets or queries masking on the shell.
    
    - position : p                   (bool)          [query]
        Returns the current position of the manipulator
    
    - shellBorder : sb               (float)         [query,edit]
        Sets or queries the size of the shell border.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texMoveUVShellContext`
    """
    pass
def ModifyConstraintAxisOptions(*args, **kwargs): pass
def ArcLengthTool(*args, **kwargs): pass
def sound(*args, **kwargs):
    """
    Creates an audio node which can be used with UI commands such as soundControl or
    timeControl which support sound scrubbing and sound during playback.
    
    Flags:
    - endTime : et                   (time)          [create,query,edit]
        Time at which to end the sound.
    
    - file : f                       (unicode)       [create,query,edit]
        Name of sound file.
    
    - length : l                     (bool)          [query]
        Query the length (in the current time unit) of the sound.
    
    - mute : m                       (bool)          [create,query,edit]
        Mute the audio clip.
    
    - name : n                       (unicode)       [create,query,edit]
        Name to give the resulting audio node.
    
    - offset : o                     (time)          [create,query,edit]
        Time at which to start the sound.
    
    - sourceEnd : se                 (time)          [create,query,edit]
        Time offset from the start of the sound file at which to end the sound.
    
    - sourceStart : ss               (time)          [create,query,edit]
        Time offset from the start of the sound file at which to start the sound.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sound`
    """
    pass
def polySplitCtx2(*args, **kwargs):
    """
    Create a new context to split facets on polygonal objects                In
    query mode, return type is based on queried flag.
    
    Flags:
    - adjustEdgeFlow : aef           (float)         [create,query,edit]
        The weight value of the edge vertices to be positioned.
    
    - constrainToEdges : cte         (bool)          [create,query,edit]
        Enable/disable snapping to edge. If enabled any click in the current face will
        snap to the closest valid edge. If there is no valid edge, the click will be
        ignored. NOTE: This is different from magnet snapping, which causes the click to
        snap to certain points along the edge.
    
    - detachEdges : de               (bool)          []
    
    - edgeMagnets : em               (int)           [create,query,edit]
        number of extra magnets to snap onto, regularly spaced along the edge
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - highlightPointColor : hpc      (float, float, float) []
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
        Flags from nodes
    
    - insertWithEdgeFlow : ief       (bool)          [create,query,edit]
        True to enable edge flow. Otherwise, the edge flow is disabled.
    
    - snapTolerance : st             (float)         [create,query,edit]
        precision for custom magnet snapping. Range[0,1]. Value 1 means any click on an
        edge will snap to either extremities or magnets.
    
    - snappedToEdgeColor : sec       (float, float, float) [create,query,edit]
        Color for edge snapping.
    
    - snappedToFaceColor : sfc       (float, float, float) [create,query,edit]
        Color for face snapping.
    
    - snappedToMagnetColor : smc     (float, float, float) [create,query,edit]
        Color for magnet snapping.
    
    - snappedToVertexColor : svc     (float, float, float) [create,query,edit]
        Color for vertex snapping.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    - snappingTolerance : st         (float)         []
    
    - splitLineColor : slc           (float, float, float) []
    
    
    Derived from mel command `maya.cmds.polySplitCtx2`
    """
    pass
def PixelMoveUp(*args, **kwargs): pass
def HideJoints(*args, **kwargs): pass
def SelectAllDynamicConstraints(*args, **kwargs): pass
def ToggleFaceNormals(*args, **kwargs): pass
def journal(*args, **kwargs):
    """
    Flags:
    - comment : c                    (unicode)       []
    
    - flush : fl                     (bool)          []
    
    - highPrecision : hp             (bool)          []
    
    - state : st                     (bool)          []
    
    
    Derived from mel command `maya.cmds.journal`
    """
    pass
def BreakStereoRigs(*args, **kwargs): pass
def dR_selectTool(*args, **kwargs): pass
def EnableWeightPostNrm(*args, **kwargs): pass
def SetWorkingFrame(*args, **kwargs): pass
def skinPercent(*args, **kwargs):
    """
    This command edits and queries the weight values on members of a skinCluster
    node, given as the first argument. If no object components are explicitly
    mentioned in the command line, the current selection list is used. Note that
    setting multiple weights in a single invocation of this command is far more
    efficient than calling it once per weighted vertex. In query mode, return type
    is based on queried flag.
    
    Flags:
    - ignoreBelow : ib               (float)         [query]
        Limits the output of the -value and -transform queries to the entries whose
        weight values are over the specified limit.  This flag has to be used before the
        -query flag.
    
    - normalize : nrm                (bool)          [create]
        If set, the weights not assigned by the -transformValue flag are normalized so
        that the sum of the all weights for the selected object component add up to 1.
        The default is on. NOTE: The skinCluster has a normalizeWeights attribute which
        when set to OFF overrides this attribute! If the skinCluster.normalizeWeights
        attribute is OFF, you must set it to Interactive in order to normalize weights
        using the skinPercent command.
    
    - pruneWeights : prw             (float)         [create]
        Sets to zero any weight smaller than the given value for all the selected
        components. To use this command to set all the weights to zero, you must turn
        the -normalize flag offor the skinCluster node will normalize the weights to sum
        to one after pruning them. Weights for influences with a true value on their
        Hold Weightsattribute will not be pruned.
    
    - relative : r                   (bool)          [create]
        Used with -transformValue to specify a relative setting of values. If -relative
        is true, the value passed to -tv is added to the previous value.  Otherwise, it
        replaces the previous value.
    
    - resetToDefault : rtd           (bool)          [create]
        Sets the weights of the selected components to their default values, overwriting
        any custom weights.
    
    - transform : t                  (unicode)       [query]
        In Mel, when used after the -query flag (without an argument) the command
        returns an array of strings corresponding to the names of the transforms
        influencing the selected object components.  If used before the -query flag
        (with a transform name), the command returns the weight of the selected object
        component corresponding to the given transform. The command will return an
        average weight if several components have been selected.  In Python, when used
        with None instead of the name of the transform, the command returns an array of
        strings corresponding to the names of the transforms influencing the selected
        object components. If used with a transform name, the command returns the weight
        of the selected object. The command will return an average weight if several
        components have been selected.        In query mode, this flag can accept a
        value.
    
    - transformMoveWeights : tmw     (unicode)       [create]
        This flag is used to transfer weights from a source influence to one or more
        target influences. It acts on the selected vertices. The flag must be used at
        least twice to generate a valid command. The first flag usage indicates the
        source influence from which the weights will be copied. Subsequent flag usages
        indicate the target influences.
    
    - transformValue : tv            (unicode, float) [create]
        Accepts a pair consisting of a transform name and a value and assigns that value
        as the weight of the selected object components corresponding to the given
        transform.
    
    - value : v                      (bool)          [query]
        Returns an array of doubles corresponding to the joint weights for the selected
        object component.
    
    - zeroRemainingInfluences : zri  (bool)          [create]
        If set, the weights not assigned by the -transformValue flag are set to 0. The
        default is off.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.skinPercent`
    """
    pass
def TogglePanZoomPress(*args, **kwargs): pass
def ClearPaintEffectsView(*args, **kwargs): pass
def MovePolygonComponent(*args, **kwargs): pass
def RandomizeShells(*args, **kwargs): pass
def MakeCollide(*args, **kwargs): pass
def HypershadeToggleShowNamespace(*args, **kwargs): pass
def canCreateCaddyManip(*args, **kwargs):
    """
    This command returns true if there can be a manipulator made for the specified
    selection, false otherwise.
    
    
    Derived from mel command `maya.cmds.canCreateCaddyManip`
    """
    pass
def commandPort(*args, **kwargs): pass
def polyCircularizeFace(*args, **kwargs):
    """
    Mirror all the faces of the selected object.
    
    Flags:
    - alignment : al                 (int)           [create,query,edit]
        How the circle should be  oriented relative to the surface Default:0
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createCurve : cc               (bool)          [create]
        If true then the operation can create a curve.
    
    - divisions : d                  (int)           []
    
    - evenlyDistribute : ed          (bool)          [create,query,edit]
        Should the point be evenly distributed around the circle Default:true
    
    - frozen : fzn                   (bool)          []
    
    - inputCurve : inc               (PyNode)        [create]
        This flag specifies the name of the curve to be used as input for the operation.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normalOffset : no              (float)         []
    
    - normalOrientation : nor        (int)           [create,query,edit]
        What calculation to use to get circle plane normal Default:0
    
    - radialOffset : ro              (float)         [create,query,edit]
        The amount the circle points should be translated along radius Default:0.0
    
    - relaxInterior : ri             (float)         []
    
    - smoothingAngle : sa            (float)         [create,query,edit]
        The angle that decides which resulting faces are hard or soft Default:30.0
    
    - supportingEdges : se           (int)           []
    
    - twist : t                      (float)         []
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCircularizeFace`
    """
    pass
def polyQuad(*args, **kwargs): pass
def RemoveMaterialSoloing(*args, **kwargs): pass
def sbs_GetEnumCount(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetEnumCount`
    """
    pass
def CreateSpringConstraintOptions(*args, **kwargs): pass
def DeleteAllImagePlanes(*args, **kwargs): pass
def PerspRelationshipEditorLayout(*args, **kwargs): pass
def xgmCreateSplineDescription(*args, **kwargs):
    """
    Flags:
    - area : a                       (bool)          []
    
    - assignSurfaceShader : ass      (bool)          []
    
    - createDefaultHair : c          (bool)          []
    
    - cvCount : cv                   (int)           []
    
    - density : d                    (float)         []
    
    - generatorSeed : gs             (int)           []
    
    - length : l                     (float)         []
    
    - maxCVs : mP                    (bool)          []
    
    - maxDensity : mD                (bool)          []
    
    - maxLength : mL                 (bool)          []
    
    - name : n                       (unicode)       []
    
    - width : w                      (float)         []
    
    - widthScale : ws                (float)         []
    
    
    Derived from mel command `maya.cmds.xgmCreateSplineDescription`
    """
    pass
def polyUVStackSimilarShells(*args, **kwargs):
    """
    Stack Similar UV Shells.
    
    Flags:
    - onlyMatch : om                 (bool)          [create]
        If this flag is true, only match UV shells and return UVs of target UV shells
        but don't stack.
    
    - tolerance : to                 (float)         [create]
        The tolerance setting for stacking how similar UV shells.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyUVStackSimilarShells`
    """
    pass
def DisableAll(*args, **kwargs): pass
def PruneSmallWeights(*args, **kwargs): pass
def toggleAxis(*args, **kwargs):
    """
    Toggles the state of the display axis. Note: the display of the axis in the
    bottom left corner has been rendered obsolete by the headsUpDisplay command.
    
    Flags:
    - origin : o                     (bool)          [create,query]
        Turns display of the axis at the origin of the ground plane on or off.
    
    - view : v                       (bool)          [create,query]
        Turns display of the axis at the bottom left of each view on or off. (Obsolete -
        refer to the headsUpDisplay command)                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.toggleAxis`
    """
    pass
def PlaybackToggle(*args, **kwargs): pass
def LongPolygonNormals(*args, **kwargs): pass
def NParticleToolOptions(*args, **kwargs): pass
def AddOceanDynamicLocatorOptions(*args, **kwargs): pass
def boundary(*args, **kwargs): pass
def GraphCopyOptions(*args, **kwargs): pass
def UpdateReferenceSurface(*args, **kwargs): pass
def orbitCtx(*args, **kwargs):
    """
    Create, edit, or query an orbit context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - localOrbit : lo                (bool)          [create,query,edit]
        Orbit around the camera's center of interest.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - orbitScale : os                (float)         [create,query,edit]
        In degrees of rotation per 100 pixels of cursor drag.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.orbitCtx`
    """
    pass
def dynSelectCtx(*args, **kwargs):
    """
    Flags:
    - enable : enb                   (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.dynSelectCtx`
    """
    pass
def AddFaceDivisions(*args, **kwargs): pass
def CreateVolumeLight(*args, **kwargs): pass
def OpenCloseCurve(*args, **kwargs): pass
def AssignOfflineFileFromRefEd(*args, **kwargs): pass
def SoloMaterial(*args, **kwargs): pass
def AssignToonShaderRimLight(*args, **kwargs): pass
def renderSetupSelect(*args, **kwargs):
    """
    Flags:
    - additive : a                   (bool)          []
    
    - collections : c                (bool)          []
    
    - deselect : d                   (bool)          []
    
    - overrides : o                  (bool)          []
    
    - renderLayers : rl              (bool)          []
    
    - renderSettingsChildCollections : rc (bool)          []
    
    
    Derived from mel command `maya.cmds.renderSetupSelect`
    """
    pass
def TemplateBrushSettings(*args, **kwargs): pass
def polyCreaseCtx(*args, **kwargs):
    """
    Create a new context to crease components on polygonal objects           In
    query mode, return type is based on queried flag.
    
    Flags:
    - createSet : cs                 (unicode)       [edit]
        Creates a set for the selected components.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - extendSelection : es           (bool)          [create,query,edit]
        Enable/disable extending selection to all connected creased components.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - relative : r                   (bool)          [create,query,edit]
        Enable/disable applying value relative to existing crease value. If disabled,
        absolute value is applied.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCreaseCtx`
    """
    pass
def RenderIntoNewWindow(*args, **kwargs): pass
def deleteExtension(*args, **kwargs):
    """
    This command is used to delete an extension attribute from a node type. The
    attribute can be specified by using either the long or short name. Only one
    extension attribute can be deleted at a time. Children of a compound attribute
    cannot be deleted, you must delete the complete compound attribute. This command
    has no undo, edit, or query capabilities.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Specify either the long or short name of the attribute.
    
    - forceDelete : fd               (bool)          [create]
        If this flag is set and turned ON then data values for the extension attributes
        are all deleted without confirmation. If it's set and turned OFF then any
        extension attributes that have non-default values set on any node will remain in
        place. If this flag is not set at all then the user will be asked if they wish
        to preserve non-default values on this attribute.
    
    - nodeType : nt                  (unicode)       [create]
        The name of the node type.                                 Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deleteExtension`
    """
    pass
def manipPivot(*args, **kwargs):
    """
    Changes transform component pivot used by the move/rotate/scale manipulators.
    In query mode, return type is based on queried flag.
    
    Flags:
    - moveToolOri : mto              (int)           [create]
        Change move tool's axis orientation to the specified mode. This flag is the same
        as using manipMoveContext -e -modeon the Move tool except that this command is
        undoable.
    
    - ori : o                        (float, float, float) [create,query]
        Component pivot orientation in world-space.
    
    - oriValid : ov                  (bool)          [query]
        Returns true if component pivot orientation is valid.
    
    - orientation : o                (float, float, float) []
    
    - pinPivot : pin                 (bool)          [create,query]
        Pin component pivot. Selection changes will not reset the pivot
        position/orientation when a custom pivot is set and pinning is on.
    
    - pos : p                        (float, float, float) [create,query]
        Component pivot position in world-space.
    
    - posValid : pv                  (bool)          [query]
        Returns true if component pivot position is valid.
    
    - position : p                   (float, float, float) []
    
    - reset : r                      (bool)          [create]
        Clear the saved component pivot position and orientation.
    
    - resetOri : ro                  (bool)          [create]
        Clear the saved component pivot orientation.
    
    - resetPos : rp                  (bool)          [create]
        Clear the saved component pivot position.
    
    - rotateToolOri : rto            (int)           [create]
        Change rotate tool's axis orientation to the specified mode. This flag is the
        same as using manipRotateContext -e -modeon the Rotate tool except that this
        command is undoable.
    
    - scaleToolOri : sto             (int)           [create]
        Change scale tool's axis orientation to the specified mode. This flag is the
        same as using manipScaleContext -e -modeon the Scale tool except that this
        command is undoable.
    
    - snapOri : so                   (bool)          [create,query]
        Snap pivot orientation. Modify pivot orientation when snapping the pivot to a
        component.
    
    - snapPos : sp                   (bool)          [create,query]
        Snap pivot position. Modify pivot position when snapping the pivot to a
        component.
    
    - valid : v                      (bool)          [query]
        Returns true if component pivot position or orientation is valid.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.manipPivot`
    """
    pass
def SetMBSAdd(*args, **kwargs): pass
def OutlinerToggleAutoExpandLayers(*args, **kwargs): pass
def poseEditor(*args, **kwargs):
    """
    This command creates an editor that derives from the base editor class that has
    controls for deformer and control nodes.
    
    Flags:
    - control : ctl                  (bool)          [query]
        Query only. Returns the top level control for this editor. Usually used for
        getting a parent to attach popup menus. Caution: It is possible for an editor to
        exist without a control. The query will return NONEif no control is present.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - docTag : dtg                   (unicode)       [create,query,edit]
        Attaches a tag to the editor.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - filter : f                     (unicode)       [create,query,edit]
        Specifies the name of an itemFilter object to be used with this editor. This
        filters the information coming onto the main list of the editor.
    
    - forceMainConnection : fmc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object. This is a variant of the -mainListConnection flag in
        that it will force a change even when the connection is locked. This flag is
        used to reduce the overhead when using the -unlockMainConnection ,
        -mainListConnection, -lockMainConnection flags in immediate succession.
    
    - highlightConnection : hlc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its highlight list. Not all editors have a highlight list. For
        those that do, it is a secondary selection list.
    
    - lockMainConnection : lck       (bool)          [create,edit]
        Locks the current list of objects within the mainConnection, so that only those
        objects are displayed within the editor. Further changes to the original
        mainConnection are ignored.
    
    - mainListConnection : mlc       (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will use as
        its source of content. The editor will only display items contained in the
        selectionConnection object.
    
    - panel : pnl                    (unicode)       [create,query]
        Specifies the panel for this editor. By default if an editor is created in the
        create callback of a scripted panel it will belong to that panel. If an editor
        does not belong to a panel it will be deleted when the window that it is in is
        deleted.
    
    - parent : p                     (unicode)       [create,query,edit]
        Specifies the parent layout for this editor. This flag will only have an effect
        if the editor is currently un-parented.
    
    - selectionConnection : slc      (unicode)       [create,query,edit]
        Specifies the name of a selectionConnection object that the editor will
        synchronize with its own selection list. As the user selects things in this
        editor, they will be selected in the selectionConnection object. If the object
        undergoes changes, the editor updates to show the changes.
    
    - stateString : sts              (bool)          [query]
        Query only flag. Returns the MEL command that will create an editor to match the
        current editor state. The returned command string uses the string variable
        $editorName in place of a specific name.
    
    - targetControlList : tcl        (bool)          []
    
    - targetList : tl                (bool)          []
    
    - unParent : up                  (bool)          [create,edit]
        Specifies that the editor should be removed from its layout. This cannot be used
        in query mode.
    
    - unlockMainConnection : ulk     (bool)          [create,edit]
        Unlocks the mainConnection, effectively restoring the original mainConnection
        (if it is still available), and dynamic updates.
    
    - updateMainConnection : upd     (bool)          [create,edit]
        Causes a locked mainConnection to be updated from the orginal mainConnection,
        but preserves the lock state.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.poseEditor`
    """
    pass
def treeView(*args, **kwargs): pass
def nClothWorldToLocal(*args, **kwargs): pass
def aimConstraint(*args, **kwargs): pass
def HypershadeSelectDownStream(*args, **kwargs): pass
def NodeEditorConnectionStyleSShape(*args, **kwargs): pass
def movOut(*args, **kwargs): pass
def artAttrTool(*args, **kwargs):
    """
    The artAttrTool command manages the list of tool types which are         used
    for attribute painting. This command supports querying the         list contents
    as well as adding new tools to the list. Note that         there is a set of
    built-in tools. The list of built-ins can         be queried by starting Maya
    and doing an artAttrTool -q. The tools which are managed by this command are all
    intended for         attribute painting via Artisan: when you create a new
    context via         artAttrCtx you specify the tool name via artAttrCtx's
    -whichToolflag. Typically the user may wish to simply use one of the built-in
    tools. However, if you need to have custom Properties and Values sheets
    asscociated with your tool, you will need to define a custom tool         via
    artAttrTool -add toolName. For an example of a custom         attribute painting
    tool, see the devkit example customtoolPaint.mel.           In query mode,
    return type is based on queried flag.
    
    Flags:
    - add : string                   (Adds the named tool to the internal list of tools.) [create]
    
    - exists : ex                    (unicode)       [create,query]
        Checks if the named tool exists, returning true if found, and false otherwise.
    
    - remove : rm                    (unicode)       [create]
        Removes the named tool from the internal list of tools.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artAttrTool`
    """
    pass
def ConvertHairSelectionToConstraints(*args, **kwargs): pass
def CreateImagePlane(*args, **kwargs): pass
def nConstraintWeldBordersOptions(*args, **kwargs): pass
def polyMapDel(*args, **kwargs): pass
def error(*args, **kwargs):
    """
    The error command is provided so that the user can issue error messages from
    his/her scripts and control execution in the event of runtime errors.  The
    string argument is displayed in the command window (or stdout if running in
    batch mode) after being prefixed with an error message heading and surrounded by
    //.  The error command also causes execution to terminate with an error. Using
    error is like raising an exception because the error will propagate up through
    the call chain. You can use catch to handle the error from the caller side. If
    you don't want execution to end, then you probably want to use the warning
    command instead.
    
    Flags:
    - noContext : n                  (bool)          [create]
        Do not include the context information with the error message.
    
    - showLineNumber : sl            (bool)          [create]
        Obsolete. Will be deleted in the next version of Maya. Use the checkbox in the
        script editor that enables line number display instead.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.error`
    """
    pass
def instancer(*args, **kwargs): pass
def DisableParticles(*args, **kwargs): pass
def polyPrism(*args, **kwargs): pass
def vortex(*args, **kwargs): pass
def EmitFluidFromObjectOptions(*args, **kwargs): pass
def BatchRender(*args, **kwargs): pass
def OpenMelCmdRef(*args, **kwargs): pass
def FrameSelectedWithoutChildren(*args, **kwargs): pass
def NodeEditorPickWalkRight(*args, **kwargs): pass
def dR_overlayAppendMeshTGL(*args, **kwargs): pass
def OneClickSetupMotionBuilderCharacterStream(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickSetupMotionBuilderCharacterStream`
    """
    pass
def PaintJiggleWeightsTool(*args, **kwargs): pass
def SelectContainerContents(*args, **kwargs): pass
def menuItem(*args, **kwargs): pass
def cMuscleWeight(*args, **kwargs):
    """
    Flags:
    - help : h                       (bool)          []
    
    - lock : l                       (bool)          []
    
    - mindex : mi                    (int)           []
    
    - muscle : mus                   (PyNode)        []
    
    - normalize : n                  (bool)          []
    
    - pindex : pi                    (int)           []
    
    - system : sys                   (PyNode)        []
    
    - value : v                      (float)         []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.cMuscleWeight`
    """
    pass
def polyClean(*args, **kwargs): pass
def dR_setExtendBorder(*args, **kwargs): pass
def arcLenDimContext(*args, **kwargs):
    """
    Command used to register the arcLenDimCtx tool.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.arcLenDimContext`
    """
    pass
def FBIKLabelArm(*args, **kwargs): pass
def FBXImportOCMerge(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportOCMerge`
    """
    pass
def makebot(*args, **kwargs):
    """
    The makebot command takes an image file and produces a block ordered texture
    (BOT) file, to be used for texture caching. If a relative pathname is specified
    for the input image file, project management rules apply.  If a relative
    pathname is specified for the output BOT file, project management rules apply
    and gets put into the sourceImages directory.
    
    Flags:
    - checkdepends : c               (bool)          [create]
        the BOT file should only be generated if it doesn't already exists, or if it is
        older than the source file
    
    - checkres : r                   (int)           [create]
        the BOT file should only be generated if its resolution (maximum of width and
        height) is larger than the minimum value specified by the argument
    
    - input : i                      (unicode)       [create]
        input image file
    
    - nooverwrite : nov              (bool)          [create]
        If -c and/or -r indicate that the BOT file should be generated but if already
        exists, then this flag will prevent the file from being overwritten
    
    - output : o                     (unicode)       [create]
        output BOT file
    
    - verbose : v                    (bool)          [create]
        Makebot will provide feedback if this flag is specified                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.makebot`
    """
    pass
def createRenderLayer(*args, **kwargs): pass
def CreatePinConstraintOptions(*args, **kwargs): pass
def IKHandleToolOptions(*args, **kwargs): pass
def ToggleWireframeInArtisan(*args, **kwargs): pass
def SnapToCurveRelease(*args, **kwargs): pass
def dR_modePoly(*args, **kwargs): pass
def LatticeDeformKeysToolOptions(*args, **kwargs): pass
def SelectToolOptionsMarkingMenu(*args, **kwargs): pass
def nodeGrapher(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.nodeGrapher`
    """
    pass
def ShowMeshRelaxToolOptions(*args, **kwargs): pass
def BendCurves(*args, **kwargs): pass
def MergeVerticesOptions(*args, **kwargs): pass
def UIModeMarkingMenu(*args, **kwargs): pass
def setParent(*args, **kwargs): pass
def MakeLive(*args, **kwargs): pass
def dR_gridSnapRelease(*args, **kwargs): pass
def sbs_GetEnumName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetEnumName`
    """
    pass
def subdMapSewMove(*args, **kwargs): pass
def CreateCameraAimUpOptions(*args, **kwargs): pass
def saveInitialState(*args, **kwargs):
    """
    saveInitialState saves the current state of dynamics objects as the initial
    state.  A dynamic object is a particle shape, rigid body, rigid constraint or
    rigid solver.  If no objects are specified, it saves the initial state for any
    selected objects. It returns the names of the objects for which initial state
    was saved.
    
    Flags:
    - attribute : atr                (unicode)       [create]
        Save the initial state of the specified attribute only. This is a multi-use
        flag.
    
    - saveall : all                  (bool)          [create]
        Save the initial state for all dynamics objects in the scene.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.saveInitialState`
    """
    pass
def loadPrefObjects(*args, **kwargs):
    """
    This command loads preference dependency nodes from userPrefObjects.ma, if it
    exists, from the user preference directory.
    
    
    Derived from mel command `maya.cmds.loadPrefObjects`
    """
    pass
def texTweakUVContext(*args, **kwargs):
    """
    This command can be used to create, edit, or query a texture editor move manip
    context. Note that the above flags control the global behaviour of all texture
    editor move manip contexts.  Changing one context independently is not allowed.
    Changing a context's behaviour using the above flags, will change all existing
    texture editor move manip contexts.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - position : p                   (bool)          [query]
        Returns the current position of the manipulator
    
    - tolerance : t                  (float)         [create,query,edit]
        Controls the initial selection snapping tolerance.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texTweakUVContext`
    """
    pass
def replaceCacheFramesOpt(*args, **kwargs): pass
def PolygonBooleanDifferenceOptions(*args, **kwargs): pass
def SculptMeshInvertFreeze(*args, **kwargs): pass
def EnableExpressions(*args, **kwargs): pass
def xgmBakeGuideToUVSpace(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmBakeGuideToUVSpace`
    """
    pass
def xgmPlaceBrushToolCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmPlaceBrushToolCmd`
    """
    pass
def dR_softSelStickyRelease(*args, **kwargs): pass
def PolyExtrudeVerticesOptions(*args, **kwargs): pass
def ChangeEdgeWidth(*args, **kwargs): pass
def defineVirtualDevice(*args, **kwargs):
    """
    This command defines a virtual device. Virtual devices act like real devices and
    are useful to manipulate/playback data when an command device is not connected
    to the computer. In query mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - axis : ax                      (int)           [create]
        Specifies the axis number of the channel. All children have their axis number
        determined by their parent's axis number and the width of the parent channel. If
        this flag is not used, the order of the channel determines the axis number.
    
    - channel : c                    (unicode)       [create]
        After a -create is started, channels may be added to the device definition. The
        channel string wil be the name of the channel being added to the device. The
        -channel flag must also be accompanied by the -usage flag and optionally by the
        -axis flag.
    
    - clear : cl                     (bool)          [create]
        The -clear option will end a device definition and throw away any defined
        channels.
    
    - create : cr                    (bool)          [create]
        Start defining a virtual device. If a device is currently being defined, the
        -create flag will produce an error.
    
    - device : d                     (unicode)       [create]
        The -device flag ends the device definition. All of the channels between the
        -create flag and the -device flag are added to the specified device. If that
        device already exists, the command will fail and the device should be redefined
        with another device name. To see the currently defined devices, use the
        listInputDevices command. The -device flag is also used with -undefine to
        undefine a virtual device.
    
    - parent : p                     (unicode)       [create]
        Specified the parent channel of the channel being defined. If the channel does
        not exist, or is an incompatible type, the command will fail.
    
    - undefine : u                   (bool)          [create]
        Undefines the device specified with the -device flag.
    
    - usage : use                    (unicode)       [create]
        The -usage option is required for every -channel flag. It describes what usage
        type the defined channel is. The usage types are: unknownscalarposrotposRotquate
        rnionposQuaternionrotXYZrotYZXrotZXYrotXZYrotYXZrotZYXposRotXYZposRotYZXposRotZX
        YposRotXZYposRotXZYposRotZYXposXposYposZrotXrotYrotZFlag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.defineVirtualDevice`
    """
    pass
def GameExporterWnd(*args, **kwargs): pass
def HideNRigids(*args, **kwargs): pass
def CreateDirectionalLight(*args, **kwargs): pass
def FBIKLabelHand(*args, **kwargs): pass
def control(*args, **kwargs): pass
def RenderSetupWindow(*args, **kwargs): pass
def DeleteUVsWithoutHotkey(*args, **kwargs): pass
def UVIsolateLoadSet(*args, **kwargs): pass
def ctxData(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.ctxData`
    """
    pass
def dR_moveRelease(*args, **kwargs): pass
def palettePort(*args, **kwargs): pass
def MatchRotation(*args, **kwargs): pass
def HypershadeEditTexture(*args, **kwargs): pass
def swatchRefresh(*args, **kwargs):
    """
    The swatchRefreshcommand causes image source node swatches to be refreshed on
    screen.  The purpose of this command is to provide a mechanism to trigger a
    swatch refresh in cases that are not subject to dirty propagation in the
    dependency graph.  This command only works with imageSource-derived node types.
    Invoking this command with no arguments will cause all imageSource swatches to
    be refreshed.
    
    
    Derived from mel command `maya.cmds.swatchRefresh`
    """
    pass
def ToggleEvaluationManagerVisibility(*args, **kwargs): pass
def GoToBindPose(*args, **kwargs): pass
def webViewCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.webViewCmd`
    """
    pass
def xgmPartBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmPartBrushToolCmd`
    """
    pass
def PolygonSoftenHardenOptions(*args, **kwargs): pass
def XgCreateIgSplineEditor(*args, **kwargs): pass
def AddBifrostGuide(*args, **kwargs): pass
def CreateCurveFromPolyOptions(*args, **kwargs): pass
def FBXImportConvertDeformingNullsToJoint(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportConvertDeformingNullsToJoint`
    """
    pass
def directKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to directly manipulate
    keyframes within the graph editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - option : o                     (unicode)       [create,query,edit]
        Valid values are move,insert,over,and segmentOver.When you movea key, the key
        will not cross over (in time) any keys before or after it. When you inserta key,
        all keys before or after (depending upon the -timeChange value) will be moved an
        equivalent amount. When you overa key, the key is allowed to move to any time
        (as long as a key is not there already). When you segmentOvera set of keys (this
        option only has a noticeable effect when more than one key is being moved) the
        first key (in time) and last key define a segment (unless you specify a time
        range). That segment is then allowed to move over other keys, and keys will be
        moved to make room for the segment.
    
    - selectedOnly : so              (bool)          [create,query,edit]
        Controls whether only selected curves/keys can be moved, or all.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.directKeyCtx`
    """
    pass
def FBXExportSkeletonDefinitions(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportSkeletonDefinitions`
    """
    pass
def SubdCutUVs(*args, **kwargs): pass
def TwoPointArcTool(*args, **kwargs): pass
def pointCloudInfo(*args, **kwargs):
    """
    Flags:
    - comparison : c                 (unicode)       []
    
    - help : h                       (bool)          []
    
    - radius : r                     (float)         []
    
    - source : s                     (unicode)       []
    
    
    Derived from mel command `maya.cmds.pointCloudInfo`
    """
    pass
def pathAnimation(*args, **kwargs):
    """
    The pathAnimation command constructs the necessary graph nodes and their
    interconnections for a motion path animation. Motion path animation requires a
    curve and one or more other objects. During the animation, the objects will be
    moved along the 3D curve or the curveOnSurface.There are two ways to specify the
    moving objects: by explicitly specifying their names in the command line, orby
    making the objects selected (interactively, or through a MEL command).Likewise,
    there are two ways to specify a motion curve: by explicitly specifying the name
    of the motion curve in the command line (i.e. using the -c curve_name option),
    orby selecting the moving objects first before selecting the motion curve. I.e.
    if the name of the motion curve is not provided in the command line, the curve
    will be taken to be the last selected object in the selection list.When the end
    time is not specified: only one keyframe will be created either at the current
    time, or at the specified start time.
    
    Flags:
    - bank : b                       (bool)          [query]
        If on, enable alignment of the up axis of the moving object(s) to the curvature
        of the path geometry.Default is false.When queried, this flag returns a boolean.
    
    - bankScale : bs                 (float)         [query]
        This flag specifies a factor to scale the amount of bank angle.Default is
        1.0When queried, this flag returns a float.
    
    - bankThreshold : bt             (float)         [query]
        This flag specifies the limit of the bank angle.Default is 90 degreesWhen
        queried, this flag returns an angle.
    
    - curve : c                      (unicode)       [query]
        This flag specifies the name of the curve for the path.Default is NONEWhen
        queried, this flag returns a string.
    
    - endTimeU : etu                 (time)          [query]
        This flag specifies the ending time of the animation for the u parameter.Default
        is NONE.When queried, this flag returns a time.
    
    - endU : eu                      (float)         [query]
        This flag specifies the ending value of the u parameterization for the
        animation.Default is the end parameterization value of the curve.When queried,
        this flag returns a linear.
    
    - follow : f                     (bool)          [query]
        If on, enable alignment of the front axis of the moving object(s).Default is
        false.When queried, this flag returns a boolean.
    
    - followAxis : fa                (unicode)       [query]
        This flag specifies which object local axis to be aligned to the tangent of the
        path curve.Default is yWhen queried, this flag returns a string.
    
    - fractionMode : fm              (bool)          [query]
        If on, evaluation on the path is based on the fraction of length of the path
        curve.Default is false.When queried, this flag returns a boolean.
    
    - inverseFront : inverseFront    (bool)          [query]
        This flag specifies whether or not to align the front axis of the moving
        object(s) to the opposite direction of the tangent vector of the path
        geometry.Default is false.When queried, this flag returns a boolean.
    
    - inverseUp : iu                 (bool)          [query]
        This flag specifies whether or not to align the up axis of the moving object(s)
        to the opposite direction of the normal vector of the path geometry.Default is
        false.When queried, this flag returns a boolean.
    
    - name : n                       (unicode)       [query]
        This flag specifies the name for the new motion path node. (instead of the
        default name)When queried, this flag returns a string.
    
    - startTimeU : stu               (time)          [query]
        This flag specifies the starting time of the animation for the u
        parameter.Default is the the current time.When queried, this flag returns a
        time.
    
    - startU : su                    (float)         [query]
        This flag specifies the starting value of the u parameterization for the
        animation.Default is the start parameterization value of the curve.When queried,
        this flag returns a linear.
    
    - upAxis : ua                    (unicode)       [query]
        This flag specifies which object local axis to be aligned a computed up
        direction.Default is zWhen queried, this flag returns a string.
    
    - useNormal : un                 (bool)          [create,query,edit]
        This flag is now obsolete. Use -wut/worldUpType instead.
    
    - worldUpObject : wuo            (PyNode)        [create,query,edit]
        Set the DAG object to use for worldUpType objectand objectrotation. See
        -wut/worldUpType for greater detail. The default value is no up object, which is
        interpreted as world space.
    
    - worldUpType : wut              (unicode)       [create,query,edit]
        Set the type of the world up vector computation. The worldUpType can have one of
        5 values: scene, object, objectrotation, vector, or normal. If the value is
        scene, the upVector is aligned with the up axis of the scene and worldUpVector
        and worldUpObject are ignored. If the value is object, the upVector is aimed as
        closely as possible to the origin of the space of the worldUpObject and the
        worldUpVector is ignored. If the value is objectrotationthen the worldUpVector
        is interpreted as being in the coordinate space of the worldUpObject,
        transformed into world space and the upVector is aligned as closely as possible
        to the result. If the value is vector, the upVector is aligned with
        worldUpVector as closely as possible and worldUpObject is ignored. Finally, if
        the value is normalthe upVector is aligned to the path geometry. The default
        worldUpType is vector.
    
    - worldUpVector : wu             (float, float, float) [create,query,edit]
        Set world up vector.  This is the vector in world coordinates that up vector
        should align with. See -wut/worldUpType for greater detail. If not given at
        creation time, the default value of (0.0, 1.0, 0.0) is used.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pathAnimation`
    """
    pass
def polyGeoSampler(*args, **kwargs):
    """
    This command performs a render sampling of surface color and transparency for
    each selected vertex or face and stores the sampled data as either the color
    value, or uses the sampled data to displace the affected vertices or faces by a
    sampled data value. Transparency is not used for displacement, and displacement
    is performed along vertex normals. The sampled data value used can be pre-scaled
    by a user defined amount. Additionally, the normals chosen for sampling can be
    overridden using a flatshading option. This option basically means to always use
    the normals of the faces when computing sampling values. This may be a desired
    if the user wishes to override an edge smoothness factor. Basically with the
    flatshading option on, edges are always considered to be hard. Note that
    displacement sampling will result in the -sampleByFace option to be turned off,
    since a displacement of a vertex always affects the faces the vertex is
    connected to. Finally, it is possible to force the storage of shared colors per
    vertex, and / or force the usage of unshared UV values. The computation of the
    resulting color is as follows: resulting-RGB = (sampled-RGB \* scale-factor);
    if (color blend is none)                 resulting-RGB = geometry-RGB
    else if (color blend is add)                 resulting-RGB = geometry-RGB +
    sampled-RGB;         else if (color blend is subtract)
    resulting-RGB = geometry-RGB - sampled-RGB;         else if (color blend is
    multiply)                 resulting-RGB = geometry-RGB \* sampled-RGB;
    else if (color blend is divide)                 resulting-RGB = geometry-RGB /
    sampled-RGB;         else if (color blend is average)                 resulting-
    RGB = (geometry-RGB \* 1/2) + (sampled-RGB \* 1/2);         if (clamp option
    set)                 clamp resulting-RGB between minimum-RGB and maximum-RGB,
    The analogous computation is done for computing the resulting alpha value. The
    command requires that there be a camera selected in your scene in order to work
    properly in -batch or -prompt mode.
    
    Flags:
    - alphaBlend : abl               (unicode)       [create,edit]
        When specified, indicates the type of alpha blend to be applied. Options are:
        none, overwrite, add, subtract, multiply, divide, average. This option only
        applies when colors are being set. The default if this argument is not specified
        is overwrite. The noneoptions to not overwrite the existing value.
    
    - averageColor : ac              (bool)          [create,edit]
        When used, will mean to force the storage of shared colors for vertex level
        sampling. By default vertex level sampling stores unshared colors.
    
    - clampAlphaMax : amx            (float)         [create,edit]
        When used, will mean to clamp the storage of alpha to a maximum
    
    - clampAlphaMin : amn            (float)         [create,edit]
        When used, will mean to clamp the storage of alpha to a minimum
    
    - clampRGBMax : cmx              (float, float, float) [create,edit]
        When used, will mean to clamp the storage of RGB color to a maximum
    
    - clampRGBMin : cmn              (float, float, float) [create,edit]
        When used, will mean to clamp the storage of RGB color to a minimum
    
    - colorBlend : cbl               (unicode)       [create,edit]
        When specified, indicates the type of color blend to be applied. Options are:
        none, overwrite, add, subtract, multiply, divide, average. This option only
        applies when colors are being set. The default if this argument is not specified
        is overwrite. The noneoptions to not overwrite the existing value.
    
    - colorDisplayOption : cdo       (bool)          [create,edit]
        Change the display options on the mesh to display the vertex colors.
    
    - computeShadows : cs            (bool)          [create,edit]
        When used, shadow maps will be computed, saved, and reused during the sampling
        process.
    
    - displaceGeometry : dg          (bool)          [create,edit]
        When used, geometry will be displaced along the normals at the sampling
        positions, as opposed to storing color values. The default is to store colors.
    
    - flatShading : fs               (bool)          [create,edit]
        When used, flat shaded sampling will be computed. The default is smooth shading.
    
    - ignoreDoubleSided : ids        (bool)          [create,edit]
        When specified, the double sided flag will be ignored for prelighting.
    
    - lightingOnly : lo              (bool)          [create,edit]
        When used, incoming illumination will be computed as opposed to surface color an
        tranparency
    
    - reuseShadows : rs              (bool)          [create,edit]
        When used, if shadow maps were previosly computed and saved, then they will be
        reused during the sampling process. The computeShadows option must be enabled
        for this option to apply.
    
    - sampleByFace : bf              (bool)          [create,edit]
        When used, sample will occur at a per face level versus a per vertex level,
        which is the default behaviour
    
    - scaleFactor : sf               (float)         [create,edit]
        When used, will scale the sampled value by the specified amount. The default
        scale factor is 1.0. Negative values are acceptable for displacement, but not
        for color values.
    
    - shareUV : su                   (bool)          [create,edit]
        When used, UVs are shared at a vertex when sampled. By default UVs are forced to
        be unshared.
    
    - useLightShadows : ul           (bool)          [create,edit]
        When used, will use each lights shadow map options. Otherwise these options will
        be overrridden when the computeShadows, and/or reusedShadows option is enabled.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyGeoSampler`
    """
    pass
def ResetSoftSelectOptions(*args, **kwargs): pass
def SetHairRestPositionFromCurrent(*args, **kwargs): pass
def TangentConstraintOptions(*args, **kwargs): pass
def PaintWireWeightsTool(*args, **kwargs): pass
def ProfilerToolToggleRecording(*args, **kwargs): pass
def HypershadeRefreshFileListing(*args, **kwargs): pass
def SaveScene(*args, **kwargs): pass
def showShadingGroupAttrEditor(*args, **kwargs):
    """
    The showShadingGroupAttrEditor command opens up the attribute editor for the
    current object's shading-group information.
    
    
    Derived from mel command `maya.cmds.showShadingGroupAttrEditor`
    """
    pass
def unloadPlugin(*args, **kwargs): pass
def directConnectPath(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.directConnectPath`
    """
    pass
def AssignOfflineFile(*args, **kwargs): pass
def CommandWindow(*args, **kwargs): pass
def subdCleanTopology(*args, **kwargs): pass
def ParentOptions(*args, **kwargs): pass
def attrControlGrp(*args, **kwargs): pass
def ToggleCapsLockDisplay(*args, **kwargs): pass
def OpenPyCmdRef(*args, **kwargs): pass
def FrameSelectedWithoutChildrenInAllViews(*args, **kwargs): pass
def AddBifrostKillplane(*args, **kwargs): pass
def DuplicateSpecial(*args, **kwargs): pass
def cmdShell(*args, **kwargs): pass
def sculptMeshCacheChangeCloneSource(*args, **kwargs):
    """
    This command changes the source blend shape and target for the clone target
    tool. Used internally for undo/redo, and should not be called directly.
    In query mode, return type is based on queried flag.
    
    Flags:
    - blendShape : bs                (unicode)       [create,query,edit]
        Set which blend shape should be used as the source when using the clone tool.
        When queried, returns the current blend shape name as a string.
    
    - target : t                     (unicode)       [create,query,edit]
        Set which blend shape should be used as the target when using the clone tool.
        When queried, returns the current blend shape target name as a string.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.sculptMeshCacheChangeCloneSource`
    """
    pass
def SetDefaultManipScale(*args, **kwargs): pass
def AddMashBlendDeformer(*args, **kwargs): pass
def HypershadeSetSmallNodeSwatchSize(*args, **kwargs): pass
def SmoothBindSkin(*args, **kwargs): pass
def SubstituteGeometry(*args, **kwargs): pass
def dR_wireframeSmoothTGL(*args, **kwargs): pass
def pointLight(*args, **kwargs): pass
def OffsetCurve(*args, **kwargs): pass
def PaintEffectsToNurbsOptions(*args, **kwargs): pass
def hyperShade(*args, **kwargs): pass
def ParticleTool(*args, **kwargs): pass
def clipEditorCurrentTimeCtx(*args, **kwargs):
    """
    This command creates a context which may be used to change current time within
    the track area of a clip editor.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clipEditorCurrentTimeCtx`
    """
    pass
def ExtendCurveOptions(*args, **kwargs): pass
def reorderContainer(*args, **kwargs):
    """
    This command reorders (moves) objects relative to their siblings in a container.
    For relative moves, both positive and negative numbers may be specified.
    Positive numbers move the object forward and negative numbers move the object
    backward amoung its siblings. When an object is at the end (beginning) of the
    list of siblings, a relative move of 1 (-1) will put the object at the beginning
    (end) of the list of siblings.  That is, relative moves will wrap if necessary.
    Only nodes within one container can be moved at a time. Note: The container
    command's -nodeList flag will return a sorted list of contained nodes. To see
    the effects of reordering, use the -unsortedOrder flag in conjunction with the
    -nodeList flag.                 In query mode, return type is based on queried
    flag.
    
    Flags:
    - back : b                       (bool)          [create,query,edit]
        Move object(s) to back of container contents list
    
    - front : f                      (bool)          [create,query,edit]
        Move object(s) to front of container contents list
    
    - relative : r                   (int)           [create,query,edit]
        Move object(s) relative to other container contents
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.reorderContainer`
    """
    pass
def DeleteConstraints(*args, **kwargs): pass
def CreateNURBSTorus(*args, **kwargs): pass
def MapUVBorderOptions(*args, **kwargs): pass
def RadialOptions(*args, **kwargs): pass
def IntersectCurve(*args, **kwargs): pass
def ShowHotbox(*args, **kwargs): pass
def undo(*args, **kwargs):
    """
    Takes the most recent command from the undo list and undoes it.
    
    
    Derived from mel command `maya.cmds.undo`
    """
    pass
def polyAutoProjection(*args, **kwargs):
    """
    Projects a map onto an object, using several orthogonal projections
    simultaneously.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createNewMap : cm              (bool)          [create]
        Set to true if a new map should be created
    
    - frozen : fzn                   (bool)          []
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        Set to true if the new node created should inserted before any deformer nodes.
    
    - layout : l                     (int)           [create,query,edit]
        What layout algorithm should be used: 0 UV pieces are set to no layout. 1 UV
        pieces are aligned along the U axis. 2 UV pieces are moved in a square shape.
    
    - layoutMethod : lm              (int)           [create,query,edit]
        Set which layout method to use: 0 Block Stacking. 1 Shape Stacking.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - optimize : o                   (int)           [create,query,edit]
        Use two different flavors for the cut generation. 0 Every face is assigned to
        the best plane. This optimizes the map distortion. 1 Small UV pieces are
        incorporated into larger ones, when the extra distortion introduced is
        reasonable. This tends to produce fewer UV pieces.
    
    - percentageSpace : ps           (float)         [create,query,edit]
        When layout is set to square, this value is a percentage of the texture area
        which is added around each UV piece. It can be used to ensure each UV piece uses
        different pixels in the texture. Maximum value is 5 percent.
    
    - pivot : pvt                    (float, float, float) [create,query,edit]
        This flag specifies the pivot for scaling and rotation. C: Default is 0.0 0.0
        0.0. Q: When queried, this flag returns a float[3].
    
    - pivotX : pvx                   (float)         [create,query,edit]
        This flag specifies the X pivot for scaling and rotation. C: Default is 0.0. Q:
        When queried, this flag returns a float.
    
    - pivotY : pvy                   (float)         [create,query,edit]
        This flag specifies the Y pivot for scaling and rotation. C: Default is 0.0. Q:
        When queried, this flag returns a float.
    
    - pivotZ : pvz                   (float)         [create,query,edit]
        This flag specifies the Z pivot for scaling and rotation. C: Default is 0.0. Q:
        When queried, this flag returns a float.
    
    - planes : p                     (int)           [create,query,edit]
        Number of intermediate projections used. Valid numbers are 4, 5, 6, 8, and 12.
        C: Default is 6.
    
    - projectBothDirections : pb     (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: projections are mirrored on
        directly opposite faces. If off: projections are not mirrored on opposite faces.
        C: Default is off. Q: When queried, this flag returns an integer.
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        This flag specifies the rotation angles around X, Y, Z. C: Default is 0.0 0.0
        0.0. Q: When queried, this flag returns a float[3].
    
    - rotateX : rx                   (float)         [create,query,edit]
        This flag specifies the rotation angle around X. C: Default is 0.0. Q: When
        queried, this flag returns a float.
    
    - rotateY : ry                   (float)         [create,query,edit]
        This flag specifies the rotation angle around Y. C: Default is 0.0. Q: When
        queried, this flag returns a float.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        This flag specifies the rotation angle around Z. C: Default is 0.0. Q: When
        queried, this flag returns a float.
    
    - scale : s                      (float, float, float) [create,query,edit]
        This flag specifies the scaling vector. C: Default is 1.0 1.0 1.0. Q: When
        queried, this flag returns a float[3].
    
    - scaleMode : sc                 (int)           [create,query,edit]
        How to scale the pieces, after projections: 0 No scale is applied. 1 Uniform
        scale to fit in unit square. 2 Non proportional scale to fit in unit square.
    
    - scaleX : sx                    (float)         [create,query,edit]
        This flag specifies X for scaling vector. C: Default is 1.0. Q: When queried,
        this flag returns a float.
    
    - scaleY : sy                    (float)         [create,query,edit]
        This flag specifies Y for scaling vector. C: Default is 1.0. Q: When queried,
        this flag returns a float.
    
    - scaleZ : sz                    (float)         [create,query,edit]
        This flag specifies Z for scaling vector. C: Default is 1.0. Q: When queried,
        this flag returns a float.
    
    - skipIntersect : si             (bool)          [create,query,edit]
        When on, self intersection of UV pieces are not tested. This makes the
        projection faster and produces fewer pieces, but may lead to overlaps in UV
        space.
    
    - translate : t                  (float, float, float) [create,query,edit]
        This flag specifies the translation vector. C: Default is 0.0 0.0 0.0. Q: When
        queried, this flag returns a float[3].
    
    - translateX : tx                (float)         [create,query,edit]
        This flag specifies the X translation vector. C: Default is 0.0. Q: When
        queried, this flag returns a float.
    
    - translateY : ty                (float)         [create,query,edit]
        This flag specifies the Y translation vector. C: Default is 0.0. Q: When
        queried, this flag returns a float.
    
    - translateZ : tz                (float)         [create,query,edit]
        This flag specifies the Z translation vector. C: Default is 0.0. Q: When
        queried, this flag returns a float.                  Common poly modifier
        operation flags
    
    - uvSetName : uvs                (unicode)       [create]
        Name of the UV set to be created
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyAutoProjection`
    """
    pass
def GetHIKParentId(*args, **kwargs):
    """
    Flags:
    - nodeid : nid                   (int)           []
    
    
    Derived from mel command `maya.cmds.GetHIKParentId`
    """
    pass
def BothProxySubdivDisplay(*args, **kwargs): pass
def OrientConstraintOptions(*args, **kwargs): pass
def nurbsEditUV(*args, **kwargs):
    """
    Command Edits UVs on NURBS objects. When used with the query flag, it returns
    the UV values associated with the specified components.
    
    Flags:
    - angle : a                      (float)         [create,query]
        Specifies the angle value (in degrees) by which the UV values are to be rotated.
    
    - pivotU : pu                    (float)         [create,query]
        Specifies the pivot value, in the u direction, about which the scale or rotate
        is to be performed.
    
    - pivotV : pv                    (float)         [create,query]
        Specifies the pivot value, in the v direction, about which the scale or rotate
        is to be performed.
    
    - relative : r                   (bool)          [create,query]
        Specifies whether this command is editing the values relative to the currently
        existing values. Default is true;
    
    - rotateRatio : rr               (float)         [create,query]
        Specifies the ratio value by which the UV values are to be rotated. Default is
        1.0
    
    - rotation : rot                 (bool)          [create,query]
        Specifies whether this command is editing the values with rotation values
    
    - scale : s                      (bool)          [create,query]
        Specifies whether this command is editing the values with scale values
    
    - scaleU : su                    (float)         [create,query]
        Specifies the scale value in the u direction.
    
    - scaleV : sv                    (float)         [create,query]
        Specifies the scale value in the v direction.
    
    - uValue : u                     (float)         [create,query]
        Specifies the value, in the u direction - absolute if relative flag is false..
    
    - vValue : v                     (float)         [create,query]
        Specifies the value, in the v direction - absolute if relative flag is false..
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nurbsEditUV`
    """
    pass
def filterButterworthCtx(*args, **kwargs):
    """
    Creates/edits a Butterworth filter context. This context can be used to
    interactively preview/edit the Butterworth filter on a set of animation curves.
    
    Flags:
    - apply : a                      (bool)          [edit]
        When specified, finalizes the current context state and records the command for
        the operation. This is equivalent to completing the tool action without exiting
        the current tool context.
    
    - cutoffFrequency : cof          (float)         [query,edit]
        Specifies the cutoff frequency setting of the Butterworth filter. Default is
        7.0.
    
    - endTime : e                    (time)          [query,edit]
        Specifies the end time portion of the time range for this filter. This time
        range is used when selectedKeys is false.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - keepKeysOnFrame : kof          (bool)          [query,edit]
        When true, the Butterworth filter will reposition output keys to whole frames
        for the specified sampling rate.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - preserveKeyTangent : pkt       (unicode)       []
    
    - samplingRate : sr              (float)         [query,edit]
        Specifies the sampling rate setting of the Butterworth filter. Default is 30.0.
    
    - selectedKeys : sk              (bool)          [query,edit]
        If true, sets the filter to apply to the selected keys. Otherwise, the filter
        applies to the specified time range. Default is on.
    
    - startTime : s                  (time)          [query,edit]
        Specifies the start time portion of the time range for this filter. This time
        range is used when selectedKeys is false.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.filterButterworthCtx`
    """
    pass
def SeparatePolygon(*args, **kwargs): pass
def cmdArnoldVolume(*args, **kwargs): pass
def HIKFullBodyMode(*args, **kwargs): pass
def Snap3PointsTo3Points(*args, **kwargs): pass
def CustomNURBSSmoothness(*args, **kwargs): pass
def mayaDpiSettingAction(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.mayaDpiSettingAction`
    """
    pass
def UntrimSurfacesOptions(*args, **kwargs): pass
def AutoSeamUVs(*args, **kwargs): pass
def ScaleTool(*args, **kwargs): pass
def BridgeEdge(*args, **kwargs): pass
def SetMeshPinchTool(*args, **kwargs): pass
def dR_nexTool(*args, **kwargs): pass
def PolyCircularizeOptions(*args, **kwargs): pass
def hwReflectionMap(*args, **kwargs): pass
def PaintDeltaMushWeightsToolOptions(*args, **kwargs): pass
def FourViewLayout(*args, **kwargs): pass
def XgmSetClumpBrushTool(*args, **kwargs): pass
def polyCylindricalProjection(*args, **kwargs):
    """
    TpolyProjCmdBase is a base class for the command to create a mapping on the
    selected polygonal faces. Projects a cylindrical map onto an object.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create,query]
        Turn the construction history on or off (where applicable). If construction
        history is on then the corresponding node will be inserted into the history
        chain for the mesh. If construction history is off then the operation will be
        performed directly on the object. Note:If the object already has construction
        history then this flag is ignored and the node will always be inserted into the
        history chain.
    
    - createNewMap : cm              (bool)          [create,query]
        This flag when set true will create a new map with a the name passed in, if the
        map does not already exist.
    
    - frozen : fzn                   (bool)          []
    
    - imageCenter : ic               (float, float)  [create,query,edit]
        The center point of the 2D model layout. Default:0.5, 0.5
    
    - imageCenterX : icx             (float)         [create,query,edit]
        Image center X coord.
    
    - imageCenterY : icy             (float)         [create,query,edit]
        Image center Y coord.
    
    - imageScale : imageScale        (float, float)  [create,query,edit]
        Specifies the UV scale : Enlarges or reduces the 2D version of the model in U or
        V space relative to the 2D centerpoint. Default:1.0, 1.0
    
    - imageScaleU : isu              (float)         [create,query,edit]
        Specifies the UV scale : Enlarges or reduces the 2D version of the model in U or
        V space relative to the 2D centerpoint.
    
    - imageScaleV : isv              (float)         [create,query,edit]
        The V scale : Enlarges or reduces the 2D version of the model in V space
        relative to the 2D centerpoint.
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        This flag specifies if the projection node should be inserted before or after
        deformer nodes already applied to the shape. Inserting the projection after the
        deformer leads to texture swimming during animation and is most often
        undesirable. C: Default is on.
    
    - keepImageRatio : kir           (bool)          [create]
        True means keep any image ratio
    
    - mapDirection : md              (unicode)       [create]
        This flag specifies the mapping direction. 'x', 'y' and 'z' projects the map
        along the corresponding axis. 'c' projects along the current camera viewing
        direction. 'p' does perspective projection if current camera is perspective. 'b'
        projects along the best plane fitting the objects selected.
    
    - name : n                       (unicode)       [create]
        Give a name to the resulting node.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - perInstance : pi               (bool)          [create]
        True if the new map is per-instance, otherwise it is shared.
    
    - projectionCenter : pc          (float, float, float) [create,query,edit]
        The origin point from which the map is projected. Default:0.0, 0.0, 0.0
    
    - projectionCenterX : pcx        (float)         [create,query,edit]
        Projection center X coord.
    
    - projectionCenterY : pcy        (float)         [create,query,edit]
        Projection center Y coord.
    
    - projectionCenterZ : pcz        (float)         [create,query,edit]
        Projection center Z coord.
    
    - projectionHeight : ph          (float)         [create,query,edit]
        The height of the map relative to the 3D projection axis
    
    - projectionHorizontalSweep : phs (float)         [create,query,edit]
        The angle swept by the 3D projection axis
    
    - projectionScale : ps           (float, float)  [create,query,edit]
        The width and the height of the map relative to the 3D projection axis.
        Default:180.0, 1.0
    
    - projectionScaleU : psu         (float)         [create,query,edit]
        The width of the map relative to the 3D projection axis.
    
    - projectionScaleV : psv         (float)         [create,query,edit]
        The height of the map relative to the 3D projection axis.
    
    - radius : r                     (float)         [create,query,edit]
        Used by the UI : Manipulator. Default:10.0
    
    - rotate : ro                    (float, float, float) []
    
    - rotateX : rx                   (float)         []
    
    - rotateY : ry                   (float)         []
    
    - rotateZ : rz                   (float)         []
    
    - rotationAngle : ra             (float)         [create,query,edit]
        The for the rotation. When the angle is positive, then the map rotates
        counterclockwise on the mapped model, whereas when it is negative then the map
        rotates lockwise on the mapped model. Default:0.0
    
    - seamCorrect : sc               (bool)          [create,query,edit]
        Used to indicate fixing UV seams. Default:false
    
    - smartFit : sf                  (bool)          [create]
        True means use the smart fit algorithm
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCylindricalProjection`
    """
    pass
def sbs_SetBakeFormat(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetBakeFormat`
    """
    pass
def psdConvSolidTxOptions(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.psdConvSolidTxOptions`
    """
    pass
def curveOnSurface(*args, **kwargs):
    """
    The curve command creates a new curve from a list of control vertices (CVs).  A
    string is returned containing the pathname to the newly created curve.  You can
    create a curve from points either in world space or object (local) space, either
    with weights or without. You can replace an existing curve by using the
    -r/replaceflag.  You can append a point to an existing curve by using the
    -a/appendflag. To create a curve-on-surface, use the curveOnSurface command. To
    change the degree of a curve, use the rebuildCurve command. To change the of
    parameter range curve, use the rebuildCurve command. The curve-on-surface
    command creates a new curve-on-surface from a list of control vertices (CVs).  A
    string is returned containing the pathname to the newly created curve-on-
    surface. You can replace an existing curve by using the -r/replaceflag. You can
    append points to an existing curve-on-surface by using the -a/appendflag. See
    also the curve command, which describes how to query curve attributes.
    
    Flags:
    - append : a                     (bool)          [create]
        Appends point(s) to the end of an existing curve. If you use this flag, you must
        specify the name of the curve to append to, at the end of the command.  (See
        examples below.)
    
    - degree : d                     (float)         [create]
        The degree of the new curve.  Default is 3.  Note that you need (degree+1) curve
        points to create a visible curve span.  eg. you must place 4 points for a degree
        3 curve.
    
    - knot : k                       (float)         [create]
        A knot value in a knot vector.  One flag per knot value. There must be
        (numberOfPoints + degree - 1) knots and the knot vector must be non-decreasing.
    
    - name : n                       (unicode)       [create]
        Name of the curve
    
    - periodic : per                 (bool)          [create]
        If on, creates a curve that is periodic.  Default is off.
    
    - positionUV : uv                (float, float)  [create]
        The uv position of a point.
    
    - replace : r                    (bool)          [create]
        Replaces an entire existing curve. If you use this flag, you must specify the
        name of the curve to replace, at the end of the command.  (See examples below.)
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.curveOnSurface`
    """
    pass
def DefaultQualityDisplay(*args, **kwargs): pass
def CreateClusterOptions(*args, **kwargs): pass
def dR_activeHandleXYZ(*args, **kwargs): pass
def CreateNURBSCubeOptions(*args, **kwargs): pass
def ViewImage(*args, **kwargs): pass
def bakeResults(*args, **kwargs): pass
def dynamicLoad(*args, **kwargs):
    """
    Dynamically load the DLL passed as argument.             In query mode, return
    type is based on queried flag.
    
    
    Derived from mel command `maya.cmds.dynamicLoad`
    """
    pass
def addAttr(*args, **kwargs): pass
def DisplaySmoothShaded(*args, **kwargs): pass
def ReattachSkeletonJoints(*args, **kwargs): pass
def UnfoldUVOptions(*args, **kwargs): pass
def BifMeshImport(*args, **kwargs): pass
def ShowMarkers(*args, **kwargs): pass
def PasteKeys(*args, **kwargs): pass
def TransplantHairOptions(*args, **kwargs): pass
def NodeEditorShowConnectedAttrs(*args, **kwargs): pass
def WhatsNewHighlightingOff(*args, **kwargs): pass
def querySubdiv(*args, **kwargs):
    """
    Queries a subdivision surface based on a set of query parameters and updates the
    selection list with the results.
    
    Flags:
    - action : a                     (int)           [create]
        Specifies the query parameter:         1 = find all tweaked verticies at level
        2 = find all sharpened vertices at level         3 = find all sharpened edges at
        level         4 = find all faces at level If the attribute levelis not specified
        then the query is applied to the current component display level. If the
        attribute level is specified then the query is applied to that level, either
        absolute or relative to the current level based on the relativeflag state.
    
    - level : l                      (int)           [create]
        Specify the level of the subdivision surface on which to perform the operation.
    
    - relative : r                   (bool)          [create]
        If set, level flag refers to the level relative to the current component display
        level.                                    Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.querySubdiv`
    """
    pass
def overrideModifier(*args, **kwargs):
    """
    This command allows you to assign modifier key behaviour to other parts of the
    system.  For example you can use a hotkey or input device instead of a modifer
    key to perform the same action. Note that the original modifier key behaviour is
    not altered in anyway. For example, if you've assigned Ctrlkey behaviour to the
    ckey then the Ctrlkey will still work as you expect, all you've done is allowed
    yourself to use the ckey as an alternative to the Ctrlkey.
    
    Dynamic library stub function 
    
    Flags:
    - clear : cl                     (bool)          [create]
        Don't force any modifier keys.
    
    - press : p                      (unicode)       [create]
        Force the following modifier to be pressed. Valid values are Alt, Ctrl, Shift.
    
    - release : r                    (unicode)       [create]
        Force the following modifier to be released. Valid values are Alt, Ctrl, Shift.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.overrideModifier`
    """
    pass
def xgmMelRender(*args, **kwargs):
    """
    Flags:
    - progress : pb                  (bool)          []
    
    - visibleOnly : vo               (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmMelRender`
    """
    pass
def dR_rotatePress(*args, **kwargs): pass
def AlignCameraToPolygon(*args, **kwargs): pass
def FBXExportConvertUnitString(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportConvertUnitString`
    """
    pass
def XgmSetPartBrushToolOption(*args, **kwargs): pass
def caddyManip(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.caddyManip`
    """
    pass
def FloatSelectedObjectsOptions(*args, **kwargs): pass
def SendAsNewSceneMotionBuilder(*args, **kwargs): pass
def IncreaseCheckerDensity(*args, **kwargs): pass
def pushPinning(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.pushPinning`
    """
    pass
def PfxGetBrush(*args, **kwargs): pass
def mouldSubdiv(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.mouldSubdiv`
    """
    pass
def group(*args, **kwargs): pass
def collision(*args, **kwargs):
    """
    For each listed object, the command creates a new field. The field has a shape
    which lives in the DAG and it has an associated dependency node. The field is
    added to the list of fields owned by the object. Use connectDynamic to cause the
    field to affect a dynamic object. Note that if more than one object is listed, a
    separate field is created for each object. If fields are created, this command
    returns the names of each owning shape and of the field shapes themselves. If a
    field was queried, the results of the query are returned. If a field was edited,
    the field name is returned. If no object names are provided but the active
    selection list is non-empty, the command creates a field for every object in the
    list. If the list is empty, the command defaults to -pos 0 0 0. The collision
    command causes particles to collide with geometry. It also allows you to specify
    values for the surface properties (friction and resilience) of the collision.
    These values are stored in the geoConnector node for the geometry object.
    Unlike earlier versions of Maya, there is no separate collision node.If a soft
    object is in the selection list, the collision command assumes that you want to
    make it a collider.  In order to make the soft object collide with something
    use, use connectDynamic -c.  The collision menu option sorts this out using the
    lead object rule and issues the necessary commands. On creation, this command
    returns a string arrayof the geometry names that were setup for particle
    collision.When the command is used to query information, there are several
    possible return types. These include: If the -resilience or -friction flag is
    passed on the command line and a single collision geometry is either selected or
    on the command line, then resilience or friction value for that collision
    geometry is returned as a single floatvalue.If the -resilience or -friction flag
    is passed on the command line and a single collision geometry and a single
    particle object are either selected or on the command line, then two results
    might occur. If the particle object is not set up to collide with the geometry,
    then an error is displayed stating that.  If the objects are set up to collide
    with each other, then the resilience or friction value that the particle object
    is using for collisions with the geometry is returned as a single floatvalue.
    This can be different than the geometry's resilience and friction, because the
    user may break the connection from the geometry's geoConnector node's resilience
    or friction to the particle, and set a different value in the particle's
    collisionResilience, collisionFriction or collisionOffset attribute that is used
    for that geometry.  This allows the user to make each particle respond to the
    same surface differently. If neither flag is pass on the command line and a
    single geometry and single particle object are either selected or on the command
    line, then a single integervalue of 1 is returned if the objects are set up to
    collide with each other, and 0 is returned if they are not. Lastly, if no flags
    are passed on the command line and a single particle object is either selected
    or on the command line, then a string arraywith the names of all geometries that
    the particle object will collide against and the multiIndex that the geometries
    are connected to is returned.  The array is formatted as follows: pPlaneShape1:0
    pPlaneShape2:2 nurbsSphereShape1:3 ...where the number following the :is the
    multiIndex.
    
    Flags:
    - friction : f                   (float)         [query,edit]
        Friction of the surface.  This is the amount of the colliding particle's
        velocity parallel to the surface which is removed when the particle collides. A
        value of 0 will mean that no tangential velocity is lost, while a value of 1
        will cause the particle to reflect straight along the normal of the surface.
    
    - name : n                       (unicode)       [query,edit]
        name of field
    
    - offset : o                     (float)         [query,edit]
        Offset value for the connector.
    
    - resilience : r                 (float)         [query,edit]
        Resilience of the surface.  This is the amount of the colliding particle's
        velocity reflected along the normal of the surface.  A value of 1 will give
        perfect reflection, while a value of 0 will have no reflection along the normal
        of the surface.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.collision`
    """
    pass
def PolyConvertToLoopAndDelete(*args, **kwargs): pass
def polyNormalPerVertex(*args, **kwargs): pass
def PrevSkinPaintMode(*args, **kwargs): pass
def HypershadeOpenModelEditorWindow(*args, **kwargs): pass
def TextureCentricUVLinkingEditor(*args, **kwargs): pass
def UnpinSelection(*args, **kwargs): pass
def PasteVertexSkinWeights(*args, **kwargs): pass
def ModifyLowerRadiusRelease(*args, **kwargs): pass
def ArtPaintAttrTool(*args, **kwargs): pass
def timeEditorClip(*args, **kwargs): pass
def UVSnapTogetherOptions(*args, **kwargs): pass
def listNodeTypes(*args, **kwargs):
    """
    Lists dependency node types satisfying a specified classification string. See
    the 'getClassification' command for a list of the standard classification
    strings.
    
    Flags:
    - exclude : ex                   (unicode)       [create]
        Nodes that satisfies this exclude classification will be filtered out.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.listNodeTypes`
    """
    pass
def Planar(*args, **kwargs): pass
def ConvertToKey(*args, **kwargs): pass
def notifyPostUndo(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.notifyPostUndo`
    """
    pass
def xgmPushOver(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    - palette : p                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmPushOver`
    """
    pass
def keyframeRegionDirectKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to directly manipulate
    keyframes within the dope sheet editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - option : o                     (unicode)       [create]
        Valid values are move,insert,over,and segmentOver.When you movea key, the key
        will not cross over (in time) any keys before or after it. When you inserta key,
        all keys before or after (depending upon the -timeChange value) will be moved an
        equivalent amount. When you overa key, the key is allowed to move to any time
        (as long as a key is not there already). When you segmentOvera set of keys (this
        option only has a noticeable effect when more than one key is being moved) the
        first key (in time) and last key define a segment (unless you specify a time
        range). That segment is then allowed to move over other keys, and keys will be
        moved to make room for the segment.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionDirectKeyCtx`
    """
    pass
def EvaluationToolkit(*args, **kwargs): pass
def ShadingGroupAttributeEditor(*args, **kwargs): pass
def TogglePanZoomRelease(*args, **kwargs): pass
def MoveRotateScaleToolToggleSnapRelativeMode(*args, **kwargs): pass
def NodeEditorToggleShowNamespace(*args, **kwargs): pass
def FBXExportColladaTriangulate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportColladaTriangulate`
    """
    pass
def SnapToCurve(*args, **kwargs): pass
def ToggleUVShellBorder(*args, **kwargs): pass
def AddOceanPreviewPlane(*args, **kwargs): pass
def audioTrack(*args, **kwargs):
    """
    This command is used for inserting and removing tracks related to the audio
    clips displayed in the sequencer. It can also be used to modify the track state,
    for example, to lock or mute a track.               In query mode, return type
    is based on queried flag.
    
    Flags:
    - insertTrack : it               (int)           [create]
        This flag is used to insert a new empty track at the track index specified.
        Indices are 1-based.
    
    - lock : l                       (bool)          [create,query,edit]
        This flag specifies whether all audio clips on the same track as the specified
        audio node are to be locked at their current location and track.
    
    - mute : m                       (bool)          [create,query,edit]
        This flag specifies whether all audio clips on the same track as the specified
        audio node are to be muted or not.
    
    - numTracks : nt                 (int)           [query]
        To query the number of audio tracks
    
    - removeEmptyTracks : ret        (bool)          [create]
        This flag is used to remove all tracks that have no clips.
    
    - removeTrack : rt               (int)           [create]
        This flag is used to remove the track with the specified index.  The track must
        have no clips on it before it can be removed.
    
    - solo : so                      (bool)          [create,query,edit]
        This flag specifies whether all audio clips on the same track as the specified
        audio node are to be soloed or not.
    
    - swapTracks : st                (int, int)      [create]
        This flag is used to swap the contents of two specified tracks. Indices are
        1-based.
    
    - title : t                      (unicode)       [create,query,edit]
        This flag specifies the title for the track.
    
    - track : tr                     (int)           [create,query,edit]
        Specify the track on which to operate by using the track's trackNumber. Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.audioTrack`
    """
    pass
def HotkeyPreferencesWindow(*args, **kwargs): pass
def channelBox(*args, **kwargs): pass
def findDeformers(*args, **kwargs):
    """
    This command finds all deformers for the specified shape(s). If no shapes are
    specified on the command then the curently selected shapes are used.
    
    
    Derived from mel command `maya.cmds.findDeformers`
    """
    pass
def RemoveNewPfxToon(*args, **kwargs): pass
def componentBox(*args, **kwargs): pass
def PickWalkRight(*args, **kwargs): pass
def PaintFluidsTool(*args, **kwargs): pass
def FBXGetTakeIndex(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeIndex`
    """
    pass
def DeleteAllNCloths(*args, **kwargs): pass
def buildBookmarkMenu(*args, **kwargs):
    """
    This command handles building the dynamicBookmark menu, to show all bookmarks
    (sets) of a specified type (sets -text) menuName is the string returned by the
    menucommand.
    
    Flags:
    - editor : ed                    (unicode)       [create]
        Name of the editor which this menu belongs to
    
    - type : typ                     (unicode)       [create]
        Type of bookmark (sets -text) to display                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.buildBookmarkMenu`
    """
    pass
def scriptEditorInfo(*args, **kwargs):
    """
    Use this command to directly manipulate and query the contents of the Command
    Window window. Note: Due to recent changes, certain flags will no longer work on
    the Script Editor Window.  All flags will continue to work with the
    CommandWindow (old Script Editor).Note: This command cannot be used to create a
    new script editor window.
    
    Flags:
    - clearHistory : ch              (bool)          [edit]
        Clears the read-only text in the upper field of the Command Window.
    
    - clearHistoryFile : chf         (bool)          [edit]
        Clear the file defined by the -hf/historyFilename flag, but only if
        -wh/writeHistory is true. Use this flag to start a new history file, since the
        default behaviour of the Command Window is to append to the existing file.
    
    - historyFilename : hfn          (unicode)       [query,edit]
        Sets or returns the name of the file that the Command Window will use to echo
        all of its history to. If this is an empty string when the -wh/writeHistory flag
        is set to true, then it will automatically be set to the default file.
    
    - input : i                      (unicode)       [edit]
        Sets the text in the lower field of the Command Window. Set this value to an
        empty string to clear the field.  Note: this flag only affects the Command
        Window and not the new script editor. To find out how to manipulate the new
        script editor please refer to the documentation on the cmdScrollFieldExecuter
        and cmdScrollFieldReporter.
    
    - suppressErrors : se            (bool)          [query,edit]
        When true, Command Window and Script Editor will not display error messages.
    
    - suppressInfo : si              (bool)          [query,edit]
        When true, Command Window and Script Editor will not display info messages
        generated by Maya.
    
    - suppressResults : sr           (bool)          [query,edit]
        When true, Command Window and Script Editor will not display command results.
    
    - suppressStackWindow : ssw      (bool)          [query,edit]
        When true and when the stackTrace mechanism is on, this flag will suppress the
        display of the stack window. If stack trace is enabled then results will be
        returned to the output window instead of a separate stack window.
    
    - suppressWarnings : sw          (bool)          [query,edit]
        When true, Command Window and Script Editor will not display warning messages.
    
    - writeHistory : wh              (bool)          [query,edit]
        When true, Command Window will echo all of its history to the file defined by
        the -hf/historyFilename flag. This flag effectively turns file writing on/off.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scriptEditorInfo`
    """
    pass
def setDrivenKeyframe(*args, **kwargs):
    """
    This command sets a driven keyframe.  A driven keyframe is similar to a regular
    keyframe. However, while a standard keyframe always has an x-axis of time in the
    graph editor, for a drivenkeyframe the user may choose any attribute as the
    x-axis of the graph editor. For example, you can keyframe the emission of a
    faucet so that so that it emits whenever the faucet handle is rotated around y.
    The faucet emission in this example is called the driven attribute. The handle
    rotation is called the driver. Once you have used setDrivenKeyframe to set up
    the relationship between the emission and the rotation, you can go to the graph
    editor and modify the relationship between the attributes just as you would
    modify the animation curve on any keyframed object. In the case of an attribute
    driven by a single driver, the dependency graph is connected like this: driver
    attribute ---animCurve ---driven attribute You can set driven keyframes with
    more than a single driver. The effects of the multiple drivers are combined
    together by a blend node.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Attribute name to set keyframes on.
    
    - controlPoints : cp             (bool)          [create]
        Explicitly specify whether or not to include the control points of a shape (see
        -sflag) in the list of attributes. Default: false.
    
    - currentDriver : cd             (unicode)       [create,query]
        Set the driver to be used for the current driven keyframe to the attribute
        passed as an argument.
    
    - driven : dn                    (bool)          [query]
        Returns list of driven attributes for the selected item.
    
    - driver : dr                    (bool)          [query]
        Returns list of available drivers for the attribute.
    
    - driverValue : dv               (float)         [create]
        Value of the driver to use for this keyframe. Default value is the current
        value.
    
    - hierarchy : hi                 (unicode)       [create]
        Controls the objects this command acts on, relative to the specified (or active)
        target objects. Valid values are above,below,both,and none.Default is hierarchy
        -query
    
    - inTangentType : itt            (unicode)       [create]
        The in tangent type for keyframes set by this command. Valid values are: auto,
        clamped, fast, flat, linear, plateau, slow, spline, and stepnextDefault is
        keyTangent -q -g -inTangentType
    
    - insert : i                     (bool)          [create]
        Insert keys at the given time(s) and preserve the shape of the animation
        curve(s). Note: the tangent type on inserted keys will be fixed so that the
        curve shape can be preserved.
    
    - insertBlend : ib               (bool)          [create]
        If true, a pairBlend node will be inserted for channels that have nodes other
        than animCurves driving them, so that such channels can have blended animation.
        If false, these channels will not have keys inserted. If the flag is not
        specified, the blend will be inserted based on the global preference for
        blending animation.
    
    - outTangentType : ott           (unicode)       [create]
        The out tangent type for keyframes set by this command. Valid values are: auto,
        clamped, fast, flat, linear, plateau, slow, spline, step, and stepnext. Default
        is keyTangent -q -g -outTangentType
    
    - shape : s                      (bool)          [create]
        Consider attributes of shapes below transforms as well, except controlPoints.
        Default: true
    
    - value : v                      (float)         [create]
        Value to set the keyframe at. Default is the current value.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setDrivenKeyframe`
    """
    pass
def toggleDisplacement(*args, **kwargs):
    """
    This command toggles the displacement preview of the polygon. This command is
    NOT un-doable.
    
    
    Derived from mel command `maya.cmds.toggleDisplacement`
    """
    pass
def DisableFluids(*args, **kwargs): pass
def PlayblastOptions(*args, **kwargs): pass
def texLatticeDeformContext(*args, **kwargs):
    """
    This command creates a context which may be used to deform UV maps with lattice
    manipulator.  This context only works in the texture UV editor.
    
    Flags:
    - envelope : ev                  (float)         [create,query,edit]
        Specifies the influence of the lattice.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - latticeColumns : lc            (int)           [create,query,edit]
        Specifies the number column points the lattice contains.  The maximum size
        lattice is restricted to 8 columns.
    
    - latticeRows : lr               (int)           [create,query,edit]
        Specifies the number of rows the lattice contains. The maximum size lattice is
        restricted to 8 rows.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - showMoveManipulator : smm      (bool)          [create,query,edit]
        Specifies whether show move manipulator in UV Editor
    
    - snapPixelMode : spm            (bool)          [create,query,edit]
        Specifies the influenced uv points should be snapped to a pixel center or
        corner.
    
    - useBoundingRect : ubr          (bool)          [create,query,edit]
        When constructing the lattice use the bounding box of the selected UVs for the
        extents of the lattice.  When this is disabled the extents of the marquee
        selections are used as the extents for the lattice.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texLatticeDeformContext`
    """
    pass
def polyPinUV(*args, **kwargs): pass
def HypershadeMoveTabLeft(*args, **kwargs): pass
def NURBSSmoothnessMedium(*args, **kwargs): pass
def boxDollyCtx(*args, **kwargs):
    """
    This command can be used to create, edit, or query a dolly context.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.boxDollyCtx`
    """
    pass
def condition(*args, **kwargs): pass
def CreatePolygonTool(*args, **kwargs): pass
def HypershadeDeleteAllLights(*args, **kwargs): pass
def cmdArnoldCreateStandIn(*args, **kwargs): pass
def dynTestData(*args, **kwargs):
    """
    Flags:
    - arrayAttrs : aa                (bool)          []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.dynTestData`
    """
    pass
def select(*args, **kwargs): pass
def insertKnotCurve(*args, **kwargs): pass
def AddInBetweenTargetShape(*args, **kwargs): pass
def CreateWrap(*args, **kwargs): pass
def filterCurve(*args, **kwargs):
    """
    The filterCurve command takes a list of anim curve and filters         them
    using a specified filter. The following filters are supported:
    butterwortheulerkeyReducerkeySyncresamplesimplify
    
    Flags:
    - cutoffFrequency : cof          (float)         [create]
        Defines the cutoff frequency (in Hz) for the Butterworth filter.
    
    - endTime : e                    (time)          [create]
        Specify the end time of the section to filter. If not specified, the last key of
        the animation curve is used to define the end time.
    
    - filter : f                     (unicode)       [create]
        Specifies the filter type to use. The avalible filters are: butterworth euler
        (default) keyReducer keySync resample simplify
    
    - keepKeysOnFrame : kof          (bool)          [create]
        When specified, a secondary filter pass is applied to position keys on whole
        frames. This flag is only supported by the Butterworth filter.
    
    - kernel : ker                   (unicode)       [create]
        The resample kernel is a decimation resampling filter used to resample dense
        data. It works on the keyframes and may not produce the desired results when
        used with sparse data. The resample filter converts from either uniform or non-
        uniform timestep input data samples to the specified uniform timeStep. Various
        time domain filters are available and are specified with the kernel flag which
        selects the resampling kernel applied to the keyframes on the animation curves.
        Kernel ValuesclosestClosest sample to output timestamplirpLinear interpolation
        between closest samplesboxBox filter: moving averagetriangleTriangle filter: (1
        - |x|)  weighted moving averagegaussian2Gaussian2 Filter: (2^(-2x\*x))  weighted
        moving averagegaussian4Gaussian4 Filter: (2^(-4x\*x))  weighted moving
        averageThis filter is onlytargeted at decimation resampling -- interpolation
        resampling is basically unsupported.  If your output framerate is much higher
        than your input frame rate (approximate, as the input timestep is not assumed to
        be regular) the lirp and triangle will interpolate (usually) and the rest will
        either average, or use the closest sample (depending on the phase and frequency
        of the input).  However this mode of operation may not give the expected result.
    
    - keySync : ks                   (bool)          [create]
        When specified, a secondary filter pass is applied that adds a key to sibling
        curves (X,Y,Z) for each key that is encountered. This flag is only supported by
        the Key Reducer filter.
    
    - maxTimeStep : mxs              (float)         [create]
        Simplify filter.
    
    - minTimeStep : mns              (float)         [create]
        Simplify filter.
    
    - period : per                   (float)         [create]
        Resample filter
    
    - precision : pre                (float)         [create]
        Defines the precision parameter. For the Key Reducer filter, this parameter
        specifies the error limit between the source and output curves. Greater values
        reduce precision. Lower values increase precision.
    
    - precisionMode : pm             (int)           [create]
        Defines whether the precision value should be treated as: 0: An absolute value
        1: A percentage.
    
    - preserveKeyTangent : pkt       (unicode)       [create]
        When specified, keys whose in or out tangent type match the specified type are
        preserved. Supported tangent types: fixed linear flat smooth step clamped
        plateau stepnext auto This flag is only supported by the Key Reducer filter.
    
    - samplingRate : sr              (float)         [create]
        Defines the rate at which keys are added to the Butterworth filtered curve in
        frames per second (FPS).
    
    - selectedKeys : sk              (bool)          [create]
        When specified, the filter is only applied to selected keys. This flag
        supercedes the startTime/endTime specification.
    
    - startTime : s                  (time)          [create]
        Specify the start time to filter. If not specified, then the first key in the
        animation curve is used to get the start time.
    
    - timeTolerance : tto            (float)         [create]
        Simplify filter.
    
    - tolerance : tol                (float)         [create]
        Simplify filter.                                   Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.filterCurve`
    """
    pass
def radial(*args, **kwargs):
    """
    For each listed object, the command creates a new field. The field has a shape
    which lives in the DAG and it has an associated dependency node. The field is
    added to the list of fields owned by the object. Use connectDynamic to cause the
    field to affect a dynamic object. Note that if more than one object is listed, a
    separate field is created for each object. If fields are created, this command
    returns the names of each owning shape and of the field shapes themselves. If a
    field was queried, the results of the query are returned. If a field was edited,
    the field name is returned. If no object names are provided but the active
    selection list is non-empty, the command creates a field for every object in the
    list. If the list is empty, the command defaults to -pos 0 0 0. A radial field
    pushes objects directly towards or directly away from it, like a magnet. The
    transform is the associated dependency node. Use connectDynamic to cause the
    field to affect a dynamic object. If fields are created, this command returns
    the names of each of the fields. If a field was queried, the results of the
    query are returned. If a field was edited, the field name is returned. If object
    names are provided or the active selection list is non-empty, the command
    creates a field for every object in the list and calls addDynamic to add it to
    the object. If the list is empty, the command defaults to -pos 0 0 0. Setting
    the -pos flag with objects named on the command line is an error.
    
    Flags:
    - attenuation : att              (float)         [query,edit]
        Attentuation rate of field
    
    - magnitude : m                  (float)         [query,edit]
        Strength of field.
    
    - maxDistance : mxd              (float)         [query,edit]
        Maximum distance at which field is exerted. -1 indicates that the field has no
        maximum distance.
    
    - name : n                       (unicode)       [query,edit]
        name of field
    
    - perVertex : pv                 (bool)          [query,edit]
        Per-vertex application. If this flag is set true, then each individual point
        (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the
        force field. If this flag is set to false, then the froce is exerted only from
        the geometric center of the set of points.
    
    - position : pos                 (float, float, float) [query,edit]
        Position in space (x,y,z) where you want to place a gravity field. The gravity
        then emanates from this position in space rather than from an object. Note that
        you can both use -pos (creating a field at a position) and also provide object
        names.
    
    - torusSectionRadius : tsr       (float)         [query,edit]
        Section radius for a torus volume.  Applies only to torus. Similar to the
        section radius in the torus modelling primitive.
    
    - type : typ                     (float)         [query,edit]
        Type of radial field (0 - 1).  This controls the algorithm by which the field is
        attenuated. Type 1, provided for backward compatibility, specifies the same
        algorithm as Alias | Wavefront Dynamation. A value between 0 and 1 yields a
        linear blend.
    
    - volumeExclusion : vex          (bool)          [query,edit]
        Volume exclusion of the field.  If true, points outside the volume (defined by
        the volume shape attribute) are affected,  If false, points inside the volume
        are affected.  Has no effect if volumeShape is set to none.
    
    - volumeOffset : vof             (float, float, float) [query,edit]
        Volume offset of the field.  Volume offset translates the field's volume by the
        specified amount from the actual field location. This is in the field's local
        space.
    
    - volumeShape : vsh              (unicode)       [query,edit]
        Volume shape of the field.  Sets/edits/queries the field's volume shape
        attribute.  If set to any value other than none, determines a 3-D volume within
        which the field has effect. Values are: none,cube,sphere,cylinder,cone,torus.
    
    - volumeSweep : vsw              (float)         [query,edit]
        Volume sweep of the field.  Applies only to sphere, cone, cylinder, and torus.
        Similar effect to the sweep attribute in modelling.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.radial`
    """
    pass
def SplitEdge(*args, **kwargs): pass
def toolButton(*args, **kwargs): pass
def OpenCloseCurveOptions(*args, **kwargs): pass
def doBlur(*args, **kwargs):
    """
    The doBlur command  will invoke the blur2d, which is a Maya stand-alone
    application to do 2.5 motion blur given the color image and the motion vector
    file.  For a given input colorFile name, e.g. xxx.iff, the output blurred image
    will be xxx_blur.iffin the same directory as the input colorFile.  There is
    currently no control over the name of the output blurred image.
    
    Flags:
    - colorFile : c                  (unicode)       [create]
        Name of the input color image to be blurred.
    
    - length : l                     (float)         [create]
        Scale applied on the motion vector. Ranges from 0 to infinity.
    
    - memCapSize : o                 (float)         [create]
        Size of the memory cap, in bytes
    
    - sharpness : s                  (float)         [create]
        Determines  the shape of the blur filter. The higher the value, the narrower the
        filter, the sharper the blur. The lower the value, the wider the filter, the
        more spread out the blur. Ranges from 0 to infinity.
    
    - smooth : m                     (float)         [create]
        Filter size to smooth the blurred image. The higher the value, the more anti-
        aliased the alpha channel. Ranges from 1.0 to 5.0.
    
    - smoothColor : r                (bool)          [create]
        Whether to smooth the color or not.
    
    - vectorFile : v                 (unicode)       [create]
        Name of the input motion vector file.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.doBlur`
    """
    pass
def AssumePreferredAngleOptions(*args, **kwargs): pass
def renderSetupHighlight(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderSetupHighlight`
    """
    pass
def scriptTable(*args, **kwargs): pass
def FBXGetTakeName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXGetTakeName`
    """
    pass
def deltaMush(*args, **kwargs): pass
def RenderLayerEditorWindow(*args, **kwargs): pass
def SetBifrostInitialStateOptions(*args, **kwargs): pass
def manipRotateContext(*args, **kwargs): pass
def SetMBSOverwrite(*args, **kwargs): pass
def OutlinerToggleNamespace(*args, **kwargs): pass
def ToggleAttributeEditor(*args, **kwargs): pass
def SelectHullsMask(*args, **kwargs): pass
def ToggleUIElements(*args, **kwargs): pass
def CutPolygonOptions(*args, **kwargs): pass
def dR_timeConfigTGL(*args, **kwargs): pass
def artBaseCtx(*args, **kwargs):
    """
    Flags:
    - accopacity : aco               (bool)          []
    
    - afterStrokeCmd : asc           (unicode)       []
    
    - beforeStrokeCmd : bsc          (unicode)       []
    
    - brushalignment : bra           (bool)          []
    
    - brushfeedback : brf            (bool)          []
    
    - clear : clr                    (bool)          []
    
    - dragSlider : dsl               (unicode)       []
    
    - dynclonemode : dcm             (bool)          []
    
    - exists : ex                    (bool)          []
    
    - expandfilename : eef           (bool)          []
    
    - exportaspectratio : ear        (float)         []
    
    - exportfilemode : efm           (unicode)       []
    
    - exportfilesave : esf           (unicode)       []
    
    - exportfilesizex : fsx          (int)           []
    
    - exportfilesizey : fsy          (int)           []
    
    - exportfiletype : eft           (unicode)       []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - importfileload : ifl           (unicode)       []
    
    - importfilemode : ifm           (unicode)       []
    
    - importreassign : irm           (bool)          []
    
    - lastRecorderCmd : lrc          (unicode)       []
    
    - lastStampName : lsn            (unicode)       []
    
    - lowerradius : lr               (float)         []
    
    - makeStroke : mst               (int)           []
    
    - mappressure : mp               (unicode)       []
    
    - name : n                       (unicode)       []
    
    - opacity : op                   (float)         []
    
    - outline : o                    (bool)          []
    
    - outwhilepaint : owp            (bool)          []
    
    - paintmode : pm                 (unicode)       []
    
    - paintoperationtype : pot       (unicode)       []
    
    - pickColor : pcm                (bool)          []
    
    - pickValue : pv                 (bool)          []
    
    - playbackCursor : plc           (float, float)  []
    
    - playbackPressure : plp         (float)         []
    
    - preserveclonesource : pcs      (bool)          []
    
    - profileShapeFile : psf         (unicode)       []
    
    - projective : prm               (bool)          []
    
    - radius : r                     (float)         []
    
    - record : rec                   (bool)          []
    
    - reflection : rn                (bool)          []
    
    - reflectionaboutorigin : rno    (bool)          []
    
    - reflectionaxis : ra            (unicode)       []
    
    - screenRadius : scR             (float)         []
    
    - selectclonesource : scs        (bool)          []
    
    - showactive : sa                (bool)          []
    
    - stampDepth : stD               (float)         []
    
    - stampProfile : stP             (unicode)       []
    
    - stampSpacing : stS             (float)         []
    
    - strokesmooth : ssm             (unicode)       []
    
    - surfaceConformedBrushVertices : scv (bool)          []
    
    - tablet : tab                   (bool)          []
    
    - tangentOutline : to            (bool)          []
    
    - usepressure : up               (bool)          []
    
    - worldRadius : wlR              (float)         []
    
    
    Derived from mel command `maya.cmds.artBaseCtx`
    """
    pass
def nClothDeleteCacheOpt(*args, **kwargs): pass
def ConvertHairSelectionToRestCurves(*args, **kwargs): pass
def CreateLattice(*args, **kwargs): pass
def cMuscleWeightDefault(*args, **kwargs):
    """
    Flags:
    - angle : ang                    (float)         []
    
    - bycurve : byc                  (bool)          []
    
    - bydirection : byd              (bool)          []
    
    - curve : crv                    (float)         []
    
    - default : default              (bool)          []
    
    - direction : dir                (float, float, float) []
    
    - falloff : fa                   (float)         []
    
    - fixsticky : fix                (bool)          []
    
    - help : h                       (bool)          []
    
    - normalize : n                  (bool)          []
    
    - prune : pr                     (int)           []
    
    - reverse : rev                  (bool)          []
    
    - smooth : sm                    (int)           []
    
    - system : sys                   (PyNode)        []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.cMuscleWeightDefault`
    """
    pass
def cacheEvaluator(*args, **kwargs): pass
def nParticle(*args, **kwargs): pass
def parent(*args, **kwargs): pass
def intSliderGrp(*args, **kwargs): pass
def DisableWeightNrm(*args, **kwargs): pass
def eval(*args, **kwargs):
    """
    Dynamic library stub function
    """
    pass
def saveMenu(*args, **kwargs):
    """
    This command is used for saving the contents of a menu, so that another instance
    of the menu may be recreated later. The command writes out a file which, when
    run as a script, will rebuild the menuItems contained in the original menu. Note
    that the fileName is relative to the user's marking menu preference directory.
    Note that this command is used solely by the Marking Menu Editor and is not
    intended to be used for general purposes. Note that this command doesn't work
    well with controls that have mixed mel and python command callbacks.  Also,
    because it saves the menu state to a mel file, it does not work with callbacks
    that are python callable objects. The first argument is the name of the manu to
    save, the second one is the name of the file.
    
    
    Derived from mel command `maya.cmds.saveMenu`
    """
    pass
def refineSubdivSelectionList(*args, **kwargs):
    """
    Refines a subdivision surface set of components based on the selection list. The
    selected components are subdivided. The selection list after the command is the
    newly created components at the finer subdivision level.
    
    
    Derived from mel command `maya.cmds.refineSubdivSelectionList`
    """
    pass
def dR_vertLockSelected(*args, **kwargs): pass
def XgmSplineSelectConvertToFreeze(*args, **kwargs): pass
def BendOptions(*args, **kwargs): pass
def HypershadeToggleTransformDisplay(*args, **kwargs): pass
def NodeEditorRedockTornOffTab(*args, **kwargs): pass
def TesselateSubdivSurface(*args, **kwargs): pass
def menuSet(*args, **kwargs): pass
def PaintNonlinearWeightsToolOptions(*args, **kwargs): pass
def AddWireOptions(*args, **kwargs): pass
def SelectContiguousEdges(*args, **kwargs): pass
def FBIKLabelExtraFinger(*args, **kwargs): pass
def DisplayLight(*args, **kwargs): pass
def arcLengthDimension(*args, **kwargs): pass
def pose(*args, **kwargs):
    """
    This command is used to create character poses.
    
    Flags:
    - allPoses : ap                  (bool)          [query]
        This flag is used to query all the poses in the scene.
    
    - apply : a                      (bool)          [create]
        This flag is used in conjunction with the name flag to specify a pose should be
        applied to the character.
    
    - name : n                       (unicode)       [create,query]
        In create mode, specify the pose name. In query mode, return a list of all the
        poses for the character. In apply mode, specify the pose to be applied.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pose`
    """
    pass
def NodeEditorGraphNoShapes(*args, **kwargs): pass
def nConstraintAddMembers(*args, **kwargs): pass
def grabColor(*args, **kwargs):
    """
    This command changes the cursor and enters a modal state which will be exited by
    pressing a mouse button.  The color component values of the pixel below the
    cursor at the time of the button press are returned. Three float values
    representing the color components of the pixel below the cursor.  If no flags
    are specified then the default is to return the red, green and blue color
    components.
    
    Flags:
    - hsvValue : hsv                 (bool)          [create]
        The 3 returned float values will specify the hue, saturation and value color
        components.
    
    - rgbValue : rgb                 (bool)          [create]
        The 3 returned float values will specify the red, green and blue color
        components.                  Flag can have multiple arguments, passed either as
        a tuple or a list.
    
    
    Derived from mel command `maya.cmds.grabColor`
    """
    pass
def CreatePolyFromPreview(*args, **kwargs): pass
def IgnoreHardwareShader(*args, **kwargs): pass
def attachFluidCache(*args, **kwargs): pass
def NodeEditorToggleNodeSelectedPins(*args, **kwargs): pass
def nodeIconButton(*args, **kwargs): pass
def SelectUVFrontFacingComponents(*args, **kwargs): pass
def PostInfinityCycle(*args, **kwargs): pass
def dR_convertSelectionToEdge(*args, **kwargs): pass
def psdEditTextureFile(*args, **kwargs):
    """
    Edits the existing PSD file. Addition and deletion of the channels (layer sets)
    are supported.
    
    Dynamic library stub function 
    
    Flags:
    - addChannel : adc               (unicode)       [create]
        Adds an empty layer set with the given name to a already existing PSD file.
    
    - addChannelColor : acc          (unicode, float, float, float) [create]
        (M) Specifies the filled color of  the layer which is created in a layer set
        given by the layer name.
    
    - addChannelImage : aci          (unicode, unicode) [create]
        (M) Specifies the image file name whose image needs to be added as a layer to a
        given layer set which is the first string.
    
    - deleteChannel : deleteChannel  (unicode)       [create]
        (M) Deletes the channels (layer sets) from a PSD file. This is a multiuse flag.
    
    - psdFileName : psf              (unicode)       [create]
        PSD file name.
    
    - snapShotImage : ssi            (unicode)       [create]
        Image file name on the disk containing UV snapshot / reference image.
    
    - uvSnapPostionTop : uvt         (bool)          [create]
        Specifies the position of UV snapshot image layer  in the PSD file.
        Truepositions this layer at the top and Falsepositions the layer at the bottom
        next to the background layer in the PSD file                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.psdEditTextureFile`
    """
    pass
def dR_activeHandleXZ(*args, **kwargs): pass
def BufferCurveSnapshot(*args, **kwargs): pass
def MirrorDeformerWeightsOptions(*args, **kwargs): pass
def HypershadeGraphRearrange(*args, **kwargs): pass
def webBrowser(*args, **kwargs): pass
def UIModeMarkingMenuPopDown(*args, **kwargs): pass
def insertKnotSurface(*args, **kwargs): pass
def HideControllers(*args, **kwargs): pass
def ConvertSelectionToEdgePerimeter(*args, **kwargs): pass
def listInputDeviceAxes(*args, **kwargs):
    """
    This command lists all of the axes of the specified input device.
    
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.listInputDeviceAxes`
    """
    pass
def MakeMotionField(*args, **kwargs): pass
def SelectAllJoints(*args, **kwargs): pass
def subdMatchTopology(*args, **kwargs):
    """
    Command matches topology across multiple subdiv surfaces - at all levels.
    
    Flags:
    - frontOfChain : foc             (bool)          [create]
        This command is used to specify that the new addTopology node should be placed
        ahead (upstream) of existing deformer and skin nodes in the shape's history (but
        not ahead of existing tweak nodes). The input to the addTopology node will be
        the upstream shape rather than the visible downstream shape, so the behavior of
        this flag is the most intuitive if the downstream deformers are in their reset
        (hasNoEffect) position when the new deformer is added.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdMatchTopology`
    """
    pass
def CreateCharacterOptions(*args, **kwargs): pass
def dR_pointSnapRelease(*args, **kwargs): pass
def SelectMaskToolMarkingMenu(*args, **kwargs): pass
def SculptReferenceVectorMarkingMenuRelease(*args, **kwargs): pass
def EnableNCloths(*args, **kwargs): pass
def PolygonBooleanIntersection(*args, **kwargs): pass
def texSculptCacheSync(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.texSculptCacheSync`
    """
    pass
def ChannelControlEditor(*args, **kwargs): pass
def ModifyUpperRadiusPress(*args, **kwargs): pass
def xgmSplineSelect(*args, **kwargs):
    """
    Flags:
    - convertToFreeze : ctf          (bool)          []
    
    - replaceBySelectedFaces : rbf   (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmSplineSelect`
    """
    pass
def GeometryToBoundingBoxOptions(*args, **kwargs): pass
def HidePlanes(*args, **kwargs): pass
def TransformPolygonComponent(*args, **kwargs): pass
def controller(*args, **kwargs): pass
def CreateEmitterOptions(*args, **kwargs): pass
def FBIKLabelKnee(*args, **kwargs): pass
def RenderTextureRange(*args, **kwargs): pass
def SurfaceEditingToolOptions(*args, **kwargs): pass
def UVNormalBasedProjection(*args, **kwargs): pass
def DetachComponent(*args, **kwargs): pass
def MatchScaling(*args, **kwargs): pass
def RotateToolOptions(*args, **kwargs): pass
def dR_moveTweakTool(*args, **kwargs): pass
def RemoveBifrostEmissionRegion(*args, **kwargs): pass
def HypershadeGraphAddSelected(*args, **kwargs): pass
def SelectAllWires(*args, **kwargs): pass
def isDirty(*args, **kwargs):
    """
    The isDirtycommand is used to check if a plug is dirty.  The return value is 0
    if it is not and 1 if it is.  If more than one plug is specified then the result
    is the logical orof all objects (ie. returns 1 if \*any\* of the plugs are
    dirty).
    
    Flags:
    - connection : c                 (bool)          [create]
        Check the connection of the plug (default).
    
    - datablock : d                  (bool)          [create]
        Check the datablock entry for the plug.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.isDirty`
    """
    pass
def wrinkle(*args, **kwargs):
    """
    The wrinkle command is used to create a network of wrinkles on a surface. It
    automatically creates a network of wrinkle curves that control a wire deformer.
    The wrinkle curves are attached to a cluster deformer.
    
    Flags:
    - axis : ax                      (float, float, float) [create]
        Specifies the plane of the wrinkle.
    
    - branchCount : brc              (int)           [create]
        Specifies the number of branches per wrinkle. Default is 2.
    
    - branchDepth : bd               (int)           [create]
        Specifies the depth of the branching. Default is 0.
    
    - center : ct                    (float, float, float) [create]
        Specifies the center of the wrinkle.
    
    - crease : cr                    (unicode)       [create]
        Specifies an existing curve to serve as the wrinkle.
    
    - dropoffDistance : dds          (float)         [create]
        Specifies the dropoff distance around the center.
    
    - envelope : en                  (float)         [create]
        The envelope globally attenuates the amount of deformation. Default is 1.0.
    
    - randomness : rnd               (float)         [create]
        Amount of randomness. Default is 0.2.
    
    - style : st                     (unicode)       [create]
        Specifies the wrinkle style. Valid values are radialor tangential
    
    - thickness : th                 (float)         [create]
        Wrinkle thickness. Default is 1.0.
    
    - uvSpace : uv                   (float, float, float, float, float) [create]
        1/2 length, 1/2 breadth, rotation angle, center u, v definition of a patch in uv
        space where the wrinkle is to be constructed.
    
    - wrinkleCount : wc              (int)           [create]
        Specifies the number of wrinkle lines to be generated. Default is 3.
    
    - wrinkleIntensity : wi          (float)         [create]
        Increasing the intensity makes it more wrinkly. Default is 0.5.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.wrinkle`
    """
    pass
def NodeEditorGraphAllShapesExceptShading(*args, **kwargs): pass
def HypershadeAdditiveGraphingMode(*args, **kwargs): pass
def ToggleFaceIDs(*args, **kwargs): pass
def PoseEditor(*args, **kwargs): pass
def XgGroomingVis(*args, **kwargs): pass
def AddBlendShapeOptions(*args, **kwargs): pass
def UVEditorFrameAll(*args, **kwargs): pass
def FBXImportAutoAxisEnable(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportAutoAxisEnable`
    """
    pass
def disconnectAttr(*args, **kwargs): pass
def fluidMergeCache(*args, **kwargs): pass
def SubdivProxy(*args, **kwargs): pass
def cacheAppend(*args, **kwargs): pass
def dR_loadRecentFile3(*args, **kwargs): pass
def debugNamespace(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.debugNamespace`
    """
    pass
def GraphEditorValueLinesToggle(*args, **kwargs): pass
def getModifiers(*args, **kwargs):
    """
    This command returns the current state of the modifier keys. The state of each
    modifier can be obtained by testing for the modifier's corresponding bit value
    in the return value. Shift is bit 1, Ctrl is bit 3, Alt is bit 4, and bit 5 is
    the 'Windows' key on Windows keyboards and the Command key on Mac keyboards.
    See the provided example for more details on testing for each modifier's bit
    value.
    
    
    Derived from mel command `maya.cmds.getModifiers`
    """
    pass
def DetachEdgeComponent(*args, **kwargs): pass
def TangentsAuto(*args, **kwargs): pass
def SetIKFKKeyframe(*args, **kwargs): pass
def PaintWireWeightsToolOptions(*args, **kwargs): pass
def ResetTemplateBrush(*args, **kwargs): pass
def cylinder(*args, **kwargs): pass
def HypershadeRenameActiveTab(*args, **kwargs): pass
def ToggleSelectionHandles(*args, **kwargs): pass
def threePointArcCtx(*args, **kwargs):
    """
    The threePointArcCtx command creates a new context for creating 3 point arcs
    
    Flags:
    - degree : d                     (int)           [create,query,edit]
        VAlid values are 1 or 3. Default degree 3.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - spans : s                      (int)           [create,query,edit]
        Default is 8.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.threePointArcCtx`
    """
    pass
def SaveSceneAs(*args, **kwargs): pass
def AssignTemplateOptions(*args, **kwargs): pass
def ConformPolygonOptions(*args, **kwargs): pass
def RigidBindSkinOptions(*args, **kwargs): pass
def TimeEditorDeleteSelectedTracks(*args, **kwargs): pass
def DeleteAllControllers(*args, **kwargs): pass
def attrEnumOptionMenu(*args, **kwargs): pass
def dR_safeFrameTGL(*args, **kwargs): pass
def inViewEditor(*args, **kwargs):
    """
    Mel access to the In-View Editor. In-View Editors display a customizable subset
    of a node's attributes, letting you adjust attributes directly in a scene
    instead of opening the Channel Box or Attribute Editor. In query mode, return
    type is based on queried flag.
    
    Flags:
    - visible : v                    (bool)          [create,query]
        Shows/hides the In-View Editor outside the Show Manips context.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.inViewEditor`
    """
    pass
def ToggleChannelBox(*args, **kwargs): pass
def hikRigSync(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.hikRigSync`
    """
    pass
def OpenReleaseNotes(*args, **kwargs): pass
def normalConstraint(*args, **kwargs): pass
def EPCurveToolOptions(*args, **kwargs): pass
def RemoveBlendShapeOptions(*args, **kwargs): pass
def nucleusGetnParticleExample(*args, **kwargs): pass
def cmdSkydomeLight(*args, **kwargs): pass
def muMessageDelete(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.muMessageDelete`
    """
    pass
def SmoothBindSkinOptions(*args, **kwargs): pass
def ShowBatchRender(*args, **kwargs): pass
def HypershadeShapeMenuStateNoShapes(*args, **kwargs): pass
def SubstituteGeometryOptions(*args, **kwargs): pass
def OffsetEdgeLoopToolOptions(*args, **kwargs): pass
def PaintEffectsWindow(*args, **kwargs): pass
def falloffCurve(*args, **kwargs): pass
def SmoothingDisplayToggle(*args, **kwargs): pass
def closeSurface(*args, **kwargs): pass
def ExtractFace(*args, **kwargs): pass
def DeleteEdge(*args, **kwargs): pass
def CreateOcean(*args, **kwargs): pass
def ToggleCreaseEdges(*args, **kwargs): pass
def TimeEditorSceneAuthoringToggle(*args, **kwargs): pass
def JdsWin(*args, **kwargs): pass
def SelectShortestEdgePathTool(*args, **kwargs): pass
def ShowIKHandles(*args, **kwargs): pass
def NodeEditorAutoSizeNodes(*args, **kwargs): pass
def BreakShadowLinks(*args, **kwargs): pass
def WalkTool(*args, **kwargs): pass
def SequenceEditor(*args, **kwargs): pass
def ShowSculptObjects(*args, **kwargs): pass
def SetEditor(*args, **kwargs): pass
def HIKPinTranslate(*args, **kwargs): pass
def snapshot(*args, **kwargs): pass
def Snap3PointsTo3PointsOptions(*args, **kwargs): pass
def CutCurveOptions(*args, **kwargs): pass
def CreateBarrierConstraint(*args, **kwargs): pass
def nConstraintAttractToMatch(*args, **kwargs): pass
def AveragePolygonNormalsOptions(*args, **kwargs): pass
def ScaleToolWithSnapMarkingMenuPopDown(*args, **kwargs): pass
def SetMeshRelaxTool(*args, **kwargs): pass
def MoveDown(*args, **kwargs): pass
def PolyCreaseTool(*args, **kwargs): pass
def CameraRemoveAll(*args, **kwargs): pass
def dR_objectBackfaceTGL(*args, **kwargs): pass
def UVSnapTogether(*args, **kwargs): pass
def getInputDeviceRange(*args, **kwargs):
    """
    This command lists the minimum and maximum values the device axis can return.
    This value is the raw device values before any mapping is applied.  If you don't
    specify an axis the values for all axes of the device are returned.
    
    Dynamic library stub function 
    
    Flags:
    - maxValue : max                 (bool)          [create]
        list only the maximum value of the axis
    
    - minValue : min                 (bool)          [create]
        list only the minimum value of the axis                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getInputDeviceRange`
    """
    pass
def XgmSetClumpBrushToolOption(*args, **kwargs): pass
def PaintEffectsPanel(*args, **kwargs): pass
def AddPondBoatLocator(*args, **kwargs): pass
def nClothDeleteCacheFramesOpt(*args, **kwargs): pass
def CreateMotionTrail(*args, **kwargs): pass
def ShowMeshGrabUVToolOptions(*args, **kwargs): pass
def DeleteAllClips(*args, **kwargs): pass
def CreateConstructionPlane(*args, **kwargs): pass
def uniform(*args, **kwargs): pass
def sbs_GetAutoBake(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetAutoBake`
    """
    pass
def polyBevel3(*args, **kwargs): pass
def nexQuadDrawContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.nexQuadDrawContext`
    """
    pass
def ViewAlongAxisNegativeZ(*args, **kwargs): pass
def DeleteMemoryCaching(*args, **kwargs): pass
def PfxPresetBlend(*args, **kwargs): pass
def DistanceTool(*args, **kwargs): pass
def RecentCommandsWindow(*args, **kwargs): pass
def shadingLightRelCtx(*args, **kwargs): pass
def nodeOutliner(*args, **kwargs): pass
def OpenAREAForums(*args, **kwargs): pass
def smoothCurve(*args, **kwargs): pass
def GetHIKNodeName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetHIKNodeName`
    """
    pass
def NodeEditorToggleLockUnlock(*args, **kwargs): pass
def ThreeRightSplitViewArrangement(*args, **kwargs): pass
def SelectComponentToolMarkingMenu(*args, **kwargs): pass
def SetShrinkWrapInnerObject(*args, **kwargs): pass
def ImportWorkspaceFiles(*args, **kwargs): pass
def affectedNet(*args, **kwargs):
    """
    This command gets the list of attributes on a node or node type and creates
    nodes of type TdnAffect, one for each attribute, that are connected iff the
    source node's attribute affects the destination node's attribute. In query mode,
    return type is based on queried flag.
    
    Flags:
    - name : n                       (unicode)       [create,query,edit]
        Name to use for this command
    
    - type : t                       (unicode)       [create]
        Get information from the given node type instead of one node
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.affectedNet`
    """
    pass
def AlignSurfacesOptions(*args, **kwargs): pass
def artAttrSkinPaintCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.artAttrSkinPaintCmd`
    """
    pass
def XgmSetPlaceBrushTool(*args, **kwargs): pass
def memoryDiag(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.memoryDiag`
    """
    pass
def dR_multiCutRelease(*args, **kwargs): pass
def FBXResamplingRate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXResamplingRate`
    """
    pass
def texWinToolCtx(*args, **kwargs):
    """
    This class creates a context for the View Tools track, dolly, and box zoomin the
    texture window.
    
    Flags:
    - alternateContext : ac          (bool)          [create,query]
        Set the ALT+MMB and ALT+SHIFT+MMB to refer to this context.
    
    - boxzoom : bz                   (bool)          [create,query,edit]
        Perform Box Zoom
    
    - dolly : do                     (bool)          [create,query,edit]
        Dollies the view
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - toolName : tn                  (unicode)       [create,query]
        Name of the specific tool to which this command refers.
    
    - track : tr                     (bool)          [create,query,edit]
        Tracks the view                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texWinToolCtx`
    """
    pass
def SetCMCSpecular(*args, **kwargs): pass
def IncreaseManipulatorSize(*args, **kwargs): pass
def fluidEmitter(*args, **kwargs): pass
def dR_activeHandleZ(*args, **kwargs): pass
def popPinning(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.popPinning`
    """
    pass
def groupParts(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.groupParts`
    """
    pass
def PreviousViewArrangement(*args, **kwargs): pass
def HypershadeOpenUVEditorWindow(*args, **kwargs): pass
def polyNormalizeUV(*args, **kwargs): pass
def PasteVertexWeights(*args, **kwargs): pass
def autoPlace(*args, **kwargs):
    """
    This command takes a point in the centre of the current modeling pane and
    projects it onto the live surface. This produces a point in 3 space which is
    returned. If the um/useMouseflag is set the current mouse position is used
    rather than the centre of the modeling pane.
    
    Flags:
    - useMouse : um                  (bool)          [create]
        Use the current mouse position rather than the centre of the active view.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.autoPlace`
    """
    pass
def ModifyStampDepthPress(*args, **kwargs): pass
def ArtPaintSelectToolOptions(*args, **kwargs): pass
def spBirailCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - bldProfileFirst : bpf          (bool)          []
    
    - bldProfileLast : bpl           (bool)          []
    
    - bldProfiles : bp               (bool)          []
    
    - bldRailOne : br1               (bool)          []
    
    - bldRailTwo : br2               (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - exists : ex                    (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - polygon : po                   (int)           []
    
    - reset : rs                     (bool)          []
    
    - tangentContinuityProfile1 : tp1 (bool)          []
    
    - toolNode : tnq                 (bool)          []
    
    - transformMode : tm             (int)           []
    
    
    Derived from mel command `maya.cmds.spBirailCtx`
    """
    pass
def polySplitRing(*args, **kwargs): pass
def PlanarOptions(*args, **kwargs): pass
def CopyMeshAttributes(*args, **kwargs): pass
def ShowMeshEraseToolOptions(*args, **kwargs): pass
def keyframeRegionSelectKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to select keyframes within the
    keyframe region of the dope sheet editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.keyframeRegionSelectKeyCtx`
    """
    pass
def DownloadBonusTools(*args, **kwargs): pass
def ExportDeformerWeightsOptions(*args, **kwargs): pass
def ShareColorInstances(*args, **kwargs): pass
def CreateSpotLight(*args, **kwargs): pass
def TogglePanelMenubar(*args, **kwargs): pass
def getMetadata(*args, **kwargs):
    """
    This command is used to retrieve the values of metadata elements from a node or
    scene. It is restricted to returning a single structure member at a time. For
    convenience the detail required is only enough to find a single Member of a
    single Structure on a single metadata Channel.  In the simplest case if there is
    a single Stream on one metadata Channel which uses a Structure with only one
    Member then all that is required is the name of the object containing the
    metadata. In the most complex case the 'channelName', 'streamName', and
    'memberName' are all required to narrow down the metadata to a single unique
    Member.  In general for scripting it's a good idea to use all flags anyway since
    there could be metadata added anywhere. The shortcuts are mainly for quick entry
    when entering commands directly in the script editor or command line.  When an
    Index is specified where data is not present the command fails with a message
    telling you which Index or Indices didn't have values. Use the
    hasMetadatacommand first to determine where metadata exists if you need to know
    in advance where to find valid metadata.  Filter FlagschannelName- Only look for
    metadata on one particular Channel typestreamName- Only look for metadata on one
    particular named Stream. When used in conjunction with channelNamethen ignore
    Streams with a matching name but a different Channel typeindex- Only look for
    metadata on one or more specific Index values of a Stream. Requires use of the
    streamNameflag. Does not require the indexTypeflag as that will be inferred by
    the streamName.startIndex/endIndex- Same as indexbut using an entire range of
    Index values rather than a single one. Not valid for index types not supporting
    ranges (e.g. strings)indexType- Only look for metadata using a particular Index
    type. Can have its scope narrowed by other filter flags as well.memberName- The
    particular Member in the metadata in a Structure to retrieve. If this is not
    specified the Structure can only have a single Member.Metadata on meshes is
    special in that the Channel types vertex, edge, face, and vertexFaceare directly
    connected to the components of the same name. To make getting these metadata
    Channels easier you can simply select or specify on the command line the
    corresponding components rather than using the channelNameand
    index/startIndex/endIndexflags. For example the selection
    myMesh.vtx[8:10]corresponds to channelName = vertexand either index = 8, 9, 10as
    a multi-use flag or setIndex = 8, endIndex=10.  Only a single node or scene and
    unique metadata Structure Member are allowed in a single command. This keeps the
    data simple at the possible cost of requiring multiple calls to the command to
    get more than one Structure Member's value.  When the data is returned it will
    be in Index order with an entire Member appearing together. For example if you
    were retrieving float[3] metadata on three components you would get the nine
    values back in the order: index[0]-float[0], index[0]-float[1],
    index[0]-float[2], index[1]-float[0], index[1]-float[1], index[1]-float[2],
    index[2]-float[0], index[2]-float[1], index[2]-float[2]. In the Python
    implementation the float[3] values will be an array each so you would get back
    three float[3] arrays.
    
    Flags:
    - channelName : cn               (unicode)       [create,query]
        Filter the metadata selection to only recognize metadata belonging to the
        specified named Channel (e.g. vertex). This flag is ignored if the components on
        the selection list are being used to specify the metadata of interest. In query
        mode, this flag can accept a value.
    
    - channelType : cht              (unicode)       [create,query]
        Obsolete - use the 'channelName' flag instead. In query mode, this flag can
        accept a value.
    
    - dataType : dt                  (bool)          [create]
        Used with the flag 'streamName' and 'memberName' to query the dataType of the
        specfied member.
    
    - endIndex : eix                 (unicode)       [create]
        The metadata is stored in a Stream, which is an indexed list. If you have mesh
        components selected then the metadata indices are implicit in the list of
        selected components. If you select only the node or scene then this flag may be
        used in conjunction with the startIndexflag to specify a range of indices from
        which to retrieve the metadata. It is an error to have the value of startIndexbe
        greater than that of endIndex.  See also the indexflag for an alternate way to
        specify multiple indices. This flag can only be used on index types that support
        a range (e.g. integer values - it makes no sense to request a range between two
        strings)  In query mode, this flag can accept a value.
    
    - index : idx                    (unicode)       [create,query]
        In the typical case metadata is indexed using a simple integer value. Certain
        types of data may use other index types. e.g. a vertexFacecomponent will use a
        pairindex type, which is two integer values; one for the face ID of the
        component and the second for the vertex ID.  The indexflag takes a string,
        formatted in the way the specified indexTyperequires. All uses of the indexflag
        have the same indexType. If the type was not specified it is assumed to be a
        simple integer value.  In query mode, this flag can accept a value.
    
    - indexType : idt                (unicode)       [create,query]
        Name of the index type the new Channel should be using. If not specified this
        defaults to a simple integer index. Of the native types only a mesh
        vertexFacechannel is different, using a pairindex type. In query mode, this flag
        can accept a value.
    
    - listChannelNames : lcn         (bool)          [create]
        Query the channel names on the shape. This flag can be used with some flags to
        filter the results. It can be used with the flag 'streamName' to get the channel
        with the specfied stream and the flag 'memberName' to get the channel in which
        the stream contains the specified member. It cannot be used with the flag
        'channelName'.
    
    - listMemberNames : lmn          (bool)          [create]
        Query the member names on the shape. This flag can be used with some flags to
        filter the results. It can be used with 'streamName' to get the member which is
        in the specified stream and the flag 'channelName' to get the member which is
        used in the specfied channel. It cannot be used with the flag 'memberName'.
    
    - listStreamNames : lsn          (bool)          [create]
        Query the stream names on the shape. This flag can be used with some flags to
        filter the results. It can be used with the flag 'channelName' to get the stream
        names on the specified channel and the flag 'memberName' to get the stream names
        which has the specified member. It cannot be used with the flag 'streamName'.
    
    - memberName : mn                (unicode)       [create]
        Name of the Structure member being retrieved. The names of the members are set
        up in the Structure definition, either through the description passed in through
        the dataStructurecommand or via the API used to create that Structure. This flag
        is only necessary when selected Structures have more than one member.
    
    - scene : scn                    (bool)          [create,query]
        Use this flag when you want to add metadata to the scene as a whole rather than
        to any individual nodes. If you use this flag and have nodes selected the nodes
        will be ignored and a warning will be displayed.
    
    - startIndex : six               (unicode)       [create]
        The metadata is stored in a Stream, which is an indexed list. If you have mesh
        components selected then the metadata indices are implicit in the list of
        selected components. If you select only the node or scene then this flag may be
        used in conjunction with the endIndexflag to specify a range of indices from
        which to retrieve the metadata. It is an error to have the value of startIndexbe
        greater than that of endIndex.  See also the indexflag for an alternate way to
        specify multiple indices. This flag can only be used on index types that support
        a range (e.g. integer values - it makes no sense to request a range between two
        strings)  In query mode, this flag can accept a value.
    
    - streamName : stn               (unicode)       [create,query]
        Name of the metadata Stream. Depending on context it could be the name of a
        Stream to be created, or the name of the Stream to pass through the filter. In
        query mode, this flag can accept a value.Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getMetadata`
    """
    pass
def MoveTool(*args, **kwargs): pass
def NodeEditorTransforms(*args, **kwargs): pass
def xgmCurveToGuide(*args, **kwargs):
    """
    Flags:
    - deleteCurve : dc               (bool)          []
    
    - description : d                (unicode)       []
    
    - progressBar : pb               (unicode)       []
    
    - tipSnapAmount : tsa            (float)         []
    
    - tipSnapPower : tsp             (float)         []
    
    
    Derived from mel command `maya.cmds.xgmCurveToGuide`
    """
    pass
def PickColorActivate(*args, **kwargs): pass
def ArtPaintAttrToolOptions(*args, **kwargs): pass
def objectType(*args, **kwargs):
    """
    This command returns the type of elements. Warning: This command is incomplete
    and may not be supported by all object types.
    
    Flags:
    - convertTag : ct                (unicode)       []
    
    - isAType : isa                  (unicode)       [create]
        Returns true if the object is the specified type or derives from an object that
        is of the specified type. This flag will only work with dependency nodes.
    
    - isType : i                     (unicode)       [create]
        Returns true if the object is exactly of the specified type. False otherwise.
    
    - tagFromType : tgt              (unicode)       [create]
        Returns the type tag given a type name.
    
    - typeFromTag : tpt              (int)           [create]
        Returns the type name given an integer type tag.
    
    - typeTag : tt                   (bool)          [create]
        Returns an integer tag that is unique for that object type.  Not all object
        types will have tags.  This is the unique 4-byte value that is used to identify
        nodes of a given type in the binary file format.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.objectType`
    """
    pass
def HypergraphHierarchyWindow(*args, **kwargs): pass
def checkBox(*args, **kwargs): pass
def sbs_IsSubstanceRelocalized(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_IsSubstanceRelocalized`
    """
    pass
def polyClipboard(*args, **kwargs):
    """
    The command allows the user to copy and paste certain polygonal attributes to a
    clipboard. These attributes are:  1) Shader (shading engine) assignment.  2)
    Texture coordinate (UV) assignment.  3) Color value assignment. Any combination
    of attributes can be chosen for the copy or paste operation. If the attribute
    has not been copied to the clipboard, then naturally it cannot be pasted from
    the clipboard. The copy option will copy the attribute assignments from a single
    source polygonal dag object or polygon component. If the source does not have
    the either UV or color attributes, then nothing will be copied to the clipboard.
    The paste option will paste the attribute assignments to one or more polygon
    components or polygonal dag objects. If the destination does not have either UV
    or color attributes, then new values will be assigned as needed. Additionally,
    there is the option to clear the clipboard contents
    
    Flags:
    - clear : cl                     (bool)          [create]
        When used, will mean to clear the specified attribute argument(s).
    
    - color : clr                    (bool)          [create]
        When used, will be to copy or paste color attributes
    
    - copy : cp                      (bool)          [create]
        When used, will mean to copy the specified attribute argument(s).
    
    - paste : ps                     (bool)          [create]
        When used, will mean to paste the specified attribute argument(s).
    
    - shader : sh                    (bool)          [create]
        When used, will be to copy or paste shader attributes
    
    - uvCoordinates : uv             (bool)          [create]
        When used, will be to copy or paste texture coordinate attributes
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyClipboard`
    """
    pass
def polyReduce(*args, **kwargs): pass
def FBXExportScaleFactor(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportScaleFactor`
    """
    pass
def DeleteAllPoses(*args, **kwargs): pass
def HypershadeGridToggleVisibility(*args, **kwargs): pass
def ShrinkLoopPolygonSelectionRegion(*args, **kwargs): pass
def PublishParentAnchor(*args, **kwargs): pass
def InsertJointTool(*args, **kwargs): pass
def PlayblastWindow(*args, **kwargs): pass
def HypershadeOpenConnectWindow(*args, **kwargs): pass
def NURBSTexturePlacementToolOptions(*args, **kwargs): pass
def CreatePolygonToolOptions(*args, **kwargs): pass
def boxZoomCtx(*args, **kwargs):
    """
    This command can be used to create, edit, or query a box zoom context. If this
    context is used on a perspective camera, the field of view and view direction
    are changed. If the camera is orthographic, the orthographic width and eye point
    are changed. The left and middle mouse interactively zoom the view. The control
    key can be used to enable box zoom. A box starting from left to right will zoom
    in, and a box starting from right to left will zoom out.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - zoomScale : zs                 (float)         [create,query,edit]
        Scale the zoom.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.boxZoomCtx`
    """
    pass
def HypershadeDeleteNodes(*args, **kwargs): pass
def cmdArnoldFlushAll(*args, **kwargs): pass
def outlinerEditor(*args, **kwargs): pass
def dynWireCtx(*args, **kwargs):
    """
    Flags:
    - brushDrag : bd                 (float)         []
    
    - brushMass : bm                 (float)         []
    
    - displayQuality : dq            (float)         []
    
    - doProject : dp                 (int)           []
    
    - dragBrushSize : dbs            (unicode)       []
    
    - drawAsMesh : dam               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - inputSamples : inputSamples    (int)           []
    
    - paintAtDepth : pd              (bool)          []
    
    - pixelMode : pxm                (int)           []
    
    - pressureMapping1 : pm1         (int)           []
    
    - pressureMapping2 : pm2         (int)           []
    
    - pressureMapping3 : pm3         (int)           []
    
    - pressureMax1 : px1             (float)         []
    
    - pressureMax2 : px2             (float)         []
    
    - pressureMax3 : px3             (float)         []
    
    - pressureMin1 : ps1             (float)         []
    
    - pressureMin2 : ps2             (float)         []
    
    - pressureMin3 : ps3             (float)         []
    
    - sampleSeparation : sp          (float)         []
    
    - setSelection : ss              (bool)          []
    
    - surfaceOffset : sof            (float)         []
    
    - usePressure : usp              (bool)          []
    
    
    Derived from mel command `maya.cmds.dynWireCtx`
    """
    pass
def filterExpand(*args, **kwargs):
    """
    Based on selected components (or components specified on the command line), the
    command filters and/or expands the list given the options. Returns a string
    array containing all matching selection items. Selection masks are as follows:
    Object TypeMaskHandle                        0            Nurbs Curves
    9            Nurbs Surfaces                10        Nurbs Curves    On Surface
    11        Polygon                         12        Locator XYZ
    22        Orientation Locator            23        Locator UV
    24        Control Vertices (CVs)        28        Edit Points
    30        Polygon Vertices             31        Polygon Edges                32
    Polygon Face                    34        Polygon UVs                     35
    Subdivision Mesh Points        36        Subdivision Mesh Edges        37
    Subdivision Mesh Faces        38        Curve Parameter Points        39
    Curve Knot                    40        Surface Parameter Points         41
    Surface Knot                    42        Surface Range                43
    Trim Surface Edge            44        Surface Isoparms             45
    Lattice Points                46        Particles                    47
    Scale Pivots                    49        Rotate Pivots                50
    Select Handles                51        Subdivision Surface            68
    Polygon Vertex Face             70        NURBS Surface Face             72
    Subdivision Mesh UVs            73
    
    Flags:
    - expand : ex                    (bool)          [create]
        Each item is a single entity if this is true.  Default is true.
    
    - fullPath : fp                  (bool)          [create]
        If this is true and the selection item is a DAG object, return its full
        selection path, instead of the name of the object only when this value is false.
        Default is false.
    
    - selectionMask : sm             (int)           [create]
        Specify the selection mask
    
    - symActive : sma                (bool)          [create]
        If symmetry is enabled only return the components on the active symmetry side of
        the object. This flag has no effect if symmetry is not active.
    
    - symNegative : smn              (bool)          [create]
        If symmetry is enabled only return the components on the negative side of the
        object relative to the current symmetry plane. This flag has no effect if
        symmetry is not active.
    
    - symPositive : smp              (bool)          [create]
        If symmetry is enabled only return the components on the positive side of the
        object relative to the current symmetry plane. This flag has no effect if
        symmetry is not active.
    
    - symSeam : sms                  (bool)          [create]
        If symmetry is enabled only return the components that lie equally on both sides
        of the object relative to the current symmetry plane. This flag has no effect if
        symmetry is not active.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.filterExpand`
    """
    pass
def CurveFillet(*args, **kwargs): pass
def CreaseProxyEdgeTool(*args, **kwargs): pass
def OpenCloseSurfaces(*args, **kwargs): pass
def EnterEditModePress(*args, **kwargs): pass
def SplitEdgeRingTool(*args, **kwargs): pass
def AttachSubdivSurface(*args, **kwargs): pass
def renderSetupLegacyLayer(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderSetupLegacyLayer`
    """
    pass
def polyCreateFacetCtx(*args, **kwargs):
    """
    Create a new context to create polygonal objects                 In query mode,
    return type is based on queried flag.
    
    Flags:
    - append : ap                    (bool)          [create,query,edit]
        Allows to switch to polyAppendFacetCtx tool
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - maximumNumberOfPoints : mp     (int)           [create,query,edit]
        Allows the ability to set a upper bound on the number of points in interactively
        place before polygon is created. A value less than 2 will mean that there is no
        upper bound.
    
    - planarConstraint : pc          (bool)          [create,query,edit]
        allows/avoid new facet to be non-planar. If on, all new points will be projected
        onto current facet plane.
    
    - subdivision : s                (int)           [create,query,edit]
        Number of subdivisions for each edge. Default:1
    
    - texture : tx                   (int)           [create,query,edit]
        What texture mechanism to be applied 0=No textures, 1=Normalized, Undistorted
        textures 2=Unitized textures Default:0                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCreateFacetCtx`
    """
    pass
def backgroundEvaluationManager(*args, **kwargs):
    """
    Allows user to pause and restart background evaluations.                 In
    query mode, return type is based on queried flag.
    
    Flags:
    - interrupt : i                  (bool)          [create,query]
        Enable or disable fast interrupt of background execution during interactive
        workflow.
    
    - mode : m                       (unicode)       [create,query]
        Changes the current evaluation mode in the evaluation manager. Supported values
        are serialand parallel.
    
    - pause : p                      (bool)          [create,query]
        Pause background evaluation. Will block till background evaluation is fully
        stopped. Can be queried to get the current state.
    
    - resume : r                     (bool)          [create]
        Resume background evaluation. Will start suspended evaluations unless someones
        else requested it.                                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.backgroundEvaluationManager`
    """
    pass
def RenderLayerRelationshipEditor(*args, **kwargs): pass
def deviceManager(*args, **kwargs):
    """
    This command queriers the internal device manager for information on attached
    devices.           In query mode, return type is based on queried flag.
    
    Dynamic library stub function 
    
    Flags:
    - attachment : att               (bool)          [query]
        Returns the plugs that a device and axis are attached to.  Expects the
        -deviceIndex and axisIndex to be used in conjunction.
    
    - axisCoordChanges : acc         (bool)          [query]
        Returns whether the axis coordinate changes.  Expects the -deviceIndex and
        -axisIndex flags to be used in conjunction.
    
    - axisIndex : axi                (int)           [create,query,edit]
        Used usually in conjunction with other flags, to indicate the index of the axis.
    
    - axisName : axn                 (bool)          [query]
        Returns the name of the axis.  Expects the -deviceIndex and -axisIndex flags to
        be used in conjunction.
    
    - axisOffset : axo               (bool)          [query]
        Returns the offset of the axis.  Expects the -deviceIndex and -axisIndex flags
        to be used in conjunction.
    
    - axisScale : axs                (bool)          [query]
        Returns the scale of the axis.  Expects the -deviceIndex and -axisIndex flags to
        be used in conjunction.
    
    - deviceIndex : dvi              (int)           [create,query,edit]
        Used usually in conjunction with other flags, to indicate the index of the
        device.
    
    - deviceNameFromIndex : dni      (int)           [query]
        Returns the name of the device with the given index.
    
    - numAxis : nax                  (bool)          [query]
        Returns the number of axis this device has.  Expects the -deviceIndex flag to be
        used.
    
    - numDevices : ndv               (bool)          [query]
        Returns the number of devices currently attached.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deviceManager`
    """
    pass
def PointOnCurveOptions(*args, **kwargs): pass
def manipRotateLimitsCtx(*args, **kwargs):
    """
    Create a context for the rotate limits manipulator.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.manipRotateLimitsCtx`
    """
    pass
def texSmudgeUVContext(*args, **kwargs):
    """
    This command creates a context for smudge UV tool.  This context only works in
    the texture UV editor.
    
    Flags:
    - dragSlider : ds                (unicode)       [query,edit]
        radius | none Enables the drag slider mode. This is to support brush resizing
        while holding the 'b' or 'B' button.
    
    - effectType : et                (unicode)       [query,edit]
        fixed | smudge Specifies the effect of the tool. In fixed mode, the UVs move as
        if they are attached by a rubber band. In smudge mode the UVs are moved as the
        cursor is dragged over the UVs.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - functionType : ft              (unicode)       [query,edit]
        exponential | linear | constant. Specifies how UVs fall off from the center of
        influence.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - pressure : prs                 (float)         [query,edit]
        Pressure value when effect type is set to smudge.
    
    - radius : r                     (float)         [query,edit]
        Radius of the smudge tool. All UVs within this radius are affected by the tool
    
    - smudgeIsMiddle : sim           (bool)          [query,edit]
        By default, the left mouse button initiates the smudge. However, this conflicts
        with selection. When smudgeIsMiddle is on, smudge mode is activated by the
        middle mouse button instead of the left mouse button.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texSmudgeUVContext`
    """
    pass
def SetMeshCloneTargetTool(*args, **kwargs): pass
def OutlinerToggleSetMembers(*args, **kwargs): pass
def GetHIKEffectorCount(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.GetHIKEffectorCount`
    """
    pass
def aliasAttr(*args, **kwargs):
    """
    Allows aliases (alternate names) to be defined for any attribute of a specified
    node. When an attribute is aliased, the alias will be used by the system to
    display information about the attribute. The user may, however, freely use
    either the alias or the original name of the attribute. Only a single alias can
    be specified for an attribute so setting an alias on an already-aliased
    attribute destroys the old alias.
    
    Flags:
    - remove : rm                    (bool)          [create]
        Specifies that aliases listed should be removed (otherwise new aliases are
        added).                                 Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.aliasAttr`
    """
    pass
def SelectSurfaceBorder(*args, **kwargs): pass
def xgmPointsContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmPointsContext`
    """
    pass
def NodeEditorCopy(*args, **kwargs): pass
def CycleBackgroundColor(*args, **kwargs): pass
def SelectAllInput(*args, **kwargs): pass
def dR_tweakPress(*args, **kwargs): pass
def SlideEdgeToolOptions(*args, **kwargs): pass
def bifMeshImport(*args, **kwargs):
    """
    Flags:
    - directory : dir                (unicode)       []
    
    - help : h                       (bool)          []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.bifMeshImport`
    """
    pass
def CreateMashNetworkOptions(*args, **kwargs): pass
def nSoft(*args, **kwargs):
    """
    Makes a nSoft body from the object(s) passed on the command line or in the
    selection list.  The geometry can be a NURBS, polygonal, lattice object.  The
    resulting nSoft body is made up of a hierarchy with a particle shape and a
    geometry shape, thus: T    / \  T   G /      P        Dynamics are applied to
    the particle shape and the resulting particle positions then drive the locations
    of the geometry's CVs, vertices, or lattice points. With the convert option, the
    particle shape and its transform are simply inserted below the original shape's
    hierarchy. With the duplicate option, the original geometry's transform and
    shape are duplicated underneath its parent, and the particle shape is placed
    under the duplicate.  Note that any animation on the hierarchy will affect the
    particle shape as well.  If you do not want them, then reparent the structure
    outside the hierarchy. When duplicating, the nSoft portion (the duplicate) is
    given the name copyOf+ original object name.  The particle portion is always
    given the name original object name+ Particles.None of the flags of the nSoft
    command can be queried.  The nSoft -q command is used only to identify when an
    object is a nSoft body, or when two objects are part of the same nSoft body. See
    the examples.
    
    Flags:
    - convert : c                    (bool)          [create]
        This tells the command that you want the original object to be the actual
        deformed object.  The particle shape portion of the nSoft body will be inserted
        in the same hierarchy as the original, under the same parent (with one
        additional intervening transform which is initially the identity).  If no flags
        are passed, then this is assumed.  The combination -c -h 1 is not valid; if you
        have this in your scripts, remove the -h 1.
    
    - duplicate : d                  (bool)          [create]
        This tells the command that you want to make a copy of the original object and
        use the copy as the deforming geometry. Input connections to the original object
        are duplicated.  You would do this if you wanted to keep the original object in
        your scene and also have a copy of it that was a nSoft body. This flag and -dh
        are mutually exclusive.
    
    - duplicateHistory : dh          (bool)          [create]
        This is the same as -d, except that upstream history, is duplicated as well,
        instead of just input connections. This flag and -d are mutually exclusive.
    
    - goal : g                       (float)         [create]
        This is the same as -d, but in addition it tells the command that you want the
        resulting nSoft body to try to follow the original geometry, using the set goal
        weight as the value that controls how strongly it is to follow it.  A value of
        1.0 will try to follow exactly, and a value of 0.0 will not follow at all. The
        default value is 0.5.  This value must be from 0.0 to 1.0. You could use -d with
        -g, but it is redundant.  If you want history to be duplicated, you can use -dh
        and -g together.
    
    - hideOriginal : h               (bool)          [create]
        This flag is used only when duplicating (-d, -g, or -dh).  If set to true,
        whichever of the two objects is NOT the nSoft object will be hidden. In other
        words, with -d -h true, the original object will be hidden; with -d -c -h 1 the
        duplicate object will be hidden. You would typically do this if you want to use
        the non-dynamic object as a goal for the nSoft one (see -g) but you do not want
        it visible in the scene. The flags -h 1 and -c are mutually exclusive.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    - name : n                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.nSoft`
    """
    pass
def AddTargetShapeOptions(*args, **kwargs): pass
def evalContinue(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.evalContinue`
    """
    pass
def iprEngine(*args, **kwargs):
    """
    Command to create or edit an iprEngine.  A iprEngine is an object that watches
    for changes to shading networks and automatically reshades to generate an up-to-
    date image.
    
    Flags:
    - copy : cp                      (unicode)       [edit]
        Copies the deep raster file, as well as its related files, to the new location.
    
    - defineTemplate : dt            (unicode)       [create]
        Puts the command in a mode where any other flags and arguments are parsed and
        added to the command template specified in the argument. They will be used as
        default arguments in any subsequent invocations of the command when templateName
        is set as the current template.
    
    - diagnostics : dig              (bool)          [edit]
        The diagnostics should be shown
    
    - estimatedMemory : mem          (bool)          [query]
        Displays the estimated memory being used by IPR.
    
    - exists : ex                    (bool)          [create]
        Returns whether the specified object exists or not. Other flags are ignored.
    
    - iprImage : ipr                 (unicode)       [create,query,edit]
        Specify the ipr image to use.
    
    - motionVectorFile : mvf         (bool)          [query]
        Returns the name of the motion vector file used by IPR.
    
    - object : obj                   (PyNode)        [create,query,edit]
        The objects to be tuned.
    
    - region : r                     (int, int, int, int) [create,query,edit]
        The coordinates of the region to be tuned. The integers are in the sequence left
        bottom right topor x1,y2  x2,y2
    
    - relatedFiles : rel             (bool)          [query]
        Returns the names for the related files, e.g, the non-glow-non-blur image, the
        motion vector file, and the depth-map files.
    
    - releaseIprImage : rii          (bool)          [edit]
        The ipr image should be released and memory should    be freed.
    
    - resolution : res               (bool)          [query]
        The width and height of the ipr file.
    
    - scanlineIncrement : sli        (unicode)       [create,query,edit]
        Set the scanline increment percentage.  If the height of the region being update
        is 240 pixels, and the scanlineIncrement is 10% then the image will refresh
        blocks of 24 scanlines.
    
    - showProgressBar : spb          (bool)          [create,query,edit]
        Show progress bar during tuning.
    
    - startTuning : st               (bool)          [create,query,edit]
        An ipr image has been specified and now changes to shading    networks should
        force an image to be produced.
    
    - stopTuning : spt               (bool)          [create,query,edit]
        Tuning should cease but ipr image should not be closed.
    
    - underPixel : un                (int, int)      [edit]
        Get list of objects under the pixel sprcified.
    
    - update : u                     (bool)          [create,edit]
        Force an update.
    
    - updateDepthOfField : udf       (bool)          [create,edit]
        Force a refresh of depth-of-field.
    
    - updateLightGlow : ulg          (bool)          [create,query,edit]
        Automatically update when light glow changes.
    
    - updateMotionBlur : umb         (bool)          [create,query,edit]
        Automatically update when 2.5D motion blur changes.
    
    - updatePort : up                (unicode)       [create,query,edit]
        The name of the port that is to be updated when pixel values are recomputed.
        (not currently supported)
    
    - updateShaderGlow : usg         (bool)          [create,query,edit]
        Automatically update when shader glow changes.
    
    - updateShading : us             (bool)          [create,query,edit]
        Automatically update shading.
    
    - updateShadowMaps : usm         (bool)          [create,edit]
        Force the shadow maps to be generated and an update to occur.
    
    - useTemplate : ut               (unicode)       [create]
        Forces the command to use a command template other than the current one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.iprEngine`
    """
    pass
def DisplayHairCurves(*args, **kwargs): pass
def nConstraintForceField(*args, **kwargs): pass
def BevelPlusOptions(*args, **kwargs): pass
def refresh(*args, **kwargs):
    """
    This command is used to force a redraw during script execution. Normally, redraw
    is suspended while scripts are executing but sometimes it is useful to show
    intermediate results for purposes such as capturing images from the screen. If
    the -cv flag is specified, then only the current active view is redrawn.
    
    Flags:
    - currentView : cv               (bool)          [create]
        Redraw only the current view (default redraws all views).
    
    - fileExtension : fe             (unicode)       [create]
        Specify the type of file to save using the filename flag.
    
    - filename : fn                  (unicode)       [create]
        Specify the name of a file in which to save a snapshot of the viewports, or just
        the current one if the currentView flag is set.
    
    - force : f                      (bool)          [create]
        Force the refresh regardless of the state of the model.
    
    - suspend : su                   (bool)          [create]
        Suspends or resumes Maya's handling of refresh events. Specify onto suspend
        refreshing, and offto resume refreshing. Note that resuming refresh does not
        itself cause a refresh -- the next natural refresh event in Maya after refresh
        -suspend offis issued will cause the refresh to occur. Use this flag with
        caution: although it provides opportunities to enhance performance, much of
        Maya's dependency graph evaluation in interactive mode is refresh driven, thus
        use of this flag may lead to slight solve differences when you have a complex
        dependency graph with interrelations.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.refresh`
    """
    pass
def HypershadeTransferAttributeValuesOptions(*args, **kwargs): pass
def NodeEditorSelectConnected(*args, **kwargs): pass
def geometryConstraint(*args, **kwargs): pass
def SetProject(*args, **kwargs): pass
def selectKeyframeRegionCtx(*args, **kwargs):
    """
    This command creates a context which may be used to select keyframes within the
    keyframe region of the dope sheet editor In query mode, return type is based on
    queried flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectKeyframeRegionCtx`
    """
    pass
def PaintRandom(*args, **kwargs): pass
def Air(*args, **kwargs): pass
def menuSetPref(*args, **kwargs):
    """
    Provides the functionality to save and load menuSets between sessions of Maya.
    For Internal Use Only! In query mode, return type is based on queried flag.
    
    Flags:
    - exists : e                     (bool)          [query]
        Returns whether the menuSet preferences file exists or not.
    
    - force : f                      (bool)          [create,edit]
        Forces a specified operation to continue even if errors are encountered (such as
        invalid preferences).
    
    - loadAll : la                   (bool)          [create]
        Loads all the menuSets from the preferences file only if the preferences version
        matches, or the -force flag is enabled.  On successful load, of a prefs file, an
        empty string is returned, otherwise, a description of the problem encountered is
        returned.
    
    - removeAll : ra                 (bool)          [create]
        Removes all the menuSets from the preferences file (removes the whole file).
    
    - saveAll : sa                   (bool)          [create]
        Saves all the current menuSets into the preferences file.
    
    - saveBackup : sb                (bool)          [create]
        Saves a backup of the current menu set preferences file if one exists.  This
        backup will be saved in the same location as the current preferences file.
    
    - version : v                    (bool)          [query]
        The base version string which is saved out to file. It is also checked upon
        loading in order to indicate changes in the default prefs since the prefs were
        last saved out.                  Flag can have multiple arguments, passed either
        as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.menuSetPref`
    """
    pass
def targetWeldCtx(*args, **kwargs):
    """
    Create a new context to weld vertices together on a poly object.
    In query mode, return type is based on queried flag.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - mergeToCenter : mtc            (bool)          [create,query,edit]
        If mergeToCenter is set to true then the source and target vertices's will be
        moved to the center before doing the merge.  If set to false the source vertex
        will be moved to the target vertex before doing the merge.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.targetWeldCtx`
    """
    pass
def SetCMCAmbientDiffuse(*args, **kwargs): pass
def dR_setExtendLoop(*args, **kwargs): pass
def arclen(*args, **kwargs): pass
def Fireworks(*args, **kwargs): pass
def NodeEditorGraphRearrange(*args, **kwargs): pass
def timeEditorAnimSource(*args, **kwargs): pass
def dagObjectCompare(*args, **kwargs):
    """
    dagObjectCompare can be used to compare to compare objects based on: type -
    Currently supports transform nodes and shape nodesrelatives - Compares DAG
    objects' children and parentsconnections - Checks to make sure the two dags are
    connected to the same sources and destinationsattributes - Checks to make sure
    that the properties of active attributes are the same
    
    Flags:
    - attribute : a                  (bool)          [create]
        Compare dag object attributes
    
    - bail : b                       (unicode)       [create]
        Bail on first error or bail on category. Legal values are never, first, and
        category.
    
    - connection : c                 (bool)          [create]
        Compare dag connections
    
    - namespace : n                  (unicode)       [create]
        The baseline namespace
    
    - relative : r                   (bool)          [create]
        dag relatives
    
    - short : s                      (bool)          [create]
        Compress output to short form (not as verbose)
    
    - type : t                       (bool)          [create]
        Compare based on dag object type                                   Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dagObjectCompare`
    """
    pass
def CreatePolygonCylinder(*args, **kwargs): pass
def ImportDeformerWeights(*args, **kwargs): pass
def nClothLocalToWorld(*args, **kwargs): pass
def NodeEditorToggleNodeSwatchSize(*args, **kwargs): pass
def FullCreaseSubdivSurface(*args, **kwargs): pass
def PreInfinityCycle(*args, **kwargs): pass
def displaySmoothness(*args, **kwargs):
    """
    This command is responsible for setting the display smoothness of NURBS curves
    and surfaces to either predefined or custom values. It also sets display modes
    for smoothness such as hulls and the hull simplification factors. At present,
    this command is NOT un-doable. In query mode, return type is based on queried
    flag.
    
    Flags:
    - all : all                      (bool)          [create,query]
        Change smoothness for all curves and surfaces
    
    - boundary : bn                  (bool)          [create,query]
        Display wireframe surfaces using only the boundaries of the surface Not fully
        implemented yet
    
    - defaultCreation : dc           (bool)          [create,query]
        The default values at creation (applies only -du, -dv, -pw, -ps)
    
    - divisionsU : du                (int)           [create,query]
        Number of isoparm divisions per span in the U direction. The valid range of
        values is [0,64].
    
    - divisionsV : dv                (int)           [create,query]
        Number of isoparm divisions per span in the V direction. The valid range of
        values is [0,64].
    
    - full : f                       (bool)          [create,query]
        Display surface at full resolution - the default.
    
    - hull : hl                      (bool)          [create,query]
        Display surface using the hull (control points are drawn rather than surface
        knot points). This mode is a useful display performance improvement when
        modifying a surface since it doesn't require evaluating points on the surface.
    
    - pointsShaded : ps              (int)           [create,query]
        Number of points per surface span in shaded mode. The valid range of values is
        [1,64].
    
    - pointsWire : pw                (int)           [create,query]
        Number of points per surface isoparm span or the number of points per curve span
        in wireframe mode. The valid range of values is [1,128]. Note: This is the only
        flag that also applies to nurbs curves.
    
    - polygonObject : po             (int)           [create,query]
        Display the polygon objects with the given resolution
    
    - renderTessellation : rt        (bool)          [create,query]
        Display using render tesselation parameters when in shaded mode.
    
    - simplifyU : su                 (int)           [create,query]
        Number of spans to skip in the U direction when in hull display mode.
    
    - simplifyV : sv                 (int)           [create,query]
        Number of spans to skip in the V direction when in hull display mode.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displaySmoothness`
    """
    pass
def CacheMashNetwork(*args, **kwargs): pass
def MirrorSkinWeights(*args, **kwargs): pass
def dR_activeHandleY(*args, **kwargs): pass
def UVAutomaticProjection(*args, **kwargs): pass
def HideFollicles(*args, **kwargs): pass
def ConvertSelectionToShellBorder(*args, **kwargs): pass
def dR_hypershadeTGL(*args, **kwargs): pass
def mayaDpiSetting(*args, **kwargs):
    """
    Provide Maya interface scaling based on system DPI or custom scale setting or no
    scaling. Please note that the change will only take effect after relaunching
    Maya.
    
    Flags:
    - mode : m                       (int)           [create,query]
        Specifies the interface scaling mode: 0 - System Dpi Based Scaling1 - Custom
        Scaling (Must provide the custom scale value with flag -scaleValue2 - No Scaling
    
    - realScaleValue : rsv           (bool)          [query]
        This is a query mode only flag which returns the real scale value depending on
        current scaling mode and defined scale value: mode 0 - Return the current real
        scale value which is the ratio of current system dpi to default system dpimode 1
        - Return the current real scale value which is the product of the defined scale
        value and the ratio of current system dpi to default system dpimode 2 - Always
        return 1.0 which indicates real scale is 100% when the scaling mode is no
        scaling.
    
    - scaleValue : sv                (float)         [create,query]
        Specifies the custom scale of the interface if scaling mode is 1. The allowed
        values are [1.0, 1.25, 1.5, 2.0]. In query mode, return the scale value depend
        on current scaling mode: mode 0 - Always return 1.0 which indicates 100%
        scalingmode 1 - Return the custom scale value usedmode 2 - Always return 1.0
        which indicates no custom scaling
    
    - systemDpi : sd                 (bool)          [query]
        This is a query mode only flag which returns the current system dpi value.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.mayaDpiSetting`
    """
    pass
def SelectAllLattices(*args, **kwargs): pass
def itemFilterType(*args, **kwargs):
    """
    This command queries a named itemFilter object.  This object can be attached to
    selectionConnection objects, or to editors, in order to filter the item lists
    going through them.  Using union and intersection filters, complex composite
    filters can be created.
    
    Flags:
    - text : t                       (unicode)       [query,edit]
        Defines an annotation string to be stored with the filter
    
    - type : typ                     (bool)          [query]
        Query the type of the filter object. Possible return values are: itemFilter,
        attributeFilter, renderFilter, or unknownFilter.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.itemFilterType`
    """
    pass
def RelaxUVShell(*args, **kwargs): pass
def text(*args, **kwargs): pass
def PolygonBooleanIntersectionOptions(*args, **kwargs): pass
def SearchAndReplaceNames(*args, **kwargs): pass
def SelectMaskToolMarkingMenuPopDown(*args, **kwargs): pass
def xgmInterpSetup(*args, **kwargs):
    """
    Flags:
    - description : d                (unicode)       []
    
    - neighbors : n                  (unicode)       []
    
    
    Derived from mel command `maya.cmds.xgmInterpSetup`
    """
    pass
def dR_symmetrize(*args, **kwargs): pass
def CircularFilletOptions(*args, **kwargs): pass
def MoveIKtoFK(*args, **kwargs): pass
def preferredRenderer(*args, **kwargs):
    """
    Command to set the preferred renderer. This command can be used to query the
    preferred renderer and to set the current renderer as the preferred one. It also
    allows users to specify a preferred fallback renderer.             In query
    mode, return type is based on queried flag.
    
    Flags:
    - fallback : f                   (unicode)       [create,query]
        Sets the preferred fallback renderer.
    
    - makeCurrent : mc               (bool)          [create]
        Sets the current renderer as the preferred one.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.preferredRenderer`
    """
    pass
def selectKey(*args, **kwargs): pass
def HideStrokeControlCurves(*args, **kwargs): pass
def cacheFileMerge(*args, **kwargs):
    """
    If selected/specified caches can be successfully merged, will return the
    start/end frames of the new cache followed by the start/end frames of any gaps
    in the merged cache for which no data should be written to file. In query mode,
    will return the names of geometry associated with the specified cache file
    nodes.
    
    Flags:
    - endTime : et                   (time)          [create]
        Specifies the end frame of the merge range. If not specified, will figure out
        range from times of caches being merged.
    
    - geometry : g                   (bool)          [query]
        Query-only flag used to find the geometry nodes associated with the specified
        cache files.
    
    - startTime : st                 (time)          [create]
        Specifies the start frame of the merge range. If not specified, will figure out
        range from the times of the caches being merged.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.cacheFileMerge`
    """
    pass
def GraphDelete(*args, **kwargs): pass
def FBIKLabelNeck(*args, **kwargs): pass
def convertIffToPsd(*args, **kwargs):
    """
    Converts iff file to PSD file of given size              In query mode, return
    type is based on queried flag.
    
    Flags:
    - iffFileName : ifn              (unicode)       [create,query]
        Input iff file name
    
    - psdFileName : pfn              (unicode)       [create,query]
        Output file name
    
    - xResolution : xr               (int)           [create,query]
        X resolution of the image
    
    - yResolution : yr               (int)           [create,query]
        Y resolution of the image                                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.convertIffToPsd`
    """
    pass
def SurfaceFlow(*args, **kwargs): pass
def mtkShrinkWrap(*args, **kwargs):
    """
    Flags:
    - alongNormal : an               (bool)          []
    
    - offset : o                     (float)         []
    
    - target : t                     (PyNode)        []
    
    
    Derived from mel command `maya.cmds.mtkShrinkWrap`
    """
    pass
def polyPrimitiveMisc(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.polyPrimitiveMisc`
    """
    pass
def whatsNewHighlight(*args, **kwargs):
    """
    This command is used to toggle the What's New highlighting feature, and the
    display of the settings dialog for the feature that appears on startup. In query
    mode, return type is based on queried flag.
    
    Flags:
    - highlightColor : hc            (float, float, float) [create,query]
        Set the color of the What's New highlight. The arguments correspond to the red,
        green, and blue color components. Each color component ranges in value from 0.0
        to 1.0.
    
    - highlightOn : ho               (bool)          [create,query]
        Toggle the What's New highlighting feature. When turned on, menu items and
        buttons introduced in the latest version will be highlighted.
    
    - showStartupDialog : ssd        (bool)          [create,query]
        Set whether the settings dialog for this feature appears on startup.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.whatsNewHighlight`
    """
    pass
def RenderTextureRangeOptions(*args, **kwargs): pass
def DetachSkeletonJoints(*args, **kwargs): pass
def ProjectTangent(*args, **kwargs): pass
def LoopBrushAnimation(*args, **kwargs): pass
def dR_mtkPanelTGL(*args, **kwargs): pass
def UVPlanarProjection(*args, **kwargs): pass
def MatchTransform(*args, **kwargs): pass
def HypershadeGraphRemoveDownstream(*args, **kwargs): pass
def SelectBorderEdgeTool(*args, **kwargs): pass
def symbolButton(*args, **kwargs): pass
def particleInstancer(*args, **kwargs):
    """
    This command is used to create a particle instancer node and set the proper
    attributes in the particle shape and in the instancer node.  It will also create
    the connections needed between the particle shape and the instancer node.
    
    Flags:
    - addObject : a                  (bool)          [create,edit]
        This flag indicates that objects specified by the -object flag will be added to
        the instancer node as instanced objects.
    
    - aimAxis : aa                   (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the aim
        axis of the instanced objects.
    
    - aimDirection : ad              (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the aim
        direction of the instanced objects.
    
    - aimPosition : ap               (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the aim
        position of the instanced objects.
    
    - aimUpAxis : aua                (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the aim up
        axis of the instanced objects.
    
    - aimWorldUp : awu               (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the aim
        world up of the instanced objects.
    
    - attributeMapping : am          (bool)          [query]
        This flag queries the particle attribute mapping list.
    
    - cycle : c                      (unicode)       [create,query,edit]
        This flag sets or queries the cycle attribute for the instancer node.  The
        options are none, sequential. The default is none.
    
    - cycleStartObject : sto         (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the cycle
        start object of the instanced objects.
    
    - cycleStep : cs                 (float)         [create,query,edit]
        This flag sets or queries the cycle step attribute for the instancer node.  This
        attribute indicates the size of the step in frames or seconds (see
        cycleStepUnits).
    
    - cycleStepUnits : csu           (unicode)       [create,query,edit]
        This flag sets or queries the cycle step unit attribute for the instancer node.
        The options are framesor seconds.  The default is frames.
    
    - index : i                      (int)           [query]
        This flag is used to query the name of the ith instanced object.
    
    - instanceId : id                (unicode)       [query]
        This flag queries the particle attribute name to be used for the id of the
        instanced objects.
    
    - levelOfDetail : lod            (unicode)       [create,query,edit]
        This flag sets or queries the level of detail of the instanced objects.  The
        options are geometry, boundingBoxor boundingBoxes.  The default is geometry.
    
    - name : n                       (unicode)       [create,query]
        This flag sets or queries the name of the instancer node.
    
    - object : obj                   (unicode)       [create,query,edit]
        This flag indicates which objects will be add/removed from the list of instanced
        objects.  The flag is used in conjuction with the -addObject and -remove flags.
        If neither of these flags is specified on the command line then -addObject is
        assumed.
    
    - objectIndex : oi               (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the object
        index of the instanced objects.
    
    - particleAge : age              (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the age of
        the instanced objects.
    
    - position : p                   (unicode)       [create,query,edit]
        DEFAULT worldPositionThis flag sets or queries the particle attribute name to be
        used for the positions of the instanced objects.  By default the attribute is
        worldPosition.
    
    - removeObject : rm              (bool)          [edit]
        This flag indicates that objects specified by the -object flag will be removed
        from the instancer node as instanced objects.
    
    - rotation : r                   (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the
        rotation of the instanced objects.
    
    - rotationOrder : ro             (unicode)       [create,query,edit]
        This flag specifies the rotation order associated with the rotation flag.  The
        options are XYZ, XZY, YXZ, YZX, ZXY, or ZYX.  By default the attribute is XYZ.
    
    - rotationType : rt              (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the
        rotation type of the instanced objects.
    
    - rotationUnits : ru             (unicode)       [create,query,edit]
        This flag specifies the rotation units associated with the rotation flag.  The
        options are degrees or radians.  By default the attribute is degrees.
    
    - scale : sc                     (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the scale
        of the instanced objects.
    
    - shear : sh                     (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the shear
        of the instanced objects.
    
    - visibility : vis               (unicode)       [create,query,edit]
        This flag sets or queries the particle attribute name to be used for the
        visibility of the instanced objects.                              Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.particleInstancer`
    """
    pass
def paintPointsContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.paintPointsContext`
    """
    pass
def ToggleFaceMetadata(*args, **kwargs): pass
def GpuCacheExportAllOptions(*args, **kwargs): pass
def HypershadeConnectSelected(*args, **kwargs): pass
def wrinkleContext(*args, **kwargs):
    """
    This command creates a context that creates wrinkles.
    
    Flags:
    - branchCount : brc              (int)           [create,query,edit]
        Set the number of branches spawned from a crease for radial wrinkles. Default is
        2.
    
    - branchDepth : bd               (int)           [create,query,edit]
        Set the depth of branching for radial wrinkles. Defaults to 0.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - randomness : rnd               (float)         [create,query,edit]
        Set the deviation of the wrinkle creases from straight lines and other elements
        of the wrinkle structure. Defaults to 0.2.
    
    - style : st                     (unicode)       [create,query,edit]
        Set the wrinkle characteristic shape.lines|radial|custom. Default is radial.
    
    - thickness : th                 (float)         [create,query,edit]
        Set the thickness of wrinkle creases by setting the dropoff distance on the
        underlying wires.
    
    - wrinkleCount : wc              (int)           [create,query,edit]
        Set the number of wrinkle creases. Default is 3.
    
    - wrinkleIntensity : wi          (float)         [create,query,edit]
        Set the depth intensity of the wrinkle furrows. Defaults to 0.5.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.wrinkleContext`
    """
    pass
def window(*args, **kwargs): pass
def Unfold3DContext(*args, **kwargs):
    """
    Flags:
    - end_resize : rof               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - optimize : o                   (bool)          []
    
    - pressure : p                   (float)         []
    
    - sizeuv : suv                   (float)         []
    
    - start_modpressure : pon        (bool)          []
    
    - start_resize : ron             (bool)          []
    
    - stop_modpressure : pof         (bool)          []
    
    - surfangle : sa                 (float)         []
    
    - unfold : u                     (bool)          []
    
    
    Derived from mel command `maya.cmds.Unfold3DContext`
    """
    pass
def PoseInterpolatorNewGroup(*args, **kwargs): pass
def TimeEditorToggleTimeCursorRelease(*args, **kwargs): pass
def AddCurvesToHairSystem(*args, **kwargs): pass
def air(*args, **kwargs): pass
def FBXImportMode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportMode`
    """
    pass
def displayAffected(*args, **kwargs):
    """
    Turns on/off the special coloring of objects that are affected by the objects
    that are currently in the selection list. If one of the curves in a loft were
    selected and this feature were turned on, then the lofted surface would be
    highlighted because it is affected by the loft curve.
    
    
    Derived from mel command `maya.cmds.displayAffected`
    """
    pass
def xgmGuideGeom(*args, **kwargs):
    """
    Flags:
    - basePoint : bp                 (bool)          []
    
    - controlPoints : cp             (bool)          []
    
    - guide : g                      (unicode)       []
    
    - guideNormal : gn               (bool)          []
    
    - isCached : ic                  (bool)          []
    
    - lockBasePt : lk                (bool)          []
    
    - numVertices : nv               (bool)          []
    
    - uvLocation : uv                (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmGuideGeom`
    """
    pass
def floatFieldGrp(*args, **kwargs): pass
def FBXExportFileVersion(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportFileVersion`
    """
    pass
def SubdivProxyOptions(*args, **kwargs): pass
def getModulePath(*args, **kwargs):
    """
    Returns the module path for a given module name.
    
    Flags:
    - moduleName : mn                (unicode)       [create]
        The name of the module whose path you want to retrieve.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getModulePath`
    """
    pass
def createNurbsCircleCtx(*args, **kwargs):
    """
    Flags:
    - attachToSections : attachToSections (bool)          []
    
    - degree : d                     (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - normal : nr                    (float, float, float) []
    
    - normalType : nrt               (int)           []
    
    - radius : r                     (float)         []
    
    - sections : sc                  (int)           []
    
    - sweep : sw                     (float)         []
    
    - tolerance : tol                (float)         []
    
    - toleranceType : tlt            (int)           []
    
    - useTolerance : ut              (bool)          []
    
    
    Derived from mel command `maya.cmds.createNurbsCircleCtx`
    """
    pass
def perCameraVisibility(*args, **kwargs):
    """
    The perCameraVisibility command creates, queries and removes visibility
    relationships between DAG objects and cameras. These relationships are applied
    in any viewport that uses the cameras involved. (They are not used e.g. in
    rendering.) Objects can be set to be exclusive to a camera (meaning they will
    only be displayed in viewports using that camera; they will be hidden in other
    viewports) or hidden from a camera (meaning they will be not visible in any
    viewport using the camera).
    
    Flags:
    - camera : c                     (PyNode)        [create,query]
        Specify the camera for the operation.
    
    - exclusive : ex                 (bool)          [create,query]
        Set objects as being exclusive to the given camera.
    
    - hide : hi                      (bool)          [create,query]
        Set objects as being hidden from the given camera.
    
    - remove : rm                    (bool)          [create]
        Used with exclusive or hide, removes the objects instead of adding them.
    
    - removeAll : ra                 (bool)          [create]
        Remove all exclusivity/hidden objects for all cameras.
    
    - removeCamera : rc              (bool)          [create]
        Remove all exclusivity/hidden objects for the given camera.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.perCameraVisibility`
    """
    pass
def polyHole(*args, **kwargs):
    """
    Command to set and clear holes on given faces.
    
    Flags:
    - assignHole : ah                (bool)          [create,query,edit]
        Assign the selected faces to be hole or unassign the hole faces to be non-hole.
        By default, the command will assign faces to be hole.
    
    - createHistory : ch             (bool)          [create,query,edit]
        For objects that have no construction history, this flag can be used to force
        the creation of construction history for hole.  By default, history is not
        created if the object has no history.  Regardless of this flag, history is
        always created if the object already has history.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyHole`
    """
    pass
def ResetTransformations(*args, **kwargs): pass
def TangentsClamped(*args, **kwargs): pass
def PanZoomTool(*args, **kwargs): pass
def HypershadeRestoreLastClosedTab(*args, **kwargs): pass
def ToggleStatusLine(*args, **kwargs): pass
def SaveSceneAsOptions(*args, **kwargs): pass
def simplify(*args, **kwargs): pass
def untrim(*args, **kwargs): pass
def polyDuplicateAndConnect(*args, **kwargs):
    """
    This command duplicates the input polygonal object, connects up the outMesh
    attribute of the original polygonal shape to the inMesh attribute of the newly
    created duplicate shape and copies over the shader assignments from the original
    shape to the new duplicated shape. The command will fail if no objects are
    selected or sent as argument or if the object sent as argument is not a
    polygonal object.
    
    Flags:
    - removeOriginalFromShaders : ros (bool)          [create]
        Used to specify if the original object should be removed from the shaders
        (shadingGroups) that it is a member of. The shader associations will get
        transferred to the duplicated object, before they are removed from the original.
        If this flag is specified then the original polygonal object will be drawn in
        wireframe mode even if all objects are being drawn in shaded mode.
    
    - renameChildren : rc            (bool)          [create]
        rename the children nodes of the hierarchy, to make them unique.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyDuplicateAndConnect`
    """
    pass
def Flare(*args, **kwargs): pass
def PerformPrecompExportOptions(*args, **kwargs): pass
def ConnectMashToParticles(*args, **kwargs): pass
def CreateHairCache(*args, **kwargs): pass
def textureLassoContext(*args, **kwargs):
    """
    Flags:
    - drawClosed : dc                (bool)          []
    
    - exists : ex                    (bool)          []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.textureLassoContext`
    """
    pass
def ToggleJointLabels(*args, **kwargs): pass
def attrEnumOptionMenuGrp(*args, **kwargs): pass
def ToggleChannelsLayers(*args, **kwargs): pass
def OpenScene(*args, **kwargs): pass
def renderSetupPostApply(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.renderSetupPostApply`
    """
    pass
def FreeformFillet(*args, **kwargs): pass
def EditMembershipTool(*args, **kwargs): pass
def BakeSpringAnimation(*args, **kwargs): pass
def ShowControllers(*args, **kwargs): pass
def HypershadeShowDirectoriesOnly(*args, **kwargs): pass
def SmoothCurve(*args, **kwargs): pass
def SurfaceBooleanIntersectTool(*args, **kwargs): pass
def pointOnPolyConstraint(*args, **kwargs): pass
def OneClickAcknowledgeCallback(*args, **kwargs):
    """
    Flags:
    - deregisterCallback : dcb       (int)           []
    
    - registerCallback : rcb         (unicode)       []
    
    
    Derived from mel command `maya.cmds.OneClickAcknowledgeCallback`
    """
    pass
def FBXImport(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImport`
    """
    pass
def saveShelf(*args, **kwargs):
    """
    This command saves the specified shelf (first argument) to the specified file
    (second argument). Note that this command doesn't work well with controls that
    have mixed mel and python command callbacks.  Also, because it saves the state
    to a mel file, it does not work with callbacks that are python callable objects.
    
    
    Derived from mel command `maya.cmds.saveShelf`
    """
    pass
def PartitionEditor(*args, **kwargs): pass
def CreatePolygonSuperEllipseOptions(*args, **kwargs): pass
def FBXLoadExportPresetFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXLoadExportPresetFile`
    """
    pass
def polyCollapseTweaks(*args, **kwargs):
    """
    A command that updates a mesh's vertex tweaks by applying its tweak data (stored
    on the mesh node) onto its respective vertex data. This command is only useful
    in cases where no construction history is associated with the shape node. If a
    mesh name is not specified as input, a singly selected mesh (if any) will have
    its tweaked vertices baked. In query mode, return type is based on queried flag.
    
    Flags:
    - hasVertexTweaks : hvt          (bool)          [create,query]
        Determines whether an individual mesh has vertex tweaks.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyCollapseTweaks`
    """
    pass
def DeleteHairCache(*args, **kwargs): pass
def CreateParticleDiskCache(*args, **kwargs): pass
def RotateToolMarkingMenuPopDown(*args, **kwargs): pass
def TimeEditorSetKey(*args, **kwargs): pass
def KeyframeTangentMarkingMenuPopDown(*args, **kwargs): pass
def SelectSurfacePointsMask(*args, **kwargs): pass
def SelectAllTransforms(*args, **kwargs): pass
def tension(*args, **kwargs): pass
def polySelectEditCtx(*args, **kwargs):
    """
    Create a new context to select and edit polygonal objects
    
    Flags:
    - absoluteOffset : abo           (bool)          [create,query,edit]
        This flag is deprecated. Use splitType/stp instead. This flag is deprecated. Use
        splitType/stp instead.
    
    - adjustEdgeFlow : aef           (float)         [create,query,edit]
        The weight value of the edge vertices to be positioned. Default:1.0f
    
    - autoComplete : ac              (bool)          [create]
        If true then use auto completion on selections
    
    - deleteEdge : de                (bool)          [create,query,edit]
        When true, the end edges are deleted so the end triangles are converted to
        quads.
    
    - divisions : div                (int)           [create,query,edit]
        Number of divisions. Default:2
    
    - endVertexOffset : evo          (float)         [create,query,edit]
        Weight value controlling the offset of the end vertex of the edgeloop.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - fixQuads : fq                  (bool)          [create,query,edit]
        Fixes splits which go across a quad face leaving a 5 and 3 sided faces by
        splitting from the middle of the new edge to the vertex accross from the edge on
        the 5 sided face. Default:false
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - insertWithEdgeFlow : ief       (bool)          [create,query,edit]
        True to enable edge flow. Otherwise, the edge flow is disabled. Default:false
    
    - mode : m                       (int)           [create,query,edit]
        which mode to work on.  Available modes are 1-loop and 2-ring
    
    - smoothingAngle : sma           (float)         [create,query,edit]
        Angle below which new edges will be smoothed Default:kPi
    
    - splitType : stp                (int)           [create,query,edit]
        Format: 0 - Absolute, 1 - Relative, 2 - Multi Default:TdnpolySplitRing::Relative
    
    - startVertexOffset : svo        (float)         [create,query,edit]
        Weight value controlling the offset of the start vertex of the edgeloop.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    - useEqualMultiplier : uem       (bool)          [create,query,edit]
        Changes how the profile curve effects the offset when doing a multisplit.  If
        true then the verts will be offset the same distance based on the shortest edge
        being split.  If false then each inserted edge loop will be offset a distance
        relative to the length of the edge that is being split. Default:true
        Flags from nodes
    
    
    Derived from mel command `maya.cmds.polySelectEditCtx`
    """
    pass
def BridgeEdgeOptions(*args, **kwargs): pass
def MergeMultipleEdgesOptions(*args, **kwargs): pass
def dR_quadDrawTool(*args, **kwargs): pass
def SetActiveKey(*args, **kwargs): pass
def cmdaiCollection(*args, **kwargs): pass
def HIKToggleReleasePinning(*args, **kwargs): pass
def SnapKeys(*args, **kwargs): pass
def CreateBifrostLiquid(*args, **kwargs): pass
def dR_showHelp(*args, **kwargs): pass
def fileBrowserDialog(*args, **kwargs): pass
def UpdateBindingSetOptions(*args, **kwargs): pass
def testPassContribution(*args, **kwargs):
    """
    Flags:
    - renderLayer : rl               (unicode)       []
    
    - renderPass : rp                (unicode)       []
    
    
    Derived from mel command `maya.cmds.testPassContribution`
    """
    pass
def BakeCustomPivot(*args, **kwargs): pass
def SculptGeometryTool(*args, **kwargs): pass
def listRelatives(*args, **kwargs): pass
def SetMeshRepeatTool(*args, **kwargs): pass
def dR_objectEdgesOnlyTGL(*args, **kwargs): pass
def PolyExtrude(*args, **kwargs): pass
def CancelBatchRender(*args, **kwargs): pass
def setFocus(*args, **kwargs):
    """
    Give keyboard focus to a specific control or panel, passed as an argument.
    
    
    Derived from mel command `maya.cmds.setFocus`
    """
    pass
def AddPondDynamicLocatorOptions(*args, **kwargs): pass
def OneClickFetchRemoteCharacter(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickFetchRemoteCharacter`
    """
    pass
def cMuscleCache(*args, **kwargs):
    """
    Flags:
    - endf : e                       (int)           []
    
    - help : h                       (bool)          []
    
    - mode : m                       (unicode)       []
    
    - start : s                      (int)           []
    
    
    Derived from mel command `maya.cmds.cMuscleCache`
    """
    pass
def nexConnectContext(*args, **kwargs):
    """
    Flags:
    - exists : ex                    (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.nexConnectContext`
    """
    pass
def dgstats(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.dgstats`
    """
    pass
def DeleteAllDynamicConstraints(*args, **kwargs): pass
def CreateCreaseSet(*args, **kwargs): pass
def torus(*args, **kwargs): pass
def mpBirailCtx(*args, **kwargs):
    """
    Flags:
    - activeNodes : anq              (bool)          []
    
    - autoCreate : ac                (bool)          []
    
    - bldProfileFirst : bpf          (bool)          []
    
    - bldProfileLast : bpl           (bool)          []
    
    - bldProfiles : bp               (bool)          []
    
    - bldRailOne : br1               (bool)          []
    
    - bldRailTwo : br2               (bool)          []
    
    - caching : cch                  (bool)          []
    
    - constructionHistory : ch       (bool)          []
    
    - exists : ex                    (bool)          []
    
    - frozen : fzn                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - immediate : im                 (bool)          []
    
    - name : n                       (unicode)       []
    
    - nodeState : nds                (int)           []
    
    - object : o                     (bool)          []
    
    - polygon : po                   (int)           []
    
    - reset : rs                     (bool)          []
    
    - tangentContinuityProfile1 : tp1 (bool)          []
    
    - tangentContinuityProfile2 : tp2 (bool)          []
    
    - toolNode : tnq                 (bool)          []
    
    - transformMode : tm             (int)           []
    
    
    Derived from mel command `maya.cmds.mpBirailCtx`
    """
    pass
def SetDefaultManipRotate(*args, **kwargs): pass
def DeleteStaticChannels(*args, **kwargs): pass
def polySphere(*args, **kwargs): pass
def CreateEmptyGroup(*args, **kwargs): pass
def resolutionNode(*args, **kwargs):
    """
    This command creates a new node in the dependency graph of the specified type.
    The resolutionNode creates a render resolution node and registers it with the
    model.  The createNode command will not register nodes of this type correctly.
    
    Flags:
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace doesn't
        exist, we will create the namespace.
    
    - parent : p                     (unicode)       [create]
        Specifies the parent in the DAG under which the new node belongs.
    
    - shared : s                     (bool)          [create]
        This node is shared across multiple files, so only create it if it does not
        already exist.
    
    - skipSelect : ss                (bool)          [create]
        This node is not to be selected after creation, the original selection will be
        preserved.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.resolutionNode`
    """
    pass
def DoUnghost(*args, **kwargs): pass
def ReducePolygon(*args, **kwargs): pass
def xgmSmoothBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmSmoothBrushToolCmd`
    """
    pass
def UnghostObject(*args, **kwargs): pass
def smoothTangentSurface(*args, **kwargs):
    """
    The smoothTangentSurface command smooths the surface along an isoparm at each
    parameter value. The name of the surface is returned and if history is on, the
    name of the resulting dependency node is also returned. This command only
    applies to parameter values with a multiple knot value. (If the given parameter
    value has no multiple knot associated with it, then the dependency node is
    created but the surface doesn't change.) When would you use this?  If you have a
    surface consisting of a number of Bezier patches or any isoparms with more than
    a single knot multiplicity, you could get into a situation where a tangent break
    occurs.  So, it only makes sense to do this operation on the knot isoparms, and
    not anywhere in between, because the surface is already smooth everywhere in
    between. If you have a cubic or higher degree surface, asking for the maximal
    smoothness will give you tangent, curvature, etc. up to the degree-1 continuity.
    Asking for tangent will just give you tangent continuity. It should be mentioned
    that this is C, not Gcontinuity we're talking about, so technically, you can
    still see visual tangent breaks if the surface is degenerate. Note: A single
    smoothTangentSurface command cannot smooth in both directions at once; you must
    use two separate commands to do this.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - direction : d                  (int)           [create,query,edit]
        Direction in which to smooth knot: 0 - V direction, 1 - U direction Default:1
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - parameter : p                  (float)         [create,query,edit]
        Parameter value(s) where knots are added Default:0.0
    
    - replaceOriginal : rpo          (bool)          [create]
        Create in place(i.e., replace).                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    - smoothness : s                 (int)           [create,query,edit]
        Smoothness to get: 0 - Tangent, 1 - Maximum (based on the degree) Default:1
        Common flags
    
    
    Derived from mel command `maya.cmds.smoothTangentSurface`
    """
    pass
def polySelectEditCtxDataCmd(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.polySelectEditCtxDataCmd`
    """
    pass
def NodeEditorCreateDoWhileCompound(*args, **kwargs): pass
def cMuscleAbout(*args, **kwargs):
    """
    Flags:
    - company : co                   (bool)          []
    
    - help : h                       (bool)          []
    
    - install : ins                  (bool)          []
    
    - user : usr                     (bool)          []
    
    - version : ver                  (bool)          []
    
    
    Derived from mel command `maya.cmds.cMuscleAbout`
    """
    pass
def ViewportEnableSmoothing(*args, **kwargs): pass
def manipComponentUpdate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.manipComponentUpdate`
    """
    pass
def SetShrinkWrapTarget(*args, **kwargs): pass
def XGenOpenLibraryWindow(*args, **kwargs): pass
def AddBifrostCamera(*args, **kwargs): pass
def xgmClumpBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmClumpBrushToolCmd`
    """
    pass
def dR_rotateTweakTool(*args, **kwargs): pass
def AnimationSnapshotOptions(*args, **kwargs): pass
def affects(*args, **kwargs):
    """
    This command returns the list of attributes on a node or node type which affect
    the named attribute.
    
    Flags:
    - by : boolean                   (Show attributes that are affected by the given one rather than the
    ones that affect it.) [create]
    
    - type : t                       (unicode)       [create]
        static node type from which to get 'affects' information
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.affects`
    """
    pass
def PickWalkOut(*args, **kwargs): pass
def XgmSetPlaceBrushToolOption(*args, **kwargs): pass
def shadingNetworkCompare(*args, **kwargs):
    """
    This command allows you to compare two shading networks.
    
    Flags:
    - byName : nam                   (bool)          [create]
        Indicates whether the comparison should consider node names. If true, two
        shading networks will be considered equivalent only if the names of
        corresponding nodes are the same, ignoring namespaces. If false, two shading
        networks will be considered equivalent even if corresponding nodes are named
        differently. Default is 'false'.
    
    - byValue : val                  (bool)          [create]
        Indicates whether the comparison should consider the values of unconnected
        attributes. If true, two shading networks will be considered equivalent only if
        corresponding, unconnected attributes are the same type and have the same value.
        Only attributes of type 'int', 'bool', 'float', and 'string' will have their
        values compared. If false, two shading networks will be considered equivalent
        even if corresponding, unconnected attributes have different values or are
        different types. Default is 'true'.
    
    - delete : delete                (bool)          [create]
        Deletes the specified comparison from memory.
    
    - equivalent : eq                (bool)          [query]
        Returns an int. 1 if the shading networks in the specified comparison are
        equivalent. 0 otherwise.
    
    - network1 : n1                  (bool)          [query]
        Returns a string[]. Returns an empty string array if the shading networks in the
        specified comparison are not equivalent. Otherwise returns the nodes in the
        first shading network.
    
    - network2 : n2                  (bool)          [query]
        Returns a string[]. Returns an empty string array if the shading networks in the
        specified comparison are not equivalent. Otherwise returns the nodes in the
        second shading network.
    
    - upstreamOnly : up              (bool)          [create]
        Indicates whether the comparison should consider nodes which are connected
        downstream from shading network nodes. If true, only those nodes which are
        upstream from the shading group will be considered. If, following only
        downstream connections, there is no connection path from a node to one of the
        shader attributes on the shading group, the node will not be considered. If
        false, a node will be considered if a connection path can found, following
        either upstream or downstream connections, which terminates with an input
        connection to one of the shading groups shader attributes. These dangling nodes
        do not directly contribute to the color, displacement, or volume characteristics
        of the shading group. Default is 'false'.                             Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.shadingNetworkCompare`
    """
    pass
def geometryReplaceCacheOpt(*args, **kwargs): pass
def FBXExportHardEdges(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportHardEdges`
    """
    pass
def untangleUV(*args, **kwargs):
    """
    This command will aid in the creation of non-overlapping regions (i.e. polygons)
    in texture space by untangling texture UVs. This is done in two stages:1) Use
    this command to map the UV border determined by the current selection or passed
    component into a shape that is more suitable for subsequent relaxation.2) Relax
    all the internal texture UVs by performing a length minimization algorithm on
    all edges in texture space.
    
    Flags:
    - mapBorder : mb                 (unicode)       [create]
        Map the border containing the selected UV into a variety of shapes that may be
        more amenable to UV relaxation operations. There are various types of mapping
        available. All the resulting mappings are fit inside the unit square.Valid
        values for the STRING are:circular- a circular mapping with picked UV closest to
        (0,0)square- map to unit square with picked UV at (0,0)shape- a mapping which
        attempts to reflect the actual shape of the object         where the picked UV
        is placed on the line from (0,0) -(0.5,0.5)shape_circular- shape mapping which
        will interpolate to a circular mapping                  just enough to prevent
        self-intersections of the mapped border shape_square- shape mapping which will
        interpolate to a square mapping just                enough to prevent self-
        intersections of the mapped border
    
    - maxRelaxIterations : mri       (int)           [create]
        The relaxation process is an iterative algorithm. Using this flag will put an
        upper limit on the number of iterations that will be performed.
    
    - pinBorder : pb                 (bool)          [create]
        If this is true, then the relevant texture borders are pinned in place during
        any relaxation
    
    - pinSelected : ps               (bool)          [create]
        If this is true, then then any selected UVs are pinned in place during any
        relaxation
    
    - pinUnselected : pu             (bool)          [create]
        If this is true, then all unselected UVs in each mesh are pinned in place during
        any relaxation
    
    - relax : r                      (unicode)       [create]
        Relax all UVs in the shell of the selected UV's. The relaxation is done by
        simulating a spring system where each UV edge is treated as a spring. There are
        a number of different methods characterized by the way the UV edges are weighted
        in the spring system. These weightings are determined by STRING. Valid values
        for STRING are:uniform- every edge is weighted the same. This is the fastest
        method.inverse_length- every edge weight is inversely proportional to it's world
        space length.inverse_sqrt_length- every edge weight is inversely proportional
        the the square root of it's world space length.harmonic- this weighting can
        yield near optimal results in matching the UV's with the geometry, but can also
        take a long time.
    
    - relaxTolerance : rt            (float)         [create]
        This sets the tolerance which is used to determine when the relaxation process
        can stop. Smaller tolerances yield better results but can take much longer.
    
    - shapeDetail : sd               (float)         [create]
        If the mapBorder flag is set to circular or square, then this flag will control
        how much of the border's corresponding surface shape should be retained in the
        final mapped border.                                Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.untangleUV`
    """
    pass
def sphere(*args, **kwargs): pass
def InsertEdgeLoopTool(*args, **kwargs): pass
def LockCamera(*args, **kwargs): pass
def sbs_GetEnumValue(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetEnumValue`
    """
    pass
def hardenPointCurve(*args, **kwargs):
    """
    The hardenPointCurve command changes the knots of a curve given a list of
    control point indices so that the knot corresponding to that control point gets
    the specified multiplicity.  Multiplicity of -1 is the universal value used for
    multiplicity equal to the degree of the curve.limitationsThe CV whose
    multiplicity is being raised needs to have its neighbouring CVs of multiplicity
    1.  How many neighbours depends on the degree of the curve and the difference in
    CV multiplicities before and after this operation.  For example, if you're
    changing a CV of multiplicity 1 into a CV of multiplicity 3, you will need the 4
    neighbouring CVs (2 on each side) to be of multiplicity 1.  The CVs that do not
    satisfy that requirement will be ignored.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - multiplicity : m               (int)           [create,query,edit]
        the required multiplicity of the curve knot Default:-1
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Common flags
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - replaceOriginal : rpo          (bool)          [create]
        Create in place(i.e., replace).                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.hardenPointCurve`
    """
    pass
def colorAtPoint(*args, **kwargs):
    """
    The colorAtPointcommand is used to query textures or ocean           shaders at
    passed in uv coordinates.       (For ocean shaders uv is x and z in worldspace
    ).           The return value is a floating point array whose size is
    determined by either the number of input uv arguments passed in and the
    the queried value.  One can query alpha only, rgb only, or rgba values.
    The returned array is only single indexed, so if rgb is specified then
    the index for red values would be index \* 3. Blue is index \* 3 + 1, and
    green is index \* 3 + 2. For rgba use a multiple of 4 instead of 3.
    For alpha only one can simply use the index.           There are two basic
    argument formats that may be used:           colorAtPoint -u 0 -v 0   -u .2 -v
    .1  etc.. for all points           or           colorAtPoint -mu 0 -mv 0  -xu 1
    -xv 1 -su 10 -sv 10 // samples 100 points           If one is sampling several
    points and they are all in a regular grid           formation it is more
    efficient to call this routine with the latter           method, which uses a
    min/max uv and number of samples, rather than           a long argument list of
    uv coords.           return values (-o A or RGB or RGBA )individual UV
    coordinates to sample (-u float  -v float )(numbers of calls to -u and -v must
    match)uniform grid of points to sample (-su int -sv int)(may not use this in
    combination with -u or -v)bounds for sample grid  (-mu float  -mv float -xu
    float -xv float)
    
    Flags:
    - coordU : u                     (float)         [create]
        Input u coordinate to sample texture at.
    
    - coordV : v                     (float)         [create]
        Input v coordinate to sample texture at.
    
    - maxU : xu                      (float)         [create]
        DEFAULT 1.0 Maximum u bounds to sample.
    
    - maxV : xv                      (float)         [create]
        DEFAULT 1.0 Maximum v bounds to sample.
    
    - minU : mu                      (float)         [create]
        DEFAULT 0.0 Minimum u bounds to sample.
    
    - minV : mv                      (float)         [create]
        DEFAULT 0.0 Minimum v bounds to sample.
    
    - output : o                     (unicode)       [create]
        Type of data to output:         A        = alpha only         RGB  = color only
        RGBA = color and alpha
    
    - samplesU : su                  (int)           [create]
        DEFAULT 1 The number of points to sample in the U dimension.
    
    - samplesV : sv                  (int)           [create]
        DEFAULT 1 The number of points to sample in the V dimension.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.colorAtPoint`
    """
    pass
def polyOptUvs(*args, **kwargs): pass
def ProfilerToolHideSelected(*args, **kwargs): pass
def HypershadePickWalkRight(*args, **kwargs): pass
def TextureToGeometryOptions(*args, **kwargs): pass
def newton(*args, **kwargs):
    """
    For each listed object, the command creates a new field. The field has a shape
    which lives in the DAG and it has an associated dependency node. The field is
    added to the list of fields owned by the object. Use connectDynamic to cause the
    field to affect a dynamic object. Note that if more than one object is listed, a
    separate field is created for each object. If fields are created, this command
    returns the names of each owning shape and of the field shapes themselves. If a
    field was queried, the results of the query are returned. If a field was edited,
    the field name is returned. If no object names are provided but the active
    selection list is non-empty, the command creates a field for every object in the
    list. If the list is empty, the command defaults to -pos 0 0 0. A Newton field
    pulls an object towards the exerting object with force dependent on the exerting
    object's mass, using Newton's universal law of gravitation. The transform is the
    associated dependency node. Use connectDynamic to cause the field to affect a
    dynamic object. If fields are created, this command returns the names of each of
    the fields. If a field was queried, the results of the query are returned. If a
    field was edited, the field name is returned. If object names are provided or
    the active selection list is non-empty, the command creates a field for every
    object in the list and calls addDynamic to add it to the object. If the list is
    empty, the command defaults to -pos 0 0 0. Setting the -pos flag with objects
    named on the command line is an error.
    
    Flags:
    - attenuation : att              (float)         [query,edit]
        Attentuation rate of field
    
    - magnitude : m                  (float)         [query,edit]
        Strength of field.
    
    - maxDistance : mxd              (float)         [query,edit]
        Maximum distance at which field is exerted. -1 indicates that the field has no
        maximum distance.
    
    - minDistance : mnd              (float)         [query,edit]
        Minimum distance at which field is exerted. Distance is in the denominator of
        the field force equation. Setting md to a small positive number avoids bizarre
        behavior when the distance gets extremely small.
    
    - name : n                       (unicode)       [query,edit]
        name of field
    
    - perVertex : pv                 (bool)          [query,edit]
        Per-vertex application. If this flag is set true, then each individual point
        (CV, particle, vertex,etc.) of the chosen object exerts an identical copy of the
        force field. If this flag is set to false, then the froce is exerted only from
        the geometric center of the set of points.
    
    - position : pos                 (float, float, float) [query,edit]
        Position in space (x,y,z) where you want to place a gravity field. The gravity
        then emanates from this position in space rather than from an object. Note that
        you can both use -pos (creating a field at a position) and also provide object
        names.
    
    - torusSectionRadius : tsr       (float)         [query,edit]
        Section radius for a torus volume.  Applies only to torus. Similar to the
        section radius in the torus modelling primitive.
    
    - volumeExclusion : vex          (bool)          [query,edit]
        Volume exclusion of the field.  If true, points outside the volume (defined by
        the volume shape attribute) are affected,  If false, points inside the volume
        are affected.  Has no effect if volumeShape is set to none.
    
    - volumeOffset : vof             (float, float, float) [query,edit]
        Volume offset of the field.  Volume offset translates the field's volume by the
        specified amount from the actual field location. This is in the field's local
        space.
    
    - volumeShape : vsh              (unicode)       [query,edit]
        Volume shape of the field.  Sets/edits/queries the field's volume shape
        attribute.  If set to any value other than none, determines a 3-D volume within
        which the field has effect. Values are: none,cube,sphere,cylinder,cone,torus.
    
    - volumeSweep : vsw              (float)         [query,edit]
        Volume sweep of the field.  Applies only to sphere, cone, cylinder, and torus.
        Similar effect to the sweep attribute in modelling.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.newton`
    """
    pass
def PauseViewportEval(*args, **kwargs): pass
def OpenBifContentBrowser(*args, **kwargs): pass
def GraphSnap(*args, **kwargs): pass
def CoarserSubdivLevel(*args, **kwargs): pass
def polyDelFacet(*args, **kwargs): pass
def nonLinear(*args, **kwargs): pass
def spaceLocator(*args, **kwargs): pass
def PlaybackBackward(*args, **kwargs): pass
def CopyUVsToUVSet(*args, **kwargs): pass
def symbolCheckBox(*args, **kwargs): pass
def iconTextCheckBox(*args, **kwargs): pass
def xgmDensityBrushToolCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.xgmDensityBrushToolCmd`
    """
    pass
def CreatePolygonPlane(*args, **kwargs): pass
def Lightning(*args, **kwargs): pass
def nConstraintReplaceMembers(*args, **kwargs): pass
def ShelfPreferencesWindow(*args, **kwargs): pass
def HypershadeSelectMaterialsFromObjects(*args, **kwargs): pass
def ToggleParticleCount(*args, **kwargs): pass
def KeyframeTangentMarkingMenu(*args, **kwargs): pass
def AbortCurrentTool(*args, **kwargs): pass
def NormalConstraint(*args, **kwargs): pass
def sbs_SetEngine(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetEngine`
    """
    pass
def ArtPaintBlendShapeWeightsTool(*args, **kwargs): pass
def dR_bevelRelease(*args, **kwargs): pass
def unfold(*args, **kwargs):
    """
    None
    
    Flags:
    - applyToShell : applyToShell    (bool)          [create]
        Specifies that the selected components should be only work on shells that have
        something have been selected or pinned.
    
    - areaWeight : aw                (float)         [create]
        Surface driven importance. 0 treat all faces equal. 1 gives more importance to
        large ones.
    
    - globalBlend : gb               (float)         [create]
        This allows the user to blend between a local optimization method (globalBlend =
        0.0) and a global optimization method (globalBlend = 1.0). The local
        optimization method looks at the ratio between the triangles on the object and
        the triangles in UV space.  It has a side affect that it can sometimes introduce
        tapering problems.  The global optimization is much slower, but takes into
        consideration the entire object when optimizing uv placement.
    
    - globalMethodBlend : gmb        (float)         [create]
        The global optimization method uses two functions to compute a minimization.
        The first function controls edge stretch by using edges lengths between xyz and
        uv.  The second function penalizes the first function by preventing
        configurations where triangles would overlap.  For every surface there is a mix
        between these two functions that will give the appropriate response. Values
        closer to 1.0 give more weight to the edge length function. Values closer to 0.0
        give more weight to surface area.  The default value of '0.5' is a even mix
        between these two values.
    
    - iterations : i                 (int)           [create]
        Maximum number of iterations for each connected UV piece.
    
    - optimizeAxis : oa              (int)           [create]
        Degree of freedom for optimization 0=Optimize freely, 1=Move vertically only,
        2=Move horzontally only
    
    - pinSelected : ps               (bool)          [create]
        Specifies that the selected components should be pinned instead the unselected
        components.
    
    - pinUvBorder : pub              (bool)          [create]
        Specifies that the UV border should be pinned when doing the solve. By default
        only unselected components are pinned.
    
    - scale : s                      (float)         [create]
        Ratio between 2d and 3d space.
    
    - stoppingThreshold : ss         (float)         [create]
        Minimum distorsion improvement between two steps in %.
    
    - useScale : us                  (bool)          [create]
        Adjust the scale or not.                                   Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.unfold`
    """
    pass
def MakeCurvesDynamic(*args, **kwargs): pass
def TestTexture(*args, **kwargs): pass
def CreatePolygonPipeOptions(*args, **kwargs): pass
def RemoveShrinkWrapSurfaces(*args, **kwargs): pass
def sbs_GoToMarketPlace(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GoToMarketPlace`
    """
    pass
def TimeEditorClipTrimStart(*args, **kwargs): pass
def PaintGeomCacheTool(*args, **kwargs): pass
def CreateSubdivTorus(*args, **kwargs): pass
def DeleteAllSounds(*args, **kwargs): pass
def setDynamic(*args, **kwargs):
    """
    setDynamic sets the isDynamic attribute of particle objects on or off.  If no
    objects are specified, it sets the attribute for any selected objects.  If -all
    is thrown, it sets the attribute for all particle objects in the scene. By
    default it sets the attribute true (on); if the -off flag is thrown, it sets the
    attribute false (off). WARNING: setDynamic is obsolescent.  This is the last
    version of Maya in which it will be supported.
    
    Flags:
    - allOnWhenRun : awr             (bool)          [create]
        Obsolete, no longer suppported or necessary.
    
    - disableAllOnWhenRun : dwr      (bool)          [create]
        Obsolete, no longer suppported or necessary.
    
    - setAll : all                   (bool)          [create]
        Set for all objects.
    
    - setOff : off                   (bool)          [create]
        Sets isDynamic false.
    
    - setOn : on                     (bool)          [create]
        Sets isDynamic true.  This flag is set by default.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.setDynamic`
    """
    pass
def PlayblastWindowOptions(*args, **kwargs): pass
def InsertKnot(*args, **kwargs): pass
def namespaceInfo(*args, **kwargs): pass
def selLoadSettings(*args, **kwargs):
    """
    This command is used to edit and query information about the implicit load
    settings. Currently this is primarily intended for internal use within the
    Preload Reference Editor. selLoadSettings acts on load setting IDs. When implict
    load settings are built for a target scene, there will be one load setting for
    each reference in the target scene. Each load setting has a numerical ID which
    is its index in a pre-order traversal of the target reference hierarchy (with
    the root scenefile being assigned an ID of 0). Although the IDs are numerical
    they must be passed to the command as string array. Example: Given the scene: a
    / \       b   c          / \         d   e where: a references b and c c
    references d and e the IDs will be as follows: a = 0 b = 1 c = 2 d = 3 e = 4
    selLoadSettings can be used to change the load state of a reference: whether it
    will be loaded or unloaded (deferred) when the target scene is opened. Note:
    selLoadSettings can accept multiple command parameters, but the order must be
    selected carefully such that no reference is set to the loaded state while its
    parent is in the unlaoded state. Given the scene: a | b [-] | c [-] where: a
    references b b references c a = 0 b = 1 c = 2 and b and c are currently in the
    unloaded state. The following command will succeed and change both b and c to
    the loaded state: selLoadSettings -e -deferReference 0 12; whereas the following
    command will fail and leave both b and c in the unloaded state: selLoadSettings
    -e -deferReference 0 21; Bear in mind that the following command will also
    change both b and c to the loaded state: selLoadSettings -e -deferReference 0 1;
    This is because setting a reference to the loaded state automatically sets all
    child references to the loaded state as well. And vice versa, setting a
    reference the the unloaded state automatically sets all child reference to the
    unloaded state.
    
    Flags:
    - activeProxy : ap               (unicode)       [create,query,edit]
        Change or query the active proxy of a proxy set. In query mode, returns the
        proxyTag of the active proxy; in edit mode, finds the proxy in the proxySet with
        the given tag and makes it the active proxy.
    
    - deferReference : dr            (bool)          [create,query,edit]
        Change or query the load state of a reference.
    
    - fileName : fn                  (unicode)       [create,query]
        Return the file name reference file(s) associated with the indicated load
        setting(s).
    
    - numSettings : ns               (int)           [create,query]
        Return the number of settings in the group of implicit load settings. This is
        equivalent to number of references in the scene plus 1.
    
    - proxyManager : pm              (unicode)       [create,query]
        Return the name(s) of the proxy manager(s) associated with the indicated load
        setting(s).
    
    - proxySetFiles : psf            (unicode)       [create,query]
        Return the name(s) of the proxy(ies) available in the proxy set associated with
        the indicated load setting(s).
    
    - proxySetTags : pst             (unicode)       [create,query]
        Return the name(s) of the proxy tag(s) available in the proxy set associated
        with the indicated load setting(s).
    
    - proxyTag : pt                  (unicode)       [create,query]
        Return the name(s) of the proxy tag(s) associated with the indicated load
        setting(s).
    
    - referenceNode : rfn            (unicode)       [create,query]
        Return the name(s) of the reference node(s) associated with the indicated load
        setting(s).
    
    - shortName : shn                (bool)          [create,query]
        Formats the return value of the 'fileName' query flag to only return the short
        name(s) of the reference file(s).
    
    - unresolvedName : un            (bool)          [create,query]
        Formats the return value of the 'fileName' query flag to return the unresolved
        name(s) of the reference file(s). The unresolved file name is the file name used
        when the reference was created, whether or not that file actually exists on
        disk. When Maya encounters a file name which does not exist on disk it attempts
        to resolve the name by looking for the file in a number of other locations. By
        default the 'fileName' flag will return this resolved value.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selLoadSettings`
    """
    pass
def NewSceneOptions(*args, **kwargs): pass
def Birail1Options(*args, **kwargs): pass
def CurveUtilitiesMarkingMenu(*args, **kwargs): pass
def CreatePolygonTorus(*args, **kwargs): pass
def HypershadeDisplayAsIcons(*args, **kwargs): pass
def cmdArnoldImportOperators(*args, **kwargs): pass
def dynamicConstraintRemove(*args, **kwargs): pass
def circle(*args, **kwargs): pass
def outlinerPanel(*args, **kwargs): pass
def NodeEditorWindow(*args, **kwargs): pass
def CurveSmoothnessFine(*args, **kwargs): pass
def Create2DContainerOptions(*args, **kwargs): pass
def filterKeyReducerCtx(*args, **kwargs):
    """
    Creates/edits a KeyReducer filter context. This context can be used to
    interactively preview/edit the KeyReducer filter on a set of animation curves.
    
    Flags:
    - apply : a                      (bool)          [edit]
        When specified, finalizes the current context state and records the command for
        the operation. This is equivalent to completing the tool action without exiting
        the current tool context.
    
    - endTime : e                    (time)          [query,edit]
        Specifies the end time portion of the time range for this filter. This time
        range is used when selectedKeys is false.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - keySync : ks                   (bool)          [query,edit]
        When true, a secondary filter pass is applied that adds a key to sibling curves
        (X,Y,Z) for each key that is encountered.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - precision : pre                (float)         [query,edit]
        Defines the precision parameter.  For the Key Reducer filter, this parameter
        specifies the error limit between the source and output curves. Greater values
        reduce precision. Lower values increase precision.
    
    - precisionMode : pm             (int)           [query,edit]
        Specifies the precision mode for the Key Reducer filter. Avaiable modes are:  0:
        Absolute value. 1: Percentage  Default is 1 (percentage mode).
    
    - preserveKeyTangent : pkt       (unicode)       [query,edit]
        When specified, keys whose in or out tangent type match the specified type are
        preserved.  Supported tangent types:  fixed linear flat smooth step clamped
        plateau stepnext auto
    
    - selectedKeys : sk              (bool)          [query,edit]
        If true, sets the filter to apply to the selected keys. Otherwise, the filter
        applies to the specified time range. Default is on.
    
    - startTime : s                  (time)          [query,edit]
        Specifies the start time portion of the time range for this filter. This time
        range is used when selectedKeys is false.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.filterKeyReducerCtx`
    """
    pass
def SplitEdgeRingToolOptions(*args, **kwargs): pass
def OpenCloseSurfacesOptions(*args, **kwargs): pass
def ConvertHairSelectionToHairSystems(*args, **kwargs): pass
def AttachToPath(*args, **kwargs): pass
def AssignTemplate(*args, **kwargs): pass
def PickWalkIn(*args, **kwargs): pass
def SelectLightsIlluminatingObject(*args, **kwargs): pass
def NodeEditorGraphUpstream(*args, **kwargs): pass
def polyCube(*args, **kwargs): pass
def dgValidateCurve(*args, **kwargs):
    """
    The dgValidateCurvecommand is used to make sure the curve internal status
    matches their actual state. It forces checks on curves that might not be tagged
    as static, even if they are. The DG tracks static curves in order to optimize
    evaluation by not considering them animated.  Once keys are added and modified
    on the curve, it is no longer static.  Certain operations on the curve might
    make it flat / without animation, but the DG will not treat it as static because
    it expects it to be modified again soon. This command allows to explicitly
    request checks for the static state of animation curves.
    
    Flags:
    - allCurves : a                  (bool)          [create]
        Ignore the selected or specified objects and work on all curves.
    
    - verbose : v                    (bool)          [create]
        Prints out all of the curves set static or not.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgValidateCurve`
    """
    pass
def PoleVectorConstraint(*args, **kwargs): pass
def RenderOptions(*args, **kwargs): pass
def manipScaleContext(*args, **kwargs): pass
def OutlinerWindow(*args, **kwargs): pass
def FluidEmitter(*args, **kwargs): pass
def timePort(*args, **kwargs): pass
def NodeEditorCopyConnectionsOnPaste(*args, **kwargs): pass
def texScaleContext(*args, **kwargs):
    """
    This command can be used to create, edit, or query a scale context for the UV
    Editor. Note that the above flag controls the global behaviour of all texture
    editor scale contexts.  Changing one context independently is not allowed.
    Changing a context's behaviour using the above flag, will change all existing
    texture editor scale contexts.
    
    Flags:
    - editPivotMode : epm            (bool)          [query]
        Returns true when manipulator is in edit pivot mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - position : p                   (bool)          [query]
        Returns the current position of the manipulator.
    
    - preventNegativeScale : pns     (bool)          [query,edit]
        Prevent negative scale for components.
    
    - snap : s                       (bool)          [query,edit]
        Sets or queries whether snapping is to be used.
    
    - snapRelative : sr              (bool)          [query,edit]
        Sets or queries whether snapping is relative.
    
    - snapValue : sv                 (float)         [query,edit]
        Sets or queries the size of the snapping increment.
    
    - tweakMode : twk                (bool)          [query,edit]
        When true, the manipulator is hidden and highlighted components can be selected
        and scaled in one step using a click-drag interaction.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.texScaleContext`
    """
    pass
def ToggleUseDefaultMaterial(*args, **kwargs): pass
def DecreaseCheckerDensity(*args, **kwargs): pass
def dR_tweakRelease(*args, **kwargs): pass
def artFluidAttr(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.artFluidAttr`
    """
    pass
def ShowMeshSmoothTargetToolOptions(*args, **kwargs): pass
def CreateNSoftBody(*args, **kwargs): pass
def AddTimeWarp(*args, **kwargs): pass
def insertKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to insert keys within the graph
    editor
    
    Flags:
    - breakdown : bd                 (bool)          [query,edit]
        Specifies whether or not to create breakdown keys
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.insertKeyCtx`
    """
    pass
def particle(*args, **kwargs): pass
def isolateSelect(*args, **kwargs):
    """
    This command turns on/off isolate select mode in a specified modeling view,
    specified as the argument. Isolate select mode is a display mode where the
    currently selected objects are added to a list and only those objects are
    displayed in the view. It allows for selective viewing of specific objects and
    object components.
    
    Flags:
    - addDagObject : ado             (PyNode)        []
        Add the specified object to the set of objects to be displayed in the view.
    
    - addSelected : addSelected      (bool)          []
        Add the currently active objects to the set of objects to be displayed in the
        view.
    
    - addSelectedObjects : aso       (bool)          []
        Add selected objects to the set of objects to be displayed in the view. This
        flag differs from addSelected in that it will ignore selected components and add
        the entire object.
    
    - loadSelected : ls              (bool)          []
        Replace the objects being displayed with the currently active objects.
    
    - removeDagObject : rdo          (PyNode)        []
        Remove the specified object from the set of objects to be displayed in the view.
    
    - removeSelected : rs            (bool)          []
        Remove the currently active objects to the set of objects to be displayed in the
        view.
    
    - state : s                      (bool)          [query]
        Turns isolate select mode on/off.
    
    - update : u                     (bool)          []
        Update the view's list of objects due to a change to the set of objects to be
        displayed.
    
    - viewObjects : vo               (bool)          [query]
        Returns the name (if any) of the objectSet which contains the list of objects
        visible in the view if isolate select mode is on. If isolate select mode is off,
        an empty string is returned.                  Flag can have multiple arguments,
        passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.isolateSelect`
    """
    pass
def DisplayIntermediateObjects(*args, **kwargs): pass
def evalDeferred(*args, **kwargs):
    """
    This command takes the string it is given and evaluates it during the next
    available idle time.  It is useful for attaching commands to controls that can
    change or delete the control.
    
    Flags:
    - evaluateNext : en              (bool)          [create]
        Specified that the command to be executed should be ran with the highest
        priority, ideally queued up next.
    
    - list : ls                      (bool)          [create]
        Return a list of the command strings that are currently pending on the idle
        queue. By default, it will return the list of commands for all priorities. The
        -lowestPriority and -lowPriority can be used to restrict the list of commands to
        a given priority level.
    
    - lowPriority : low              (bool)          [create]
        Specified that the command to be executed should be deferred with the low
        priority. That is, it will be executed whenever Maya is idle.
    
    - lowestPriority : lp            (bool)          [create]
        Specified that the command to be executed should be deferred with the lowest
        priority. That is, it will be executed when no other idle events are scheduled.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.evalDeferred`
    """
    pass
def renderManip(*args, **kwargs):
    """
    This command creates manipulators for cameras or lights.                 In
    query mode, return type is based on queried flag.
    
    Flags:
    - camera : cam                   (bool, bool, bool, bool, bool) [query,edit]
        Query or edit the visiblity status of the component camera manipulators. The
        order of components are: cycling index, center of interest, pivot, clipping
        planes, and unused.
    
    - light : lt                     (bool, bool, bool) [query,edit]
        Query or edit the visiblity status of the component light manipulators. The
        order of components are: cycling index, center of interest, and pivot.
    
    - spotLight : slt                (bool, bool, bool, bool, bool, bool, bool) [query,edit]
        Query or edit the visiblity status of the component spot light manipulators. The
        order of components are: cycling index, center of interest, pivot, cone angle,
        penumbra, look through barn doors, and decay regions.
    
    - state : st                     (bool)          [query,edit]
        Query or edit the state of manipulators on an camera, ambient light, directional
        light, point light, or spot light. This flag's default value is on.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.renderManip`
    """
    pass
def polyCanBridgeEdge(*args, **kwargs):
    """
    Returns true if the specified poly edges can be bridged using polyBridgeEdge.
    
    
    Derived from mel command `maya.cmds.polyCanBridgeEdge`
    """
    pass
def NCreateEmitterOptions(*args, **kwargs): pass
def refreshEditorTemplates(*args, **kwargs):
    """
    This command refreshes all cached attribute editor templates, including those
    copied from the standard AE. These are the templates constructed internally on a
    per node type basis. This is useful if attribute elements have changed and the
    templates need to be re-evaluated accordingly.
    
    
    Derived from mel command `maya.cmds.refreshEditorTemplates`
    """
    pass
def BezierPresetBezierCorner(*args, **kwargs): pass
def ConvertSelectionToUVShellBorder(*args, **kwargs): pass
def retimeHelper(*args, **kwargs):
    """
    Flags:
    - deleteFrame : df               (int)           []
    
    - frame : f                      (float)         []
    
    - lockBar : lb                   (int, int)      []
    
    - locks : lk                     (int)           []
    
    - mouseOver : mo                 (bool)          []
    
    - moveFrame : mf                 (int, float)    []
    
    
    Derived from mel command `maya.cmds.retimeHelper`
    """
    pass
def NodeEditorSetTraversalDepthUnlim(*args, **kwargs): pass
def WarpImageOptions(*args, **kwargs): pass
def dR_convertSelectionToUV(*args, **kwargs): pass
def PaintSetMembershipToolOptions(*args, **kwargs): pass
def AlembicExportSelectionOptions(*args, **kwargs): pass
def transferAttributes(*args, **kwargs): pass
def SelectCurveCVsAll(*args, **kwargs): pass
def FlareOptions(*args, **kwargs): pass
def RoundTool(*args, **kwargs): pass
def arnoldExportAss(*args, **kwargs):
    """
    Flags:
    - asciiAss : a                   (bool)          []
    
    - batch : b                      (bool)          []
    
    - boundingBox : bb               (bool)          []
    
    - camera : cam                   (unicode)       []
    
    - compressed : c                 (bool)          []
    
    - endFrame : ef                  (float)         []
    
    - expandProcedurals : ep         (bool)          []
    
    - exportAllShadingGroups : shg   (bool)          []
    
    - exportPrefix : pr              (unicode)       []
    
    - filename : f                   (unicode)       []
    
    - forceTranslateShadingEngines : fsh (bool)          []
    
    - frameStep : fs                 (float)         []
    
    - fullPath : fp                  (bool)          []
    
    - lightLinks : ll                (int)           []
    
    - mask : m                       (int)           []
    
    - options : o                    (unicode)       []
    
    - selected : s                   (bool)          []
    
    - shadowLinks : sl               (int)           []
    
    - startFrame : sf                (float)         []
    
    
    Derived from mel command `maya.cmds.arnoldExportAss`
    """
    pass
def NodeEditorGraphRemoveDownstream(*args, **kwargs): pass
def nConstraintAttractToMatchOptions(*args, **kwargs): pass
def ToggleIKHandleSnap(*args, **kwargs): pass
def InTangentAuto(*args, **kwargs): pass
def attachNclothCache(*args, **kwargs): pass
def SelectVertexMask(*args, **kwargs): pass
def PrefixHierarchyNames(*args, **kwargs): pass
def ToggleViewAxis(*args, **kwargs): pass
def selectPriority(*args, **kwargs):
    """
    The selectPrioritycommand is used to change the selection priority of particular
    types of objects that can be selected when using the select tool. It accepts no
    other arguments besides the flags. These flags are the same as used by the
    'selectType' command.
    
    Flags:
    - allComponents : alc            (int)           [create,query]
        Set all component selection priority
    
    - allObjects : alo               (int)           [create,query]
        Set all object selection priority
    
    - animBreakdown : abd            (int)           [create,query]
        Set animation breakdown selection priority
    
    - animCurve : ac                 (int)           [create,query]
        Set animation curve selection priority
    
    - animInTangent : ait            (int)           [create,query]
        Set animation in-tangent selection priority
    
    - animKeyframe : ak              (int)           [create,query]
        Set animation keyframe selection priority
    
    - animOutTangent : aot           (int)           [create,query]
        Set animation out-tangent selection priority
    
    - byName : bn                    (unicode, bool) [create]
        Set selection priority for the specified user-defined selection type
    
    - camera : ca                    (int)           [create,query]
        Set camera selection priority
    
    - cluster : cl                   (int)           [create,query]
        Set cluster selection priority
    
    - collisionModel : clm           (int)           [create,query]
        Set collision model selection priority
    
    - controlVertex : cv             (int)           [create,query]
        Set control vertex selection priority
    
    - curve : c                      (int)           [create,query]
        Set curve selection priority
    
    - curveKnot : ck                 (int)           [create,query]
        Set curve knot selection priority
    
    - curveOnSurface : cos           (int)           [create,query]
        Set curve-on-surface selection priority
    
    - curveParameterPoint : cpp      (int)           [create,query]
        Set curve parameter point selection priority
    
    - dimension : dim                (int)           [create,query]
        Set dimension shape selection priority
    
    - dynamicConstraint : dc         (int)           [create,query]
        Set dynamicConstraint selection priority
    
    - edge : eg                      (int)           [create,query]
        Set mesh edge selection priority
    
    - editPoint : ep                 (int)           [create,query]
        Set edit-point selection priority
    
    - emitter : em                   (int)           [create,query]
        Set emitter selection priority
    
    - facet : fc                     (int)           [create,query]
        Set mesh face selection priority
    
    - field : fi                     (int)           [create,query]
        Set field selection priority
    
    - fluid : fl                     (int)           [create,query]
        Set fluid selection priority
    
    - follicle : fo                  (int)           [create,query]
        Set follicle selection priority
    
    - hairSystem : hs                (int)           [create,query]
        Set hairSystem selection priority
    
    - handle : ha                    (int)           [create,query]
        Set object handle selection priority
    
    - hull : hl                      (int)           [create,query]
        Set hull selection priority
    
    - ikEndEffector : iee            (int)           [create,query]
        Set ik end effector selection priority
    
    - ikHandle : ikh                 (int)           [create,query]
        Set ik handle selection priority
    
    - imagePlane : ip                (int)           [create,query]
        Set image plane selection mask priority
    
    - implicitGeometry : ig          (int)           [create,query]
        Set implicit geometry selection priority
    
    - isoparm : iso                  (int)           [create,query]
        Set surface iso-parm selection priority
    
    - joint : j                      (int)           [create,query]
        Set ik handle selection priority
    
    - jointPivot : jp                (int)           [create,query]
        Set joint pivot selection priority
    
    - lattice : la                   (int)           [create,query]
        Set lattice selection priority
    
    - latticePoint : lp              (int)           [create,query]
        Set lattice point selection priority
    
    - light : lt                     (int)           [create,query]
        Set light selection priority
    
    - localRotationAxis : ra         (int)           [create,query]
        Set local rotation axis selection priority
    
    - locator : lc                   (int)           [create,query]
        Set locator (all types) selection priority
    
    - locatorUV : luv                (int)           [create,query]
        Set uv locator selection priority
    
    - locatorXYZ : xyz               (int)           [create,query]
        Set xyz locator selection priority
    
    - meshUVShell : msh              (int)           [create,query]
        Set uv shell component mask on/off.
    
    - motionTrailPoint : mtp         (int)           [create,query]
        Set motion point selection priority
    
    - motionTrailTangent : mtt       (int)           [create,query]
        Set motion point tangent priority
    
    - nCloth : ncl                   (int)           [create,query]
        Set nCloth selection priority
    
    - nParticle : npr                (int)           [create,query]
        Set nParticle point selection priority
    
    - nParticleShape : nps           (int)           [create,query]
        Set nParticle shape selection priority
    
    - nRigid : nr                    (int)           [create,query]
        Set nRigid selection priority
    
    - nonlinear : nl                 (int)           [create,query]
        Set nonlinear selection priority
    
    - nurbsCurve : nc                (int)           [create,query]
        Set nurbs-curve selection priority
    
    - nurbsSurface : ns              (int)           [create,query]
        Set nurbs-surface selection priority
    
    - orientationLocator : ol        (int)           [create,query]
        Set orientation locator selection priority
    
    - particle : pr                  (int)           [create,query]
        Set particle point selection priority
    
    - particleShape : ps             (int)           [create,query]
        Set particle shape selection priority
    
    - plane : pl                     (int)           [create,query]
        Set sketch plane selection priority
    
    - polymesh : p                   (int)           [create,query]
        Set poly-mesh selection priority
    
    - polymeshEdge : pe              (int)           [create,query]
        Set poly-mesh edge selection priority
    
    - polymeshFace : pf              (int)           [create,query]
        Set poly-mesh face selection priority
    
    - polymeshFreeEdge : pfe         (int)           [create,query]
        Set poly-mesh free-edge selection priority
    
    - polymeshUV : puv               (int)           [create,query]
        Set poly-mesh UV point selection priority
    
    - polymeshVertex : pv            (int)           [create,query]
        Set poly-mesh vertex selection priority
    
    - polymeshVtxFace : pvf          (int)           [create,query]
        Set poly-mesh vtxFace selection priority
    
    - queryByName : qbn              (unicode)       [query]
        Query selection priority for the specified user-defined selection type
    
    - rigidBody : rb                 (int)           [create,query]
        Set rigid body selection priority
    
    - rigidConstraint : rc           (int)           [create,query]
        Set rigid constraint selection priority
    
    - rotatePivot : rp               (int)           [create,query]
        Set rotate pivot selection priority
    
    - scalePivot : sp                (int)           [create,query]
        Set scale pivot selection priority
    
    - sculpt : sc                    (int)           [create,query]
        Set sculpt selection priority
    
    - selectHandle : sh              (int)           [create,query]
        Set select handle selection priority
    
    - spring : spr                   (int)           [create,query]
        Set spring shape selection priority
    
    - springComponent : spc          (int)           [create,query]
        Set individual spring selection priority
    
    - stroke : str                   (int)           [create,query]
        Set stroke selection priority
    
    - subdiv : sd                    (int)           [create,query]
        Set subdivision surface selection priority
    
    - subdivMeshEdge : sme           (int)           [create,query]
        Set subdivision surface mesh edge selection priority
    
    - subdivMeshFace : smf           (int)           [create,query]
        Set subdivision surface mesh face selection priority
    
    - subdivMeshPoint : smp          (int)           [create,query]
        Set subdivision surface mesh point selection priority
    
    - subdivMeshUV : smu             (int)           [create,query]
        Set subdivision surface mesh UV map selection priority
    
    - surfaceEdge : se               (int)           [create,query]
        Set surface edge selection priority
    
    - surfaceFace : sf               (int)           [create,query]
        Set surface face selection priority
    
    - surfaceKnot : sk               (int)           [create,query]
        Set surface knot selection priority
    
    - surfaceParameterPoint : spp    (int)           [create,query]
        Set surface parameter point selection priority
    
    - surfaceRange : sr              (int)           [create,query]
        Set surface range selection priority
    
    - texture : tx                   (int)           [create,query]
        Set texture selection priority
    
    - vertex : v                     (int)           [create,query]
        Set mesh vertex selection priority                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.selectPriority`
    """
    pass
def dR_activeHandleYZ(*args, **kwargs): pass
def ModelingPanelUndoViewChange(*args, **kwargs): pass
def ApplySettingsToLastStroke(*args, **kwargs): pass
def UVAutomaticProjectionOptions(*args, **kwargs): pass
def dR_increaseManipSize(*args, **kwargs): pass
def FlipTriangleEdge(*args, **kwargs): pass
def MakeMotorBoatsOptions(*args, **kwargs): pass
def SelectAllLights(*args, **kwargs): pass
def subdPlanarProjection(*args, **kwargs):
    """
    TsubProjCmdBase is a base class for the command to create a mapping on the
    selected subdivision faces. Projects a map onto an object, using an orthogonal
    projection. The piece of the map defined from isu, isv, icx, icy area, is placed
    at pcx, pcy, pcz location.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - createNewMap : cm              (bool)          [create,query,edit]
        This flag when set true will create a new map with a the name passed in, if the
        map does not already exist.
    
    - frozen : fzn                   (bool)          []
    
    - imageCenter : ic2              (float, float)  [create,query,edit]
        This flag specifies the center point of the 2D model layout. C: Default is 0.5
        0.5. Q: When queried, this flag returns a float[2].
    
    - imageCenterX : icx             (float)         [create,query,edit]
        This flag specifies X for the center point of the 2D model layout. C: Default is
        0.5. Q: When queried, this flag returns a float.
    
    - imageCenterY : icy             (float)         [create,query,edit]
        This flag specifies Y for the center point of the 2D model layout. C: Default is
        0.5. Q: When queried, this flag returns a float.
    
    - imageScale : is2               (float, float)  [create,query,edit]
        This flag specifies the UV scale : Enlarges or reduces the 2D version of the
        model in U or V space relative to the 2D centerpoint. C: Default is 1.0 1.0. Q:
        When queried, this flag returns a float[2].
    
    - imageScaleU : isu              (float)         [create,query,edit]
        This flag specifies the U scale : Enlarges or reduces the 2D version of the
        model in U space relative to the 2D centerpoint. C: Default is 1.0. Q: When
        queried, this flag returns a float.
    
    - imageScaleV : isv              (float)         [create,query,edit]
        This flag specifies the V scale : Enlarges or reduces the 2D version of the
        model in V space relative to the 2D centerpoint. C: Default is 1.0. Q: When
        queried, this flag returns a float.
    
    - insertBeforeDeformers : ibd    (bool)          [create]
        This flag specifies if the projection node should be inserted before or after
        deformer nodes already applied to the shape. Inserting the projection after the
        deformer leads to texture swimming during animation and is most often
        undesirable. C: Default is on.
    
    - keepImageRatio : kir           (bool)          [create]
        True means keep any image ratio
    
    - mapDirection : md              (unicode)       [create]
        This flag specifies the mapping direction. 'x', 'y' and 'z' projects the map
        along the corresponding axis. 'c' projects along the current camera viewing
        direction. 'p' does perspective projection if current camera is perspective. 'b'
        projects along the best plane fitting the objects selected.
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal                  Common flags
    
    - projectionCenter : pc          (float, float, float) [create,query,edit]
        This flag specifies the origin point from which the map is projected. C: Default
        is 0.0 0.0 0.0. Q: When queried, this flag returns a float[3].
    
    - projectionCenterX : pcx        (float)         [create,query,edit]
        This flag specifies X for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionCenterY : pcy        (float)         [create,query,edit]
        This flag specifies Y for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionCenterZ : pcz        (float)         [create,query,edit]
        This flag specifies Z for the origin point from which the map is projected. C:
        Default is 0.0. Q: When queried, this flag returns a float.
    
    - projectionHeight : ph          (float)         [create,query,edit]
        This flag specifies the height of the map relative to the 3D projection axis. C:
        Default is 1.0 Q: When queried, this flag returns a float.
    
    - projectionScale : ps           (float, float)  [create,query,edit]
        This flag specifies the width and the height of the map relative to the 3D
        projection axis. C: Default is 1.0 1.0. Q: When queried, this flag returns a
        float[2].
    
    - projectionWidth : pw           (float)         [create,query,edit]
        This flag specifies the width of the map relative to the 3D projection axis. C:
        Default is 1.0 Q: When queried, this flag returns a float.
    
    - rotate : ro                    (float, float, float) [create,query,edit]
        This flag specifies the mapping rotate angles. C: Default is 0.0 0.0 0.0. Q:
        When queried, this flag returns a float[3].
    
    - rotateX : rx                   (float)         [create,query,edit]
        This flag specifies X mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float[3].
    
    - rotateY : ry                   (float)         [create,query,edit]
        This flag specifies Y mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float.
    
    - rotateZ : rz                   (float)         [create,query,edit]
        This flag specifies Z mapping rotate angle. C: Default is 0.0. Q: When queried,
        this flag returns a float.
    
    - rotationAngle : ra             (float)         [create,query,edit]
        This flag specifies the rotation angle in the mapping space. When the angle is
        positive, then the map rotates counterclockwise on the mapped model, whereas
        when it is negative then the map rotates lockwise on the mapped model. C:
        Default is 10.0. Q: When queried, this flag returns a float.
    
    - smartFit : sf                  (bool)          [create]
        True means use the smart fit algorithm
    
    - worldSpace : ws                (bool)          [create,query,edit]
        This flag specifies which reference to use. If on: all geometrical values are
        taken in world reference. If off: all geometrical values are taken in object
        reference. C: Default is off. Q: When queried, this flag returns an int.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.subdPlanarProjection`
    """
    pass
def jointDisplayScale(*args, **kwargs):
    """
    This action modifies and queries the current display size of skeleton joints.
    The joint display size is controlled by a scale factor; a scale factor of 1 sets
    the display size to its default, which is 1 in diameter. With the plain format,
    the float argument is the factor with respect to the default size. When
    -a/absolute is used, the float argument refers to the diameter of the joint
    display size.
    
    Flags:
    - absolute : a                   (bool)          [create,query,edit]
        Interpret the float argument as the display size as opposed to the scale factor.
    
    - ikfk : ik                      (float)         [create,query,edit]
        Set the display size of ik/fk skeleton joints.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.jointDisplayScale`
    """
    pass
def SelectMeshUVShell(*args, **kwargs): pass
def nClothDeleteCacheFrames(*args, **kwargs): pass
def EnableTimeWarp(*args, **kwargs): pass
def PolygonBooleanUnion(*args, **kwargs): pass
def ClearCurrentContainer(*args, **kwargs): pass
def MoveNormalTool(*args, **kwargs): pass
def FBIKLabelHip(*args, **kwargs): pass
def nClothMergeCacheOpt(*args, **kwargs): pass
def HideUIElements(*args, **kwargs): pass
def cameraSet(*args, **kwargs): pass
def StraightenCurvesOptions(*args, **kwargs): pass
def TranslateToolMarkingMenu(*args, **kwargs): pass
def convertSolidTx(*args, **kwargs):
    """
    Command to convert a texture on a surface to a file texture. The first argument
    is a rendering node or attribute. If only the node is specified, the outColor
    attribute will be sampled. If the node does not have an outColor attribute, the
    first attribute on the node which is: readable, not writable, not hidden,
    connectable, and not a multi is used. If lighting is to be baked, a shading
    group must be specified as the texture. The current selection will be used if a
    texture and surface are not specified. An image file will be generated for each
    object and stored in your image segment of your project. The filename will be
    formatted using the texture and surface names as follows: However, if force is
    off and there is a name collision a version number will be determined and the
    filename will be formatted as follows:
    
    Flags:
    - alpha : al                     (bool)          [create]
        Specify whether to compute the transparency when baking lighting. The conversion
        will sample both the color and transparency of the shading network; the alpha
        channel of the file texture will be set to correspond to the result from
        sampling the transparency. By default transparency is not computed.
    
    - antiAlias : aa                 (bool)          [create]
        Perform anti-aliasing on the resulting image. Convert solid texture will
        generally take four times longer than without anti-aliasing. By default this
        flag is off.
    
    - backgroundColor : bc           (int, int, int) [create]
        Set the background color to a specific value. Default is to use the shader
        default color to fill the background. Valid values range from 0 to 255 if the
        pixel format is 8 bits per channel, or 0 to 65535 if the pixel format is 16 bits
        per channel. This flag automatically sets -backgroundMode to color. Default is
        black: 0 0 0.
    
    - backgroundMode : bm            (unicode)       [create]
        Defines how the background of the texture should be filled. Three modes are
        available: shaderor 1: uses the default shader color. coloror 2: uses the color
        given by -backgroundColor flag. extendor 3: extends outwards the color along the
        seam edges. Default is shader.
    
    - camera : cam                   (PyNode)        [create]
        Specify a camera to use in baking lighting. If a camera is not specified the
        camera in the active view will be used.
    
    - componentRange : cr            (bool)          [create]
        If one or more components have been selected to use, then if this flag is set,
        then the uv range of the components is used to fit into the texture map
        resolution. By default this flag is set to false.
    
    - doubleSided : ds               (bool)          [create]
        Specify whether the sampler should flip the surface normal if the sample point
        faces away from the camera. Note: flipping the normal will make the result
        dependent on the camera (ie. one camera may flip normals where different camera
        wouldn't). It's not recommended that doubleSided be used in combination with
        shadows. By default this flag is false.
    
    - fileFormat : fil               (unicode)       [create]
        File format to be used for output. IFF is the default if unspecified. Other
        valid formats are:als: Alias PIXcin: Cineoneps: EPSgif: GIFiff: Maya IFFjpg:
        JPEGyuv: Quantelrla: Wavefront RLAsgi: SGIsi: SoftImage (.pic)tga: Targatif:
        TIFFbmp: Windows Bitmap
    
    - fileImageName : fin            (unicode)       [create]
        Specify the output path and name of file texture image. If the file name doesn't
        contain a directory separator, the image will be written to source images of the
        current project. The file will not be versioned if it already exists.
    
    - fillTextureSeams : fts         (bool)          [create]
        Specify whether or not to overscan the polygon beyond its outer edges, when
        creating the file texture, in order to fill the texture seams. Default is true.
    
    - force : f                      (bool)          [create]
        If the output image already exists overwrite it. By default this flag is off.
    
    - fullUvRange : fur              (bool)          [create]
        Sample using the full uv range of the surface. This flag cannot be used with the
        -uvr flag. A 2D texture placement node will be created and connected to the file
        texture. The placement's translate and coverage will be set according to the
        full UV range of the surface.
    
    - name : n                       (unicode)       [create]
        Set the name of the file texture node. Name conflict resolution will be used to
        determine valid names when multiple objects are specified.
    
    - pixelFormat : pf               (unicode)       [create]
        Specifies the pixel format of the image. Note that not all file formats support
        all pixel formats. Available options: 8: 8 bits per channel, unsigned (0-255)
        16: 16 bits per channel, unsigned (0-65535) Default is 8.
    
    - resolutionX : rx               (int)           [create]
        Set the horizontal image resolution. If this flag is not specified, the
        resolution will be set to 256.
    
    - resolutionY : ry               (int)           [create]
        Set the vertical image resolution. If this flag is not specified, the resolution
        will be set to 256.
    
    - reuseDepthMap : rdm            (bool)          [create]
        Specify whether or not to reuse all the generated dmaps. Default is false.
    
    - samplePlane : sp               (bool)          [create]
        Specify whether to sample using a virtual plane. This virtual plane has texture
        coordinates in the rectangle defined by the -samplePlaneRange flag. If the
        -samplePlaneRange flag is not set then the virtual plane defaults to having
        texture coordinates in the (0,0) to (1,1) square. If this option is set than all
        surface based arguments will be ignored.
    
    - samplePlaneRange : spr         (float, float, float, float) [create]
        Specify the uv range of the texture coordinates used to sample if the
        -samplePlane option is set. There are four arguments corresponding to uMin,
        uMax, vMin and vMax. By default the virtual plane is from uMin 0 to uMax 1, and
        vMin 0 to vMax 1.
    
    - shadows : sh                   (bool)          [create]
        Specify whether to compute shadows when baking lighting. Disk based shadow maps
        will be used. Only lights with depth map shadows enabled will contribute to the
        shading. By default shadows are not computed.
    
    - uvBBoxIntersect : ubi          (bool)          [create]
        This flag is obsolete.
    
    - uvRange : uvr                  (float, float, float, float) [create]
        Specify the uv range in which samples will be computed. There are four arguments
        corresponding to uMin, uMax, vMin and vMax. Each value should be specified based
        on the surface's uv space. A 2D texture placement node will be created and
        connected to the file texture. The placement's frame translate and coverage will
        be set according to the uv range specified. By default the entire uv range of
        the surface will be used.
    
    - uvSetName : uv                 (unicode)       [create]
        Specify which uv set has to be used as the driving parametrization for convert
        solid.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.convertSolidTx`
    """
    pass
def HideAllLabels(*args, **kwargs): pass
def FBIKLabelRingFinger(*args, **kwargs): pass
def getRenderTasks(*args, **kwargs):
    """
    Command to return render tasks to render an image source.  Image source can
    depend on upstream image sources that result from renderings of 3D scene, or 2D
    renderings (e.g. render targets). This command obtains the graph of image source
    render dependencies, and creates render tasks according to these dependencies.
    A render task has context, which can be camera, render layer, and resolution, or
    other, renderer-specific context.  Because of image source overrides, the render
    task context depends on the path through the render dependency graph, with the
    most upstream override for a context item applied.  As there can be multiple
    paths through a render dependency graph to a render dependency, there can be
    multiple render tasks for a given render dependency.
    
    Flags:
    - camera : c                     (unicode)       [create]
        Camera node to use in the render context for the image source render task.
    
    - renderLayer : rl               (unicode)       [create]
        Render layer to use in the render context for the image source render task.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.getRenderTasks`
    """
    pass
def RenderViewNextImage(*args, **kwargs): pass
def SurfaceFlowOptions(*args, **kwargs): pass
def UVOrientShells(*args, **kwargs): pass
def DetachVertexComponent(*args, **kwargs): pass
def PruneLattice(*args, **kwargs): pass
def u3dAutoSeam(*args, **kwargs):
    """
    Flags:
    - cutPipes : p                   (bool)          []
    
    - select : sl                    (bool)          []
    
    - splitShells : s                (float)         []
    
    
    Derived from mel command `maya.cmds.u3dAutoSeam`
    """
    pass
def hikGetNodeIdFromName(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.hikGetNodeIdFromName`
    """
    pass
def MatchTranslation(*args, **kwargs): pass
def RotateToolWithSnapMarkingMenuPopDown(*args, **kwargs): pass
def dR_mtkToolTGL(*args, **kwargs): pass
def PerformTessellationSetup(*args, **kwargs): pass
def HypershadeGraphUpstream(*args, **kwargs): pass
def NParticleToPolygons(*args, **kwargs): pass
def melInfo(*args, **kwargs):
    """
    This command returns the names of all global MEL procedures that are currently
    defined as a string array. The user can query the definition of each MEL
    procedure using the whatIscommand.
    
    
    Derived from mel command `maya.cmds.melInfo`
    """
    pass
def SelectBrushNames(*args, **kwargs): pass
def freeFormFillet(*args, **kwargs):
    """
    This command creates a free form surface fillet across two surface trim edges or
    isoparms or curve on surface. The fillet surface creation has blend controls in
    the form of bias and depth. The bias value scales the tangents at the two ends
    across the two selected curves. The depth values controls the curvature of the
    fillet across the two selected curves. The default values of depth, bias are 0.5
    and 0.5 respectively.
    
    Flags:
    - bias : b                       (float)         [create,query,edit]
        Bias value for fillet Default:0.5
    
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - depth : d                      (float)         [create,query,edit]
        Depth value for fillet Default:0.5
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.
    
    - polygon : po                   (int)           [create]
        The value of this argument controls the type of the object created by this
        operation 0: nurbs surface1: polygon (use nurbsToPolygonsPref to set the
        parameters for the conversion)2: subdivision surface (use nurbsToSubdivPref to
        set the parameters for the conversion)3: Bezier surface4: subdivision surface
        solid (use nurbsToSubdivPref to set the parameters for the conversion)
    
    - positionTolerance : pt         (float)         [create,query,edit]
        C(0) Tolerance For Filleted Surface creation Default:0.1
    
    - range : rn                     (bool)          [create]
        Force a curve range on complete input curve.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - tangentTolerance : tt          (float)         [create,query,edit]
        G(1) continuity Tolerance For Filleted Surface creation Default:0.1
        Common flags
    
    
    Derived from mel command `maya.cmds.freeFormFillet`
    """
    pass
def GpuCacheRefreshAll(*args, **kwargs): pass
def HypershadeCreateAsset(*args, **kwargs): pass
def ToggleFaceNormalDisplay(*args, **kwargs): pass
def PositionAlongCurve(*args, **kwargs): pass
def TimeEditorUnmuteAllTracks(*args, **kwargs): pass
def AddEdgeDivisions(*args, **kwargs): pass
def FlowPathObject(*args, **kwargs): pass
def SwitchMashGeometryType(*args, **kwargs): pass
def FBXLoadMBExportPresetFile(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXLoadMBExportPresetFile`
    """
    pass
def displayRGBColor(*args, **kwargs):
    """
    This command changes or queries the display color for anything in the
    application that allows the user to set its color. These colors are part of the
    UI and not part of the saved data for a model.  This command is not undoable.
    
    Flags:
    - create : c                     (bool)          [create]
        Creates a new RGB display color which can be queried or set. If is used only
        when saving color preferences. name Specifies the name of color to change.
    
    - hueSaturationValue : hsv       (bool)          [create,query]
        Indicates that rgb values are really hsv values. Upon query, returns the HSV
        valuses as an array of 3 floats. r g b The RGB values for the color.  (Between
        0-1)
    
    - list : l                       (bool)          [create]
        Writes out a list of all RGB color names and their value.
    
    - resetToFactory : rf            (bool)          [create]
        Resets all the RGB display colors to their factory defaults.
    
    - resetToSaved : rs              (bool)          [create]
        Resets all the RGB display colors to their saved values.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.displayRGBColor`
    """
    pass
def FBIKLabelToeBase(*args, **kwargs): pass
def fluidReplaceCache(*args, **kwargs): pass
def AddWrapInfluence(*args, **kwargs): pass
def SubdivSmoothnessFine(*args, **kwargs): pass
def cMuscleWeightMirror(*args, **kwargs):
    """
    Flags:
    - axis : a                       (int)           []
    
    - help : h                       (bool)          []
    
    - replace : rep                  (unicode)       []
    
    - search : src                   (unicode)       []
    
    - space : scp                    (unicode)       []
    
    - system : sys                   (PyNode)        []
    
    - tolerance : tol                (float)         []
    
    - weight : wt                    (unicode)       []
    
    
    Derived from mel command `maya.cmds.cMuscleWeightMirror`
    """
    pass
def FBXExportTangents(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportTangents`
    """
    pass
def deleteAttr(*args, **kwargs):
    """
    This command is used to delete a dynamic attribute from a node or nodes. The
    attribute can be specified by using either the long or short name. Only one
    dynamic attribute can be deleted at a time. Static attributes cannot be deleted.
    Children of a compound attribute cannot be deleted. You must delete the complete
    compound attribute. This command has no edit capabilities. The only query
    ability is to list all the dynamic attributes of a node. In query mode, return
    type is based on queried flag.
    
    Flags:
    - attribute : at                 (unicode)       [create]
        Specify either the long or short name of the attribute.
    
    - name : n                       (unicode)       [create]
        The name of the node.                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.deleteAttr`
    """
    pass
def dR_createCameraFromView(*args, **kwargs): pass
def getPanel(*args, **kwargs): pass
def createNurbsConeCtx(*args, **kwargs):
    """
    Flags:
    - attachToHeightRatio : ahr      (bool)          []
    
    - attachToSections : attachToSections (bool)          []
    
    - attachToSpans : asp            (bool)          []
    
    - axis : ax                      (float, float, float) []
    
    - axisType : axt                 (int)           []
    
    - caps : cp                      (int)           []
    
    - doDragEdit : dde               (bool)          []
    
    - endSweep : esw                 (float)         []
    
    - exists : ex                    (bool)          []
    
    - extraTransformOnCaps : xtc     (bool)          []
    
    - height : h                     (float)         []
    
    - history : ch                   (bool)          []
    
    - image1 : i1                    (unicode)       []
    
    - image2 : i2                    (unicode)       []
    
    - image3 : i3                    (unicode)       []
    
    - name : n                       (unicode)       []
    
    - radius : r                     (float)         []
    
    - sections : sc                  (int)           []
    
    - spans : sp                     (int)           []
    
    - startSweep : ssw               (float)         []
    
    - surfaceDegree : sd             (int)           []
    
    - tolerance : tol                (float)         []
    
    - toleranceType : tlt            (int)           []
    
    - useTolerance : ut              (bool)          []
    
    
    Derived from mel command `maya.cmds.createNurbsConeCtx`
    """
    pass
def TangentsFixed(*args, **kwargs): pass
def SetKeyVertexColor(*args, **kwargs): pass
def OutlinerToggleAssignedMaterials(*args, **kwargs): pass
def attachCache(*args, **kwargs): pass
def ResetTransformationsOptions(*args, **kwargs): pass
def MakeBoatsOptions(*args, **kwargs): pass
def sbs_GetChannelsNamesFromSubstanceNode(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_GetChannelsNamesFromSubstanceNode`
    """
    pass
def xgmCombBrushToolCmd(*args, **kwargs):
    """
    Flags:
    - chunkId : cid                  (int)           []
    
    
    Derived from mel command `maya.cmds.xgmCombBrushToolCmd`
    """
    pass
def HypershadeSelectCamerasAndImagePlanes(*args, **kwargs): pass
def ToggleTangentDisplay(*args, **kwargs): pass
def SaveSceneOptions(*args, **kwargs): pass
def upAxis(*args, **kwargs):
    """
    The upAxis command changes the world up direction. Current implementation
    provides only two choices of axis (the Y-axis or the Z-axis) as the world up
    direction.By default, the ground plane in Maya is on the XY plane. Hence, the
    default up-direction is the direction of the positive Z-axis.The -ax flag is
    mandatory. In conjunction with the -ax flag, when the -rv flag is specified, the
    camera of currently active view is revolved about the X-axis such that the
    position of the groundplane in the view will remain the same as before the the
    up direction is changed.The screen update is applied to all cameras of all
    views.In query mode, return type is based on queried flag.
    
    Flags:
    - axis : ax                      (unicode)       [query]
        This flag specifies the axis as the world up direction. The valid axis are
        either yor z.When queried, it returns a string.
    
    - rotateView : rv                (bool)          [create]
        This flag specifies to rotate the view as well.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.upAxis`
    """
    pass
def bezierAnchorPreset(*args, **kwargs):
    """
    This command provides a queryable interface for Bezier curve shapes.
    
    Flags:
    - preset : p                     (int)           [create]
        Selects a preset to apply to selected Bezier anchors. Valid arguments are:  0:
        Bezier 1: Bezier Corner 2: Corner                   Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.bezierAnchorPreset`
    """
    pass
def CreateIllustratorCurves(*args, **kwargs): pass
def TimeEditorExportSelection(*args, **kwargs): pass
def ToggleKeepHardEdgeCulling(*args, **kwargs): pass
def attrFieldGrp(*args, **kwargs): pass
def hotkeyEditor(*args, **kwargs):
    """
    Dynamic library stub function 
    
    
    Derived from mel command `maya.cmds.hotkeyEditor`
    """
    pass
def instance(*args, **kwargs): pass
def DisableIKSolvers(*args, **kwargs): pass
def FreeformFilletOptions(*args, **kwargs): pass
def openMayaPref(*args, **kwargs):
    """
    Set or query API preferences.
    
    Flags:
    - errlog : el                    (bool)          [create,query,edit]
        toggles whether or not an error log of failed API method calls will be created.
        When set to true, a file called OpenMayaErrorLogwill be created in Maya's
        current working directory.  Each time an API method fails, a detailed
        description of the error will be written to the file along with a mini-stack
        trace that indicates the routine that called the failing method. Defaults to
        false(off).
    
    - lazyLoad : lz                  (bool)          [create,query,edit]
        toggles whether or not plugins will be loaded with the RTLD_NOW flag or the
        RTLD_LAZY flag of dlopen(3C).  If set to true, RTLD_LAZY will be used.  In this
        mode references to functions that cannot be resolved at load time will not be
        considered an error.  However, if one of these symbols is actually dereferenced
        by the plug-in at run time, Maya will crash. Defaults to false(off).
    
    - oldPluginWarning : ow          (bool)          [create,query,edit]
        toggles whether or not loadPlugin will generate a warning when plug-ins are
        loaded that were compiled against an older, and possibly incompatible Maya
        release. Defaults to true(on).                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.openMayaPref`
    """
    pass
def OpenSceneOptions(*args, **kwargs): pass
def BrushPresetReplaceShading(*args, **kwargs): pass
def EditTexture(*args, **kwargs): pass
def BatchBake(*args, **kwargs): pass
def OutlinerToggleShapes(*args, **kwargs): pass
def SmoothCurveOptions(*args, **kwargs): pass
def HypershadeTestTexture(*args, **kwargs): pass
def NodeEditorPickWalkDown(*args, **kwargs): pass
def SurfaceBooleanIntersectToolOptions(*args, **kwargs): pass
def geometryReplaceCache(*args, **kwargs): pass
def OneClickDisconnect(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickDisconnect`
    """
    pass
def PaintHairFolliclesOptions(*args, **kwargs): pass
def pointOnSurface(*args, **kwargs):
    """
    This command returns information for a point on a surface. If no flag is
    specified, this command assumes p/position by default. If more than one flag is
    specifed, then a string array is returned.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - frozen : fzn                   (bool)          []
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - normal : no                    (bool)          [create,query,edit]
        Returns the (x,y,z) normal of the specified point on the surface
    
    - normalizedNormal : nn          (bool)          [create,query,edit]
        Returns the (x,y,z) normalized normal of the specified point on the surface
    
    - normalizedTangentU : ntu       (bool)          [create,query,edit]
        Returns the (x,y,z) normalized U tangent of the specified point on the surface
    
    - normalizedTangentV : ntv       (bool)          [create,query,edit]
        Returns the (x,y,z) normalized V tangent of the specified point on the surface
    
    - parameterU : u                 (float)         [query,edit]
        The U parameter value on surface Default:0.0
    
    - parameterV : v                 (float)         [query,edit]
        The V parameter value on surface Default:0.0
    
    - position : p                   (bool)          [create,query,edit]
        Returns the (x,y,z) positon of the specified point on the surface
    
    - tangentU : tu                  (bool)          [create,query,edit]
        Returns the (x,y,z) U tangent of the specified point on the surface
    
    - tangentV : tv                  (bool)          [create,query,edit]
        Returns the (x,y,z) V tangent of the specified point on the surface
    
    - turnOnPercentage : top         (bool)          [query,edit]
        Whether the parameter is normalized (0,1) or not Default:false
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.pointOnSurface`
    """
    pass
def GPUBuiltInDeformerControl(*args, **kwargs):
    """
    Flags:
    - enable : en                    (bool)          []
    
    - inputAttribute : ia            (unicode)       []
    
    - name : n                       (unicode)       []
    
    - outputAttribute : oa           (unicode)       []
    
    - passthrough : p                (bool)          []
    
    - reset : r                      (bool)          []
    
    
    Derived from mel command `maya.cmds.GPUBuiltInDeformerControl`
    """
    pass
def CreatePolygonType(*args, **kwargs): pass
def FBXClose(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXClose`
    """
    pass
def dR_extrudeBevelRelease(*args, **kwargs): pass
def CreatePassiveRigidBodyOptions(*args, **kwargs): pass
def HypershadeWindow(*args, **kwargs): pass
def distanceDimension(*args, **kwargs): pass
def TimeEditorSetZeroKey(*args, **kwargs): pass
def SubdivSmoothnessRoughOptions(*args, **kwargs): pass
def LastActionTool(*args, **kwargs): pass
def SelectToolMarkingMenu(*args, **kwargs): pass
def ShowKinematics(*args, **kwargs): pass
def batchRender(*args, **kwargs): pass
def particleExists(*args, **kwargs):
    """
    This command is used to query if a particle or soft object with the given name
    exists. Either the transform or shape name can be used as well as the name of
    the soft object.
    
    
    Derived from mel command `maya.cmds.particleExists`
    """
    pass
def OutTangentAuto(*args, **kwargs): pass
def BrushPresetBlendOff(*args, **kwargs): pass
def MergeVertexToolOptions(*args, **kwargs): pass
def SetAlignTool(*args, **kwargs): pass
def ShowShadingGroupAttributeEditor(*args, **kwargs): pass
def IPROptions(*args, **kwargs): pass
def Help(*args, **kwargs): pass
def SnapKeysOptions(*args, **kwargs): pass
def CreateCameraAimOptions(*args, **kwargs): pass
def SculptMeshDeactivateBrushStrength(*args, **kwargs): pass
def EnableConstraints(*args, **kwargs): pass
def SetMeshScrapeTool(*args, **kwargs): pass
def relationship(*args, **kwargs):
    """
    This is primarily for use with file IO. Rather than write out the specific
    attributes/connections required to maintain a relationship, a description of the
    related nodes/plugs is written instead. The relationship must have an owner
    node, and have a specific type. During file read, maya will make the connections
    and/or set the data necessary to represent the realtionship in the dependency
    graph.            In query mode, return type is based on queried flag.
    
    Flags:
    - b : b                          (bool)          [create,query,edit]
        Break the specified relationship instead of creating it
    
    - relationshipData : rd          (unicode)       [create,query,edit]
        Provide relationship data to be used when creating the relationship.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.relationship`
    """
    pass
def PlaybackRealtime(*args, **kwargs): pass
def CreateFluidCacheOptions(*args, **kwargs): pass
def ChangeAnimPrefs(*args, **kwargs): pass
def dR_objectHideTGL(*args, **kwargs): pass
def ShowAll(*args, **kwargs): pass
def XgmSetCombBrushToolOption(*args, **kwargs): pass
def AddSelectionAsInBetweenTargetShapeOptions(*args, **kwargs): pass
def HideNCloths(*args, **kwargs): pass
def RotateUVTool(*args, **kwargs): pass
def scaleKeyCtx(*args, **kwargs):
    """
    This command creates a context which may be used to scale keyframes within the
    graph editor
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - scaleSpecifiedKeys : ssk       (bool)          [query,edit]
        Determines if only the specified keys should be scaled. If false, the non-
        selected keys will be adjusted during the scale. The default is true.
    
    - type : typ                     (unicode)       [query,edit]
        rect | manip Specifies the type of scale manipulator to use (Note: rectis a
        manipulator style context, and manipis a gestural style context)
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.scaleKeyCtx`
    """
    pass
def polyCone(*args, **kwargs): pass
def ShowMeshKnifeToolOptions(*args, **kwargs): pass
def DeleteAllIKHandles(*args, **kwargs): pass
def CreateDagContainer(*args, **kwargs): pass
def SelectCVSelectionBoundary(*args, **kwargs): pass
def ShowRiggingUI(*args, **kwargs): pass
def DeleteTimeWarp(*args, **kwargs): pass
def nurbsSelect(*args, **kwargs):
    """
    Performs selection operations on NURBS objects.If any of the border flags is
    set, then the appropriate borders are selected. Otherwise the current CV
    selection is used, or all CVs if the surfaces is selected as an object.The
    growSelection, shrinkSelection, borderSelection flags are then applied in that
    order.In practice, it is recommended to use one flag at a time, except for the
    border flags.
    
    Flags:
    - borderSelection : bs           (bool)          [create]
        Extract the border of the current CV selection.
    
    - bottomBorder : bb              (bool)          [create]
        Selects the bottom border of the surface (V=0).
    
    - growSelection : gs             (int)           [create]
        Grows the CV selection by the given number of CV
    
    - leftBorder : lb                (bool)          [create]
        Selects the left border of the surface (U=0).
    
    - rightBorder : rb               (bool)          [create]
        Selects the right border of the surface (U=MAX).
    
    - shrinkSelection : ss           (int)           [create]
        Shrinks the CV selection by the given number of CV
    
    - topBorder : tb                 (bool)          [create]
        Selects the top border of the patches (V=MAX).                             Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.nurbsSelect`
    """
    pass
def CreatePolygonSoccerBall(*args, **kwargs): pass
def RelaxInitialState(*args, **kwargs): pass
def LayoutUVOptions(*args, **kwargs): pass
def polyMultiLayoutUV(*args, **kwargs):
    """
    place the UVs of the selected polygonal objects so that they do not overlap.
    
    Flags:
    - flipReversed : fr              (bool)          [create]
        If this flag is turned on, the reversed UV pieces are fliped.
    
    - gridU : gu                     (int)           [create]
        The U size of the grids.
    
    - gridV : gv                     (int)           [create]
        The V size of the grids.
    
    - layout : l                     (int)           [create]
        How to move the UV pieces, after cuts are applied: 0 No move is applied. 1
        Layout the pieces along the U axis. 2 Layout the pieces in a square shape. 3
        Layout the pieces in grids. 4 Layout the pieces in nearest regions.
    
    - layoutMethod : lm              (int)           [create]
        // -lm/layoutMethod     layoutMethod  integer//      (C, E, Q) Which layout
        method to use: //              0 Block Stacking. //              1 Shape
        Stacking.
    
    - offsetU : ou                   (float)         [create]
        Offset the layout in the U direction by the given value.
    
    - offsetV : ov                   (float)         [create]
        Offset the layout in the V direction by the given value.
    
    - percentageSpace : ps           (float)         [create]
        When layout is set to square, this value is a percentage of the texture area
        which is added around each UV piece. It can be used to ensure each UV piece uses
        different pixels in the texture. Maximum value is 5 percent.
    
    - prescale : psc                 (int)           [create]
        Prescale the shell before laying it out. 0 No scale is applied. 1 Object space
        scaling applied. 2 World space scaling applied.
    
    - rotateForBestFit : rbf         (int)           [create]
        How to rotate the pieces, before move: 0 No rotation is applied. 1 Only allow 90
        degree rotations. 2 Allow free rotations.
    
    - scale : sc                     (int)           [create]
        How to scale the pieces, after move: 0 No scale is applied. 1 Uniform scale to
        fit in unit square. 2 Non proportional scale to fit in unit square.
    
    - sizeU : su                     (float)         [create]
        Scale the layout in the U direction by the given value.
    
    - sizeV : sv                     (float)         [create]
        Scale the layout in the V direction by the given value.
    
    - uvSetName : uvs                (unicode)       [create]
        Specifies the name of the uv set to edit uvs on. If not specified will use the
        current uv set if it exists.                                Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyMultiLayoutUV`
    """
    pass
def playbackOptions(*args, **kwargs):
    """
    This command sets/queries certain values associated with playback: looping
    style, start/end times, etc. Only commands modifying the -minTime/maxTime, the
    -animationStartTime/animationEndTime, or the -by value are undoable.
    
    Flags:
    - animationEndTime : aet         (time)          [create,query,edit]
        Sets the end time of the animation.  Query returns a float.
    
    - animationStartTime : ast       (time)          [create,query,edit]
        Sets the start time of the animation.  Query returns a float.
    
    - blockingAnim : ba              (bool)          [create,query]
        All tangents playback as stepped so that animation can be viewed in pure pose-
        to-pose form
    
    - by : by                        (float)         [create,query,edit]
        Increment between times viewed during playback. (Default 1.0)
    
    - framesPerSecond : fps          (bool)          [create,query]
        Queries the actual playback rate.  Query returns a float.
    
    - loop : l                       (unicode)       [create,query,edit]
        Controls if and how playback repeats.  Valid values are once,continuous,and
        oscillate.Query returns string.
    
    - maxPlaybackSpeed : mps         (float)         [create,query,edit]
        Sets the desired maximum playback speed.  Query returns a float. The
        maxPlaybackSpeed is only used by Maya when your playbackSpeed is 0 (play every
        frame). The maxPlaybackSpeed will clamp the maximum playback rate to prevent it
        from going more than a certain amount. A maxPlaybackSpeed of 0 will give free
        (unclamped) playback.
    
    - maxTime : max                  (time)          [create,query,edit]
        Sets the end of the playback time range.  Query returns a float.
    
    - minTime : min                  (time)          [create,query,edit]
        Sets the start of the playback time range.  Query returns a float.
    
    - playbackSpeed : ps             (float)         [create,query,edit]
        Sets the desired playback speed.  Query returns a float.
    
    - view : v                       (unicode)       [create,query,edit]
        Controls how many modelling views update during playback. Valid values are
        alland active.  Query returns a string.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.playbackOptions`
    """
    pass
def snapKey(*args, **kwargs): pass
def GlobalStitch(*args, **kwargs): pass
def dR_slideSurface(*args, **kwargs): pass
def filePathEditor(*args, **kwargs):
    """
    Maya can reference and use external files, such as textures or other Maya
    scenes. This command is used to get the information about those file paths and
    modify them in bulk. By default, only the most frequently used types of files
    are presented to the user:  TextureScene referenceAudioImage planeFor the
    command to manage more file types, those must be explicitly requested by the
    caller using the registerTypeflag. This flag tells the command about attributes
    or nodes that are to reveal their paths when the command is used.  Currently,
    the attributes specified through this flag must have the usedAsFileNameproperty.
    Supported nodes are referenceand plug-in nodes. For example: brush.flowerImageor
    referencecan be used as value for this flag.  Conversely, the deregisterTypeflag
    can be used to tell the command to stop handling certain attributes or nodes.
    Once the set of attributes and nodes to be searched for external files is
    selected, the command can be used to obtain a list of plugs that contain file
    names. Additional information can be obtained, such as each file's name,
    directory, and report whether the file exists. Additional information about the
    associated node or plug can also be obtained, such as its name, type and label.
    Finally, the command can be used to perform various manipulations such as
    editing the paths, remapping the files or verifying the presence of identically-
    named files in target directories. See the repath, copyAndRepathand
    replaceFieldflags for more information.  The results of these manipulations can
    be previewed before they are applied using the previewflag.                In
    query mode, return type is based on queried flag.
    
    Flags:
    - attributeOnly : ao             (bool)          [query]
        Used with listFilesto return the node and attribute name that are using the
        files.
    
    - attributeType : at             (unicode)       [query]
        Query the attribute type for the specified plug.
    
    - byType : bt                    (unicode)       [query]
        Used with listFilesto query files that are used by the specified node type or
        attribute type.
    
    - copyAndRepath : cr             (unicode, unicode) [create]
        Copy a source file to the destination path and repath the plug data to the new
        file. The source file must have the same name as the one in the plug. The
        command will look for the file at the specified location first. If not found,
        the command will try to use the original file in the plug. If the file is still
        not found, nothing is done.
    
    - deregisterType : dt            (unicode)       [create]
        Deregister a file type from the list of registered types so the command stops
        handling it. Unless the temporaryflag is used, the type will be removed from the
        preferences will not reappear on application restart. When the temporaryflag is
        specified, the deregistration is only effective for the current session. The
        deregistration will be rejected if the type has already been unregistered.
        However, it is valid to deregister permanently (without the temporaryflag) a
        type after it has been temporarily deregistered.
    
    - force : f                      (bool)          [create]
        Used with flag repathto repath all files to the new location, including the
        resolved files. Otherwise, repathwill only deal with the missing files. Used
        with flag copyAndRepathto overwrite any colliding file at the destination.
        Otherwise, copyAndRepathwill use the existing file at the destination instead of
        overwriting it. The default value is off.
    
    - listDirectories : ld           (unicode)       [query]
        List all sub directories of the specified directory.  Only directories
        containing at least one file whose type is registered (see registerType) will be
        listed. If no directory is provided, all directories applicable to the scene
        will be returned.
    
    - listFiles : lf                 (unicode)       [query]
        List files in the specified directory. No recursion in subdirectories will be
        performed.
    
    - listRegisteredTypes : lrt      (bool)          [query]
        Query the list of registered attribute types. The registered types include the
        auto-loaded types from the preference file and the types explicitly registered
        by the user, both with and without the temporaryflag.
    
    - preview : p                    (bool)          [create]
        Used with repath, replaceStringor copyAndRepathto preview the result of the
        operation instead of excuting it. When it is used with repathor replaceString,
        the command returns the new file path and a status flag indicating whether the
        new file exists (1) or not (0). The path name and the file status are listed in
        pairs. When it is used with copyAndRepath, the command returns the files that
        need copying.
    
    - recursive : rc                 (bool)          [create]
        Used with flag repathto search the files in the target directory and its
        subdirectories recursively. If the flag is on, the command will repath the plug
        to a file that has the same name in the target directory or sub directories. If
        the flag is off, the command will apply the directory change without verifying
        that the resulting file exists.
    
    - refresh : rf                   (bool)          [create]
        Clear and re-collect the file information in the scene. The command does not
        automatically track file path modifications in the scene. So it is the users
        responsibility to cause refreshes in order to get up-to-date information.
    
    - registerType : rt              (unicode)       [create]
        Register a new file type that the command will handle and recognize from now on.
        Unless the temporaryflag is used, the registered type is saved in the
        preferences and reappears on application restart. The new type will be rejected
        if it collides with an existing type or label. One exception to this is when
        registering a type without the temporaryflag after the type has been registered
        with it. This is considered as modifying the persistent/temporary property of
        the existing type, rather than registering a new type.
    
    - relativeNames : rel            (bool)          [query]
        Used with listDirectoriesor listFilesto return the relative path of each
        directory or file.  Paths are relative to the current project folder. If a file
        or the directory is not under the current project folder, the returned path will
        still be a full path.
    
    - repath : r                     (unicode)       [create]
        Replace the directory part of a file path with a specified location. The file
        name will be preserved.
    
    - replaceAll : ra                (bool)          [create]
        Used with flag replaceString, specifies how many times the matched string will
        be replaced. When the flag is false, only the first matched string will be
        replaced. Otherwise, all matched strings will be replaced. The default value is
        false.
    
    - replaceField : rfd             (unicode)       [create]
        Used with the replaceStringflag to control the scope of the replacement.
        Possible values are: pathOnly- only replace strings in the directory part.
        nameOnly- only replace strings in the file name, without the directory.
        fullPath- replace strings anywhere in the full name. The default argument is
        fullPath.
    
    - replaceString : rs             (unicode, unicode) [create]
        Replace the target string with the new string in the file paths. The flag needs
        two arguments: the first one is the target string and the second one is the new
        string. See the replaceFieldand replaceAllflags to control how the replacement
        is performed.
    
    - status : s                     (bool)          [query]
        Used with listFiles, this will cause the returned list of files to include one
        status flag per file: 0 if it cannot be resolved and 1 if it can. Used with
        listDirectories, this will cause the returned list of directories to include one
        status flag per directory: 0 if it cannot be resolved, 1 if it can and 2 if the
        resolution is partial. The status will be interleaved with the file/directory
        names, with the name appearing first. See the example for listFiles.  See the
        withAttributeflag for another way of getting per-file information.  When
        multiple per-entry items appear in the list (e.g.: plug name), the status is
        always last.
    
    - temporary : tmp                (bool)          [create]
        Make the effect of the register/deregisterflag only applicable in the current
        session. Normally, a type registration/deregistration is permanent and is made
        persistent via a preference file. When the temporaryflag is specified, the
        changes will not be saved to the preference file. When the application restarts,
        any type that has been previously temporarily registered will not appear and any
        type that was temporarily deregistered will re-appear.
    
    - typeLabel : tl                 (unicode)       [create,query]
        Used with registerTypeto set the label name for the new file type. Used with
        queryto return the type label for the specified attribute type. For default
        types, the type label is the localized string. For other types, the type label
        is supplied by user.
    
    - unresolved : u                 (bool)          [query]
        Used with listFilesto query the unresolved files that are being used in the
        scene.
    
    - withAttribute : wa             (bool)          [query]
        Used with listFilesto return the name of the plug using a given file. For
        example, if file.jpgis used by the plug node1.fileTextureName, then the returned
        string will become the pair file.jpg node1.fileTextureName.  See the statusflag
        for another way to get per-file information.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.filePathEditor`
    """
    pass
def DeleteExpressions(*args, **kwargs): pass
def FBXExportTriangulate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportTriangulate`
    """
    pass
def XgCreateDescription(*args, **kwargs): pass
def AddBifrostFoam(*args, **kwargs): pass
def SetSnapTogetherTool(*args, **kwargs): pass
def RemoveUnusedInfluences(*args, **kwargs): pass
def agFormatIn(*args, **kwargs):
    """
    Flags:
    - file : f                       (unicode)       []
    
    - name : n                       (unicode)       []
    
    
    Derived from mel command `maya.cmds.agFormatIn`
    """
    pass
def FBXImportSetMayaFrameRate(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportSetMayaFrameRate`
    """
    pass
def dimWhen(*args, **kwargs):
    """
    This method attaches the named UI object (first argument) to the named condition
    (second argument) so that the object will be dimmed when the condition is in a
    particular state. This command will fail if the object does not exist. If the
    condition does not exist (yet), that's okay --- a placeholder will be used until
    such a condition comes into existence. The UI object should be one of two
    things, either a control or a menu item.
    
    Flags:
    - clear : c                      (bool)          [create]
        Remove the condition on the specified dimmable.
    
    - false : f                      (bool)          [create]
        Dim the object when the condition is false.
    
    - true : t                       (bool)          [create]
        Dim the object when the condition is true. (default)                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dimWhen`
    """
    pass
def XgmSetSelectBrushTool(*args, **kwargs): pass
def ToggleMeshMaps(*args, **kwargs): pass
def FBXExportSmoothMesh(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportSmoothMesh`
    """
    pass
def nexOpt(*args, **kwargs):
    """
    Flags:
    - default : d                    (bool)          []
    
    - revert : r                     (bool)          []
    
    - save : s                       (bool)          []
    
    - toggle : t                     (bool)          []
    
    
    Derived from mel command `maya.cmds.nexOpt`
    """
    pass
def animDisplay(*args, **kwargs):
    """
    This command changes certain display options used by animation windows. In query
    mode, return type is based on queried flag.
    
    Flags:
    - modelUpdate : upd              (unicode)       [create,query,edit]
        Controls how changes to animCurves are propagated through the dependency graph.
        Valid modes are none, interactiveor delayed. If modelUpdate is nonethen changing
        an animCurve will not cause the model to be updated (change currentTime in order
        to update the model).  If modelUpdate is interactive(which is the default
        setting), then as interactive changes are being made to the animCurve, the model
        will be updated.  If modelUpdate is delayed, then the model is updated once the
        final change to an animCurve has been made.  With modelUpdate set to either
        interactiveor delayed, changes to animCurves made via commands will also cause
        the model to be updated.
    
    - refAnimCurvesEditable : rae    (bool)          [create,query,edit]
        Specify if animation curves from referenced files are editable.
    
    - timeCode : tc                  (unicode)       [create,query,edit]
        Controls how time value are display. Valid values are frame, timecode,
        fulltimecode. If the value is framemaya will display time in frame everywhere.
        If the value is timecodemaya will display time in timecode in time slider, graph
        editor and dope sheet. If the value is fulltimecodemaya will display time in
        timecode everywhere.
    
    - timeCodeOffset : tco           (unicode)       [create,query,edit]
        This flag has now been deprecated.  It still exists to not break legacy scripts,
        but it will now do nothing.  See the new timeCode command to set and query
        timeCodes.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.animDisplay`
    """
    pass
def SetFullBodyIKKeysOptions(*args, **kwargs): pass
def LockContainer(*args, **kwargs): pass
def SelectEdgeLoopSp(*args, **kwargs): pass
def FBXExportReferencedAssetsContent(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportReferencedAssetsContent`
    """
    pass
def HypershadeReduceTraversalDepth(*args, **kwargs): pass
def polyOptions(*args, **kwargs):
    """
    Changes the global display polygonal attributes.                 In query mode,
    return type is based on queried flag.
    
    Flags:
    - activeObjects : ao             (bool)          [create,query]
        Apply user choices for all active objects.
    
    - allEdges : ae                  (bool)          [create,query]
        Display all edges in solid line.
    
    - backCullVertex : bcv           (bool)          [create,query]
        BackCull vertices.
    
    - backCulling : bc               (bool)          [create,query]
        Display with no back culling.
    
    - colorMaterialChannel : cm      (unicode)       [create,query]
        If colorShadedDisplay is true, then determines which material channel to display
        color per vertex in. The options are: none: disable material shadingambient:
        ambient material channelambientDiffuse:  ambient and diffuse material
        channeldiffuse:  diffuse material channelspecular:  specular material
        channelemission:  emission material channel
    
    - colorShadedDisplay : cs        (bool)          [create,query]
        Use color per vertex display in shaded mode.
    
    - displayAlphaAsGreyScale : dal  (bool)          [create,query]
        Display alpha as grey scale.
    
    - displayBorder : db             (bool)          [create,query]
        Highlight border edge.
    
    - displayCenter : dc             (bool)          [create,query]
        Display facet centers.
    
    - displayCreaseEdge : dce        (bool)          [create,query]
        Highlight creased edges
    
    - displayCreaseVertex : dcv      (bool)          [create,query]
        Highlight creased vertices
    
    - displayGeometry : dg           (bool)          [create,query]
        Display geometry.
    
    - displayInvisibleFaces : dif    (bool)          [create,query]
        Highlight invisible faces
    
    - displayItemNumbers : din       (bool, bool, bool, bool) [create,query]
        Displays item numbers (vertices edges facets uvs)
    
    - displayMapBorder : dmb         (bool)          [create,query]
        Highlight map border edge.
    
    - displayMetadata : dmt          (bool, bool, bool) [create,query]
        Displays component metadata (vertices edges facets vertexFaces)
    
    - displayNormal : dn             (bool)          [create,query]
        Display normals.
    
    - displayShellBorder : dsb       (bool)          []
    
    - displaySubdComps : dsc         (bool)          [create,query]
        Display subdivided components when in Smooth Mesh Preview mode.
    
    - displayTangent : dtn           (bool)          [create,query]
        Display tangent.
    
    - displayTriangle : dt           (bool)          [create,query]
        Display triangulation.
    
    - displayUVTopology : uvt        (bool)          [create,query]
        Option on UV display to display UVs topologically.
    
    - displayUVs : duv               (bool)          [create,query]
        Display UVs.
    
    - displayVertex : dv             (bool)          [create,query]
        Display vertices.
    
    - displayWarp : dw               (bool)          [create,query]
        Highlight warped facets.
    
    - facet : f                      (bool)          [create,query]
        For use with -dn flag. Set the normal display style to facet display.
    
    - fullBack : fb                  (bool)          [create,query]
        Display with full back culling.
    
    - gl : gl                        (bool)          [create,query]
        Apply user choices for all objects.
    
    - hardBack : hb                  (bool)          [create,query]
        Backculled hard edges only for backculled faces.
    
    - hardEdge : he                  (bool)          [create,query]
        Display only hard edges.
    
    - hardEdgeColor : hec            (bool)          [create,query]
        Display hard edges as separate color.
    
    - materialBlend : mb             (unicode)       [create,query]
        The options are: overwriteaddsubtractmultiplydivideaveragemodulate2x
    
    - newPolymesh : np               (bool)          [create,query]
        Set component display state of new polymesh objects.
    
    - point : pt                     (bool)          [create,query]
        For use with -dn flag. Set the normal display style to vertex display.
    
    - pointFacet : pf                (bool)          [create,query]
        For use with -dn flag. Set the normal display style to vertex and face display.
    
    - relative : r                   (bool)          [create,query]
        When this flag is used with flags dealing with size, the value (size) is a
        multiplication factor : i.e for flags : -sizeNormal, -sizeBorder. When this flag
        is used with flags dealing with a boolean value, the boolean value is toggled :
        i.e for flags : displayVertex, displayCenter, displayTriangle, displayBorder,
        backCullVertex, displayWarp, displayItemNumbers.
    
    - reuseTriangles : rt            (bool)          [create,query]
        Avoid regenerating triangles, by reusing the old triangles upstream in the
        construction history.  The construction history is searched upstream and
        downstream for other mesh nodes, and the given boolean value is set on those
        mesh nodes.  Note, that this command does not set the value on the given mesh
        node.  That has to be done using the setAttr command. This option would affect
        only the interactive 3d viewport. The batch-rendering would use the properly
        computed triangles. This is useful only for interactive performance such as
        skinning playback, when the display mode is shaded (or wireframe with triangles
        displayed)  Using this option for wireframe display mode is not recomended.
    
    - sizeBorder : sb                (float)         [create,query]
        Set the size of the polygonal border edges.
    
    - sizeNormal : sn                (float)         [create,query]
        Set the size of the polygonal normals.
    
    - sizeUV : suv                   (float)         [create,query]
        Set the size of the polygonal UV.
    
    - sizeVertex : sv                (float)         [create,query]
        Set the size of the polygonal vertex.
    
    - smoothDrawType : sdt           (int)           [create,query]
        This setting only works with the newPolymesh flag. Sets a new default attribute
        value for the smoothDrawType attribute on a polymesh object. Options are: 0:
        Catmull-Clark 1: Linear 2: OpenSubdiv Catmull-Clark Uniform 3: OpenSubdiv
        Catmull-Clark Adaptive
    
    - softEdge : se                  (bool)          [create,query]
        Display soft edges in dotted lines.
    
    - vertexNormalMethod : vnm       (int)           [create,query]
        This setting only works with the newPolymesh flag. Sets a new default attribute
        value for the vertexNormalMethod attribute on a polymesh object. Options are: 0:
        Unweighted 1: Angle Weighted 2: Area Weighted 3: Angle And Area Weighted
    
    - wireBackCulling : wbc          (bool)          [create,query]
        Backculled faces are in wireframe.                  Flag can have multiple
        arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.polyOptions`
    """
    pass
def PencilCurveTool(*args, **kwargs): pass
def softSelect(*args, **kwargs):
    """
    This command allows you to change the soft modelling options. Soft modelling is
    an option that allows for reflection of basic manipulator actions such as move,
    rotate, and scale. In query mode, return type is based on queried flag.
    
    Flags:
    - compressUndo : cu              (int)           [create,query,edit]
        Controls how soft selection settings behave in undo: 0 means all changes undo
        individually1 means all consecutive changes undo as a group2 means only
        interactive changes undo as a groupWhen queried, returns an int indicating the
        current undo behaviour.
    
    - enableFalseColor : efc         (int)           [create,query,edit]
        Set soft select color feedback on or off. When queried, returns an int
        indicating whether color feedback is currently enabled.
    
    - softSelectColorCurve : scc     (unicode)       [create,query,edit]
        Sets the color ramp used to display false color feedback for soft selected
        components in the viewport. The color curve is encoded as a string of comma
        separated floating point values representing the falloff curve CVs. Each CV is
        represented by 5 successive values: 3 RGB values (the color to use), an input
        value (the selection weight), and a curve interpolation type. When queried,
        returns a string containing the encoded CVs of the current color feedback curve.
    
    - softSelectCurve : ssc          (unicode)       [create,query,edit]
        Sets the falloff curve used to calculate selection weights for components within
        the falloff distance. The curve is encoded as a string of comma separated
        floating point values representing the falloff curve CVs. Each CV is represented
        by 3 successive values: an output value (the selection weight at this point), an
        input value (the normalised falloff distance) and a curve interpolation type.
        When queried, returns a string containing the encoded CVs of the current falloff
        curve.
    
    - softSelectDistance : ssd       (float)         [create,query,edit]
        Sets the falloff distance (radius) used for world and object space soft
        selection. When queried, returns a float indicating the current falloff
        distance.
    
    - softSelectEnabled : sse        (int)           [create,query,edit]
        Sets soft selection based modeling on or off. When queried, returns an int
        indicating the current state of the option.
    
    - softSelectFalloff : ssf        (int)           [create,query,edit]
        Sets the falloff mode: 0 for volume based falloff1 for surface based falloff2
        for global falloffWhen queried, returns an int indicating the falloff mode.
    
    - softSelectReset : ssr          (bool)          [create,edit]
        Resets soft selection to its default settings.
    
    - softSelectUVDistance : sud     (float)         [create,query,edit]
        Sets the falloff distance (radius) used for UV space soft selection. When
        queried, returns a float indicating the current falloff distance.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.softSelect`
    """
    pass
def createPtexUV(*args, **kwargs):
    """
    Flags:
    - bleed : bl                     (int)           []
    
    - inMesh : im                    (unicode)       []
    
    - tileCount : tc                 (int)           []
    
    
    Derived from mel command `maya.cmds.createPtexUV`
    """
    pass
def GridOptions(*args, **kwargs): pass
def CombinePolygonsOptions(*args, **kwargs): pass
def polyStraightenUVBorder(*args, **kwargs): pass
def PlaybackForward(*args, **kwargs): pass
def nConstraintConstraintMembershipTool(*args, **kwargs): pass
def ikSystemInfo(*args, **kwargs):
    """
    This action modifies and queries the current ikSystem controls.
    In query mode, return type is based on queried flag.
    
    Flags:
    - globalSnapHandle : gsh         (bool)          [create,query]
        If this flag is off, all ikHandles will not be snapped.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.ikSystemInfo`
    """
    pass
def createAttrPatterns(*args, **kwargs):
    """
    Create a new instance of an attribute pattern given a pattern type (e.g. XML)
    and a string or data file containing the description of the attribute tree in
    the pattern's format.
    
    Flags:
    - patternDefinition : pd         (unicode)       [create]
        Hardcoded string containing the pattern definition, for simpler formats that
        don't really need a separate file for definition.
    
    - patternFile : pf               (unicode)       [create]
        File where the pattern information can be found
    
    - patternType : pt               (unicode)       [create]
        Name of the pattern definition type to use in creating this instance of the
        pattern.                               Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.createAttrPatterns`
    """
    pass
def AssignHairConstraintOptions(*args, **kwargs): pass
def layerButton(*args, **kwargs): pass
def DuplicateNURBSPatches(*args, **kwargs): pass
def hikBodyPart(*args, **kwargs):
    """
    Flags:
    - count : cnt                    (bool)          []
    
    - forEffector : eff              (int)           []
    
    - forNode : nod                  (int)           []
    
    - fullMask : fm                  (bool)          []
    
    - getName : nam                  (int)           []
    
    - inMask : im                    (int)           []
    
    - mask : msk                     (bool)          []
    
    
    Derived from mel command `maya.cmds.hikBodyPart`
    """
    pass
def SetNormalAngle(*args, **kwargs): pass
def ShowAllEditedComponents(*args, **kwargs): pass
def HypershadeSelectUtilities(*args, **kwargs): pass
def CreateSpring(*args, **kwargs): pass
def TogglePolyCount(*args, **kwargs): pass
def AddAnimationOffsetOptions(*args, **kwargs): pass
def NurbsCurveToBezier(*args, **kwargs): pass
def OneClickAcknowledge(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.OneClickAcknowledge`
    """
    pass
def geometryExportCacheOpt(*args, **kwargs): pass
def MakeCurvesDynamicOptions(*args, **kwargs): pass
def modelCurrentTimeCtx(*args, **kwargs):
    """
    This command creates a context which may be used to change current time within
    the model views.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - percent : per                  (float)         [query,edit]
        Percent of the screen space that represents the full time slider range (default
        is 50%)                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.modelCurrentTimeCtx`
    """
    pass
def clip(*args, **kwargs):
    """
    This command is used to create, edit and query character clips.
    
    Flags:
    - absolute : abs                 (bool)          [create]
        This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative,
        ra/rotationsAbsolute, or da/defaultAbsolute instead.  This flag controls whether
        the clip follows its keyframe values or whether they are offset by a value to
        maintain a smooth path. Default is true.
    
    - absoluteRotations : abr        (bool)          [create]
        This flag is now deprecated.  Use aa/allAbsolute, ar/allRelative,
        ra/rotationsAbsolute, or da/defaultAbsolute instead. If true, this overrides the
        -absolute flag so that rotation channels are always calculated with absolute
        offsets. This allows you to have absolute offsets on rotations and relative
        offsets on all other channels.
    
    - active : a                     (unicode)       [query,edit]
        Query or edit the active clip. This flag is not valid in create mode. Making a
        clip active causes its animCurves to be hooked directly to the character
        attributes in addition to being attached to the clip library node. This makes it
        easier to access the animCurves if you want to edit, delete or add additional
        animCruves to the clip.
    
    - addTrack : at                  (bool)          []
        This flag is now obsolete. Use the insertTrack flag on the clipSchedule command
        instead.
    
    - allAbsolute : aa               (bool)          [create]
        Set all channels to be calculated with absolute offsets.  This flag cannot be
        used in conjunction with the ar/allRelative, ra/rotationsAbsolute or
        da/defaultAbsolute flags.
    
    - allClips : ac                  (bool)          [query]
        This flag is used to query all the clips in the scene. Nodes of type
        animClipthat are storing poses, are not returned by this command.
    
    - allRelative : ar               (bool)          [create]
        Set all channels to be calculated with relative offsets.  This flag cannot be
        used in conjunction with the aa/allAbsolute, ra/rotationsAbsolute or
        da/defaultAbsolute flags.
    
    - allSourceClips : asc           (bool)          [query]
        This flag is used to query all the source clips in the scene. Nodes of type
        animClipthat are storing poses or clip instances, are not returned by this
        command.
    
    - animCurveRange : acr           (bool)          [create]
        This flag can be used at the time you create the clip instead of the startTime
        and endTime flags. It specifies that you want the range of the clip to span the
        range of keys in the clips associated animCurves.
    
    - character : ch                 (bool)          [query]
        This is a query only flag which operates on the specified clip. It returns the
        names of any characters that a clip is associated with.
    
    - constraint : cn                (bool)          [create]
        This creates a clip out of any constraints on the character. The constraint will
        be moved off of the character and into the clip, so that it is only active for
        the duration of the clip, and its value can be scaled/offset/cycled according to
        the clip attributes.
    
    - copy : c                       (bool)          [create,query]
        This flag is used to copy a clip or clips to the clipboard. It should be used in
        conjunction with the name flag to copy the named clips on the specified
        character and its subcharacters. In query mode, this flag allows you to query
        what, if anything, has been copied into the clip clipboard.
    
    - defaultAbsolute : da           (bool)          [create]
        Sets all top-level channels except rotations in the clip to relative, and the
        remaining channels to absolute. This is the default during clip creation if no
        offset flag is specified.  This flag cannot be used in conjunction with the
        aa/allAbsolute, ar/allRelative, or ra/rotationsAbsolute flags.
    
    - duplicate : d                  (bool)          [query]
        Duplicate the clip specified by the name flag. The start time of the new clip
        should be specified with the startTime flag.
    
    - endTime : end                  (time)          [create,query,edit]
        Specify the clip end
    
    - expression : ex                (bool)          [create]
        This creates a clip out of any expressions on the character. The expression will
        be moved off of the character and into the clip, so that it is only active for
        the duration of the clip, and its value can be scaled/offset/cycled according to
        the clip attributes.
    
    - ignoreSubcharacters : ignoreSubcharacters (bool)          [create]
        During clip creation, duplication and isolation, subcharacters are included by
        default. If you want to create a clip on the top level character only, or you
        want to duplicate the clip on the top level character without including
        subCharacters, use the ignoreSubcharacters flag.
    
    - isolate : i                    (bool)          [create]
        This flag should be used in conjunction with the name flag to specify that a
        clip or clips should be copied to a new clip library. The most common use of
        this flag is for export, when you want to only export certain clips from the
        character, without exporting all of the clips.
    
    - leaveOriginal : lo             (bool)          [create]
        This flag is used when creating a clip to specify that the animation curves
        should be copied to the clip library, and left on the character.
    
    - mapMethod : mm                 (unicode)       [create]
        This is is valid with the paste and pasteInstance flags only. It specifies how
        the mapping should be done. Valid options are: byNodeName, byAttrName,
        byCharacterMap, byAttrOrder, byMapOrAttrNameand byMapOrNodeName. byAttrNameis
        the default. The flags mean the following: byAttrOrdermaps using the order that
        the character stores the attributes internally, byAttrNameuses the attribute
        name to find a correspondence, byNodeNameuses the node name \*and\* the
        attribute name to find a correspondence, byCharacterMapuses the existing
        characterMap node to do the mapping. byMapOrAttrNameuses a character map if one
        exists, otherwise uses the attribute name. byMapOrNodeNameuses a character map
        if one exists, otherwise uses the attribute name.
    
    - name : n                       (unicode)       [create,query]
        In create mode, specify the clip name. In query mode, return a list of all the
        clips. In duplicate mode, specify the clip to be duplicated. In copy mode,
        specify the clip to be copied. This flag is multi-use, but multiple use is only
        supported with the copy flag. For use during create and with all other flags,
        only the first instance of the name flag will be utilized. In query mode, this
        flag can accept a value.
    
    - newName : nn                   (unicode)       [create]
        Rename a clip. Must be used in conjunction with the clip name flag, which is
        used to specify the clip to be renamed.
    
    - paste : p                      (bool)          [create]
        This flag is used to paste a clip or clips from the clipboard to a character.
        Clips are added to the clipboard using the c/copy flag.
    
    - pasteInstance : pi             (bool)          [create]
        This flag is used to paste an instance of a clip or clips from the clipboard to
        a character. Unlike the p/paste flag, which duplicates the animCurves from the
        original source clip, the pi/pasteInstance flag shares the animCurves from the
        source clip.
    
    - remove : rm                    (bool)          [query]
        Remove the clip specified by the name flag. The clip will be permanently removed
        from the library and deleted from any times where it has been scheduled.
    
    - removeTrack : rt               (bool)          [create]
        This flag is now obsolete. Use removeTrack flag on the clipSchedule command
        instead.
    
    - rotationOffset : rof           (float, float, float) [create,query]
        Return the channel offsets used to modify the clip's rotation.
    
    - rotationsAbsolute : ra         (bool)          [create]
        Set all channels except rotations to be calculated with relative offsets.
        Rotation channels will be calculated with absolute offsets.  This flag cannot be
        used in conjunction with the aa/allAbsolute, ar/allRelative or
        da/defaultAbsolute flags.
    
    - scheduleClip : sc              (bool)          [create]
        This flag is used when creating a clip to specify whether or not the clip should
        immediately be scheduled at the current time. If the clip is not scheduled, the
        clip will be placed in the library for future use, but will not be placed on the
        timeline. This flag is for use only when creating a new clip or duplicating an
        existing. The default is true.
    
    - sourceClipName : scn           (bool)          [query]
        This flag is for query only. It returns the name of the source clip that
        controls an instanced clip.
    
    - split : sp                     (time)          [create,edit]
        Split an existing clip into two clips. The split occurs around the specified
        time.
    
    - startTime : s                  (time)          [create,query,edit]
        Specify the clip start
    
    - translationOffset : tof        (float, float, float) [create,query]
        Return the channel offsets used to modify the clip's translation.
    
    - useChannel : uc                (unicode)       [create]
        Specify which channels should be acted on. This flag is valid only in
        conjunction with clip creation, and the isolate flag. The specified channels
        must be members of the character.                               Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.clip`
    """
    pass
def CreatePolygonPrism(*args, **kwargs): pass
def cone(*args, **kwargs): pass
def polyRetopo(*args, **kwargs): pass
def TimeEditorClipTrimToggle(*args, **kwargs): pass
def DeleteChannels(*args, **kwargs): pass
def CreateNURBSSquare(*args, **kwargs): pass
def paintPointsCmd(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.paintPointsCmd`
    """
    pass
def optionMenu(*args, **kwargs): pass
def Quit(*args, **kwargs): pass
def InteractiveSplitTool(*args, **kwargs): pass
def AveragePolygonNormals(*args, **kwargs): pass
def NextKey(*args, **kwargs): pass
def BlendShapeEditor(*args, **kwargs): pass
def CreatePolygonTorusOptions(*args, **kwargs): pass
def AddPointsTool(*args, **kwargs): pass
def HypershadeDisplayInterestingShapes(*args, **kwargs): pass
def cmdArnoldTxManager(*args, **kwargs): pass
def nConstraintTearableSurface(*args, **kwargs): pass
def xgmGroomTransfer(*args, **kwargs):
    """
    Flags:
    - uvBased : ub                   (bool)          []
    
    
    Derived from mel command `maya.cmds.xgmGroomTransfer`
    """
    pass
def panel(*args, **kwargs): pass
def CreateTextOptions(*args, **kwargs): pass
def circularFillet(*args, **kwargs):
    """
    The cmd is used to compute the rolling ball surface fillet ( circular fillet )
    between two given NURBS surfaces. To generate trim curves on the surfaces, use
    -cos true.
    
    Flags:
    - caching : cch                  (bool)          [create,query,edit]
        Toggle caching for all attributes so that no recomputation is needed
    
    - constructionHistory : ch       (bool)          [create]
        Turn the construction history on or off.
    
    - curveOnSurface : cos           (bool)          [create]
        If possible, create 2D curve as a result.
    
    - frozen : fzn                   (bool)          []
    
    - name : n                       (unicode)       [create]
        Sets the name of the newly-created node. If it contains namespace path, the new
        node will be created under the specified namespace; if the namespace does not
        exist, it will be created.
    
    - nodeState : nds                (int)           [create,query,edit]
        Maya dependency nodes have 6 possible states. The Normal (0), HasNoEffect (1),
        and Blocking (2)states can be used to alter how the graph is evaluated.   The
        Waiting-Normal (3), Waiting-HasNoEffect (4), Waiting-Blocking (5)are for
        internal use only. They temporarily shut off parts of the graph during
        interaction (e.g., manipulation). The understanding is that once the operation
        is done, the state will be reset appropriately, e.g. Waiting-Blockingwill reset
        back to Blocking.   The Normaland Blockingcases apply to all nodes, while
        HasNoEffectis node specific; many nodes do not support this option. Plug-ins
        store state in the MPxNode::stateattribute. Anyone can set it or check this
        attribute.  Additional details about each of these 3 states follow.
        StateDescriptionNormalThe normal node state. This is the default.HasNoEffectThe
        HasNoEffectoption (a.k.a. pass-through), is used in cases where there is an
        operation on an input producing an output of the same data type. Nearly all
        deformers support this state, as do a few other nodes. As stated earlier, it is
        not supported by all nodes.  Its typical to implement support for the
        HasNoEffectstate in the nodes compute method and to perform appropriate
        operations. Plug-ins can also support HasNoEffect.  The usual implementation of
        this state is to copy the input directly to the matching output without applying
        the algorithm in the node. For deformers, applying this state leaves the input
        geometry undeformed on the output.  BlockingThis is implemented in the depend
        node base class and applies to all nodes. Blockingis applied during the
        evaluation phase to connections. An evaluation request to a blocked connection
        will return as failures, causing the destination plug to retain its current
        value. Dirty propagation is indirectly affected by this state since blocked
        connections are never cleaned.  When a node is set to Blockingthe behavior is
        supposed to be the same as if all outgoing connections were broken. As long as
        nobody requests evaluation of the blocked node directly it wont evaluate after
        that. Note that a blocked node will still respond to getAttrrequests but a
        getAttron a downstream node will not reevaluate the blocked node.  Setting the
        root transform of a hierarchy to Blockingwont automatically influence child
        transforms in the hierarchy. To do this, youd need to explicitly set all child
        nodes to the Blockingstate.  For example, to set all child transforms to
        Blocking, you could use the following script.  import maya.cmds as cmds def
        blockTree(root): nodesToBlock = [] for node in {child:1 for child in
        cmds.listRelatives( root, path=True, allDescendents=True )}.keys(): nodesToBlock
        += cmds.listConnections(node, source=True, destination=True ) for node in
        {source:1 for source in nodesToBlock}.keys(): cmds.setAttr( '%s.nodeState' %
        node, 2 )  Applying this script would continue to draw objects but things would
        not be animated.  Default:kdnNormal
    
    - object : o                     (bool)          [create]
        Create the result, or just the dependency node.                  Flag can have
        multiple arguments, passed either as a tuple or a list.
    
    - positionTolerance : pt         (float)         [create,query,edit]
        C(0) Tolerance For Fillet Surface Default:0.01
    
    - primaryRadius : pr             (float)         [create,query,edit]
        primary Radius Default:1.0
    
    - secondaryRadius : sr           (float)         [create,query,edit]
        secondary Radius Default:1.0
    
    - tangentTolerance : tt          (float)         [create,query,edit]
        G(1) Tolerance For Fillet Surface Default:0.01                  Common flags
    
    
    Derived from mel command `maya.cmds.circularFillet`
    """
    pass
def CurveWarp(*args, **kwargs): pass
def CreateActiveRigidBody(*args, **kwargs): pass
def FBXExportColladaSingleMatrix(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXExportColladaSingleMatrix`
    """
    pass
def OpenColorSetEditor(*args, **kwargs): pass
def AutoProjection(*args, **kwargs): pass
def ScaleKeys(*args, **kwargs): pass
def flushIdleQueue(*args, **kwargs):
    """
    Flags:
    - resume : r                     (bool)          []
    
    
    Derived from mel command `maya.cmds.flushIdleQueue`
    """
    pass
def dR_bridgeTool(*args, **kwargs): pass
def polyCut(*args, **kwargs): pass
def XgmSetDensityBrushTool(*args, **kwargs): pass
def RenderPassSetEditor(*args, **kwargs): pass
def dgfilter(*args, **kwargs):
    """
    The dgfiltercommand is used to define Dependency Graph filters that select DG
    objects based on certain criteria.  The command itself can be used to filter
    objects or it can be attached to a dbtraceobject to selectively filter what
    output is traced. If objects are specified then apply the filter to those
    objects and return a boolean indicating whether they passed or not, otherwise
    return then name of the filter.  An invalid filter will pass all objects.  For
    multiple objects the return value is the logical ANDof all object's return
    values.
    
    Dynamic library stub function 
    
    Flags:
    - attribute : atr                (unicode)       [create]
        Select objects whose attribute names match the pattern.
    
    - list : l                       (bool)          [create]
        List the available filters.  If used in conjunction with the -nameflag it will
        show a description of what the filter is.
    
    - logicalAnd : logicalAnd        (unicode, unicode) [create]
        Logical AND of two filters.
    
    - logicalNot : logicalNot        (unicode)       [create]
        Logical inverse of filter.
    
    - logicalOr : logicalOr          (unicode, unicode) [create]
        Logical OR of two filters.
    
    - name : n                       (unicode)       [create]
        Use filter named FILTER (or create new filter with that name). If no objects are
        specified then the name given to the filter will be returned.
    
    - node : nd                      (unicode)       [create]
        Select objects whose node names match the pattern.
    
    - nodeType : nt                  (unicode)       [create]
        Select objects whose node type names match the pattern.
    
    - plug : p                       (unicode)       [create]
        Select objects whose plug names match the pattern.
        Flag can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.dgfilter`
    """
    pass
def PolyBrushMarkingMenuPopDown(*args, **kwargs): pass
def manipScaleLimitsCtx(*args, **kwargs):
    """
    Create a context for the scale limits manipulator.
    
    Flags:
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.manipScaleLimitsCtx`
    """
    pass
def surfaceSampler(*args, **kwargs):
    """
    Maps surface detail from a source surface to a new texture map on a target
    surface. Both objects must be selected when the command is invoked, with the
    source surface selected first, and the target last.
    
    Flags:
    - camera : cam                   (PyNode)        [create]
        Specify the camera to use for camera specific lighting calculations such as
        specular highlights or reflections.
    
    - fileFormat : ff                (unicode)       [create]
        The image format as a file extension (e.g. dds). This must be included once for
        every output map specified.
    
    - filename : fn                  (unicode)       [create]
        The filename to use when creating the map. This must be included once for every
        output map specified.
    
    - filterSize : fs                (float)         [create]
        The filter size to use in pixels. Larger values (e.g. over 2.0) will produce
        smoother/softer results, while values closer to 1.0 will produce sharper
        results.
    
    - filterType : ft                (int)           [create]
        The filter type to use. 0 is a Guassian filter, 1 is a triangular filter, 2 is a
        box filter.
    
    - flipU : fu                     (bool)          [create]
        Flip the U coordinate of the generated image.
    
    - flipV : fv                     (bool)          [create]
        Flip the V coordinate of the generated image.
    
    - ignoreMirroredFaces : imf      (bool)          [create]
        Stops reverse wound (i.e. mirrored) faces from contributing to the map
        generation.
    
    - ignoreTransforms : it          (bool)          [create]
        Controls whether transforms are used (meaning the search is performed in
        worldspace), or not (meaning the search is performed in object space).
    
    - mapHeight : mh                 (int)           [create]
        Pixel width of the generated map. This must be included once for every output
        map specified.
    
    - mapMaterials : mm              (bool)          [create]
        Where appropriate (e.g. normal maps), this controls whether the material should
        be included when sampling the map attribute. This must be included once for
        every output map specified.
    
    - mapOutput : mo                 (unicode)       [create]
        Specifies a new output map to create. One of normal, displacementdiffuseRGB,
        litAndShadedRGB, or alpha
    
    - mapSpace : sp                  (unicode)       [create]
        The space to generate the map in. Valid keyword is object. Default is tangent
        space. This must be included once for every output map specified.
    
    - mapWidth : mw                  (int)           [create]
        Pixel width of the generated map. Some output image formats require even or
        power of 2. This must be included once for every output map specified.
    
    - maxSearchDistance : msd        (float)         [create]
        Controls the maximum distance away from a target surface that will be searched
        for source surfaces. A value of 0 indicates no limit. When generated maps
        include artifacts from the other sideof an object, try setting this value to a
        distance approximately equal to the radius of the object. If this flag is
        included, it must be included once for every target.
    
    - maximumValue : max             (float)         [create]
        The maximum value to include in the map. This allows control of how floating
        point values (like displacement) are quantised into integer image formats.
    
    - overscan : os                  (int)           [create]
        The number of additional pixels to render around UV borders. This will help to
        minimise texel filtering artifacts on UV seams. When mipmaps are going to be
        generated for the texture a higher value may be necessary (in addition to a
        filterSize greater than 1).
    
    - searchCage : sc                (unicode)       [create]
        Specifies a search envelope surface to use as a search guide when looking for
        source surfaces. If this flag is included, it must be included once for every
        target.
    
    - searchMethod : sm              (int)           [create]
        Controls the search method used to match sample points on a target surface to
        points on the sources. 0 is closest to envelope, 1 is prefer any intersection
        inside envelope to intersections outside it, and 2 is only use intersections
        inside envelope.
    
    - searchOffset : so              (float)         [create]
        Specifies a fixed offset from a target surface to use as the starting point when
        looking for source surfaces. This value is only used when no search cage is
        specified for a given target. If this flag is included, it must be included once
        for every target.
    
    - shadows : sh                   (bool)          [create]
        Where appropriate (e.g. lit and shaded), this controls whether shadows are
        included in the calculation. Currently only depth map shadows are supported.
    
    - source : s                     (unicode)       [create]
        Specifies a surface to use as a sampling source
    
    - sourceUVSpace : sus            (unicode)       [create]
        Specifies that the transfer of data between the surfaces should be done in UV
        space and specifies the name of the UV set on the source surface(s) that should
        be used as the transfer space.
    
    - superSampling : ss             (int)           [create]
        Controls the number of sampling points calculated for each output value. The
        algorithm will use 2 ^ n squared samples for each point (so a value of 0 will
        use a single sample, while a value of 3 will calculate 64 samples for each
        point).
    
    - target : t                     (unicode)       [create]
        Specified a surface to sample output information for.
    
    - targetUVSpace : tus            (unicode)       [create]
        Specifies that the transfer of data between the surfaces should be done in UV
        space and specifies the name of the UV set on the target surface(s) that should
        be used as the transfer space.
    
    - useGeometryNormals : ugn       (bool)          [create]
        Controls whether geometry or surface normals are used for surface searching.
        Using geometry normals will ensure a smooth mapping but can introduce distorted
        mappings where there are large distances between the source and target surfaces.
        Surface normals can introduce overlapping or discontinuous mappings, but does
        allow map distortion to be influenced by surface normal direction.
    
    - uvSet : uv                     (unicode)       [create]
        The name of the UV set to use when creating output maps. If this flag is
        included, it must be included once for every target.                  Flag can
        have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.surfaceSampler`
    """
    pass
def PaintClusterWeightsToolOptions(*args, **kwargs): pass
def FlushBifrostScratchCache(*args, **kwargs): pass
def alignCtx(*args, **kwargs):
    """
    The alignCtx command creates a tool for aligning and distributing objects.
    
    Flags:
    - align : a                      (bool)          [create,query,edit]
        Align objects
    
    - anchorFirstObject : afo        (bool)          [create,query,edit]
        Anchor first or last selected object. Default false. Only applicable when
        aligning objects.
    
    - distribute : d                 (bool)          [create,query,edit]
        Distribute objects
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - showAlignTouch : sat           (bool)          [create,query,edit]
        Show or hide align touching handles. Default true. Only applicable when aligning
        objects.                  Flag can have multiple arguments, passed either as a
        tuple or a list.
    
    
    Derived from mel command `maya.cmds.alignCtx`
    """
    pass
def UnpublishRootTransform(*args, **kwargs): pass
def DecreaseManipulatorSize(*args, **kwargs): pass
def CreateClipOptions(*args, **kwargs): pass
def OutTangentClamped(*args, **kwargs): pass
def artFluidAttrCtx(*args, **kwargs):
    """
    This is a context command to set the flags on the artAttrContext, which is the
    base context for attribute painting operations. All commands require the name of
    the context as the last argument as this provides the name of the context to
    create, edit or query. This command is used to paint properties (such as
    density) of selected fluid volumes. In query mode, return type is based on
    queried flag.
    
    Flags:
    - accopacity : aco               (bool)          [create,query,edit]
        Sets opacity accumulation on/off. C: Default is false (Except for sculpt tool
        for which it is true by default). Q: When queried, it returns a boolean.
    
    - activeListChangedProc : alp    (unicode)       [create,query,edit]
        Accepts a string that contains a MEL command that is invoked whenever the active
        list changes. There may be some situations where the UI, for example, needs to
        be updated, when objects are selected/deselected in the scene. In query mode,
        the name of the currently registered MEL command is returned and this will be an
        empty string if none is defined.
    
    - afterStrokeCmd : asc           (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately after the end of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - alphaclamp : alc               (unicode)       [create,query,edit]
        Specifies if the weight value should be alpha clamped to the lower and upper
        bounds. There are four options here: none- no clamping is performed, lower-
        clamps only to the lower bound, upper- clamps only to the upper bounds, both-
        clamps to the lower and upper bounds. C: Default is none.  Q: When queried, it
        returns a string.
    
    - alphaclamplower : acl          (float)         [create,query,edit]
        Specifies the lower bound for the alpha values. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - alphaclampupper : acu          (float)         [create,query,edit]
        Specifies the upper bound for the alpha values. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - attrSelected : asl             (unicode)       [query]
        Returns a name of the currently selected attribute. Q: When queried, it returns
        a string.
    
    - autoSave : autoSave            (unicode)       [create,query,edit]
        A MEL command to save the fluid state.  Called before an event which could
        overwrite unsaved values of painted fluid properties.  Such events include:
        changing current time, changing the current paintable property, and exiting the
        paint tool.  (To turn auto-save off, pass in an empty-valued string argument:
        e.g., .)
    
    - beforeStrokeCmd : bsc          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command immediately before the start of a
        stroke. C: Default is no command. Q: When queried, it returns the current
        command
    
    - brushalignment : bra           (bool)          [create,query,edit]
        Specifies the path brush alignemnt. If true, the brush will align to stroke
        path, otherwise it will align to up vector. C: Default is true. Q: When queried,
        it returns a boolean.
    
    - brushfeedback : brf            (bool)          [create,query,edit]
        Specifies if the brush additional feedback should be drawn. C: Default is TRUE.
        Q: When queried, it returns a boolean.
    
    - clamp : cl                     (unicode)       [create,query,edit]
        Specifies if the weight value should be clamped to the lower and upper bounds.
        There are four options here: none- no clamping is performed, lower- clamps only
        to the lower bound, upper- clamps only to the upper bounds, both- clamps to the
        lower and upper bounds. C: Default is none.  Q: When queried, it returns a
        string.
    
    - clamplower : cll               (float)         [create,query,edit]
        Specifies the lower bound for the values. C: Default is 0.0.  Q: When queried,
        it returns a float.
    
    - clampupper : clu               (float)         [create,query,edit]
        Specifies the upper bound for the values. C: Default is 1.0.  Q: When queried,
        it returns a float.
    
    - clear : clr                    (bool)          [create,edit]
        Floods all cvs/vertices to the current value.
    
    - colorAlphaValue : cl1          (float)         [create,query,edit]
        The Alpha value of the color.
    
    - colorRGBAValue : cl4           (float, float, float, float) [create,query,edit]
        The RGBA value of the color.
    
    - colorRGBValue : cl3            (float, float, float) [create,query,edit]
        The RGB value of the color.
    
    - colorRamp : cr                 (unicode)       [create,query,edit]
        Allows a user defined color ramp to be used to map values to colors.
    
    - colorfeedback : cf             (bool)          [create,query,edit]
        Sets on/off the color feedback display. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorfeedbackOverride : cfo    (bool)          [create,query,edit]
        Sets on/off the color feedback override. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - colorrangelower : crl          (float)         [create,query,edit]
        Specifies the value that maps to black when color feedback mode is on. C:
        Default is 0.0.  Q: When queried, it returns a float.
    
    - colorrangeupper : cru          (float)         [create,query,edit]
        Specifies the value that maps to the maximum color when color feedback mode is
        on. C: Default is 1.0.  Q: When queried, it returns a float.
    
    - currentPaintableFluid : cpf    (unicode)       [query]
        Query the name of the fluid on which this context is currently painting.
        Returns string.
    
    - dataTypeIndex : dti            (int)           [query,edit]
        When the selected paintable attribute is a vectorArray, it specifies which field
        to paint on.
    
    - delaySelectionChanged : dsc    (bool)          [create,query,edit]
        Internal use only.  Under normal conditions, the tool responds to changes to the
        selection list so it can update its list of paintable geometry.  When -dsl true
        is used, the tool will not update its paintable list until a corresponding -dsl
        false is called.
    
    - disablelighting : dl           (bool)          [create,query,edit]
        If color feedback is on, this flag determines whether lighting is disabled or
        not for the surfaces that are affected. C: Default is FALSE.  Q: When queried,
        it returns a boolean.
    
    - displayAsRender : dar          (bool)          [create,query,edit]
        When true, sets the Shaded Displayattribute of the fluid to AsRender: all fluid
        properties displayed as hardware rendered.  When false, displays only the
        currently selected paintable attribute of the fluid.
    
    - displayVelocity : dv           (bool)          [create,query,edit]
        Turns on/off velocity display, independently of the above
        dar/displayAsRendersetting.  Use this flag to enable velocity display while only
        displaying density, for example.
    
    - doAutoSave : das               (bool)          [edit]
        Execute the -autoSave command if there are unsaved painted fluid properties.
    
    - dragSlider : dsl               (unicode)       [create,edit]
        Sets the current brush drag state for resizing or offsetting the brush (like the
        'b' and 'm' default hotkeys). The string argument is one of: radius, lowradius,
        opacity, value, depth, displacement, uvvectoror none. C: Default is none.
    
    - duringStrokeCmd : dsk          (unicode)       [create,query,edit]
        The passed string is executed as a MEL command during the stroke, each time the
        mouse is dragged. C: Default is no command. Q: When queried, it returns the
        current command
    
    - dynclonemode : dcm             (bool)          [create,query,edit]
        Enable or disable dynamic clone mode.
    
    - exists : ex                    (bool)          [create]
        Returns true or false depending upon whether the specified object exists. Other
        flags are ignored.
    
    - expandfilename : eef           (bool)          [create,edit]
        If true, it will expand the name of the export file and concatenate it with the
        surface name. Otherwise it will take the name as it is. C: Default is true.
    
    - exportaspectratio : ear        (float)         [create,query,edit]
        Value of aspect ratio for export
    
    - exportfilemode : efm           (unicode)       [create,query,edit]
        Specifies the export channel.The valid entries here are: alpha, luminance, rgb,
        rgba. C: Default is luminance/rgb. Q: When queried, it returns a string.
    
    - exportfilesave : esf           (unicode)       [edit]
        Exports the attribute map and saves to a specified file.
    
    - exportfilesizex : fsx          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfilesizey : fsy          (int)           [create,query,edit]
        Specifies the width of the attribute map to export. C: Default width is 256. Q:
        When queried, it returns an integer.
    
    - exportfiletype : eft           (unicode)       [create,query,edit]
        Specifies the image file format. It can be one of the following: iff, tiff,
        jpeg, alias, rgb, fitpostScriptEPS, softimage, wavefrontRLA, wavefrontEXP. C:
        default is tiff. Q: When queried, it returns a string.
    
    - filterNodes : fon              (bool)          [edit]
        Sets the node filter.
    
    - history : ch                   (bool)          [create]
        If this is a tool command, turn the construction history on for the tool in
        question.
    
    - image1 : i1                    (unicode)       [create,query,edit]
        First of three possible icons representing the tool associated with the context.
    
    - image2 : i2                    (unicode)       [create,query,edit]
        Second of three possible icons representing the tool associated with the
        context.
    
    - image3 : i3                    (unicode)       [create,query,edit]
        Third of three possible icons representing the tool associated with the context.
    
    - importfileload : ifl           (unicode)       [edit]
        Load the attribute map a specified file.
    
    - importfilemode : ifm           (unicode)       [create,query,edit]
        Specifies the channel to import. The valid entries here are: alpha, luminance,
        red, green, blue, and rgbC: Default is alpha. Q: When queried, it returns a
        string.
    
    - importreassign : irm           (bool)          [create,query,edit]
        Specifies if the multiply atrribute maps are to be reassigned while importing.
        Only maps previously exported from within Artisan can be reassigned. C: Default
        is FALSE. Q: When queried, it returns a  boolean.
    
    - interactiveUpdate : iu         (bool)          [create,query,edit]
        Specifies how often to transfer the painted values into the attribute. TRUE:
        transfer them continuously(many times per stroke) FALSE: transfer them only at
        the end of a stroke (on mouse button release). C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - lastRecorderCmd : lrc          (unicode)       [create,query,edit]
        Value of last recorded command.
    
    - lastStampName : lsn            (unicode)       [create,query,edit]
        Value of the last stamp name.
    
    - lowerradius : lr               (float)         [create,query,edit]
        Sets the lower size of the brush (only apply on tablet).
    
    - makeStroke : mst               (int)           [create,query,edit]
        Stroke point values.
    
    - mappressure : mp               (unicode)       [create,query,edit]
        Sets the tablet pressure mapping when the table is used. There are four options:
        none- the pressure has no effect, opacity- the pressure is mapped to the
        opacity, radius- the is mapped to modify the radius of the brush, both- the
        pressure modifies both the opacity and the radius. C: Default is none. Q: When
        queried, it returns a string.
    
    - maxvalue : mxv                 (float)         [create,query,edit]
        Specifies the maximum value for each attribute. C: Default is 1.0.  Q: When
        queried, it returns a float.
    
    - minvalue : miv                 (float)         [create,query,edit]
        Specifies the minimum value for each attribute. C: Default is 0.0.  Q: When
        queried, it returns a float.
    
    - name : n                       (unicode)       [create]
        If this is a tool command, name the tool appropriately.
    
    - objattrArray : oaa             (unicode)       [query]
        An array of all paintable attributes. Each element of the array is a string with
        the following information: NodeType.NodeName.AttributeName.MenuType. \*MenuType:
        type (level) of the item in the Menu (UI). Q: When queried, it returns a string.
    
    - opacity : op                   (float)         [create,query,edit]
        Sets the brush opacity. C: Default is 1.0. Q: When queried, it returns a float.
    
    - outline : o                    (bool)          [create,query,edit]
        Specifies if the brush should be drawn. C: Default is TRUE. Q: When queried, it
        returns a boolean.
    
    - outwhilepaint : owp            (bool)          [create,query,edit]
        Specifies if the brush outline should be drawn while painting. C: Default is
        FALSE. Q: When queried, it returns a boolean.
    
    - paintNodeArray : pna           (unicode)       [query]
        An array of paintable nodes. Q: When queried, it returns a string.
    
    - paintattrselected : pas        (unicode)       [edit]
        An array of selected paintable attributes. Each element of the array is a string
        with the following information: NodeType.NodeName.AttributeName.
    
    - paintmode : pm                 (unicode)       [create,query,edit]
        Specifies the paint mode. There are two possibilities: screenand tangent. C:
        Default is screen. Q: When queried, it returns a string.
    
    - paintoperationtype : pot       (unicode)       [create,query,edit]
        Specifies the operation type used by the Paint Tool.  Currently, we support the
        following paint modes: Paint, Smear, Blur, Eraseand Clone. Default is Paint.
    
    - pickColor : pcm                (bool)          [create,query,edit]
        Set pick color mode on or off
    
    - pickValue : pv                 (bool)          [create,query,edit]
        Toggle for picking
    
    - playbackCursor : plc           (float, float)  [create,query,edit]
        Values for the playback cursor.
    
    - playbackPressure : plp         (float)         [create,query,edit]
        Valus for the playback pressure.
    
    - preserveclonesource : pcs      (bool)          [create,query,edit]
        Whether or not to preserve a clone source.
    
    - profileShapeFile : psf         (unicode)       [query,edit]
        Passes a name of the image file for the stamp shape profile.
    
    - projective : prm               (bool)          [create,query,edit]
        Specifies the projective paint mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - property : p                   (unicode)       [create,query,edit]
        Specifies a property to paint on the fluid. Valid values are color, density,
        densityAndColor,densityAndFuel,temperature,fuel, velocity.
    
    - radius : r                     (float)         [create,query,edit]
        Sets the size of the brush. C: Default is 1.0 cm. Q: When queried, it returns a
        float.
    
    - rampMaxColor : rxc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is greater than or equal to
        the maximum value.
    
    - rampMinColor : rmc             (float, float, float) [create,query,edit]
        Defines a special color to be used when the value is less than or equal to the
        minimum value.
    
    - record : rec                   (bool)          [create,query,edit]
        Toggle on for recording.
    
    - reflection : rn                (bool)          [create,query,edit]
        Specifies the reflection mode. C: Default is 'false'. Q: When queried, it
        returns a boolean.
    
    - reflectionaboutorigin : rno    (bool)          [create,query,edit]
        Toggle on to reflect about the origin
    
    - reflectionaxis : ra            (unicode)       [create,query,edit]
        Specifies the reflection axis. There are three possibilities: x, yand z. C:
        Default is x. Q: When queried, it returns a string.
    
    - rgbValue : rgb                 (float, float, float) [create,query,edit]
        Specifies the values of the red, green, and blue components of the color to use
        when painting the property color.
    
    - screenRadius : scR             (float)         [create,query,edit]
        Brush radius on the screen
    
    - selectclonesource : scs        (bool)          [create,query,edit]
        Toggle on to select the clone source
    
    - selectedattroper : sao         (unicode)       [create,query,edit]
        Sets the edit weight operation. Four edit weights operations are provided :
        absolute- the value of the weight is replaced by the current one, additive- the
        value of the weight is added to the current one, scale- the value of the weight
        is multiplied by the current one, smooth- the value of the weight is divided by
        the current one. C: Default is absolute.  Q: When queried, it returns a string.
    
    - showactive : sa                (bool)          [create,query,edit]
        Sets on/off the display of the surface isoparms. C: Default is TRUE. Q: When
        queried, it returns a boolean.
    
    - stampDepth : stD               (float)         [create,query,edit]
        Depth of the stamps
    
    - stampProfile : stP             (unicode)       [create,query,edit]
        Sets the brush profile of the current stamp. Currently, the following profiles
        are supported: gaussian, soft, solidand square. C: Default is gaussian. Q: When
        queried, it returns a string.
    
    - stampSpacing : stS             (float)         [create,query,edit]
        Specifies the stamp spacing. Default is 1.0.
    
    - strokesmooth : ssm             (unicode)       [create,query,edit]
        Stroke smoothing type name
    
    - surfaceConformedBrushVertices : scv (bool)          [create,query,edit]
        Enables/disables the the display of the effective brush area as affected
        vertices.
    
    - tablet : tab                   (bool)          [query]
        Returns true if the tablet device is present, false if it is absent
    
    - tangentOutline : to            (bool)          [create,query,edit]
        Enables/disables the display of the brush circle tangent to the surface.
    
    - toolOffProc : tfp              (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned off. For example, cloth invokes
        clothPaintToolOffwhen the cloth paint tool is turned on. Define this callback if
        your tool requires special functionality when your tool is deactivated. It is
        typical that if you implement a toolOffProc you will want to implement a
        toolOnProc as well (see the -toolOnProc flag. In query mode, the name of the
        currently registered MEL command is returned and this will be an empty string if
        none is defined.
    
    - toolOnProc : top               (unicode)       [create,query,edit]
        Accepts a strings describing the name of a MEL procedure that is invoked
        whenever the tool is turned on. For example, cloth invokes clothPaintToolOnwhen
        the cloth paint tool is turned on. Define this callback if your tool requires
        special functionality when your tool is activated. It is typical that if you
        implement a toolOnProc you will want to implement a toolOffProc as well (see the
        -toolOffProc flag. In query mode, the name of the currently registered MEL
        command is returned and this will be an empty string if none is defined.
    
    - useColorRamp : ucr             (bool)          [create,query,edit]
        Specifies whether the user defined color ramp should be used to map values from
        to colors.  If this is turned off, the default greyscale feedback will be used.
    
    - useMaxMinColor : umc           (bool)          [create,query,edit]
        Specifies whether the out of range colors should be used.  See rampMinColor and
        rampMaxColor flags for further details.
    
    - useStrokeDirection : usd       (bool)          [create,query,edit]
        Applicable only during velocitypainting.  Specifies whether the value of the
        painted velocity should come from the direction of the brush stroke, overriding
        the value specified by the -v/-velocity flag.
    
    - usepressure : up               (bool)          [create,query,edit]
        Sets the tablet pressure on/off. C: Default is false. Q: When queried, it
        returns a boolean.
    
    - value : val                    (float)         [create,query,edit]
        Specifies the value for each attribute. C: Default is 0.0.  Q: When queried, it
        returns a float.
    
    - velocity : v                   (float, float, float) [create,query,edit]
        Specifies the values of the x, y, and z components of the velocity to use when
        painting the property velocity.
    
    - whichTool : wst                (unicode)       [create,query,edit]
        The string defines the name of the tool to be used for the Artisan context. An
        example is artClothPaint. In query mode, the tool name for the given context is
        returned. Note: due to the way MEL works, always specify the -query flag last
        when specifying a flag that takes arguments.
    
    - worldRadius : wlR              (float)         [create,query,edit]
        Radius in worldspace                  Flag can have multiple arguments, passed
        either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.artFluidAttrCtx`
    """
    pass
def CreateNURBSConeOptions(*args, **kwargs): pass
def nameField(*args, **kwargs): pass
def evalEcho(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.evalEcho`
    """
    pass
def preloadRefEd(*args, **kwargs): pass
def DisplayShadingMarkingMenu(*args, **kwargs): pass
def ReassignBoneLatticeJoint(*args, **kwargs): pass
def sbs_SetWorkflow(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.sbs_SetWorkflow`
    """
    pass
def characterMap(*args, **kwargs): pass
def BezierSetAnchorUneven(*args, **kwargs): pass
def dR_selectModeTweakMarquee(*args, **kwargs): pass
def NodeEditorHideAttributes(*args, **kwargs): pass
def NodeEditorShowAllAttrs(*args, **kwargs): pass
def WeightHammer(*args, **kwargs): pass
def SelectEdgeRingSp(*args, **kwargs): pass
def AlembicReference(*args, **kwargs): pass
def FBXImportConvertUnitString(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.FBXImportConvertUnitString`
    """
    pass
def testPa(*args, **kwargs):
    """
    Derived from mel command `maya.cmds.testPa`
    """
    pass
def dR_setRelaxAffectsAuto(*args, **kwargs): pass
def WireDropoffLocator(*args, **kwargs): pass
def arnoldUpdateTx(*args, **kwargs):
    """
    Flags:
    - force : f                      (bool)          []
    
    
    Derived from mel command `maya.cmds.arnoldUpdateTx`
    """
    pass
def FlipUVsOptions(*args, **kwargs): pass
def NodeEditorGraphRemoveSelected(*args, **kwargs): pass
def timerX(*args, **kwargs):
    """
    Used to calculate elapsed time. This command returns sub-second accurate time
    values. It is useful from scripts for timing the length of operations. Call this
    command before and after the operation you wish to time. On the first call, do
    not use any flags. It will return the start time. Save this value. After the
    operation, call this command a second time, and pass the saved start time using
    the -st flag. The elapsed time will be returned.
    
    Flags:
    - startTime : st                 (float)         [create]
        When this flag is used, the command returns the elapsed time since the specified
        start time.                  Flag can have multiple arguments, passed either as
        a tuple or a list.
    
    
    Derived from mel command `maya.cmds.timerX`
    """
    pass
def dagPose(*args, **kwargs): pass
def InTangentPlateau(*args, **kwargs): pass
def nConstraintCollisionExclusion(*args, **kwargs): pass
def ScaleConstraint(*args, **kwargs): pass
def SendToUnityAll(*args, **kwargs): pass
def AbcExport(*args, **kwargs):
    """
    Flags:
    - dontSkipUnwrittenFrames : duf  (bool)          []
    
    - help : h                       (bool)          []
    
    - jobArg : j                     (unicode)       []
    
    - preRollStartFrame : prs        (float)         []
    
    - verbose : v                    (bool)          []
    
    
    Derived from mel command `maya.cmds.AbcExport`
    """
    pass
def nodeTreeLister(*args, **kwargs): pass


objectErrorReg = None


