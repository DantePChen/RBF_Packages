from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtCore import QObject as _QObject


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QXmlNodeModelIndex(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def additionalData(*args, **kwargs): ...
    def data(*args, **kwargs): ...
    def internalPointer(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def model(*args, **kwargs): ...
    Attribute : NodeKind
    
    Comment : NodeKind
    
    Document : NodeKind
    
    DocumentOrder : Type[DocumentOrder]
    
    Element : NodeKind
    
    Follows : DocumentOrder
    
    Is : DocumentOrder
    
    Namespace : NodeKind
    
    NodeKind : Type[NodeKind]
    
    Precedes : DocumentOrder
    
    ProcessingInstruction : NodeKind
    
    Text : NodeKind
    
    __new__ : builtin_function_or_method


class QXmlSchema(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def documentUri(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def messageHandler(*args, **kwargs): ...
    def namePool(*args, **kwargs): ...
    def setMessageHandler(*args, **kwargs): ...
    def setUriResolver(*args, **kwargs): ...
    def uriResolver(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlQuery(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def bindVariable(*args, **kwargs): ...
    def evaluateTo(*args, **kwargs): ...
    def initialTemplateName(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def messageHandler(*args, **kwargs): ...
    def namePool(*args, **kwargs): ...
    def queryLanguage(*args, **kwargs): ...
    def setFocus(*args, **kwargs): ...
    def setInitialTemplateName(*args, **kwargs): ...
    def setMessageHandler(*args, **kwargs): ...
    def setQuery(*args, **kwargs): ...
    def setUriResolver(*args, **kwargs): ...
    def uriResolver(*args, **kwargs): ...
    QueryLanguage : Type[QueryLanguage]
    
    XPath20 : QueryLanguage
    
    XQuery10 : QueryLanguage
    
    XSLT20 : QueryLanguage
    
    XmlSchema11IdentityConstraintField : QueryLanguage
    
    XmlSchema11IdentityConstraintSelector : QueryLanguage
    
    __new__ : builtin_function_or_method


class QAbstractMessageHandler(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def handleMessage(*args, **kwargs): ...
    def message(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QXmlSchemaValidator(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def messageHandler(*args, **kwargs): ...
    def namePool(*args, **kwargs): ...
    def schema(*args, **kwargs): ...
    def setMessageHandler(*args, **kwargs): ...
    def setSchema(*args, **kwargs): ...
    def setUriResolver(*args, **kwargs): ...
    def uriResolver(*args, **kwargs): ...
    def validate(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QAbstractXmlNodeModel(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def attributes(*args, **kwargs): ...
    def baseUri(*args, **kwargs): ...
    def compareOrder(*args, **kwargs): ...
    def createIndex(*args, **kwargs): ...
    def documentUri(*args, **kwargs): ...
    def elementById(*args, **kwargs): ...
    def isDeepEqual(*args, **kwargs): ...
    def kind(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def namespaceBindings(*args, **kwargs): ...
    def namespaceForPrefix(*args, **kwargs): ...
    def nextFromSimpleAxis(*args, **kwargs): ...
    def nodesByIdref(*args, **kwargs): ...
    def root(*args, **kwargs): ...
    def sendNamespaces(*args, **kwargs): ...
    def sourceLocation(*args, **kwargs): ...
    def stringValue(*args, **kwargs): ...
    def typedValue(*args, **kwargs): ...
    FirstChild : SimpleAxis
    
    InheritNamespaces : NodeCopySetting
    
    NextSibling : SimpleAxis
    
    NodeCopySetting : Type[NodeCopySetting]
    
    Parent : SimpleAxis
    
    PreserveNamespaces : NodeCopySetting
    
    PreviousSibling : SimpleAxis
    
    SimpleAxis : Type[SimpleAxis]
    
    __new__ : builtin_function_or_method


class QXmlName(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def isNull(*args, **kwargs): ...
    def localName(*args, **kwargs): ...
    def namespaceUri(*args, **kwargs): ...
    def prefix(*args, **kwargs): ...
    def toClarkName(*args, **kwargs): ...
    @staticmethod
    def fromClarkName(*args, **kwargs): ...
    @staticmethod
    def isNCName(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QAbstractUriResolver(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def resolve(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QXmlItem(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def isAtomicValue(*args, **kwargs): ...
    def isNode(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def toAtomicValue(*args, **kwargs): ...
    def toNodeModelIndex(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlResultItems(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def current(*args, **kwargs): ...
    def hasError(*args, **kwargs): ...
    def next(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QSourceLocation(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def __repr__(self) -> str:
        """
        x.__repr__() <==> repr(x)
        """
        ...
    def column(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def line(*args, **kwargs): ...
    def setColumn(*args, **kwargs): ...
    def setLine(*args, **kwargs): ...
    def setUri(*args, **kwargs): ...
    def uri(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlNamePool(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    __new__ : builtin_function_or_method


class QAbstractXmlReceiver(_Object):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atomicValue(*args, **kwargs): ...
    def attribute(*args, **kwargs): ...
    def characters(*args, **kwargs): ...
    def comment(*args, **kwargs): ...
    def endDocument(*args, **kwargs): ...
    def endElement(*args, **kwargs): ...
    def endOfSequence(*args, **kwargs): ...
    def namespaceBinding(*args, **kwargs): ...
    def processingInstruction(*args, **kwargs): ...
    def startDocument(*args, **kwargs): ...
    def startElement(*args, **kwargs): ...
    def startOfSequence(*args, **kwargs): ...
    def whitespaceOnly(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlSerializer(QAbstractXmlReceiver):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atomicValue(*args, **kwargs): ...
    def attribute(*args, **kwargs): ...
    def characters(*args, **kwargs): ...
    def codec(*args, **kwargs): ...
    def comment(*args, **kwargs): ...
    def endDocument(*args, **kwargs): ...
    def endElement(*args, **kwargs): ...
    def endOfSequence(*args, **kwargs): ...
    def namespaceBinding(*args, **kwargs): ...
    def outputDevice(*args, **kwargs): ...
    def processingInstruction(*args, **kwargs): ...
    def setCodec(*args, **kwargs): ...
    def startDocument(*args, **kwargs): ...
    def startElement(*args, **kwargs): ...
    def startOfSequence(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QXmlFormatter(QXmlSerializer):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def atomicValue(*args, **kwargs): ...
    def attribute(*args, **kwargs): ...
    def characters(*args, **kwargs): ...
    def comment(*args, **kwargs): ...
    def endDocument(*args, **kwargs): ...
    def endElement(*args, **kwargs): ...
    def endOfSequence(*args, **kwargs): ...
    def indentationDepth(*args, **kwargs): ...
    def processingInstruction(*args, **kwargs): ...
    def setIndentationDepth(*args, **kwargs): ...
    def startDocument(*args, **kwargs): ...
    def startElement(*args, **kwargs): ...
    def startOfSequence(*args, **kwargs): ...
    __new__ : builtin_function_or_method



