from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
from . import QtCore


from PySide2.QtWidgets import QGraphicsWidget as _QGraphicsWidget
from PySide2.QtCore import QObject as _QObject
from PySide2.QtWidgets import QWidget as _QWidget


if False:
    from typing import Dict, List, Tuple, Union, Optional

class _Object(object):
    __dict__ : dictproxy


class QWebInspector(_QWidget):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def closeEvent(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def hideEvent(*args, **kwargs): ...
    def page(*args, **kwargs): ...
    def resizeEvent(*args, **kwargs): ...
    def setPage(*args, **kwargs): ...
    def showEvent(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QWebElementCollection(_Object):
    def __add__(*args, **kwargs):
        """
        x.__add__(y) <==> x+y
        """
        ...
    def __copy__(*args, **kwargs): ...
    def __getitem__(*args, **kwargs):
        """
        x.__getitem__(y) <==> x[y]
        """
        ...
    def __iadd__(*args, **kwargs):
        """
        x.__iadd__(y) <==> x+=y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __len__(self) -> int:
        """
        x.__len__() <==> len(x)
        """
        ...
    def __radd__(*args, **kwargs):
        """
        x.__radd__(y) <==> y+x
        """
        ...
    def append(*args, **kwargs): ...
    def at(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def first(*args, **kwargs): ...
    def last(*args, **kwargs): ...
    def toList(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QWebHitTestResult(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def alternateText(*args, **kwargs): ...
    def boundingRect(*args, **kwargs): ...
    def element(*args, **kwargs): ...
    def enclosingBlockElement(*args, **kwargs): ...
    def frame(*args, **kwargs): ...
    def imageUrl(*args, **kwargs): ...
    def isContentEditable(*args, **kwargs): ...
    def isContentSelected(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def linkElement(*args, **kwargs): ...
    def linkTargetFrame(*args, **kwargs): ...
    def linkText(*args, **kwargs): ...
    def linkTitle(*args, **kwargs): ...
    def linkTitleString(*args, **kwargs): ...
    def linkUrl(*args, **kwargs): ...
    def mediaUrl(*args, **kwargs): ...
    def pixmap(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QWebPage(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def acceptNavigationRequest(*args, **kwargs): ...
    def action(*args, **kwargs): ...
    def bytesReceived(*args, **kwargs): ...
    def chooseFile(*args, **kwargs): ...
    def createPlugin(*args, **kwargs): ...
    def createStandardContextMenu(*args, **kwargs): ...
    def createWindow(*args, **kwargs): ...
    def currentFrame(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def extension(*args, **kwargs): ...
    def findText(*args, **kwargs): ...
    def focusNextPrevChild(*args, **kwargs): ...
    def forwardUnsupportedContent(*args, **kwargs): ...
    def frameAt(*args, **kwargs): ...
    def hasSelection(*args, **kwargs): ...
    def history(*args, **kwargs): ...
    def inputMethodQuery(*args, **kwargs): ...
    def isContentEditable(*args, **kwargs): ...
    def isModified(*args, **kwargs): ...
    def javaScriptAlert(*args, **kwargs): ...
    def javaScriptConfirm(*args, **kwargs): ...
    def javaScriptConsoleMessage(*args, **kwargs): ...
    def javaScriptPrompt(*args, **kwargs): ...
    def linkDelegationPolicy(*args, **kwargs): ...
    def mainFrame(*args, **kwargs): ...
    def networkAccessManager(*args, **kwargs): ...
    def palette(*args, **kwargs): ...
    def pluginFactory(*args, **kwargs): ...
    def preferredContentsSize(*args, **kwargs): ...
    def selectedHtml(*args, **kwargs): ...
    def selectedText(*args, **kwargs): ...
    def setActualVisibleContentRect(*args, **kwargs): ...
    def setContentEditable(*args, **kwargs): ...
    def setFeaturePermission(*args, **kwargs): ...
    def setForwardUnsupportedContent(*args, **kwargs): ...
    def setLinkDelegationPolicy(*args, **kwargs): ...
    def setNetworkAccessManager(*args, **kwargs): ...
    def setPalette(*args, **kwargs): ...
    def setPluginFactory(*args, **kwargs): ...
    def setPreferredContentsSize(*args, **kwargs): ...
    def setView(*args, **kwargs): ...
    def setViewportSize(*args, **kwargs): ...
    def setVisibilityState(*args, **kwargs): ...
    def settings(*args, **kwargs): ...
    def shouldInterruptJavaScript(*args, **kwargs): ...
    def supportedContentTypes(*args, **kwargs): ...
    def supportsContentType(*args, **kwargs): ...
    def supportsExtension(*args, **kwargs): ...
    def swallowContextMenuEvent(*args, **kwargs): ...
    def totalBytes(*args, **kwargs): ...
    def triggerAction(*args, **kwargs): ...
    def undoStack(*args, **kwargs): ...
    def updatePositionDependentActions(*args, **kwargs): ...
    def userAgentForUrl(*args, **kwargs): ...
    def view(*args, **kwargs): ...
    def viewportAttributesForSize(*args, **kwargs): ...
    def viewportSize(*args, **kwargs): ...
    def visibilityState(*args, **kwargs): ...
    AlignCenter : WebAction
    
    AlignJustified : WebAction
    
    AlignLeft : WebAction
    
    AlignRight : WebAction
    
    Back : WebAction
    
    ChooseMultipleFilesExtension : Extension
    
    ChooseMultipleFilesExtensionOption : Type[ChooseMultipleFilesExtensionOption]
    
    ChooseMultipleFilesExtensionReturn : Type[ChooseMultipleFilesExtensionReturn]
    
    Copy : WebAction
    
    CopyImageToClipboard : WebAction
    
    CopyImageUrlToClipboard : WebAction
    
    CopyLinkToClipboard : WebAction
    
    CopyMediaUrlToClipboard : WebAction
    
    Cut : WebAction
    
    DelegateAllLinks : LinkDelegationPolicy
    
    DelegateExternalLinks : LinkDelegationPolicy
    
    DeleteEndOfWord : WebAction
    
    DeleteStartOfWord : WebAction
    
    DontDelegateLinks : LinkDelegationPolicy
    
    DownloadImageToDisk : WebAction
    
    DownloadLinkToDisk : WebAction
    
    DownloadMediaToDisk : WebAction
    
    ErrorDomain : Type[ErrorDomain]
    
    ErrorPageExtension : Extension
    
    ErrorPageExtensionOption : Type[ErrorPageExtensionOption]
    
    ErrorPageExtensionReturn : Type[ErrorPageExtensionReturn]
    
    Extension : Type[Extension]
    
    ExtensionOption : Type[ExtensionOption]
    
    ExtensionReturn : Type[ExtensionReturn]
    
    Feature : Type[Feature]
    
    FindAtWordBeginningsOnly : FindFlag
    
    FindBackward : FindFlag
    
    FindBeginsInSelection : FindFlag
    
    FindCaseSensitively : FindFlag
    
    FindFlag : Type[FindFlag]
    
    FindFlags : Type[FindFlags]
    
    FindWrapsAroundDocument : FindFlag
    
    Forward : WebAction
    
    Geolocation : Feature
    
    HighlightAllOccurrences : FindFlag
    
    Http : ErrorDomain
    
    Indent : WebAction
    
    InsertLineSeparator : WebAction
    
    InsertOrderedList : WebAction
    
    InsertParagraphSeparator : WebAction
    
    InsertUnorderedList : WebAction
    
    InspectElement : WebAction
    
    LinkDelegationPolicy : Type[LinkDelegationPolicy]
    
    MoveToEndOfBlock : WebAction
    
    MoveToEndOfDocument : WebAction
    
    MoveToEndOfLine : WebAction
    
    MoveToNextChar : WebAction
    
    MoveToNextLine : WebAction
    
    MoveToNextWord : WebAction
    
    MoveToPreviousChar : WebAction
    
    MoveToPreviousLine : WebAction
    
    MoveToPreviousWord : WebAction
    
    MoveToStartOfBlock : WebAction
    
    MoveToStartOfDocument : WebAction
    
    MoveToStartOfLine : WebAction
    
    NavigationType : Type[NavigationType]
    
    NavigationTypeBackOrForward : NavigationType
    
    NavigationTypeFormResubmitted : NavigationType
    
    NavigationTypeFormSubmitted : NavigationType
    
    NavigationTypeLinkClicked : NavigationType
    
    NavigationTypeOther : NavigationType
    
    NavigationTypeReload : NavigationType
    
    NoWebAction : WebAction
    
    Notifications : Feature
    
    OpenFrameInNewWindow : WebAction
    
    OpenImageInNewWindow : WebAction
    
    OpenLink : WebAction
    
    OpenLinkInNewWindow : WebAction
    
    OpenLinkInThisWindow : WebAction
    
    Outdent : WebAction
    
    Paste : WebAction
    
    PasteAndMatchStyle : WebAction
    
    PermissionDeniedByUser : PermissionPolicy
    
    PermissionGrantedByUser : PermissionPolicy
    
    PermissionPolicy : Type[PermissionPolicy]
    
    PermissionUnknown : PermissionPolicy
    
    QtNetwork : ErrorDomain
    
    Redo : WebAction
    
    Reload : WebAction
    
    ReloadAndBypassCache : WebAction
    
    RemoveFormat : WebAction
    
    SelectAll : WebAction
    
    SelectEndOfBlock : WebAction
    
    SelectEndOfDocument : WebAction
    
    SelectEndOfLine : WebAction
    
    SelectNextChar : WebAction
    
    SelectNextLine : WebAction
    
    SelectNextWord : WebAction
    
    SelectPreviousChar : WebAction
    
    SelectPreviousLine : WebAction
    
    SelectPreviousWord : WebAction
    
    SelectStartOfBlock : WebAction
    
    SelectStartOfDocument : WebAction
    
    SelectStartOfLine : WebAction
    
    SetTextDirectionDefault : WebAction
    
    SetTextDirectionLeftToRight : WebAction
    
    SetTextDirectionRightToLeft : WebAction
    
    Stop : WebAction
    
    StopScheduledPageRefresh : WebAction
    
    ToggleBold : WebAction
    
    ToggleItalic : WebAction
    
    ToggleMediaControls : WebAction
    
    ToggleMediaLoop : WebAction
    
    ToggleMediaMute : WebAction
    
    ToggleMediaPlayPause : WebAction
    
    ToggleStrikethrough : WebAction
    
    ToggleSubscript : WebAction
    
    ToggleSuperscript : WebAction
    
    ToggleUnderline : WebAction
    
    ToggleVideoFullscreen : WebAction
    
    TreatMedialCapitalAsWordBeginning : FindFlag
    
    Undo : WebAction
    
    ViewportAttributes : Type[ViewportAttributes]
    
    VisibilityState : Type[VisibilityState]
    
    VisibilityStateHidden : VisibilityState
    
    VisibilityStatePrerender : VisibilityState
    
    VisibilityStateUnloaded : VisibilityState
    
    VisibilityStateVisible : VisibilityState
    
    WebAction : Type[WebAction]
    
    WebActionCount : WebAction
    
    WebBrowserWindow : WebWindowType
    
    WebKit : ErrorDomain
    
    WebModalDialog : WebWindowType
    
    WebWindowType : Type[WebWindowType]
    
    __new__ : builtin_function_or_method
    
    applicationCacheQuotaExceeded : PySide2.QtCore.Signal
    
    contentsChanged : PySide2.QtCore.Signal
    
    databaseQuotaExceeded : PySide2.QtCore.Signal
    
    downloadRequested : PySide2.QtCore.Signal
    
    featurePermissionRequestCanceled : PySide2.QtCore.Signal
    
    featurePermissionRequested : PySide2.QtCore.Signal
    
    frameCreated : PySide2.QtCore.Signal
    
    geometryChangeRequested : PySide2.QtCore.Signal
    
    linkClicked : PySide2.QtCore.Signal
    
    linkHovered : PySide2.QtCore.Signal
    
    loadFinished : PySide2.QtCore.Signal
    
    loadProgress : PySide2.QtCore.Signal
    
    loadStarted : PySide2.QtCore.Signal
    
    menuBarVisibilityChangeRequested : PySide2.QtCore.Signal
    
    microFocusChanged : PySide2.QtCore.Signal
    
    printRequested : PySide2.QtCore.Signal
    
    repaintRequested : PySide2.QtCore.Signal
    
    restoreFrameStateRequested : PySide2.QtCore.Signal
    
    saveFrameStateRequested : PySide2.QtCore.Signal
    
    scrollRequested : PySide2.QtCore.Signal
    
    selectionChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    statusBarMessage : PySide2.QtCore.Signal
    
    statusBarVisibilityChangeRequested : PySide2.QtCore.Signal
    
    toolBarVisibilityChangeRequested : PySide2.QtCore.Signal
    
    unsupportedContent : PySide2.QtCore.Signal
    
    viewportChangeRequested : PySide2.QtCore.Signal
    
    windowCloseRequested : PySide2.QtCore.Signal


class QWebSecurityOrigin(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addAccessWhitelistEntry(*args, **kwargs): ...
    def databaseQuota(*args, **kwargs): ...
    def databaseUsage(*args, **kwargs): ...
    def databases(*args, **kwargs): ...
    def host(*args, **kwargs): ...
    def port(*args, **kwargs): ...
    def removeAccessWhitelistEntry(*args, **kwargs): ...
    def scheme(*args, **kwargs): ...
    def setApplicationCacheQuota(*args, **kwargs): ...
    def setDatabaseQuota(*args, **kwargs): ...
    @staticmethod
    def addLocalScheme(*args, **kwargs): ...
    @staticmethod
    def allOrigins(*args, **kwargs): ...
    @staticmethod
    def localSchemes(*args, **kwargs): ...
    @staticmethod
    def removeLocalScheme(*args, **kwargs): ...
    AllowSubdomains : SubdomainSetting
    
    DisallowSubdomains : SubdomainSetting
    
    SubdomainSetting : Type[SubdomainSetting]
    
    __new__ : builtin_function_or_method


class QWebHistory(_Object):
    def __lshift__(*args, **kwargs):
        """
        x.__lshift__(y) <==> x<<y
        """
        ...
    def __rlshift__(*args, **kwargs):
        """
        x.__rlshift__(y) <==> y<<x
        """
        ...
    def __rrshift__(*args, **kwargs):
        """
        x.__rrshift__(y) <==> y>>x
        """
        ...
    def __rshift__(*args, **kwargs):
        """
        x.__rshift__(y) <==> x>>y
        """
        ...
    def back(*args, **kwargs): ...
    def backItem(*args, **kwargs): ...
    def backItems(*args, **kwargs): ...
    def canGoBack(*args, **kwargs): ...
    def canGoForward(*args, **kwargs): ...
    def clear(*args, **kwargs): ...
    def count(*args, **kwargs): ...
    def currentItem(*args, **kwargs): ...
    def currentItemIndex(*args, **kwargs): ...
    def forward(*args, **kwargs): ...
    def forwardItem(*args, **kwargs): ...
    def forwardItems(*args, **kwargs): ...
    def goToItem(*args, **kwargs): ...
    def itemAt(*args, **kwargs): ...
    def items(*args, **kwargs): ...
    def maximumItemCount(*args, **kwargs): ...
    def setMaximumItemCount(*args, **kwargs): ...


class QWebFrame(_QObject):
    def addToJavaScriptWindowObject(*args, **kwargs): ...
    def baseUrl(*args, **kwargs): ...
    def childFrames(*args, **kwargs): ...
    def contentsSize(*args, **kwargs): ...
    def documentElement(*args, **kwargs): ...
    def evaluateJavaScript(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def findAllElements(*args, **kwargs): ...
    def findFirstElement(*args, **kwargs): ...
    def frameName(*args, **kwargs): ...
    def geometry(*args, **kwargs): ...
    def hasFocus(*args, **kwargs): ...
    def hitTestContent(*args, **kwargs): ...
    def icon(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def metaData(*args, **kwargs): ...
    def page(*args, **kwargs): ...
    def parentFrame(*args, **kwargs): ...
    def pos(*args, **kwargs): ...
    def print_(*args, **kwargs): ...
    def render(*args, **kwargs): ...
    def requestedUrl(*args, **kwargs): ...
    def scroll(*args, **kwargs): ...
    def scrollBarGeometry(*args, **kwargs): ...
    def scrollBarMaximum(*args, **kwargs): ...
    def scrollBarMinimum(*args, **kwargs): ...
    def scrollBarPolicy(*args, **kwargs): ...
    def scrollBarValue(*args, **kwargs): ...
    def scrollPosition(*args, **kwargs): ...
    def scrollToAnchor(*args, **kwargs): ...
    def securityOrigin(*args, **kwargs): ...
    def setContent(*args, **kwargs): ...
    def setFocus(*args, **kwargs): ...
    def setHtml(*args, **kwargs): ...
    def setScrollBarPolicy(*args, **kwargs): ...
    def setScrollBarValue(*args, **kwargs): ...
    def setScrollPosition(*args, **kwargs): ...
    def setTextSizeMultiplier(*args, **kwargs): ...
    def setUrl(*args, **kwargs): ...
    def setZoomFactor(*args, **kwargs): ...
    def textSizeMultiplier(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    def toHtml(*args, **kwargs): ...
    def toPlainText(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    def zoomFactor(*args, **kwargs): ...
    AllLayers : RenderLayer
    
    AutoOwnership : ValueOwnership
    
    ContentsLayer : RenderLayer
    
    PanIconLayer : RenderLayer
    
    QtOwnership : ValueOwnership
    
    RenderLayer : Type[RenderLayer]
    
    RenderLayers : Type[RenderLayers]
    
    ScriptOwnership : ValueOwnership
    
    ScrollBarLayer : RenderLayer
    
    ValueOwnership : Type[ValueOwnership]
    
    contentsSizeChanged : PySide2.QtCore.Signal
    
    iconChanged : PySide2.QtCore.Signal
    
    initialLayoutCompleted : PySide2.QtCore.Signal
    
    javaScriptWindowObjectCleared : PySide2.QtCore.Signal
    
    loadFinished : PySide2.QtCore.Signal
    
    loadStarted : PySide2.QtCore.Signal
    
    pageChanged : PySide2.QtCore.Signal
    
    provisionalLoad : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    titleChanged : PySide2.QtCore.Signal
    
    urlChanged : PySide2.QtCore.Signal


class QWebView(_QWidget):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def back(*args, **kwargs): ...
    def changeEvent(*args, **kwargs): ...
    def contextMenuEvent(*args, **kwargs): ...
    def createWindow(*args, **kwargs): ...
    def dragEnterEvent(*args, **kwargs): ...
    def dragLeaveEvent(*args, **kwargs): ...
    def dragMoveEvent(*args, **kwargs): ...
    def dropEvent(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def findText(*args, **kwargs): ...
    def focusInEvent(*args, **kwargs): ...
    def focusNextPrevChild(*args, **kwargs): ...
    def focusOutEvent(*args, **kwargs): ...
    def forward(*args, **kwargs): ...
    def hasSelection(*args, **kwargs): ...
    def history(*args, **kwargs): ...
    def icon(*args, **kwargs): ...
    def inputMethodEvent(*args, **kwargs): ...
    def inputMethodQuery(*args, **kwargs): ...
    def isModified(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def mouseDoubleClickEvent(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def page(*args, **kwargs): ...
    def pageAction(*args, **kwargs): ...
    def paintEvent(*args, **kwargs): ...
    def print_(*args, **kwargs): ...
    def reload(*args, **kwargs): ...
    def renderHints(*args, **kwargs): ...
    def resizeEvent(*args, **kwargs): ...
    def selectedHtml(*args, **kwargs): ...
    def selectedText(*args, **kwargs): ...
    def setContent(*args, **kwargs): ...
    def setHtml(*args, **kwargs): ...
    def setPage(*args, **kwargs): ...
    def setRenderHint(*args, **kwargs): ...
    def setRenderHints(*args, **kwargs): ...
    def setTextSizeMultiplier(*args, **kwargs): ...
    def setUrl(*args, **kwargs): ...
    def setZoomFactor(*args, **kwargs): ...
    def settings(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def textSizeMultiplier(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    def triggerPageAction(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    def wheelEvent(*args, **kwargs): ...
    def zoomFactor(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    iconChanged : PySide2.QtCore.Signal
    
    linkClicked : PySide2.QtCore.Signal
    
    loadFinished : PySide2.QtCore.Signal
    
    loadProgress : PySide2.QtCore.Signal
    
    loadStarted : PySide2.QtCore.Signal
    
    selectionChanged : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    statusBarMessage : PySide2.QtCore.Signal
    
    titleChanged : PySide2.QtCore.Signal
    
    urlChanged : PySide2.QtCore.Signal


class QWebSettings(_Object):
    def cssMediaType(*args, **kwargs): ...
    def defaultTextEncoding(*args, **kwargs): ...
    def fontFamily(*args, **kwargs): ...
    def fontSize(*args, **kwargs): ...
    def localStoragePath(*args, **kwargs): ...
    def resetAttribute(*args, **kwargs): ...
    def resetFontFamily(*args, **kwargs): ...
    def resetFontSize(*args, **kwargs): ...
    def setAttribute(*args, **kwargs): ...
    def setCSSMediaType(*args, **kwargs): ...
    def setDefaultTextEncoding(*args, **kwargs): ...
    def setFontFamily(*args, **kwargs): ...
    def setFontSize(*args, **kwargs): ...
    def setLocalStoragePath(*args, **kwargs): ...
    def setThirdPartyCookiePolicy(*args, **kwargs): ...
    def setUserStyleSheetUrl(*args, **kwargs): ...
    def testAttribute(*args, **kwargs): ...
    def thirdPartyCookiePolicy(*args, **kwargs): ...
    def userStyleSheetUrl(*args, **kwargs): ...
    @staticmethod
    def clearIconDatabase(*args, **kwargs): ...
    @staticmethod
    def clearMemoryCaches(*args, **kwargs): ...
    @staticmethod
    def enablePersistentStorage(*args, **kwargs): ...
    @staticmethod
    def globalSettings(*args, **kwargs): ...
    @staticmethod
    def iconDatabasePath(*args, **kwargs): ...
    @staticmethod
    def iconForUrl(*args, **kwargs): ...
    @staticmethod
    def maximumPagesInCache(*args, **kwargs): ...
    @staticmethod
    def offlineStorageDefaultQuota(*args, **kwargs): ...
    @staticmethod
    def offlineStoragePath(*args, **kwargs): ...
    @staticmethod
    def offlineWebApplicationCachePath(*args, **kwargs): ...
    @staticmethod
    def offlineWebApplicationCacheQuota(*args, **kwargs): ...
    @staticmethod
    def setIconDatabasePath(*args, **kwargs): ...
    @staticmethod
    def setMaximumPagesInCache(*args, **kwargs): ...
    @staticmethod
    def setObjectCacheCapacities(*args, **kwargs): ...
    @staticmethod
    def setOfflineStorageDefaultQuota(*args, **kwargs): ...
    @staticmethod
    def setOfflineStoragePath(*args, **kwargs): ...
    @staticmethod
    def setOfflineWebApplicationCachePath(*args, **kwargs): ...
    @staticmethod
    def setOfflineWebApplicationCacheQuota(*args, **kwargs): ...
    @staticmethod
    def setWebGraphic(*args, **kwargs): ...
    @staticmethod
    def webGraphic(*args, **kwargs): ...
    Accelerated2dCanvasEnabled : WebAttribute
    
    AcceleratedCompositingEnabled : WebAttribute
    
    AllowThirdPartyWithExistingCookies : ThirdPartyCookiePolicy
    
    AlwaysAllowThirdPartyCookies : ThirdPartyCookiePolicy
    
    AlwaysBlockThirdPartyCookies : ThirdPartyCookiePolicy
    
    AutoLoadImages : WebAttribute
    
    CSSGridLayoutEnabled : WebAttribute
    
    CSSRegionsEnabled : WebAttribute
    
    CaretBrowsingEnabled : WebAttribute
    
    CursiveFont : FontFamily
    
    DefaultFixedFontSize : FontSize
    
    DefaultFontSize : FontSize
    
    DefaultFrameIconGraphic : WebGraphic
    
    DeleteButtonGraphic : WebGraphic
    
    DeveloperExtrasEnabled : WebAttribute
    
    DnsPrefetchEnabled : WebAttribute
    
    FantasyFont : FontFamily
    
    FixedFont : FontFamily
    
    FontFamily : Type[FontFamily]
    
    FontSize : Type[FontSize]
    
    FrameFlatteningEnabled : WebAttribute
    
    HyperlinkAuditingEnabled : WebAttribute
    
    InputSpeechButtonGraphic : WebGraphic
    
    JavaEnabled : WebAttribute
    
    JavascriptCanAccessClipboard : WebAttribute
    
    JavascriptCanCloseWindows : WebAttribute
    
    JavascriptCanOpenWindows : WebAttribute
    
    JavascriptEnabled : WebAttribute
    
    LinksIncludedInFocusChain : WebAttribute
    
    LocalContentCanAccessFileUrls : WebAttribute
    
    LocalContentCanAccessRemoteUrls : WebAttribute
    
    LocalStorageDatabaseEnabled : WebAttribute
    
    LocalStorageEnabled : WebAttribute
    
    MinimumFontSize : FontSize
    
    MinimumLogicalFontSize : FontSize
    
    MissingImageGraphic : WebGraphic
    
    MissingPluginGraphic : WebGraphic
    
    NotificationsEnabled : WebAttribute
    
    OfflineStorageDatabaseEnabled : WebAttribute
    
    OfflineWebApplicationCacheEnabled : WebAttribute
    
    PluginsEnabled : WebAttribute
    
    PrintElementBackgrounds : WebAttribute
    
    PrivateBrowsingEnabled : WebAttribute
    
    SansSerifFont : FontFamily
    
    ScrollAnimatorEnabled : WebAttribute
    
    SearchCancelButtonGraphic : WebGraphic
    
    SearchCancelButtonPressedGraphic : WebGraphic
    
    SerifFont : FontFamily
    
    SiteSpecificQuirksEnabled : WebAttribute
    
    SpatialNavigationEnabled : WebAttribute
    
    StandardFont : FontFamily
    
    TextAreaSizeGripCornerGraphic : WebGraphic
    
    ThirdPartyCookiePolicy : Type[ThirdPartyCookiePolicy]
    
    TiledBackingStoreEnabled : WebAttribute
    
    WebAttribute : Type[WebAttribute]
    
    WebAudioEnabled : WebAttribute
    
    WebGLEnabled : WebAttribute
    
    WebGraphic : Type[WebGraphic]
    
    XSSAuditingEnabled : WebAttribute
    
    ZoomTextOnly : WebAttribute


class QWebElement(_Object):
    def __copy__(*args, **kwargs): ...
    def __eq__(self, other: Any) -> bool:
        """
        x.__eq__(y) <==> x==y
        """
        ...
    def __ge__(self, other: Any) -> bool:
        """
        x.__ge__(y) <==> x>=y
        """
        ...
    def __gt__(self, other: Any) -> bool:
        """
        x.__gt__(y) <==> x>y
        """
        ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def __le__(self, other: Any) -> bool:
        """
        x.__le__(y) <==> x<=y
        """
        ...
    def __lt__(self, other: Any) -> bool:
        """
        x.__lt__(y) <==> x<y
        """
        ...
    def __ne__(self, other: Any) -> bool:
        """
        x.__ne__(y) <==> x!=y
        """
        ...
    def __nonzero__(self) -> bool:
        """
        x.__nonzero__() <==> x != 0
        """
        ...
    def addClass(*args, **kwargs): ...
    def appendInside(*args, **kwargs): ...
    def appendOutside(*args, **kwargs): ...
    def attribute(*args, **kwargs): ...
    def attributeNS(*args, **kwargs): ...
    def attributeNames(*args, **kwargs): ...
    def classes(*args, **kwargs): ...
    def clone(*args, **kwargs): ...
    def document(*args, **kwargs): ...
    def encloseContentsWith(*args, **kwargs): ...
    def encloseWith(*args, **kwargs): ...
    def evaluateJavaScript(*args, **kwargs): ...
    def findAll(*args, **kwargs): ...
    def findFirst(*args, **kwargs): ...
    def firstChild(*args, **kwargs): ...
    def geometry(*args, **kwargs): ...
    def hasAttribute(*args, **kwargs): ...
    def hasAttributeNS(*args, **kwargs): ...
    def hasAttributes(*args, **kwargs): ...
    def hasClass(*args, **kwargs): ...
    def hasFocus(*args, **kwargs): ...
    def isNull(*args, **kwargs): ...
    def lastChild(*args, **kwargs): ...
    def localName(*args, **kwargs): ...
    def namespaceUri(*args, **kwargs): ...
    def nextSibling(*args, **kwargs): ...
    def parent(*args, **kwargs): ...
    def prefix(*args, **kwargs): ...
    def prependInside(*args, **kwargs): ...
    def prependOutside(*args, **kwargs): ...
    def previousSibling(*args, **kwargs): ...
    def removeAllChildren(*args, **kwargs): ...
    def removeAttribute(*args, **kwargs): ...
    def removeAttributeNS(*args, **kwargs): ...
    def removeClass(*args, **kwargs): ...
    def removeFromDocument(*args, **kwargs): ...
    def render(*args, **kwargs): ...
    def replace(*args, **kwargs): ...
    def setAttribute(*args, **kwargs): ...
    def setAttributeNS(*args, **kwargs): ...
    def setFocus(*args, **kwargs): ...
    def setInnerXml(*args, **kwargs): ...
    def setOuterXml(*args, **kwargs): ...
    def setPlainText(*args, **kwargs): ...
    def setStyleProperty(*args, **kwargs): ...
    def styleProperty(*args, **kwargs): ...
    def tagName(*args, **kwargs): ...
    def takeFromDocument(*args, **kwargs): ...
    def toInnerXml(*args, **kwargs): ...
    def toOuterXml(*args, **kwargs): ...
    def toPlainText(*args, **kwargs): ...
    def toggleClass(*args, **kwargs): ...
    def webFrame(*args, **kwargs): ...
    CascadedStyle : StyleResolveStrategy
    
    ComputedStyle : StyleResolveStrategy
    
    InlineStyle : StyleResolveStrategy
    
    StyleResolveStrategy : Type[StyleResolveStrategy]
    
    __new__ : builtin_function_or_method


class QWebPluginFactory(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def create(*args, **kwargs): ...
    def plugins(*args, **kwargs): ...
    def refreshPlugins(*args, **kwargs): ...
    def supportsExtension(*args, **kwargs): ...
    Extension : Type[Extension]
    
    MimeType : Type[MimeType]
    
    Plugin : Type[Plugin]
    
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject


class QWebHistoryItem(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def icon(*args, **kwargs): ...
    def isValid(*args, **kwargs): ...
    def lastVisited(*args, **kwargs): ...
    def originalUrl(*args, **kwargs): ...
    def setUserData(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    def userData(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QWebDatabase(_Object):
    def __copy__(*args, **kwargs): ...
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def displayName(*args, **kwargs): ...
    def expectedSize(*args, **kwargs): ...
    def fileName(*args, **kwargs): ...
    def name(*args, **kwargs): ...
    def origin(*args, **kwargs): ...
    def size(*args, **kwargs): ...
    @staticmethod
    def removeAllDatabases(*args, **kwargs): ...
    @staticmethod
    def removeDatabase(*args, **kwargs): ...
    __new__ : builtin_function_or_method


class QGraphicsWebView(_QGraphicsWidget):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def back(*args, **kwargs): ...
    def contextMenuEvent(*args, **kwargs): ...
    def dragEnterEvent(*args, **kwargs): ...
    def dragLeaveEvent(*args, **kwargs): ...
    def dragMoveEvent(*args, **kwargs): ...
    def dropEvent(*args, **kwargs): ...
    def event(*args, **kwargs): ...
    def findText(*args, **kwargs): ...
    def focusInEvent(*args, **kwargs): ...
    def focusNextPrevChild(*args, **kwargs): ...
    def focusOutEvent(*args, **kwargs): ...
    def forward(*args, **kwargs): ...
    def history(*args, **kwargs): ...
    def hoverLeaveEvent(*args, **kwargs): ...
    def hoverMoveEvent(*args, **kwargs): ...
    def icon(*args, **kwargs): ...
    def inputMethodEvent(*args, **kwargs): ...
    def inputMethodQuery(*args, **kwargs): ...
    def isModified(*args, **kwargs): ...
    def isTiledBackingStoreFrozen(*args, **kwargs): ...
    def itemChange(*args, **kwargs): ...
    def keyPressEvent(*args, **kwargs): ...
    def keyReleaseEvent(*args, **kwargs): ...
    def load(*args, **kwargs): ...
    def mouseDoubleClickEvent(*args, **kwargs): ...
    def mouseMoveEvent(*args, **kwargs): ...
    def mousePressEvent(*args, **kwargs): ...
    def mouseReleaseEvent(*args, **kwargs): ...
    def page(*args, **kwargs): ...
    def pageAction(*args, **kwargs): ...
    def paint(*args, **kwargs): ...
    def reload(*args, **kwargs): ...
    def renderHints(*args, **kwargs): ...
    def resizesToContents(*args, **kwargs): ...
    def sceneEvent(*args, **kwargs): ...
    def setContent(*args, **kwargs): ...
    def setGeometry(*args, **kwargs): ...
    def setHtml(*args, **kwargs): ...
    def setPage(*args, **kwargs): ...
    def setRenderHint(*args, **kwargs): ...
    def setRenderHints(*args, **kwargs): ...
    def setResizesToContents(*args, **kwargs): ...
    def setTiledBackingStoreFrozen(*args, **kwargs): ...
    def setUrl(*args, **kwargs): ...
    def setZoomFactor(*args, **kwargs): ...
    def settings(*args, **kwargs): ...
    def sizeHint(*args, **kwargs): ...
    def stop(*args, **kwargs): ...
    def title(*args, **kwargs): ...
    def triggerPageAction(*args, **kwargs): ...
    def updateGeometry(*args, **kwargs): ...
    def url(*args, **kwargs): ...
    def wheelEvent(*args, **kwargs): ...
    def zoomFactor(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    iconChanged : PySide2.QtCore.Signal
    
    linkClicked : PySide2.QtCore.Signal
    
    loadFinished : PySide2.QtCore.Signal
    
    loadProgress : PySide2.QtCore.Signal
    
    loadStarted : PySide2.QtCore.Signal
    
    staticMetaObject : PySide2.QtCore.QMetaObject
    
    statusBarMessage : PySide2.QtCore.Signal
    
    titleChanged : PySide2.QtCore.Signal
    
    urlChanged : PySide2.QtCore.Signal


class QWebHistoryInterface(_QObject):
    def __init__(*args, **kwargs):
        """
        x.__init__(...) initializes x; see help(type(x)) for signature
        """
        ...
    def addHistoryEntry(*args, **kwargs): ...
    def historyContains(*args, **kwargs): ...
    @staticmethod
    def defaultInterface(*args, **kwargs): ...
    @staticmethod
    def setDefaultInterface(*args, **kwargs): ...
    __new__ : builtin_function_or_method
    
    staticMetaObject : PySide2.QtCore.QMetaObject



