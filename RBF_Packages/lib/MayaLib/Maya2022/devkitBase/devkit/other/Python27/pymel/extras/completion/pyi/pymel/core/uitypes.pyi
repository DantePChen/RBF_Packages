from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import logging
import pymel.internal.startup as _startup
import shiboken2
from . import rendering
from . import windows
from . import effects
from . import system
import pymel.util as _util
from . import general
import sys
import pymel.internal as _internal
from . import animation
import PySide2
import pymel.internal.factories as _f
import re
from . import modeling
import pymel.internal.factories as _factories
import pymel.internal.pmcmds as cmds
import os
from . import other
import maya.mel as _mm
import pymel.versions as _versions


if False:
    from typing import Dict, List, Tuple, Union, Optional

class AELoader(type):
    """
    Metaclass used by `AETemplate` class to create wrapping and loading
    mechanisms when an AETemplate instance is created
    """
    
    
    
    @classmethod
    def loadedTemplates(cls):
        """
        Return the names of the loaded templates
        """
        ...
    @staticmethod
    def __new__(cls, classname, bases, classdict): ...
    @staticmethod
    def load(modname, classname, nodename): ...
    @staticmethod
    def makeAEProc(modname, classname, procname): ...


class UITemplate(object):
    """
    from pymel.core import *
    
    # force deletes the template if it already exists
    template = ui.UITemplate( 'ExampleTemplate', force=True )
    
    template.define( button, width=100, height=40, align='left' )
    template.define( frameLayout, borderVisible=True, labelVisible=False )
    
    #    Create a window and apply the template.
    #
    with window():
        with template:
            with columnLayout( rowSpacing=5 ):
                with frameLayout():
                    with columnLayout():
                        button( label='One' )
                        button( label='Two' )
                        button( label='Three' )
    
                with frameLayout():
                    with columnLayout():
                        button( label='Red' )
                        button( label='Green' )
                        button( label='Blue' )
    """
    
    
    
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def __init__(self, name='None', force='False'): ...
    def __repr__(self) -> str: ...
    def define(self, uiType, **kwargs):
        """
        uiType can be:
            - a ui function or class
            - the name of a ui function or class
            - a list or tuple of the above
        """
        ...
    def name(self): ...
    def pop(self): ...
    def push(self): ...
    @staticmethod
    def exists(name): ...
    __dict__ : dictproxy
    
    __weakref__ : getset_descriptor


class AETemplate(object):
    """
    To create an Attribute Editor template using python, do the following:
         1. create a subclass of `uitypes.AETemplate`
        2. set its ``_nodeType`` class attribute to the name of the desired node type, or name the class using the
    convention ``AE<nodeType>Template``
        3. import the module
    
    AETemplates which do not meet one of the two requirements listed in step 2 will be ignored.  To ensure that your
    Template's node type is being detected correctly, use the ``AETemplate.nodeType()`` class method::
    
        import AETemplates
        AETemplates.AEmib_amb_occlusionTemplate.nodeType()
    
    As a convenience, when pymel is imported it will automatically import the module ``AETemplates``, if it exists,
    thereby causing any AETemplates within it or its sub-modules to be registered. Be sure to import pymel
    or modules containing your ``AETemplate`` classes before opening the Atrribute Editor for the node types in question.
    
    To check which python templates are loaded::
    
        from pymel.core.uitypes import AELoader
        print AELoader.loadedTemplates()
    """
    
    
    
    def __init__(self, nodeName): ...
    def addComponents(self): ...
    def addControl(self, control, label='None', changeCommand='None', annotation='None', preventOverride='False', dynamic='False'): ...
    def addExtraControls(self, label='None'): ...
    def addSeparator(self): ...
    def beginLayout(self, name, collapse='True'): ...
    def beginNoOptimize(self): ...
    def beginScrollLayout(self): ...
    def callCustom(self, newFunc, replaceFunc, *attrs): ...
    def dimControl(self, nodeName, control, state): ...
    def endLayout(self): ...
    def endNoOptimize(self): ...
    def endScrollLayout(self): ...
    def interruptOptimize(self): ...
    def suppress(self, control): ...
    @classmethod
    def controlLabel(cls, nodeName, control): ...
    @classmethod
    def controlValue(cls, nodeName, control): ...
    @classmethod
    def nodeType(cls): ...
    @classmethod
    def reload(cls):
        """
        Reload the template. Beware, this reloads the module in which the template exists!
        """
        ...
    @property
    def nodeName(self): ...
    __dict__ : dictproxy
    
    
    
    __weakref__ : getset_descriptor


class PyUI(unicode):
    def __repr__(self) -> str: ...
    def asQtObject(mayaName):
        """
        Given the name of a May UI control, return the corresponding QWidget.
        If the object does not exist, returns None
        
        .. note:: Requires PySide
        """
        ...
    def delete(*args, **kwargs):
        """
        This command deletes UI objects such as windows and controls.  Deleting a layout
        or window will also delete all of its children.  If a flag is used then all
        objects being deleted must be of the specified type. This command may not be
        edited or queried. NOTE: it is recommended that the type flags be used to
        disambiguate different kinds of objects with the same name.
        
        This command deletes UI objects such as windows and controls.  Deleting a layout
        or window will also delete all of its children.  If a flag is used then all
        objects being deleted must be of the specified type. This command may not be
        edited or queried. NOTE: it is recommended that the type flags be used to
        disambiguate different kinds of objects with the same name.
        
        Flags:
        - collection : cl                (bool)          [create]
            Object names for deletion are all radio or tool collections.
        
        - control : ctl                  (bool)          [create]
            Object names for deletion are all controls.
        
        - editor : ed                    (bool)          [create]
            Object names for deletion are all editors.
        
        - layout : lay                   (bool)          [create]
            Object names for deletion are all layouts.
        
        - menu : m                       (bool)          [create]
            Object names for deletion are all menus.
        
        - menuItem : mi                  (bool)          [create]
            Object names for deletion are all menu items.
        
        - panel : pnl                    (bool)          [create]
            Object names for deletion are all panels.
        
        - panelConfig : pc               (bool)          [create]
            Object names for deletion are panel configurations.
        
        - radioMenuItemCollection : ric  (bool)          [create]
            Object names for deletion are all radio menu item collections.
        
        - toolContext : tc               (bool)          [create]
            Object names for deletion are all tool contexts.
        
        - uiTemplate : uit               (bool)          [create]
            Object names for deletion are all UI templates.
        
        - window : wnd                   (bool)          [create]
            Object names for deletion are all windows.                  Flag can have
            multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.deleteUI`
        
        Flags:
        - collection : cl                (bool)          [create]
            Object names for deletion are all radio or tool collections.
        
        - control : ctl                  (bool)          [create]
            Object names for deletion are all controls.
        
        - editor : ed                    (bool)          [create]
            Object names for deletion are all editors.
        
        - layout : lay                   (bool)          [create]
            Object names for deletion are all layouts.
        
        - menu : m                       (bool)          [create]
            Object names for deletion are all menus.
        
        - menuItem : mi                  (bool)          [create]
            Object names for deletion are all menu items.
        
        - panel : pnl                    (bool)          [create]
            Object names for deletion are all panels.
        
        - panelConfig : pc               (bool)          [create]
            Object names for deletion are panel configurations.
        
        - radioMenuItemCollection : ric  (bool)          [create]
            Object names for deletion are all radio menu item collections.
        
        - toolContext : tc               (bool)          [create]
            Object names for deletion are all tool contexts.
        
        - uiTemplate : uit               (bool)          [create]
            Object names for deletion are all UI templates.
        
        - window : wnd                   (bool)          [create]
            Object names for deletion are all windows.                  Flag can have
            multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.deleteUI`
        """
        ...
    def getParent(self):
        """
        Returns
        -------
        PyUI
        """
        ...
    def name(self):
        """
        Returns
        -------
        unicode
        """
        ...
    def parent(self):
        """
        Returns
        -------
        PyUI
        """
        ...
    def rename(*args, **kwargs):
        """
        This command renames the UI object passed as first arument to the new name
        specified as second argument. If the new name is a duplicate, or not valid, then
        re-naming fails and the old name is returned.
        
        This command renames the UI object passed as first arument to the new name
        specified as second argument. If the new name is a duplicate, or not valid, then
        re-naming fails and the old name is returned.
        
        
        Derived from mel command `maya.cmds.renameUI`
        
        
        Derived from mel command `maya.cmds.renameUI`
        """
        ...
    def shortName(self):
        """
        Returns
        -------
        unicode
        """
        ...
    def type(name, **kwargs):
        """
        This command returns the type of UI element such as button, sliders, etc.
        
        Flags:
        - isType : i                     (unicode)       [create]
            Returns true|false if the object is of the specified type.
        
        - listAll : la                   (bool)          [create]
            Returns a list of all known UI commands and their respective types. Each entry
            contains three strings which are the command name, ui type and class name. Note
            that the class name is internal and is subject to change.
        
        - superClasses : sc              (bool)          [create]
            Returns a list of the names of all super classes for the given object. Note that
            all class names are internal and are subject to change.                  Flag
            can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.objectTypeUI`
        """
        ...
    def window(self):
        """
        Returns
        -------
        Window
        """
        ...
    @classmethod
    def exists(cls, name): ...
    @staticmethod
    def __new__(cls, name='None', create='False', **kwargs):
        """
        Provides the ability to create the PyUI Element when creating a class::
        
            import pymel.core as pm
            n = pm.Window("myWindow",create=True)
            n.__repr__()
            # Result: Window('myWindow')
        """
        ...
    __dict__ : dictproxy
    
    __melui__ : NoneType
    
    __weakref__ : getset_descriptor


class ScriptedPanelType(PyUI):
    def getAddCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for adding the panel to a particular control layout.  The parent layout is guaranteed to be the current default layout when the proc is called.  If its name is required then it can be queried with 'setParent -q'.  Any editors should be parented here. global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getCopyStateCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for copying the state of the panel when a tear-off copy of the panel is made.  The callback proc has the form: global proc procName (string $panelName, string $newPanelName) { .... } This procedure will be executed immediately after the addCallback procedure has finished executing. At that point, the copied panel will be fully created and accessible to facilitate copying of panel settings. Note: the addCallback procedure is called after the createCallback procedure has been called.                   
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getCreateCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for initially creating the panel object.  No UI should be created here.  Any editors owned by the panel should be created here unparented. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getCustomView(self, **kwargs):
        """
        This flag specifies if this view is a custom 3d view for MPx3dModelView types. This flag should only be used for MPx3dModelView types.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getDeleteCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for final deletion of the panel.  The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getHotkeyCtxClient(self, **kwargs):
        """
        This flag is used to specify the name of the hotkey context client for this panel type. By default, it is the same as the panel type.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getInitCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for the initialize callback.  This will be called on file -new and file -open to give the panel an opportunity to re-initialize to a starting state, if required. The panel may be parented or unparented at this time. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label for the panel                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getObsolete(self, **kwargs):
        """
        This flag specifies that this type is no longer used in Maya.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getRemoveCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for removing the panel from its current control layout.  Any editors should be unparented here. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getRetainOnFileOpen(self, **kwargs):
        """
        This flag specifies if panels of this type should be retained after restoring panel cofiguration during file open. Default value is false.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getSaveStateCallback(self, **kwargs):
        """
        This flag specifies the callback procedure for saving the state of the panel.  The callback proc has the form: global proc string procName (string $panelName) { .... } Note that the proc returns a string.  This string will be executed after the createCallback has been called to facilitate restoring the panel state.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def getUnique(self, **kwargs):
        """
        This flag specifies if only one instance of this type of panel can exist at a given time.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setAddCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for adding the panel to a particular control layout.  The parent layout is guaranteed to be the current default layout when the proc is called.  If its name is required then it can be queried with 'setParent -q'.  Any editors should be parented here. global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setCopyStateCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for copying the state of the panel when a tear-off copy of the panel is made.  The callback proc has the form: global proc procName (string $panelName, string $newPanelName) { .... } This procedure will be executed immediately after the addCallback procedure has finished executing. At that point, the copied panel will be fully created and accessible to facilitate copying of panel settings. Note: the addCallback procedure is called after the createCallback procedure has been called.                   
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setCreateCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for initially creating the panel object.  No UI should be created here.  Any editors owned by the panel should be created here unparented. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setCustomView(self, val='True', **kwargs):
        """
        This flag specifies if this view is a custom 3d view for MPx3dModelView types. This flag should only be used for MPx3dModelView types.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setDeleteCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for final deletion of the panel.  The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setHotkeyCtxClient(self, val='True', **kwargs):
        """
        This flag is used to specify the name of the hotkey context client for this panel type. By default, it is the same as the panel type.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setInitCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for the initialize callback.  This will be called on file -new and file -open to give the panel an opportunity to re-initialize to a starting state, if required. The panel may be parented or unparented at this time. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label for the panel                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setObsolete(self, val='True', **kwargs):
        """
        This flag specifies that this type is no longer used in Maya.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setRemoveCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for removing the panel from its current control layout.  Any editors should be unparented here. The callback proc has the form: global proc procName (string $panelName) { .... }                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setRetainOnFileOpen(self, val='True', **kwargs):
        """
        This flag specifies if panels of this type should be retained after restoring panel cofiguration during file open. Default value is false.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setSaveStateCallback(self, val='True', **kwargs):
        """
        This flag specifies the callback procedure for saving the state of the panel.  The callback proc has the form: global proc string procName (string $panelName) { .... } Note that the proc returns a string.  This string will be executed after the createCallback has been called to facilitate restoring the panel state.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    def setUnique(self, val='True', **kwargs):
        """
        This flag specifies if only one instance of this type of panel can exist at a given time.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command defines the callbacks for a type of scripted panel.  The panel type
        created by this command is then used when creating a scripted panel.  See also
        the 'scriptedPanel' command.
        
        Flags:
        - addCallback : acb              (unicode)       [create,query,edit]
            This flag specifies the callback procedure for adding the panel to a particular
            control layout.  The parent layout is guaranteed to be the current default
            layout when the proc is called.  If its name is required then it can be queried
            with 'setParent -q'.  Any editors should be parented here. global proc procName
            (string $panelName) { .... }
        
        - copyStateCallback : ocb        (unicode)       [create,query,edit]
            This flag specifies the callback procedure for copying the state of the panel
            when a tear-off copy of the panel is made.  The callback proc has the form:
            global proc procName (string $panelName, string $newPanelName) { .... } This
            procedure will be executed immediately after the addCallback procedure has
            finished executing. At that point, the copied panel will be fully created and
            accessible to facilitate copying of panel settings. Note: the addCallback
            procedure is called after the createCallback procedure has been called.
        
        - createCallback : ccb           (unicode)       [create,query,edit]
            This flag specifies the callback procedure for initially creating the panel
            object.  No UI should be created here.  Any editors owned by the panel should be
            created here unparented. The callback proc has the form: global proc procName
            (string $panelName) { .... }
        
        - customView : cv                (bool)          [create,query,edit]
            This flag specifies if this view is a custom 3d view for MPx3dModelView types.
            This flag should only be used for MPx3dModelView types.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteCallback : dcb           (unicode)       [create,query,edit]
            This flag specifies the callback procedure for final deletion of the panel.  The
            callback proc has the form: global proc procName (string $panelName) { .... }
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - hotkeyCtxClient : hkc          (unicode)       [create,query,edit]
            This flag is used to specify the name of the hotkey context client for this
            panel type. By default, it is the same as the panel type.
        
        - initCallback : icb             (unicode)       [create,query,edit]
            This flag specifies the callback procedure for the initialize callback.  This
            will be called on file -new and file -open to give the panel an opportunity to
            re-initialize to a starting state, if required. The panel may be parented or
            unparented at this time. The callback proc has the form: global proc procName
            (string $panelName) { .... }
        
        - label : l                      (unicode)       [create,query,edit]
            Label for the panel
        
        - obsolete : o                   (bool)          [create,query,edit]
            This flag specifies that this type is no longer used in Maya.
        
        - removeCallback : rcb           (unicode)       [create,query,edit]
            This flag specifies the callback procedure for removing the panel from its
            current control layout.  Any editors should be unparented here. The callback
            proc has the form: global proc procName (string $panelName) { .... }
        
        - retainOnFileOpen : rfo         (bool)          [create,query,edit]
            This flag specifies if panels of this type should be retained after restoring
            panel cofiguration during file open. Default value is false.
        
        - saveStateCallback : scb        (unicode)       [create,query,edit]
            This flag specifies the callback procedure for saving the state of the panel.
            The callback proc has the form: global proc string procName (string $panelName)
            { .... } Note that the proc returns a string.  This string will be executed
            after the createCallback has been called to facilitate restoring the panel
            state.
        
        - unique : u                     (bool)          [create,query,edit]
            This flag specifies if only one instance of this type of panel can exist at a
            given time.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.scriptedPanelType`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatScrollBar(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the scroll bar's value marker.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getLargeStep(self, **kwargs):
        """
        Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getStep(self, **kwargs):
        """
        Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setLargeStep(self, val='True', **kwargs):
        """
        Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a scroll bar control that accepts only float values and is bound by a
        minimum and maximum value.  The scroll bar displays a marker indicating the
        current value of the scroll bar relative to its minimum and maximum values.
        Click and drag the marker or on the scroll bar itself to change the current
        value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/value flag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the scroll bar's value
            marker.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query]
            Orientation of the slider.  This flag is true by default, which corresponds to a
            horizontally oriented slider.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - largeStep : ls                 (float)         [create,query,edit]
            Larger increment for the scroll bar, ie. the increment used when the press is
            between the arrow button and the thumb.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Upper limit of the scroll bar.
        
        - minValue : min                 (float)         [create,query,edit]
            Lower limit of the scroll bar.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Smaller increment for the scroll bar, ie. the increment used when the arrow
            buttons are pressed.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float)         [create,query,edit]
            Value of the scroll bar.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatScrollBar`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CmdScrollFieldExecuter(PyUI):
    def appendText(self, val='True', **kwargs):
        """
        Appends text to the end of this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def clear(self, val='True', **kwargs):
        """
        Clears the field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def copySelection(self, val='True', **kwargs):
        """
        Copies the current selection from this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def cutSelection(self, val='True', **kwargs):
        """
        Cuts the current selection from this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def execute(self, val='True', **kwargs):
        """
        Executes the current selection.  If there is no selection, all text is executed.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def executeAll(self, val='True', **kwargs):
        """
        Executes all text.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def fileChangedCommand(self, val='True', **kwargs):
        """
        Only valid when this field contains a file. Sets a script which will be called whenever the file is externally modified, renamed or removed from disk. In MEL, the function should have the following signature: proc fileChanged(string $file)
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getAutoCloseBraces(self, **kwargs):
        """
        Specifies whether a closing brace should automatically be added when hitting enter after an opening brace. (default on)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getCommandCompletion(self, **kwargs):
        """
        Enable/disable command completion                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getCurrentLine(self, **kwargs):
        """
        Sets/returns the current line which the cursor is on.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getFilename(self, **kwargs):
        """
        Returns the full path + filename of the script which was either loaded or saved. If there isn't one returns an empty string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getFilterKeyPress(self, **kwargs):
        """
        Sets a script which will be called to handle key-press events. The function should have the following signature: proc int filterKeyPress(int $modifiers, string $key)modifiers: a bit mask where Shift is bit 1, Ctrl is bit 3, Alt is bit 4, and bit 5 is the 'Windows' key on Windows keyboards and the Command key on Mac keyboards. key: Specifies what key was pressed. The key is either a single ascii character or one of the keyword strings for the special keyboard characters. For example: Up, Down, Right, Left, Home, End, Page_Up, Page_Down, Insert Return, Space F1 to F12 The function should return 1 to indicate that they key event has been handled, and 0 to indicate that it has not been handled.                   
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getHasFocus(self, **kwargs):
        """
        Whether this control is currently in focus.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getHasSelection(self, **kwargs):
        """
        Whether this control currently has a selection or not.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getModified(self, **kwargs):
        """
        Sets or returns whether the field has been modified.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getNumberOfLines(self, **kwargs):
        """
        Returns the total number of lines in the document.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getObjectPathCompletion(self, **kwargs):
        """
        Enable/disable path completion                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSearchAndSelect(self, **kwargs):
        """
        Searches for (and selects) the specified search string using the specified search options.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSearchDown(self, **kwargs):
        """
        Specifies whether to search from the cursor down, or up.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSearchMatchCase(self, **kwargs):
        """
        Specifies whether the search is to be case sensitive or not.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSearchString(self, **kwargs):
        """
        Specifies the string to search for.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSearchWraps(self, **kwargs):
        """
        Specifies whether the search should wrap around.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSelectedText(self, **kwargs):
        """
        The text in the current selection range.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getShowLineNumbers(self, **kwargs):
        """
        Shows/hides the line numbes column.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getShowTooltipHelp(self, **kwargs):
        """
        Enable/disable tooltips in the command execution window                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSourceType(self, **kwargs):
        """
        Sets the source type for this command executer field. Valid values are mel(enabled by default) and python.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getSpacesPerTab(self, **kwargs):
        """
        Specifies the number of spaces equivalent to one tab stop. (default 4)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getTabsForIndent(self, **kwargs):
        """
        Specifies whether tab characters should be inserted when indenting. (default on)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getText(self, **kwargs):
        """
        Replaces the field text with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getTextLength(self, **kwargs):
        """
        The number of characters in this text field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def insertText(self, val='True', **kwargs):
        """
        Inserts the specified text into the position under the cursor, replacing any currently selected text. The selection and cursor position can be set using the selectflag. Appends text to the end of this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def load(self, val='True', **kwargs):
        """
        Prompts the user for a script to load into this field.  The loaded filename becomes associated with this executer field and saving will save directly to the file.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def loadContents(self, val='True', **kwargs):
        """
        Loads the contents of the specified filename into this field.  The path and extension for this filename is provided internally.  This command is only intended for loading the contents of this executer field from a previous instance of this executer field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def loadFile(self, val='True', **kwargs):
        """
        If the provided string is a fully specified file path, then attempts to load the file contents into this field.  If the string is empty or not valid then prompts the user for a script to load into this field.  In both cases the filename becomes associated with this executer field and saving will save directly to the file.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def modificationChangedCommand(self, val='True', **kwargs):
        """
        Sets a script which will be called whenever the content of this field changes in a way that affects the modification state. In MEL, the function should have the following signature: proc modificationChanged(int $m)If $m is true, the field has been modified; otherwise it is false.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def pasteSelection(self, val='True', **kwargs):
        """
        Pastes text into this field at the current caret position.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def redo(self, val='True', **kwargs):
        """
        Redo the last operation.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def removeStoredContents(self, val='True', **kwargs):
        """
        Removes the stored contents of this field with the specified filename.  The path and extension for the file is provided internally.  This command is only intended for removing previously stored contents of this executer field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def replaceAll(self, val='True', **kwargs):
        """
        Replaces all instances of the first string in the field text with the second string.  The case sensitivity of this operation is set with the -searchMatchCaseflag.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def saveFile(self, val='True', **kwargs):
        """
        Saves the entire script contents of this field directly to the specified file path.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def saveSelection(self, val='True', **kwargs):
        """
        Prompts to save the current selection to a file.  The default filename prompt will be prepended with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def saveSelectionToShelf(self, val='True', **kwargs):
        """
        Prompts to save the current selection to an item in the shelf.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def select(self, val='True', **kwargs):
        """
        Selects text within a specified range.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def selectAll(self, val='True', **kwargs):
        """
        Selects all text.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setAutoCloseBraces(self, val='True', **kwargs):
        """
        Specifies whether a closing brace should automatically be added when hitting enter after an opening brace. (default on)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setCommandCompletion(self, val='True', **kwargs):
        """
        Enable/disable command completion                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setCurrentLine(self, val='True', **kwargs):
        """
        Sets/returns the current line which the cursor is on.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setFilterKeyPress(self, val='True', **kwargs):
        """
        Sets a script which will be called to handle key-press events. The function should have the following signature: proc int filterKeyPress(int $modifiers, string $key)modifiers: a bit mask where Shift is bit 1, Ctrl is bit 3, Alt is bit 4, and bit 5 is the 'Windows' key on Windows keyboards and the Command key on Mac keyboards. key: Specifies what key was pressed. The key is either a single ascii character or one of the keyword strings for the special keyboard characters. For example: Up, Down, Right, Left, Home, End, Page_Up, Page_Down, Insert Return, Space F1 to F12 The function should return 1 to indicate that they key event has been handled, and 0 to indicate that it has not been handled.                   
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setModified(self, val='True', **kwargs):
        """
        Sets or returns whether the field has been modified.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setObjectPathCompletion(self, val='True', **kwargs):
        """
        Enable/disable path completion                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setSearchDown(self, val='True', **kwargs):
        """
        Specifies whether to search from the cursor down, or up.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setSearchMatchCase(self, val='True', **kwargs):
        """
        Specifies whether the search is to be case sensitive or not.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setSearchString(self, val='True', **kwargs):
        """
        Specifies the string to search for.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setSearchWraps(self, val='True', **kwargs):
        """
        Specifies whether the search should wrap around.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setShowLineNumbers(self, val='True', **kwargs):
        """
        Shows/hides the line numbes column.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setShowTooltipHelp(self, val='True', **kwargs):
        """
        Enable/disable tooltips in the command execution window                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setSpacesPerTab(self, val='True', **kwargs):
        """
        Specifies the number of spaces equivalent to one tab stop. (default 4)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setTabsForIndent(self, val='True', **kwargs):
        """
        Specifies whether tab characters should be inserted when indenting. (default on)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        Replaces the field text with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def source(self, val='True', **kwargs):
        """
        Prompts the user for a script to source (execute without loading).                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def storeContents(self, val='True', **kwargs):
        """
        If the provided string is a fully specified file path, then attempts to store the contents of this field to that path. Otherwise, uses the provided string as a filename only and uses an internally generated path and extension for the file, as used by the -loadContents and -removeStoredContents flags. In both cases, a new unique filename will be generated if the specified name exists. Returns the filename of the file saved upon completion, and an empty string otherwise.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    def undo(self, val='True', **kwargs):
        """
        Undo the last operation.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        A script editor executer control used to issue script commands to Maya.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - appendText : at                (unicode)       [create,edit]
            Appends text to the end of this field.
        
        - autoCloseBraces : acb          (bool)          [create,query,edit]
            Specifies whether a closing brace should automatically be added when hitting
            enter after an opening brace. (default on)
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - clear : clr                    (bool)          [create,edit]
            Clears the field.
        
        - commandCompletion : cco        (bool)          [create,query,edit]
            Enable/disable command completion
        
        - copySelection : cp             (bool)          [create,edit]
            Copies the current selection from this field.
        
        - currentLine : cl               (int)           [create,query,edit]
            Sets/returns the current line which the cursor is on.
        
        - cutSelection : ct              (bool)          [create,edit]
            Cuts the current selection from this field.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - execute : exc                  (bool)          [create,edit]
            Executes the current selection.  If there is no selection, all text is executed.
        
        - executeAll : exa               (bool)          [create,edit]
            Executes all text.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fileChangedCommand : fcc       (script)        [create,edit]
            Only valid when this field contains a file. Sets a script which will be called
            whenever the file is externally modified, renamed or removed from disk. In MEL,
            the function should have the following signature: proc fileChanged(string $file)
        
        - filename : fn                  (bool)          [query]
            Returns the full path + filename of the script which was either loaded or saved.
            If there isn't one returns an empty string.
        
        - filterKeyPress : fkp           (script)        [create,query,edit]
            Sets a script which will be called to handle key-press events. The function
            should have the following signature: proc int filterKeyPress(int $modifiers,
            string $key)modifiers: a bit mask where Shift is bit 1, Ctrl is bit 3, Alt is
            bit 4, and bit 5 is the 'Windows' key on Windows keyboards and the Command key
            on Mac keyboards. key: Specifies what key was pressed. The key is either a
            single ascii character or one of the keyword strings for the special keyboard
            characters. For example: Up, Down, Right, Left, Home, End, Page_Up, Page_Down,
            Insert Return, Space F1 to F12 The function should return 1 to indicate that
            they key event has been handled, and 0 to indicate that it has not been handled.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - hasFocus : hf                  (bool)          [query]
            Whether this control is currently in focus.
        
        - hasSelection : hsl             (bool)          [query]
            Whether this control currently has a selection or not.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - indentSelection : isl          (bool)          []
        
        - insertText : it                (unicode)       [create,edit]
            Inserts the specified text into the position under the cursor, replacing any
            currently selected text. The selection and cursor position can be set using the
            selectflag. Appends text to the end of this field.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - load : ld                      (bool)          [create,edit]
            Prompts the user for a script to load into this field.  The loaded filename
            becomes associated with this executer field and saving will save directly to the
            file.
        
        - loadContents : ldc             (unicode)       [create,edit]
            Loads the contents of the specified filename into this field.  The path and
            extension for this filename is provided internally.  This command is only
            intended for loading the contents of this executer field from a previous
            instance of this executer field.
        
        - loadFile : ldf                 (unicode)       [create,edit]
            If the provided string is a fully specified file path, then attempts to load the
            file contents into this field.  If the string is empty or not valid then prompts
            the user for a script to load into this field.  In both cases the filename
            becomes associated with this executer field and saving will save directly to the
            file.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - modificationChangedCommand : mcc (script)        [create,edit]
            Sets a script which will be called whenever the content of this field changes in
            a way that affects the modification state. In MEL, the function should have the
            following signature: proc modificationChanged(int $m)If $m is true, the field
            has been modified; otherwise it is false.
        
        - modified : mod                 (bool)          [query,edit]
            Sets or returns whether the field has been modified.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfLines : nl             (int)           [query]
            Returns the total number of lines in the document.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - objectPathCompletion : opc     (bool)          [create,query,edit]
            Enable/disable path completion
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - pasteSelection : pst           (bool)          [create,edit]
            Pastes text into this field at the current caret position.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (callable)      []
        
        - redo : rd                      (bool)          [create,edit]
            Redo the last operation.
        
        - removeStoredContents : rsc     (unicode)       [create,edit]
            Removes the stored contents of this field with the specified filename.  The path
            and extension for the file is provided internally.  This command is only
            intended for removing previously stored contents of this executer field.
        
        - replaceAll : rpa               (unicode, unicode) [create,edit]
            Replaces all instances of the first string in the field text with the second
            string.  The case sensitivity of this operation is set with the
            -searchMatchCaseflag.
        
        - saveFile : svf                 (unicode)       [create,edit]
            Saves the entire script contents of this field directly to the specified file
            path.
        
        - saveSelection : sv             (unicode)       [create,edit]
            Prompts to save the current selection to a file.  The default filename prompt
            will be prepended with the given string.
        
        - saveSelectionToShelf : svs     (bool)          [create,edit]
            Prompts to save the current selection to an item in the shelf.
        
        - searchAndSelect : sas          (bool)          [query]
            Searches for (and selects) the specified search string using the specified
            search options.
        
        - searchDown : sd                (bool)          [create,query,edit]
            Specifies whether to search from the cursor down, or up.
        
        - searchMatchCase : smc          (bool)          [create,query,edit]
            Specifies whether the search is to be case sensitive or not.
        
        - searchString : ss              (unicode)       [create,query,edit]
            Specifies the string to search for.
        
        - searchWraps : sw               (bool)          [create,query,edit]
            Specifies whether the search should wrap around.
        
        - select : sl                    (int, int)      [create,edit]
            Selects text within a specified range.
        
        - selectAll : sla                (bool)          [create,edit]
            Selects all text.
        
        - selectedText : slt             (bool)          [query]
            The text in the current selection range.
        
        - showLineNumbers : sln          (bool)          [create,query,edit]
            Shows/hides the line numbes column.
        
        - showTooltipHelp : sth          (bool)          [create,query,edit]
            Enable/disable tooltips in the command execution window
        
        - source : src                   (bool)          [create,edit]
            Prompts the user for a script to source (execute without loading).
        
        - sourceType : st                (unicode)       [create,query]
            Sets the source type for this command executer field. Valid values are
            mel(enabled by default) and python.
        
        - spacesPerTab : spt             (int)           [create,query,edit]
            Specifies the number of spaces equivalent to one tab stop. (default 4)
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - storeContents : stc            (unicode)       [create,edit]
            If the provided string is a fully specified file path, then attempts to store
            the contents of this field to that path. Otherwise, uses the provided string as
            a filename only and uses an internally generated path and extension for the
            file, as used by the -loadContents and -removeStoredContents flags. In both
            cases, a new unique filename will be generated if the specified name exists.
            Returns the filename of the file saved upon completion, and an empty string
            otherwise.
        
        - tabsForIndent : tfi            (bool)          [create,query,edit]
            Specifies whether tab characters should be inserted when indenting. (default on)
        
        - text : t                       (unicode)       [create,query,edit]
            Replaces the field text with the given string.
        
        - textLength : tl                (bool)          [query]
            The number of characters in this text field.
        
        - undo : ud                      (bool)          [create,edit]
            Undo the last operation.
        
        - unindentSelection : usl        (bool)          []
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldExecuter`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Menu(PyUI):
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def deleteAllItems(self, val='True', **kwargs):
        """
        Delete all the items in this menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getAllowOptionBoxes(self, **kwargs):
        """
        Deprecated. All menus now always allow option boxes. Indicate whether the menu will be able to support option box menu items.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getEnable(self, **kwargs):
        """
        Enables/disables the menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getFamilyImage(self, **kwargs):
        """
        The filename of the icon associated with the menu. This icon will be used if a menu item does not have an icon image defined.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getHelpMenu(self, **kwargs):
        """
        Indicates that this menu is the help menu and will be the right most menu in the menu bar. On Unix systems the help menu is also right justified in the menu bar.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getItemArray(self):
        """
        Modified to return pymel instances
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that is displayed for the menu.  If no label is supplied then the menuName will be used.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getMnemonic(self, **kwargs):
        """
        Set the Alt key to post that menu.  The character specified must match the case of its corresponding character in the menu item text, but selection from the keyboard is case insensitive.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getNumberOfItems(self, **kwargs):
        """
        Return number of items in the menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getPostMenuCommandOnce(self, **kwargs):
        """
        Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the menu is shown.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getScrollable(self, **kwargs):
        """
        Make the popup menus support scrolling. Default value is false.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this menu feature was introduced. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def getVisible(self, **kwargs):
        """
        Shows/hides the menu.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def makeDefault(self):
        """
        set this layout as the default parent
        """
        ...
    def postMenuCommand(self, val='True', **kwargs):
        """
        Specify a script to be executed when the menu is about to be shown.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        Enables/disables the menu.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setFamilyImage(self, val='True', **kwargs):
        """
        The filename of the icon associated with the menu. This icon will be used if a menu item does not have an icon image defined.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setHelpMenu(self, val='True', **kwargs):
        """
        Indicates that this menu is the help menu and will be the right most menu in the menu bar. On Unix systems the help menu is also right justified in the menu bar.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that is displayed for the menu.  If no label is supplied then the menuName will be used.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setMnemonic(self, val='True', **kwargs):
        """
        Set the Alt key to post that menu.  The character specified must match the case of its corresponding character in the menu item text, but selection from the keyboard is case insensitive.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setPostMenuCommandOnce(self, val='True', **kwargs):
        """
        Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the menu is shown.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setScrollable(self, val='True', **kwargs):
        """
        Make the popup menus support scrolling. Default value is false.                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this menu feature was introduced. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        Shows/hides the menu.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a new menu and adds it to the default window's menubar if
        no parent is specified.  The menu can be enabled/disabled. Note that this
        command may also be used on menu objects created using the command menuItem
        -sm/subMenu true.
        
        Flags:
        - allowOptionBoxes : aob         (bool)          [create,query]
            Deprecated. All menus now always allow option boxes. Indicate whether the menu
            will be able to support option box menu items.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteAllItems : dai           (bool)          [create,edit]
            Delete all the items in this menu.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the menu.
        
        - enable : en                    (bool)          [create,query,edit]
            Enables/disables the menu.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - familyImage : fi               (unicode)       [create,query,edit]
            The filename of the icon associated with the menu. This icon will be used if a
            menu item does not have an icon image defined.
        
        - helpMenu : hm                  (bool)          [create,query,edit]
            Indicates that this menu is the help menu and will be the right most menu in the
            menu bar. On Unix systems the help menu is also right justified in the menu bar.
        
        - itemArray : ia                 (bool)          [query]
            Return string array of the menu item names.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that is displayed for the menu.  If no label is supplied then the
            menuName will be used.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g.
            2014.5 should be given as 2014).
        
        - mnemonic : mn                  (unicode)       [create,query,edit]
            Set the Alt key to post that menu.  The character specified must match the case
            of its corresponding character in the menu item text, but selection from the
            keyboard is case insensitive.
        
        - numberOfItems : ni             (bool)          [query]
            Return number of items in the menu.
        
        - parent : p                     (unicode)       [create]
            Specify the window that the menu will appear in.
        
        - postMenuCommand : pmc          (script)        [create,edit]
            Specify a script to be executed when the menu is about to be shown.
        
        - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
            Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is
            false, ie. the -pmc/postMenuCommandis invoked every time the menu is shown.
        
        - scrollable : srb               (bool)          [create,query,edit]
            Make the popup menus support scrolling. Default value is false.
        
        - tearOff : to                   (bool)          [create]
            Makes the menu tear-off-able.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this menu feature was introduced. The argument should
            be given as a string of the version number (e.g. 2014, 2015). Currently only
            accepts major version numbers (e.g. 2014.5 should be given as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            Shows/hides the menu.                  Flag can have multiple arguments, passed
            either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.menu`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class TextCurves(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The textCurves command creates NURBS curves from a text string using the
        specified font. A single letter can be made up of more than one NURBS curve. The
        number of curves per letter varies with the font.
        
        Flags:
        - caching : cch                  (bool)          []
        
        - constructionHistory : ch       (bool)          []
        
        - deprecatedFontName : dfn       (bool)          []
        
        - font : f                       (unicode)       [create]
            The font to use.
        
        - frozen : fzn                   (bool)          []
        
        - name : n                       (unicode)       [create]
            Sets the name of the newly-created node. If it contains namespace path, the new
            node will be created under the specified namespace; if the namespace does not
            exist, it will be created.
        
        - nodeState : nds                (int)           []
        
        - object : o                     (bool)          [create]
            Create the result, or just the dependency node.
        
        - text : t                       (unicode)       [create]
            The string to create the curves for.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.textCurves`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ExclusiveLightCheckBox(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def label(self, val='True', **kwargs):
        """
        Value of the checkbox label                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a checkBox that controls a light's exclusive non-exclusive
        status.  An exclusive light is one that is not hooked up to the default-light-
        list, thus it does not illuminate all objects be default.  However an exclusive
        light can be linked to an object.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,edit]
            Value of the checkbox label
        
        - light : lt                     (PyNode)        [create]
            The light that is to be made exclusive/non-exclusive.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.exclusiveLightCheckBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DefaultLightListCheckBox(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def label(self, val='True', **kwargs):
        """
        Value of the checkbox label                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def shadingGroup(self, val='True', **kwargs):
        """
        The shading group that is to be connected/disconnected from the defaultLightList.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a checkBox that controls whether a shadingGroup is
        connected/disconnected from the defaultLightList.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,edit]
            Value of the checkbox label
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - shadingGroup : sg              (PyNode)        [create,edit]
            The shading group that is to be connected/disconnected from the
            defaultLightList.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.defaultLightListCheckBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IconTextRadioButton(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getFlat(self, **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getHighlightImage(self, **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getOffCommand(self, **kwargs):
        """
        Command executed when the control is turned off.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getOnCommand(self, **kwargs):
        """
        Command executed when the control is turned on.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Will set this button as the selected one.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getSelectionHighlightImage(self, **kwargs):
        """
        Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getSelectionImage(self, **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setFlat(self, val='True', **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setHighlightImage(self, val='True', **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setOffCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned off.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setOnCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned on.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Will set this button as the selected one.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setSelectionHighlightImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setSelectionImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates a iconTextRadioButton that is
        added to the most recently created iconTextRadioCollection unless the
        -cl/cluster flag is used.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,query,edit]
            Command executed when the control's state is changed. Note that this flag should
            not be used in conjunction with onCommand and offCommand. That is, one should
            either use changeCommand and test the state of the control from inside the
            callback, or use onCommand and offCommand as separate callbacks.
        
        - collection : cl                (unicode)       [create]
            To explicitly add the control to the specified collection.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flat : fla                     (bool)          [create,query,edit]
            Sets whether the control will be a flat button (0 false, 1 true).
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - highlightImage : hi            (unicode)       [create,query,edit]
            Highlight image displayed while the cursor is over the control. Image size must
            be the same as the image specified with the -i/imageflag. This is a Windows only
            flag.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,query,edit]
            Command executed when the control is turned off.
        
        - onCommand : onc                (script)        [create,query,edit]
            Command executed when the control is turned on.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - select : sl                    (bool)          [create,query,edit]
            Will set this button as the selected one.
        
        - selectionHighlightImage : shi  (unicode)       [create,query,edit]
            Image displayed while the control is selected and the cursor is over the
            control. Image size must be the same as the image specified with the
            -i/imageflag. This is a Windows only flag.
        
        - selectionImage : si            (unicode)       [create,query,edit]
            Image displayed while the control is selected. Image size must be the same as
            the image specified with the -i/imageflag. This is a Windows only flag.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextRadioButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AnimCurveEditor(PyUI):
    """
    # ------ Do not edit below this line --------
    """
    
    
    
    def denormalizeCurvesCommand(self, val='True', **kwargs):
        """
        Sets the script that is run to denormalize curves in the graph editor. This is intended for internal use only.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayActiveKeyTangents(self, val='True', **kwargs):
        """
        on | off | tgl Display active key tangents in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayActiveKeys(self, val='True', **kwargs):
        """
        on | off | tgl Display active keys in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayInfinities(self, val='True', **kwargs):
        """
        on | off | tgl Display infinities in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayKeys(self, val='True', **kwargs):
        """
        on | off | tgl Display keyframes in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayTangents(self, val='True', **kwargs):
        """
        on | off | tgl Display tangents in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def displayValues(self, val='True', **kwargs):
        """
        on | off | tgl Display active keys and tangents values in the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getAreCurvesSelected(self, **kwargs):
        """
        Returns a boolean to know if at least one curve is selected in the graph editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getAutoFit(self, **kwargs):
        """
        on | off | tgl Auto fit-to-view.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getAutoFitTime(self, **kwargs):
        """
        on | off | tgl Auto fit-to-view along the time axis, as well.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getClassicMode(self, **kwargs):
        """
        When on, the graph editor is displayed in Classic Mode, otherwise Suites Modeis used.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getClipTime(self, **kwargs):
        """
        Valid values: onoffDisplay the clips with their offset and scale applied to the anim curves in the clip.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getConstrainDrag(self, **kwargs):
        """
        Constrains all Graph Editor animation curve drag operations to either the X-axis, the Y-axis, or to neither of those axes. Values to supply are: 0 for not constraining any axis, 1 for constraing the X-axis, or 2 for constraining the Y-axis. When used in queries, this flag returns the latter values and these values have the same interpretation as above. Note: when the shift key is pressed before dragging the animation curve, the first mouse movement will instead determine (and override) any prior set constrained axis.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getCurvesShown(self, **kwargs):
        """
        Returns a string array containing the names of the animCurve nodes currently displayed in the graph editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getCurvesShownForceUpdate(self, **kwargs):
        """
        Returns a string array containing the names of the animCurve nodes currently displayed in the graph editor. Unlike the curvesShown flag, this will force an update of the graph editor for the case where the mainListConnection has been modified since the last refresh.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getDisplayNormalized(self, **kwargs):
        """
        When on, display all curves normalized to the range -1 to +1.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getKeyingTime(self, **kwargs):
        """
        The current time in the given curve to be keyed in the graph editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getOutliner(self, **kwargs):
        """
        The name of the outliner that is associated with the graph editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getPreSelectionHighlight(self, **kwargs):
        """
        When on, the curve/key/tangent under the mouse pointer is highlighted to ease selection.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getResultSamples(self, **kwargs):
        """
        Specify the sampling for result curves Note: the smaller this number is, the longer it will take to update the display.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getResultScreenSamples(self, **kwargs):
        """
        Specify the screen base result sampling for result curves. If 0, then results are sampled in time.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getResultUpdate(self, **kwargs):
        """
        Valid values: interactivedelayedControls how changes to animCurves are reflected in the result curves (if results are being shown).  If resultUpdate is interactive, then as interactive changes are being made to the animCurve, the result curves will be updated.  If modelUpdate is delayed (which is the default setting), then result curves are updated once the final change to an animCurve has been made.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getShowActiveCurveNames(self, **kwargs):
        """
        Display the active curve(s)'s name.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getShowBufferCurves(self, **kwargs):
        """
        Valid values: onofftglDisplay buffer curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getShowCurveNames(self, **kwargs):
        """
        Display the curves's name.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getShowResults(self, **kwargs):
        """
        Valid values: onofftglDisplay result curves from expression or other non-keyed action.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getShowUpstreamCurves(self, **kwargs):
        """
        If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getSmoothness(self, **kwargs):
        """
        Valid values: coarseroughmediumfineSpecify the display smoothness of animation curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getSnapTime(self, **kwargs):
        """
        none | integer | keyframe Keyframe move snap in time.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getSnapValue(self, **kwargs):
        """
        none | integer | keyframe Keyframe move snap in values.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getStackedCurves(self, **kwargs):
        """
        Switches the display mode between normal (all curves sharing one set of axes) to stacked (each curve on its own value axis, stacked vertically).                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getStackedCurvesMax(self, **kwargs):
        """
        Sets the maximum value on the per-curve value axis when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getStackedCurvesMin(self, **kwargs):
        """
        Sets the minimum value on the per-curve value axis when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getStackedCurvesSpace(self, **kwargs):
        """
        Sets the spacing between curves when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def lookAt(self, val='True', **kwargs):
        """
        all | selected | currentTime FitView helpers.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def normalizeCurvesCommand(self, val='True', **kwargs):
        """
        Sets the script that is run to normalize curves in the graph editor. This is intended for internal use only.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def renormalizeCurves(self, val='True', **kwargs):
        """
        This flag causes the curve normalization factors to be recalculated.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setAutoFit(self, val='True', **kwargs):
        """
        on | off | tgl Auto fit-to-view.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setAutoFitTime(self, val='True', **kwargs):
        """
        on | off | tgl Auto fit-to-view along the time axis, as well.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setClassicMode(self, val='True', **kwargs):
        """
        When on, the graph editor is displayed in Classic Mode, otherwise Suites Modeis used.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setClipTime(self, val='True', **kwargs):
        """
        Valid values: onoffDisplay the clips with their offset and scale applied to the anim curves in the clip.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setConstrainDrag(self, val='True', **kwargs):
        """
        Constrains all Graph Editor animation curve drag operations to either the X-axis, the Y-axis, or to neither of those axes. Values to supply are: 0 for not constraining any axis, 1 for constraing the X-axis, or 2 for constraining the Y-axis. When used in queries, this flag returns the latter values and these values have the same interpretation as above. Note: when the shift key is pressed before dragging the animation curve, the first mouse movement will instead determine (and override) any prior set constrained axis.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setDisplayNormalized(self, val='True', **kwargs):
        """
        When on, display all curves normalized to the range -1 to +1.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setOutliner(self, val='True', **kwargs):
        """
        The name of the outliner that is associated with the graph editor.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setPreSelectionHighlight(self, val='True', **kwargs):
        """
        When on, the curve/key/tangent under the mouse pointer is highlighted to ease selection.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setResultSamples(self, val='True', **kwargs):
        """
        Specify the sampling for result curves Note: the smaller this number is, the longer it will take to update the display.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setResultScreenSamples(self, val='True', **kwargs):
        """
        Specify the screen base result sampling for result curves. If 0, then results are sampled in time.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setResultUpdate(self, val='True', **kwargs):
        """
        Valid values: interactivedelayedControls how changes to animCurves are reflected in the result curves (if results are being shown).  If resultUpdate is interactive, then as interactive changes are being made to the animCurve, the result curves will be updated.  If modelUpdate is delayed (which is the default setting), then result curves are updated once the final change to an animCurve has been made.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setShowActiveCurveNames(self, val='True', **kwargs):
        """
        Display the active curve(s)'s name.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setShowBufferCurves(self, val='True', **kwargs):
        """
        Valid values: onofftglDisplay buffer curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setShowCurveNames(self, val='True', **kwargs):
        """
        Display the curves's name.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setShowResults(self, val='True', **kwargs):
        """
        Valid values: onofftglDisplay result curves from expression or other non-keyed action.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setShowUpstreamCurves(self, val='True', **kwargs):
        """
        If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setSmoothness(self, val='True', **kwargs):
        """
        Valid values: coarseroughmediumfineSpecify the display smoothness of animation curves.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setSnapTime(self, val='True', **kwargs):
        """
        none | integer | keyframe Keyframe move snap in time.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setSnapValue(self, val='True', **kwargs):
        """
        none | integer | keyframe Keyframe move snap in values.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setStackedCurves(self, val='True', **kwargs):
        """
        Switches the display mode between normal (all curves sharing one set of axes) to stacked (each curve on its own value axis, stacked vertically).                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setStackedCurvesMax(self, val='True', **kwargs):
        """
        Sets the maximum value on the per-curve value axis when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setStackedCurvesMin(self, val='True', **kwargs):
        """
        Sets the minimum value on the per-curve value axis when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def setStackedCurvesSpace(self, val='True', **kwargs):
        """
        Sets the spacing between curves when in stacked mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    def valueLinesToggle(self, val='True', **kwargs):
        """
        on | off | tgl Display the value lines for high/low/zero of selected curves in the editor                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Edit a characteristic of a graph editor
        
        Flags:
        - areCurvesSelected : acs        (bool)          [query]
            Returns a boolean to know if at least one curve is selected in the graph editor.
        
        - autoFit : af                   (unicode)       [query,edit]
            on | off | tgl Auto fit-to-view.
        
        - autoFitTime : aft              (unicode)       [query,edit]
            on | off | tgl Auto fit-to-view along the time axis, as well.
        
        - classicMode : cm               (bool)          [query,edit]
            When on, the graph editor is displayed in Classic Mode, otherwise Suites Modeis
            used.
        
        - clipTime : ct                  (unicode)       [query,edit]
            Valid values: onoffDisplay the clips with their offset and scale applied to the
            anim curves in the clip.
        
        - constrainDrag : cd             (int)           [create,query,edit]
            Constrains all Graph Editor animation curve drag operations to either the
            X-axis, the Y-axis, or to neither of those axes. Values to supply are: 0 for not
            constraining any axis, 1 for constraing the X-axis, or 2 for constraining the
            Y-axis. When used in queries, this flag returns the latter values and these
            values have the same interpretation as above. Note: when the shift key is
            pressed before dragging the animation curve, the first mouse movement will
            instead determine (and override) any prior set constrained axis.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - curvesShown : cs               (bool)          [query]
            Returns a string array containing the names of the animCurve nodes currently
            displayed in the graph editor.
        
        - curvesShownForceUpdate : csf   (bool)          [query]
            Returns a string array containing the names of the animCurve nodes currently
            displayed in the graph editor. Unlike the curvesShown flag, this will force an
            update of the graph editor for the case where the mainListConnection has been
            modified since the last refresh.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - denormalizeCurvesCommand : dcc (unicode)       [create,edit]
            Sets the script that is run to denormalize curves in the graph editor. This is
            intended for internal use only.
        
        - displayActiveKeyTangents : dat (unicode)       [edit]
            on | off | tgl Display active key tangents in the editor.
        
        - displayActiveKeys : dak        (unicode)       [edit]
            on | off | tgl Display active keys in the editor.
        
        - displayInfinities : di         (unicode)       [edit]
            on | off | tgl Display infinities in the editor.
        
        - displayKeys : dk               (unicode)       [edit]
            on | off | tgl Display keyframes in the editor.
        
        - displayNormalized : dn         (bool)          [query,edit]
            When on, display all curves normalized to the range -1 to +1.
        
        - displayTangents : dtn          (unicode)       [edit]
            on | off | tgl Display tangents in the editor.
        
        - displayValues : dv             (unicode)       [edit]
            on | off | tgl Display active keys and tangents values in the editor.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - keyingTime : kt                (unicode)       [query]
            The current time in the given curve to be keyed in the graph editor.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - lookAt : la                    (unicode)       [edit]
            all | selected | currentTime FitView helpers.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - menu : m                       (script)        [create]
            Specify a script to be run when the editor is created.  The function will be
            passed one string argument which is the new editor's name.
        
        - normalizeCurvesCommand : ncc   (unicode)       [create,edit]
            Sets the script that is run to normalize curves in the graph editor. This is
            intended for internal use only.
        
        - outliner : o                   (unicode)       [query,edit]
            The name of the outliner that is associated with the graph editor.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - preSelectionHighlight : psh    (bool)          [query,edit]
            When on, the curve/key/tangent under the mouse pointer is highlighted to ease
            selection.
        
        - renormalizeCurves : rnc        (bool)          [edit]
            This flag causes the curve normalization factors to be recalculated.
        
        - resultSamples : rs             (time)          [query,edit]
            Specify the sampling for result curves Note: the smaller this number is, the
            longer it will take to update the display.
        
        - resultScreenSamples : rss      (int)           [query,edit]
            Specify the screen base result sampling for result curves. If 0, then results
            are sampled in time.
        
        - resultUpdate : ru              (unicode)       [query,edit]
            Valid values: interactivedelayedControls how changes to animCurves are reflected
            in the result curves (if results are being shown).  If resultUpdate is
            interactive, then as interactive changes are being made to the animCurve, the
            result curves will be updated.  If modelUpdate is delayed (which is the default
            setting), then result curves are updated once the final change to an animCurve
            has been made.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - showActiveCurveNames : acn     (bool)          [query,edit]
            Display the active curve(s)'s name.
        
        - showBufferCurves : sb          (unicode)       [query,edit]
            Valid values: onofftglDisplay buffer curves.
        
        - showCurveNames : scn           (bool)          [query,edit]
            Display the curves's name.
        
        - showResults : sr               (unicode)       [query,edit]
            Valid values: onofftglDisplay result curves from expression or other non-keyed
            action.
        
        - showUpstreamCurves : suc       (bool)          [query,edit]
            If true, the dependency graph is searched upstream for all curves that drive the
            selected plugs (showing multiple curves for example in a typical driven key
            setup, where first the driven key curve is encountered, followed by the actual
            animation curve that drives the source object). If false, only the first curves
            encountered will be shown. Note that, even if false, multiple curves can be
            shown if e.g. a blendWeighted node is being used to combine multiple curves.
        
        - smoothness : s                 (unicode)       [query,edit]
            Valid values: coarseroughmediumfineSpecify the display smoothness of animation
            curves.
        
        - snapTime : st                  (unicode)       [query,edit]
            none | integer | keyframe Keyframe move snap in time.
        
        - snapValue : sv                 (unicode)       [query,edit]
            none | integer | keyframe Keyframe move snap in values.
        
        - stackedCurves : sc             (bool)          [query,edit]
            Switches the display mode between normal (all curves sharing one set of axes) to
            stacked (each curve on its own value axis, stacked vertically).
        
        - stackedCurvesMax : scx         (float)         [query,edit]
            Sets the maximum value on the per-curve value axis when in stacked mode.
        
        - stackedCurvesMin : scm         (float)         [query,edit]
            Sets the minimum value on the per-curve value axis when in stacked mode.
        
        - stackedCurvesSpace : scs       (float)         [query,edit]
            Sets the spacing between curves when in stacked mode.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - valueLinesToggle : vlt         (unicode)       [edit]
            on | off | tgl Display the value lines for high/low/zero of selected curves in
            the editor                  Flag can have multiple arguments, passed either as a
            tuple or a list.
        
        - viewLeft : vl                  (float)         []
        
        - viewRight : vr                 (float)         []
        
        
        Derived from mel command `maya.cmds.animCurveEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RenderLayerButton(PyUI):
    __melui__ : str


class IconTextScrollList(PyUI):
    def append(self, val='True', **kwargs):
        """
        Add an item to the end of the list.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Script to run when the list changes                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def deselectAll(self, val='True', **kwargs):
        """
        Deselect all items.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Specify the command to be executed when an item is double clicked.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def dragFeedbackVisible(self, val='True', **kwargs):
        """
        Should the drag feedback be shown in the scrollbar?                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def dropRectCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the callback is of the form: global proc int[] callbackName(string $dropControl, int $x, int $y) The return value is an array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn, followed by the width and height. This functionality is currently only implemented in MEL.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def editIndexed(self, val='True', **kwargs):
        """
        Index of the edited field                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def editable(self, val='True', **kwargs):
        """
        Set the field to be editable or not                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getAllowMultiSelection(self, **kwargs):
        """
        Specify multi or single selection mode.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getItemAt(self, **kwargs):
        """
        Return the name of the item, if any, located at given point       
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getNumberOfIcons(self, **kwargs):
        """
        Number of icons.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getNumberOfRows(self, **kwargs):
        """
        Number of visible rows.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getSelectIndexedItem(self, **kwargs):
        """
        Select the indexed item. Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getSelectItem(self, **kwargs):
        """
        Select the item that contains the specified text.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getVisualRectAt(self, **kwargs):
        """
        Return the visual rectangle of the item, if any, located at given point. The result is a an array of 4 integers, in local coordinates, describing the rectangle, in the following order: left, top, width, height.       
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def itemTextColor(self, val='True', **kwargs):
        """
        Set the text color of the item at the given index. Arguments are: index, red, green, and blue. Indices are 1-based. Each color component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def removeAll(self, val='True', **kwargs):
        """
        Remove all items.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def selectCommand(self, val='True', **kwargs):
        """
        Specify the command to be executed when an item is selected.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setAllowMultiSelection(self, val='True', **kwargs):
        """
        Specify multi or single selection mode.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setSelectIndexedItem(self, val='True', **kwargs):
        """
        Select the indexed item. Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setSelectItem(self, val='True', **kwargs):
        """
        Select the item that contains the specified text.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries a text scrolling list. The list can be in
        single select mode where only one item at at time is selected, or in multi-
        select mode where many items may be selected.
        
        Flags:
        - allowMultiSelection : ams      (bool)          [create,query,edit]
            Specify multi or single selection mode.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - append : a                     (unicode)       [create,edit]
            Add an item to the end of the list.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Script to run when the list changes
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deselectAll : da               (bool)          [create,edit]
            Deselect all items.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Specify the command to be executed when an item is double clicked.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragFeedbackVisible : dfv      (bool)          [create,edit]
            Should the drag feedback be shown in the scrollbar?
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - dropRectCallback : drc         (script)        [edit]
            Adds a callback that is called when a drag and drop operation is hovering above
            the drop site.  It returns the shape of the rectangle to be drawn to highlight
            the entry, if the control can receive the dropped data. The MEL version of the
            callback is of the form: global proc int[] callbackName(string $dropControl, int
            $x, int $y) The return value is an array of size 4, with the parameters, in
            order, being the left and top coordinates of the rectangle to be drawn, followed
            by the width and height. This functionality is currently only implemented in
            MEL.
        
        - editIndexed : ei               (int)           [create,edit]
            Index of the edited field
        
        - editable : ed                  (bool)          [create,edit]
            Set the field to be editable or not
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - itemAt : ia                    (int, int)      [query]
            Return the name of the item, if any, located at given point
        
        - itemTextColor : itc            (int, float, float, float) [create,edit]
            Set the text color of the item at the given index. Arguments are: index, red,
            green, and blue. Indices are 1-based. Each color component ranges in value from
            0.0 to 1.0.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfIcons : nic            (int)           [query]
            Number of icons.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfRows : nr              (bool)          [query]
            Number of visible rows.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - removeAll : ra                 (bool)          [create,edit]
            Remove all items.
        
        - selectCommand : sc             (script)        [create,edit]
            Specify the command to be executed when an item is selected.
        
        - selectIndexedItem : sii        (int)           [create,query,edit]
            Select the indexed item. Indices are 1-based.
        
        - selectItem : si                (unicode)       [create,query,edit]
            Select the item that contains the specified text.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - visualRectAt : vra             (int, int)      [query]
            Return the visual rectangle of the item, if any, located at given point. The
            result is a an array of 4 integers, in local coordinates, describing the
            rectangle, in the following order: left, top, width, height.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextScrollList`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CmdShell(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the contents change.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getNumberOfHistoryLines(self, **kwargs):
        """
        The number of input lines to be saved in the command history buffer.  You can cycle through this buffer by pressing the up and down arrow keys.  Valid values are 0 through 32767.  Any value less than 0 will be handled as if 0 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getNumberOfSavedLines(self, **kwargs):
        """
        The total number of lines (the scrolled lines and currently visible lines) that will be remembered by the field. Any lines beyond this number will be lost, and the user will not be able to review them by scrolling.  Valid values are 1 through 32767.  Any value less than 1 will be handled as if 1 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getPrompt(self, **kwargs):
        """
        The text that is used as a prompt.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the contents change.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setNumberOfHistoryLines(self, val='True', **kwargs):
        """
        The number of input lines to be saved in the command history buffer.  You can cycle through this buffer by pressing the up and down arrow keys.  Valid values are 0 through 32767.  Any value less than 0 will be handled as if 0 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setNumberOfSavedLines(self, val='True', **kwargs):
        """
        The total number of lines (the scrolled lines and currently visible lines) that will be remembered by the field. Any lines beyond this number will be lost, and the user will not be able to review them by scrolling.  Valid values are 1 through 32767.  Any value less than 1 will be handled as if 1 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setPrompt(self, val='True', **kwargs):
        """
        The text that is used as a prompt.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a scrolling field that behaves similar to a unix shell for
        entering user input.  You may specify the number of lines that will be
        remembered by the field with the -nsl/numberOfSavedLines flag.  The default
        number of lines saved is 100.  The shellField also maintains a command history
        buffer. You can specify the number of input lines that will be saved with the
        -hlc/historyLineCount flag.  The default size of this buffer is 10.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - clear : cl                     (bool)          [create]
            Erases all visible text, and also deletes any text that had scrolled of the top
            of the field.  After clearing the field it will be blank, and you will not be
            able to scroll up to see previous lines.  This flag does not affect the command
            history buffer, however.
        
        - command : c                    (unicode)       [create,query,edit]
            Command executed when the contents change.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfHistoryLines : nhl     (int)           [create,query,edit]
            The number of input lines to be saved in the command history buffer.  You can
            cycle through this buffer by pressing the up and down arrow keys.  Valid values
            are 0 through 32767.  Any value less than 0 will be handled as if 0 was
            specified.  Similarly, any value greater than 32767 will be handled as if 32767
            was specified.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfSavedLines : nsl       (int)           [create,query,edit]
            The total number of lines (the scrolled lines and currently visible lines) that
            will be remembered by the field. Any lines beyond this number will be lost, and
            the user will not be able to review them by scrolling.  Valid values are 1
            through 32767.  Any value less than 1 will be handled as if 1 was specified.
            Similarly, any value greater than 32767 will be handled as if 32767 was
            specified.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - prompt : pr                    (unicode)       [create,query,edit]
            The text that is used as a prompt.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.cmdShell`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class PyUIContainer(PyUI):
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def addChild(self, uiType, name='None', **kwargs): ...
    def findChild(self, shortName, recurse='False'):
        """
        Parameters
        ----------
        shortName : str
        recurse : bool
        
        Returns
        -------
        Optional[PyUI]
        """
        ...
    def makeDefault(self):
        """
        set this layout as the default parent
        """
        ...
    def pop(self):
        """
        set the default parent to the parent of this layout
        """
        ...
    def walkChildren(self):
        """
        recursively yield all children of this layout
        
        Returns
        -------
        Iterator[PyUI]
        """
        ...


class TextField(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the text changes.  This command is not invoked when the value changes via the -tx/text flag.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def enterCommand(self, val='True', **kwargs):
        """
        Command executed when the keypad 'Enter' key is pressed.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getAlwaysInvokeEnterCommandOnReturn(self, **kwargs):
        """
        Sets whether to always invoke the enter command when the return key is pressed by the user. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getDisableButtons(self, **kwargs):
        """
        Sets the visibility state of search field buttons to true/false depending on the passed value. In Query mode returns whether both buttons are visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getDisableClearButton(self, **kwargs):
        """
        Sets the visibility state of search field clear button to true/false depending on the passed value. In Query mode returns whether clear button of search field is visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getDisableHistoryButton(self, **kwargs):
        """
        Sets the visibility state of search field history button to true/false depending on the passed value. In Query mode returns whether history button of search field is visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getDrawInactiveFrame(self, **kwargs):
        """
        Sets whether the text field draws itself with a frame when it's inactive. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getFileName(self, **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getInsertionPosition(self, **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getPlaceholderText(self, **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getText(self, **kwargs):
        """
        The field text.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def insertText(self, val='True', **kwargs):
        """
        Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def receiveFocusCommand(self, val='True', **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setAlwaysInvokeEnterCommandOnReturn(self, val='True', **kwargs):
        """
        Sets whether to always invoke the enter command when the return key is pressed by the user. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setDisableButtons(self, val='True', **kwargs):
        """
        Sets the visibility state of search field buttons to true/false depending on the passed value. In Query mode returns whether both buttons are visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setDisableClearButton(self, val='True', **kwargs):
        """
        Sets the visibility state of search field clear button to true/false depending on the passed value. In Query mode returns whether clear button of search field is visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setDisableHistoryButton(self, val='True', **kwargs):
        """
        Sets the visibility state of search field history button to true/false depending on the passed value. In Query mode returns whether history button of search field is visible or not.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setDrawInactiveFrame(self, val='True', **kwargs):
        """
        Sets whether the text field draws itself with a frame when it's inactive. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setFileName(self, val='True', **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setInsertionPosition(self, val='True', **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setPlaceholderText(self, val='True', **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        The field text.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    def textChangedCommand(self, val='True', **kwargs):
        """
        Command executed immediately when the field text changes.                  
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a text field control.
        
        Flags:
        - alwaysInvokeEnterCommandOnReturn : aie (bool)          [create,query,edit]
            Sets whether to always invoke the enter command when the return key is pressed
            by the user. By default, this option is false.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the text changes.  This command is not invoked when the
            value changes via the -tx/text flag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disableButtons : db            (bool)          [create,query,edit]
            Sets the visibility state of search field buttons to true/false depending on the
            passed value. In Query mode returns whether both buttons are visible or not.
        
        - disableClearButton : dcb       (bool)          [create,query,edit]
            Sets the visibility state of search field clear button to true/false depending
            on the passed value. In Query mode returns whether clear button of search field
            is visible or not.
        
        - disableHistoryButton : dhb     (bool)          [create,query,edit]
            Sets the visibility state of search field history button to true/false depending
            on the passed value. In Query mode returns whether history button of search
            field is visible or not.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - drawInactiveFrame : dif        (bool)          [create,query,edit]
            Sets whether the text field draws itself with a frame when it's inactive. By
            default, this option is false.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it. If false then the field is 'read only'
            and can not be typed into. The text in the field can always be changed with the
            -tx/text flag regardless of the state of the -ed/editable flag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enterCommand : ec              (script)        [create,edit]
            Command executed when the keypad 'Enter' key is pressed.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fileName : fi                  (unicode)       [create,query,edit]
            Text in the field as a filename. This does conversions between internal and
            external (UI) file representation.
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - insertText : it                (unicode)       [create,edit]
            Insert text into the field at the current insertion position (specified by the
            -ip/insertionPosition flag).
        
        - insertionPosition : ip         (int)           [create,query,edit]
            The insertion position for inserted text.  This is a 1 based value where
            position 1 specifies the beginning of the field.  Position 0 may be used to
            specify the end of the field.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - placeholderText : pht          (unicode)       [create,query,edit]
            Setting this property makes the line edit display a grayed-out placeholder text
            as long as the text field is empty and the widget doesn't have focus. By
            default, this property contains an empty string.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (script)        [create,edit]
            Command executed when the field receives focus.
        
        - searchField : sf               (bool)          [create]
            Creates a search field instead of a text field.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - text : tx                      (unicode)       [create,query,edit]
            The field text.
        
        - textChangedCommand : tcc       (script)        [create,edit]
            Command executed immediately when the field text changes.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.textField`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class GradientControlNoAttr(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Specifies a command to be executed whenever the value of this ramp is modified. This option should not be used when specifying an optionVar.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def currentKeyChanged(self, val='True', **kwargs):
        """
        Specifies a command to be executed whenever the selected key changes.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Specifies a command to be executed while the ramp is being modified.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getAsString(self, **kwargs):
        """
        Used to query and set the value of the ramp as a string of comma separated values                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getCurrentKey(self, **kwargs):
        """
        Returns the index of the currently selected key.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getCurrentKeyColorValue(self, **kwargs):
        """
        Get or set the color of the currently selected key. Only useful if the ramp is set to be a color ramp.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getCurrentKeyCurveValue(self, **kwargs):
        """
        Get or set the value of the currently selected key. Only useful if the ramp is set to be a curve ramp.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getCurrentKeyInterpValue(self, **kwargs):
        """
        Get or set the interpolation value for the current key.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getOptionVar(self, **kwargs):
        """
        Specifies the name of the option var used to store and retrieve the string value capturing the curve.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getRampAsColor(self, **kwargs):
        """
        Sets whether the ramp should be viewed as a colour ramp or as a curve.  Default is as a curve.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getValueAtPoint(self, **kwargs):
        """
        Used during query to specify the point at which to query the curve.       
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setAsString(self, val='True', **kwargs):
        """
        Used to query and set the value of the ramp as a string of comma separated values                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setCurrentKey(self, val='True', **kwargs):
        """
        Returns the index of the currently selected key.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setCurrentKeyColorValue(self, val='True', **kwargs):
        """
        Get or set the color of the currently selected key. Only useful if the ramp is set to be a color ramp.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setCurrentKeyCurveValue(self, val='True', **kwargs):
        """
        Get or set the value of the currently selected key. Only useful if the ramp is set to be a curve ramp.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setCurrentKeyInterpValue(self, val='True', **kwargs):
        """
        Get or set the interpolation value for the current key.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setOptionVar(self, val='True', **kwargs):
        """
        Specifies the name of the option var used to store and retrieve the string value capturing the curve.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setRampAsColor(self, val='True', **kwargs):
        """
        Sets whether the ramp should be viewed as a colour ramp or as a curve.  Default is as a curve.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a control for editing a ramp (2D control curve). The
        control attaches to an optionVar used to store and retrieve the encoded gradient
        control points stored in a string.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - asString : asString            (unicode)       [query,edit]
            Used to query and set the value of the ramp as a string of comma separated
            values
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [edit]
            Specifies a command to be executed whenever the value of this ramp is modified.
            This option should not be used when specifying an optionVar.
        
        - currentKey : ck                (int)           [create,query,edit]
            Returns the index of the currently selected key.
        
        - currentKeyChanged : ckc        (script)        [edit]
            Specifies a command to be executed whenever the selected key changes.
        
        - currentKeyColorValue : clv     (float, float, float) [query,edit]
            Get or set the color of the currently selected key. Only useful if the ramp is
            set to be a color ramp.
        
        - currentKeyCurveValue : cvv     (bool)          [query,edit]
            Get or set the value of the currently selected key. Only useful if the ramp is
            set to be a curve ramp.
        
        - currentKeyInterpValue : civ    (int)           [query,edit]
            Get or set the interpolation value for the current key.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [edit]
            Specifies a command to be executed while the ramp is being modified.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - optionVar : ov                 (unicode)       [create,query,edit]
            Specifies the name of the option var used to store and retrieve the string value
            capturing the curve.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rampAsColor : rac              (bool)          [create,query,edit]
            Sets whether the ramp should be viewed as a colour ramp or as a curve.  Default
            is as a curve.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - valueAtPoint : vap             (float)         [query]
            Used during query to specify the point at which to query the curve.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.gradientControlNoAttr`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ClipSchedulerOutliner(PyUI):
    def clipScheduler(self, val='True', **kwargs):
        """
        Name of the clip scheduler for which to display information.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries a clip scheduler outliner control.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - clipScheduler : cs             (unicode)       [edit]
            Name of the clip scheduler for which to display information.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.clipSchedulerOutliner`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class KeyframeStats(PyUI):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getAnimEditor(self, **kwargs):
        """
        The name of the animation editor which is associated with the control                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getClassicMode(self, **kwargs):
        """
        Edit display mode. True means stats only, otherwise show time value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getPrecision(self, **kwargs):
        """
        Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getTimeAnnotation(self, **kwargs):
        """
        Annotate the time field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getValueAnnotation(self, **kwargs):
        """
        Annotate the value field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setAnimEditor(self, val='True', **kwargs):
        """
        The name of the animation editor which is associated with the control                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setClassicMode(self, val='True', **kwargs):
        """
        Edit display mode. True means stats only, otherwise show time value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setPrecision(self, val='True', **kwargs):
        """
        Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setTimeAnnotation(self, val='True', **kwargs):
        """
        Annotate the time field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setValueAnnotation(self, val='True', **kwargs):
        """
        Annotate the value field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates, edits, queries a keyframe stats control.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - animEditor : ae                (unicode)       [query,edit]
            The name of the animation editor which is associated with the control
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - classicMode : cm               (bool)          [query,edit]
            Edit display mode. True means stats only, otherwise show time value.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [query,edit]
            Controls the number of digits to the right of the decimal point that will be
            displayed for float-valued channels. Default is 3.  Queried, returns an int.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - timeAnnotation : tan           (unicode)       [create,query,edit]
            Annotate the time field with an extra string value.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - valueAnnotation : van          (unicode)       [create,query,edit]
            Annotate the value field with an extra string value.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.keyframeStats`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class GlRenderEditor(PyUI):
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getLookThru(self, **kwargs):
        """
        Specify which camera the glRender view should be using.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def getViewCameraName(self, **kwargs):
        """
        Returns the name of the current camera used by the glRenderPanel. This is a query only flag.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setLookThru(self, val='True', **kwargs):
        """
        Specify which camera the glRender view should be using.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a glRender view. This is a special view used for hardware rendering. This
        command is used to create and reparent the view as needed to support panels. See
        the glRender command for controlling the specific behavior of the hardware
        rendering. In query mode, return type is based on queried flag.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - lookThru : lt                  (unicode)       [create,query,edit]
            Specify which camera the glRender view should be using.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - viewCameraName : vcn           (bool)          [query]
            Returns the name of the current camera used by the glRenderPanel. This is a
            query only flag.                  Flag can have multiple arguments, passed
            either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.glRenderEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Button(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getActOnPress(self, **kwargs):
        """
        If true then the command specified by the command flag will be executed when a mouse button is pressed.  If false then that command will be executed after the mouse button is released. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getActionIsSubstitute(self, **kwargs):
        """
        This flag is obsolete and should no longer be used.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getAlign(self, **kwargs):
        """
        This flag is obsolete and should no longer be used. The button label will always be center-aligned.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getRecomputeSize(self, **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setActOnPress(self, val='True', **kwargs):
        """
        If true then the command specified by the command flag will be executed when a mouse button is pressed.  If false then that command will be executed after the mouse button is released. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setActionIsSubstitute(self, val='True', **kwargs):
        """
        This flag is obsolete and should no longer be used.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        This flag is obsolete and should no longer be used. The button label will always be center-aligned.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setRecomputeSize(self, val='True', **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a button control capable of displaying a textual label and executing a
        command when selected by the user.
        
        Flags:
        - actOnPress : aop               (bool)          [create,query,edit]
            If true then the command specified by the command flag will be executed when a
            mouse button is pressed.  If false then that command will be executed after the
            mouse button is released. The default value is false.
        
        - actionIsSubstitute : ais       (bool)          [create,query,edit]
            This flag is obsolete and should no longer be used.
        
        - align : al                     (unicode)       [create,query,edit]
            This flag is obsolete and should no longer be used. The button label will always
            be center-aligned.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,query,edit]
            Command executed when the control is pressed.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The label text.  The default label is the name of the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - recomputeSize : rs             (bool)          [create,query,edit]
            If true then the control will recompute it's size to just fit the size of the
            label.  If false then the control size will remain fixed as you change the size
            of the label.  The default value of this flag is true.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.button`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ScrollField(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes. This command is executed whenever the field loses focus.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def clear(self, val='True', **kwargs):
        """
        Removes all text in the field.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def command(self, val='True', **kwargs):
        """
        Obsolete - use enterCommandinstead                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def enterCommand(self, val='True', **kwargs):
        """
        Command executed when the enter key is pressed. This applies to the enter key on the numeric keypad only.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getFontPointSize(self, **kwargs):
        """
        The font point size for the text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getInsertionPosition(self, **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getNumberOfLines(self, **kwargs):
        """
        Number of lines in the scroll field.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getQtFont(self, **kwargs):
        """
        The Qt font family for the text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getSelection(self, **kwargs):
        """
        The selected text in the field.  An empty string is returned if there is no selected text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getText(self, **kwargs):
        """
        The field text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def insertText(self, val='True', **kwargs):
        """
        Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def keyPressCommand(self, val='True', **kwargs):
        """
        Command executed when any key is pressed.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setFontPointSize(self, val='True', **kwargs):
        """
        The font point size for the text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setInsertionPosition(self, val='True', **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setQtFont(self, val='True', **kwargs):
        """
        The Qt font family for the text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        The field text.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a scrolling field that handles multiple lines of text.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes. This command is executed whenever the
            field loses focus.
        
        - clear : cl                     (bool)          [create,edit]
            Removes all text in the field.
        
        - command : c                    (unicode)       [create,edit]
            Obsolete - use enterCommandinstead
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it. If false then the field is 'read only'
            and can not be typed into. The text in the field can always be changed with the
            -tx/text flag regardless of the state of the -ed/editable flag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enterCommand : ec              (script)        [create,edit]
            Command executed when the enter key is pressed. This applies to the enter key on
            the numeric keypad only.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fontPointSize : fns            (int)           [create,query,edit]
            The font point size for the text.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - insertText : it                (unicode)       [create,edit]
            Insert text into the field at the current insertion position (specified by the
            -ip/insertionPosition flag).
        
        - insertionPosition : ip         (int)           [create,query,edit]
            The insertion position for inserted text.  This is a 1 based value where
            position 1 specifies the beginning of the field.  Position 0 may be used to
            specify the end of the field.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - keyPressCommand : kpc          (script)        [create,edit]
            Command executed when any key is pressed.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfLines : nl             (int)           [query]
            Number of lines in the scroll field.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - qtFont : qfn                   (unicode)       [create,query,edit]
            The Qt font family for the text.
        
        - selection : sl                 (bool)          [query]
            The selected text in the field.  An empty string is returned if there is no
            selected text.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - text : tx                      (unicode)       [create,query,edit]
            The field text.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.
        
        - wordWrap : ww                  (bool)          [create]
            Specify true to break lines at spaces, tabs, or newlines.  Text will continue on
            the following line.  A value of false will not break text between words, in
            which case text may disappear beyond the edge of the field.  This flag must be
            set at create time. Lines do not word wrap by default.                  Flag can
            have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.scrollField`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IntSlider(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the slider's value marker.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getStep(self, **kwargs):
        """
        The step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        The step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a slider control that accepts only integer values and is bound by a
        minimum and maximum value.  The slider displays a marker indicating the current
        value of the slider relative to its minimum and maximum values.  Click and drag
        the marker or on the slider itself to change the current value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/value flag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the slider's value marker.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query]
            Orientation of the slider.  This flag is true by default, which corresponds to a
            horizontally oriented slider.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            Upper limit of the slider.
        
        - minValue : min                 (int)           [create,query,edit]
            Lower limit of the slider.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (int)           [create,query,edit]
            The step value represents the amount the value will increase or decrease when
            you click either side of the slider.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int)           [create,query,edit]
            Value of the slider.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.intSlider`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ColorEditor(PyUI):
    def getAlpha(self, **kwargs):
        """
        Float values corresponding to the alpha transparency component, , which ranges from 0.0 to 1.0.  Use this flag to specify the initial alpha value of the Color Editor, or query this flag to determine the alpha value set in the editor.                  
        
        
        Derived from mel command `maya.cmds.colorEditor`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.                  
        
        
        Derived from mel command `maya.cmds.colorEditor`
        """
        ...
    def getResult(self, **kwargs):
        """
        This query only flag returns true if the dialog's OKbutton was pressed, false otherwise.  If you query this flag immediately after showing the Color Editor then it will return the same value as the boolean value returned in the colorEditorcommand's return string.                  
        
        
        Derived from mel command `maya.cmds.colorEditor`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The colorEditorcommand displays a modal dialog that may be used to specify
        colors in RGB or HSV. The default behaviour when no arguments are specified is
        to provide an initial color of black (rgb 0.0 0.0 0.0). The command will return
        the user's color component values along with a boolean to indicate whether the
        dialog was dismissed by pressing the OKbutton.  As an alternative to responding
        to the colorEditorcommand's return string you can now query the -rgb/rgbValue,
        -hsv/hsvValue, and -r/resultflags to get the same information. The final
        argument is 1 if the dialog's OKbutton was pressed, and 0 if the Cancelbutton
        was pressed.In query mode, return type is based on queried flag.
        
        Flags:
        - alpha : a                      (float)         [create,query]
            Float values corresponding to the alpha transparency component, , which ranges
            from 0.0 to 1.0.  Use this flag to specify the initial alpha value of the Color
            Editor, or query this flag to determine the alpha value set in the editor.
        
        - hsvValue : hsv                 (float, float, float) [create,query]
            Three float values corresponding to the hue, saturation, and value color
            components, where the hue value ranges from 0.0 to 360.0 and the saturation and
            value components range from 0.0 to 1.0.  Use this flag to specify the initial
            color of the Color Editor, or query this flag to determine the color set in the
            editor.
        
        - mini : m                       (bool)          [create]
            Enable the mini color editor mode.
        
        - parent : p                     (unicode)       [create]
            Specify the parent window for the dialog.  The dialog will be centered on this
            window and raise and lower with it's parent. By default, the dialog is not
            parented to a particular window and is simply centered on the screen.
        
        - position : pos                 (int, int)      [create]
            Specify the window position for the dialog.
        
        - result : r                     (bool)          [query]
            This query only flag returns true if the dialog's OKbutton was pressed, false
            otherwise.  If you query this flag immediately after showing the Color Editor
            then it will return the same value as the boolean value returned in the
            colorEditorcommand's return string.
        
        - rgbValue : rgb                 (float, float, float) [create,query]
            Three float values corresponding to the red, green, and blue color components,
            all of which range from 0.0 to 1.0.  Use this flag to specify the initial color
            of the Color Editor, or query this flag to determine the color set in the
            editor.                  Flag can have multiple arguments, passed either as a
            tuple or a list.
        
        
        Derived from mel command `maya.cmds.colorEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ToolButton(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def collection(self, val='True', **kwargs):
        """
        To explicitly add a tool button to a tool collection.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Command executed when the control is double clicked.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getAllowMultipleTools(self, **kwargs):
        """
        Indicates whether this control will allow you to attach more than one tool.  By default, this control accepts only one tool. You can add multiple tools by setting this flag to true. Only one tool will be current and displayed at any one time. Use the pop up menu attached to the right mouse button to view all the tools.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getImage1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getImage3(self, **kwargs):
        """
        This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the current tool.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string (5 characters) label that will be displayed on top of the icon.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getPopupIndicatorVisible(self, **kwargs):
        """
        Edit this flag to set the visibility of the popup tool indicator. The indicator is a simple image that appears in the top right corner of the button when more that one tool is associated with this control. This flag is queryable and true by default.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getTool(self, **kwargs):
        """
        The name of the tool to be attached to the button.  If the tool specified is already attached to this button then it will be selected.  Query this flag to return the current tool.  This flag may be specified more than once to attach more than one tool.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getToolArray(self, **kwargs):
        """
        This query only flag returns the names of all the tools attached to the toolButton control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getToolCount(self, **kwargs):
        """
        This query only flag return the number of tools attached to the toolButton control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getToolImage1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getToolImage2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getToolImage3(self, **kwargs):
        """
        This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the specified tool.  The first argument is the name of the tool and the second is the name of the image.  When queried an array of tool icon pairs is returned.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this tool button feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def offCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned off.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def onCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned on.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def select(self, val='True', **kwargs):
        """
        Will set this button as the selected one.  This flag also queries the select state of the control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the current tool.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string (5 characters) label that will be displayed on top of the icon.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setPopupIndicatorVisible(self, val='True', **kwargs):
        """
        Edit this flag to set the visibility of the popup tool indicator. The indicator is a simple image that appears in the top right corner of the button when more that one tool is associated with this control. This flag is queryable and true by default.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setTool(self, val='True', **kwargs):
        """
        The name of the tool to be attached to the button.  If the tool specified is already attached to this button then it will be selected.  Query this flag to return the current tool.  This flag may be specified more than once to attach more than one tool.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setToolImage1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setToolImage2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setToolImage3(self, val='True', **kwargs):
        """
        This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the specified tool.  The first argument is the name of the tool and the second is the name of the image.  When queried an array of tool icon pairs is returned.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this tool button feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    def style(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.                  
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a toolButton that is added to the most recently created
        tool button collection unless the cl/collectionflag is used. It also attaches
        the named tool, activating it when this control is selected. By default, this
        control only handles one tool at a time.  Using the t/toolflag to associate a
        new tool will simply override the previous attached tool.  If you use the
        amt/allowMultipleToolsflag then you will be able to attach more than one tool
        with this control.  Only one tool will be current within the control.  To access
        the other tools press the right mouse button to display a popup menu containing
        all the tools associated with this control.  If you set the
        piv/popupIndicatorVisibleflag then a small arrow will be drawn on the control to
        indicate that additional tools are attached to this control.
        
        Flags:
        - allowMultipleTools : amt       (bool)          [create,query]
            Indicates whether this control will allow you to attach more than one tool.  By
            default, this control accepts only one tool. You can add multiple tools by
            setting this flag to true. Only one tool will be current and displayed at any
            one time. Use the pop up menu attached to the right mouse button to view all the
            tools.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the control's state is changed. Note that this flag should
            not be used in conjunction with onCommand and offCommand. That is, one should
            either use changeCommand and test the state of the control from inside the
            callback, or use onCommand and offCommand as separate callbacks.
        
        - collection : cl                (unicode)       [create,edit]
            To explicitly add a tool button to a tool collection.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Command executed when the control is double clicked.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image1 : i1                    (unicode)       [create,query,edit]
        
        - image2 : i2                    (unicode)       [create,query,edit]
        
        - image3 : i3                    (unicode)       [create,query,edit]
            This control supports three images.  The image that best fits the current size
            of the control will be displayed.  This flag applies the image to the current
            tool.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string (5 characters) label that will be displayed on top of the icon.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,edit]
            Command executed when the control is turned off.
        
        - onCommand : onc                (script)        [create,edit]
            Command executed when the control is turned on.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupIndicatorVisible : piv    (bool)          [create,query,edit]
            Edit this flag to set the visibility of the popup tool indicator. The indicator
            is a simple image that appears in the top right corner of the button when more
            that one tool is associated with this control. This flag is queryable and true
            by default.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - select : sl                    (bool)          [create,edit]
            Will set this button as the selected one.  This flag also queries the select
            state of the control.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontaland iconAndTextVertical.
        
        - tool : t                       (unicode)       [create,query,edit]
            The name of the tool to be attached to the button.  If the tool specified is
            already attached to this button then it will be selected.  Query this flag to
            return the current tool.  This flag may be specified more than once to attach
            more than one tool.
        
        - toolArray : ta                 (bool)          [query]
            This query only flag returns the names of all the tools attached to the
            toolButton control.
        
        - toolCount : tc                 (bool)          [query]
            This query only flag return the number of tools attached to the toolButton
            control.
        
        - toolImage1 : ti1               (unicode, unicode) [create,query,edit]
        
        - toolImage2 : ti2               (unicode, unicode) [create,query,edit]
        
        - toolImage3 : ti3               (unicode, unicode) [create,query,edit]
            This control supports three images.  The image that best fits the current size
            of the control will be displayed.  This flag applies the image to the specified
            tool.  The first argument is the name of the tool and the second is the name of
            the image.  When queried an array of tool icon pairs is returned.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this tool button feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.toolButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class MenuEditor(PyUI):
    def cellWidthHeight(self, val='True', **kwargs):
        """
        The width and height of the icons in the menuEditor.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getCellHeight(self, **kwargs):
        """
        The height of the icons in the menuEditor.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getCellWidth(self, **kwargs):
        """
        The width of the icons in the menuEditor.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getCheckBoxPresent(self, **kwargs):
        """
        This controls whether a menu item has a check box or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getCheckBoxState(self, **kwargs):
        """
        The state of the check box associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a check box. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getCommand(self, **kwargs):
        """
        The command or script executed by a menu item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item or a separator item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getImage(self, **kwargs):
        """
        The filename of the icon associated with a menu item. This icon is displayed by the menuEditor to represent the menu item. The arguments are the icon filename, followed by the position of the menu item. If queried, an array of strings is returned containing all the icon filenames. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label of a menu item. The arguments are the label text, followed by the position of the menu item. If queried, an array of strings is returned containing all the labels. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getMenuItemTypes(self, **kwargs):
        """
        This is a query only flag.  Returns an array of strings indicating the type of contents in each cell of the menuEditor.  Cells can be vacant, or may contain a regular menu item, or a separator, or a submenuitem.  In each case, the corresponding string is returned. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getOptionBoxCommand(self, **kwargs):
        """
        The command or script executed by a menu item's associated option box item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item does not have an associated option box item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getOptionBoxPresent(self, **kwargs):
        """
        This controls whether a menu item has an associated option box item or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getRadioButtonPresent(self, **kwargs):
        """
        This controls whether a menu item has a radio button or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getRadioButtonState(self, **kwargs):
        """
        The state of the radio button associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a radio button. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getSeparator(self, **kwargs):
        """
        In edit mode this adds a separator to the menuEditor at the specified position. The parameters are the radialPosition and the overflowRow. If queried, an array of booleans is returned indicating if the item is a separator item. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getStyle(self, **kwargs):
        """
        This is the style of icons within the menuEditor. Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getSubMenuEditorsOpen(self, **kwargs):
        """
        This is a query only flag.  Returns an array of booleans, each of which indicates if a sub-menuEditor is open and attached to the menu item in a particular cell.  One boolean is returned for each cell in the menuEditor, even if the cell is vacant or contains a non-submenu item (false will be returned in both these cases).  Only when a cell contains a submenu item can true possibily be returned. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getTopLevelMenu(self, **kwargs):
        """
        The popup menu to attach to the editor.  All editing operations performed in the editor (i.e. inserting/deleting/moving an item) will be immediately reflected in this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor will update gracefully if the value of the flag is changed from its initial value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setCellHeight(self, val='True', **kwargs):
        """
        The height of the icons in the menuEditor.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setCellWidth(self, val='True', **kwargs):
        """
        The width of the icons in the menuEditor.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setCheckBoxPresent(self, val='True', **kwargs):
        """
        This controls whether a menu item has a check box or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setCheckBoxState(self, val='True', **kwargs):
        """
        The state of the check box associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a check box. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        The command or script executed by a menu item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item or a separator item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        The filename of the icon associated with a menu item. This icon is displayed by the menuEditor to represent the menu item. The arguments are the icon filename, followed by the position of the menu item. If queried, an array of strings is returned containing all the icon filenames. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label of a menu item. The arguments are the label text, followed by the position of the menu item. If queried, an array of strings is returned containing all the labels. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setOptionBoxCommand(self, val='True', **kwargs):
        """
        The command or script executed by a menu item's associated option box item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item does not have an associated option box item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setOptionBoxPresent(self, val='True', **kwargs):
        """
        This controls whether a menu item has an associated option box item or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setRadioButtonPresent(self, val='True', **kwargs):
        """
        This controls whether a menu item has a radio button or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setRadioButtonState(self, val='True', **kwargs):
        """
        The state of the radio button associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a radio button. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setSeparator(self, val='True', **kwargs):
        """
        In edit mode this adds a separator to the menuEditor at the specified position. The parameters are the radialPosition and the overflowRow. If queried, an array of booleans is returned indicating if the item is a separator item. The first 8 entries of the array correspond to radial items (in order, N, NE, ... NW), and all later entries correspond to overflow (or linear) menu items.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        This is the style of icons within the menuEditor. Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setTopLevelMenu(self, val='True', **kwargs):
        """
        The popup menu to attach to the editor.  All editing operations performed in the editor (i.e. inserting/deleting/moving an item) will be immediately reflected in this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor will update gracefully if the value of the flag is changed from its initial value.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    def subMenuAt(self, val='True', **kwargs):
        """
        Creates a submenu item at the given position.  A submenu item created within the radial portion of a menu will overwrite whatever item (if any) is currently at the given position. A submenu item created within the overflow (linear) portion of a menu will be inserted before the item currently at the given position.                  
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        A menuEditor displays the contents of a popup menu and allows the menu's items
        to be edited. Menu items are represented by labelled icons which can be dragged
        around within the editor to change the menu's layout.  Various objects can be
        dragged and dropped into the menuEditor to create new menu items: toolButtons
        from the shelf or toolbox, shelfButtons from the shelf, iconTextButtons with
        attached commands, and scripts from the command window. When editing a Marking
        Menu, the radial menu items correspond to 8 icons arranged in a circle within
        the menuEditor.  Overflow items in the Marking Menu (or linear items in a normal
        menu) are displayed in a column below the radial items. To edit a submenu of a
        popup menu, a new menuEditor instance must be created (typically within its own
        window) and attached to its parent menuEditor. Some flags require the position
        of a menu item to be passed in as an argument.  For these, positions are
        specified with a (string,int) pair, where the string corresponds to a radial
        position (possibily None) and the int corresponds to a linear position (possibly
        equal to 0 for none).  Radial positions are specified by one of (N,0), (NE,0),
        (E,0), (SE,0), (S,0), (SW,0), (W,0) or (NW,0).  Overflow, or linear positions,
        are specified with (None,i), where i is a 1-based index giving the position of
        the item within the overflow column.Note:This command is not meant to be called
        explicitly. It was created to support the Marking Menu editor. It is recommended
        that you use that editor to modify marking menus.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - cellHeight : ch                (int)           [query,edit]
            The height of the icons in the menuEditor.
        
        - cellWidth : cw                 (int)           [query,edit]
            The width of the icons in the menuEditor.
        
        - cellWidthHeight : cwh          (int, int)      [edit]
            The width and height of the icons in the menuEditor.
        
        - checkBoxPresent : cbp          (bool, unicode, int) [query,edit]
            This controls whether a menu item has a check box or not. The arguments are a
            flag indicating presence, followed by the position of the menu item. This flag
            is ignored if the menu item is a submenu item. If queried, an array of booleans
            is returned containing all the flags. The first 8 entries of the array
            correspond to radial items (in order, N, NE, ... NW), and all later entries
            correspond to overflow (or linear) menu items.
        
        - checkBoxState : cbs            (bool, unicode, int) [query,edit]
            The state of the check box associated with a menu item. The arguments are a flag
            indicating state, followed by the position of the menu item. This flag is
            ignored if the menu item does not have a check box. If queried, an array of
            booleans is returned containing all the flags. The first 8 entries of the array
            correspond to radial items (in order, N, NE, ... NW), and all later entries
            correspond to overflow (or linear) menu items.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - command : c                    (unicode, unicode, int) [query,edit]
            The command or script executed by a menu item. The arguments are the command
            string or script name, followed by the position of the menu item. This flag is
            ignored if the menu item is a submenu item or a separator item. If queried, an
            array of strings is returned containing all the commands. The first 8 entries of
            the array correspond to radial items (in order, N, NE, ... NW), and all later
            entries correspond to overflow (or linear) menu items.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - delete : d                     (unicode, int)  [edit]
            Deletes the menu item at the given position, removing it from the menu.  If the
            menu item has a submenu, and a sub-menuEditor is open and attached to it, then
            the sub-menuEditor's window and all its child menuEditor windows will be closed
            recursively.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - iconMenuCallback : imc         (unicode)       [create]
            This is the name of a MEL callback procedure that is called to create the popup
            menus attached to icons in the menuEditor.  The callback is called once for each
            newly created icon, and once each time an icon is moved within the menuEditor.
            Popup menus created by the callback should contain commands for editing the menu
            item associated with the icon.  Operations accessible through the menu should
            include deletion of the item, editing of the item's
            label/command/image/checkbox/optionbox, creation of a submenu, and popping up a
            sub-menuEditor. The arguments to the callback must match this form:
            callbackProc(string $menuEditorName, string $parentIconName, string $menuTitle,
            string $radialPosition, int $overflowRow); The popup menu's parent should be
            $parentIconName. Note that when a sub-menuEditor is created, this flag need not
            be re-specified as it adopts a default value equal to the value of its parent
            menuEditor's -imc/iconMenuCallback flag.
        
        - image : i                      (unicode, unicode, int) [query,edit]
            The filename of the icon associated with a menu item. This icon is displayed by
            the menuEditor to represent the menu item. The arguments are the icon filename,
            followed by the position of the menu item. If queried, an array of strings is
            returned containing all the icon filenames. The first 8 entries of the array
            correspond to radial items (in order, N, NE, ... NW), and all later entries
            correspond to overflow (or linear) menu items.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode, unicode, int) [query,edit]
            The label of a menu item. The arguments are the label text, followed by the
            position of the menu item. If queried, an array of strings is returned
            containing all the labels. The first 8 entries of the array correspond to radial
            items (in order, N, NE, ... NW), and all later entries correspond to overflow
            (or linear) menu items.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - menuItemTypes : mit            (bool)          [query]
            This is a query only flag.  Returns an array of strings indicating the type of
            contents in each cell of the menuEditor.  Cells can be vacant, or may contain a
            regular menu item, or a separator, or a submenuitem.  In each case, the
            corresponding string is returned. The first 8 entries of the array correspond to
            radial items (in order, N, NE, ... NW), and all later entries correspond to
            overflow (or linear) menu items.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - optionBoxCommand : obc         (unicode, unicode, int) [query,edit]
            The command or script executed by a menu item's associated option box item. The
            arguments are the command string or script name, followed by the position of the
            menu item. This flag is ignored if the menu item does not have an associated
            option box item. If queried, an array of strings is returned containing all the
            commands. The first 8 entries of the array correspond to radial items (in order,
            N, NE, ... NW), and all later entries correspond to overflow (or linear) menu
            items.
        
        - optionBoxPresent : obp         (bool, unicode, int) [query,edit]
            This controls whether a menu item has an associated option box item or not. The
            arguments are a flag indicating presence, followed by the position of the menu
            item. This flag is ignored if the menu item is a submenu item. If queried, an
            array of booleans is returned containing all the flags. The first 8 entries of
            the array correspond to radial items (in order, N, NE, ... NW), and all later
            entries correspond to overflow (or linear) menu items.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - radioButtonPresent : rbp       (bool, unicode, int) [query,edit]
            This controls whether a menu item has a radio button or not. The arguments are a
            flag indicating presence, followed by the position of the menu item. This flag
            is ignored if the menu item is a submenu item. If queried, an array of booleans
            is returned containing all the flags. The first 8 entries of the array
            correspond to radial items (in order, N, NE, ... NW), and all later entries
            correspond to overflow (or linear) menu items.
        
        - radioButtonState : rbs         (bool, unicode, int) [query,edit]
            The state of the radio button associated with a menu item. The arguments are a
            flag indicating state, followed by the position of the menu item. This flag is
            ignored if the menu item does not have a radio button. If queried, an array of
            booleans is returned containing all the flags. The first 8 entries of the array
            correspond to radial items (in order, N, NE, ... NW), and all later entries
            correspond to overflow (or linear) menu items.
        
        - separator : sp                 (unicode, int)  [query,edit]
            In edit mode this adds a separator to the menuEditor at the specified position.
            The parameters are the radialPosition and the overflowRow. If queried, an array
            of booleans is returned indicating if the item is a separator item. The first 8
            entries of the array correspond to radial items (in order, N, NE, ... NW), and
            all later entries correspond to overflow (or linear) menu items.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [query,edit]
            This is the style of icons within the menuEditor. Valid styles are iconOnly,
            textOnly, iconAndTextHorizontaland iconAndTextVertical.
        
        - subMenuAt : sma                (unicode, int)  [edit]
            Creates a submenu item at the given position.  A submenu item created within the
            radial portion of a menu will overwrite whatever item (if any) is currently at
            the given position. A submenu item created within the overflow (linear) portion
            of a menu will be inserted before the item currently at the given position.
        
        - subMenuEditorWindow : sew      (unicode)       [create]
            The name of the window which contains a sub-menuEditor.  Only use when creatitg
            a sub-menuEditor. This window will automatically be closed if a parent
            menuEditor is closed or if a parent menu item is deleted.
        
        - subMenuEditorsOpen : seo       (bool)          [query]
            This is a query only flag.  Returns an array of booleans, each of which
            indicates if a sub-menuEditor is open and attached to the menu item in a
            particular cell.  One boolean is returned for each cell in the menuEditor, even
            if the cell is vacant or contains a non-submenu item (false will be returned in
            both these cases).  Only when a cell contains a submenu item can true possibily
            be returned. The first 8 entries of the array correspond to radial items (in
            order, N, NE, ... NW), and all later entries correspond to overflow (or linear)
            menu items.
        
        - subMenuOf : smo                (unicode, unicode, int) [create]
            Attaches a sub-menuEditor to its parent menuEditor.  Only use when creatitg a
            sub-menuEditor. The arguments are the name of the parent menuEditor, followed by
            the position of a submenu item within the parent. A submenu item must already
            exist within the parent at the given position. A submenu item cannot have
            multiple sub-menuEditors attached to it.
        
        - topLevelMenu : tlm             (unicode)       [query,edit]
            The popup menu to attach to the editor.  All editing operations performed in the
            editor (i.e. inserting/deleting/moving an item) will be immediately reflected in
            this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor
            will update gracefully if the value of the flag is changed from its initial
            value.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.menuEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class HelpLine(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a help line where tool help/hints are shown.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.helpLine`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class LayerButton(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Set the command to call on a change of any kind.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def color(self, val='True', **kwargs):
        """
        Layer color, specified with normalized real numbers in R, G, B space.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def command(self, val='True', **kwargs):
        """
        Set the command to call on a single click.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def current(self, val='True', **kwargs):
        """
        Set this button to display as the current layer.  The current layer is the one which the user has the option of adding all newly created objects into.  NB: Setting the layer button to this state has no effect on the actual current layer.
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Set the command to call on a double click.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getIdentification(self, **kwargs):
        """
        This is the integer identification number associated with the layer.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the button.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getLabelWidth(self, **kwargs):
        """
        Query the width of the label part so as to determine if button clicks are in the label part or the colour swatch part.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getLayerHideOnPlayback(self, **kwargs):
        """
        Indicates whether the layer is visible or invisible during the playback.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getLayerState(self, **kwargs):
        """
        Describes the state of the layer.  This may be one of normal, template, or reference.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getLayerVisible(self, **kwargs):
        """
        Indicates whether the layer is visible or invisible.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Set this button to display as a selected layer.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getTransparent(self, **kwargs):
        """
        Indicate whether the layer color is visible or transparent.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def hideOnPlaybackCommand(self, val='True', **kwargs):
        """
        Command that is called when the hide on playback indicator of the layer button is pressed.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def renameCommand(self, val='True', **kwargs):
        """
        Set the command to call when the layer gets renamed. The string '#1' will be substituted with the control's name and '#2' will be replaced with the layer's new name.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setIdentification(self, val='True', **kwargs):
        """
        This is the integer identification number associated with the layer.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the button.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setLayerHideOnPlayback(self, val='True', **kwargs):
        """
        Indicates whether the layer is visible or invisible during the playback.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setLayerState(self, val='True', **kwargs):
        """
        Describes the state of the layer.  This may be one of normal, template, or reference.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setLayerVisible(self, val='True', **kwargs):
        """
        Indicates whether the layer is visible or invisible.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Set this button to display as a selected layer.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setTransparent(self, val='True', **kwargs):
        """
        Indicate whether the layer color is visible or transparent.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def typeCommand(self, val='True', **kwargs):
        """
        Command that is called when the type indicator of the layer button is pressed.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    def visibleCommand(self, val='True', **kwargs):
        """
        Command that is called when the visibility indicator of the layer button is pressed.                  
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Creates a layer bar button widget.  This widget contains both the name of the
        layer to which it refers and a color swatch indicating it's color assignment.
        It is used primarily in the construction of the layerBar and layer Editor
        window, being the widget used for each layer in the respective lists.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Set the command to call on a change of any kind.
        
        - color : cl                     (float, float, float) [create,edit]
            Layer color, specified with normalized real numbers in R, G, B space.
        
        - command : c                    (script)        [create,edit]
            Set the command to call on a single click.
        
        - current : cr                   (bool)          [create,edit]
            Set this button to display as the current layer.  The current layer is the one
            which the user has the option of adding all newly created objects into.  NB:
            Setting the layer button to this state has no effect on the actual current
            layer.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Set the command to call on a double click.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - hideOnPlaybackCommand : hpc    (script)        [create,edit]
            Command that is called when the hide on playback indicator of the layer button
            is pressed.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - identification : id            (int)           [create,query,edit]
            This is the integer identification number associated with the layer.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the button.
        
        - labelWidth : lw                (bool)          [query]
            Query the width of the label part so as to determine if button clicks are in the
            label part or the colour swatch part.
        
        - layerHideOnPlayback : hp       (bool)          [create,query,edit]
            Indicates whether the layer is visible or invisible during the playback.
        
        - layerState : ls                (unicode)       [create,query,edit]
            Describes the state of the layer.  This may be one of normal, template, or
            reference.
        
        - layerVisible : lv              (bool)          [create,query,edit]
            Indicates whether the layer is visible or invisible.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - name : n                       (unicode)       [create,query]
            Name of the layer.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - renameCommand : rc             (unicode)       [create,edit]
            Set the command to call when the layer gets renamed. The string '#1' will be
            substituted with the control's name and '#2' will be replaced with the layer's
            new name.
        
        - select : s                     (bool)          [create,query,edit]
            Set this button to display as a selected layer.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - transparent : t                (bool)          [create,query,edit]
            Indicate whether the layer color is visible or transparent.
        
        - typeCommand : tc               (script)        [create,edit]
            Command that is called when the type indicator of the layer button is pressed.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - visibleCommand : vc            (script)        [create,edit]
            Command that is called when the visibility indicator of the layer button is
            pressed.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.layerButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrEnumOptionMenu(PyUI):
    def attribute(self, val='True', **kwargs):
        """
        Attribute that the menu controls.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        The command string is executed when the value of the option menu changes.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label text.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label text.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates an enumerated attribute control. It is usually an option
        menu.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attribute : at                 (PyNode)        [create,edit]
            Attribute that the menu controls.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            The command string is executed when the value of the option menu changes.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enumeratedItem : ei            (int, unicode)  [create]
            Enumerated item and the corresponding string.  If this flag is not supplied when
            the control is created, then the command will try to read the values from the
            attribute.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The label text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenu`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CommandMenuItem(PyUI):
    def __enter__(self): ...
    def __exit__(self, type, value, traceback): ...
    def getAllowOptionBoxes(self, **kwargs):
        """
        Deprecated. All menus and menu items always allow option boxes. In the case of submenu items this flag specifies whether the submenu will be able to support option box menu items. Always returns true.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the menu item with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getBoldFont(self, **kwargs):
        """
        Specify if text should be bold. Only supported in menus which use the marking menu implementation.  Default is false for Windows, and true for all other platforms.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getCheckBox(self, **kwargs):
        """
        Creates a check box menu item.  Argument specifies the check box value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getCollection(self, **kwargs):
        """
        To explicitly add a radio menu item to a radioMenuItemCollection.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Attaches a command/script that will be executed when the item is selected. Note this command is not executed when the menu item is in an optionMenucontrol.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getData(self, **kwargs):
        """
        Attaches a piece of user-defined data to the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getDivider(self, **kwargs):
        """
        Creates a divider menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getDividerLabel(self, **kwargs):
        """
        Adds a label to a divider menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getDragDoubleClickCommand(self, **kwargs):
        """
        If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is double clicked.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getDragMenuCommand(self, **kwargs):
        """
        If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is clicked.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getEchoCommand(self, **kwargs):
        """
        Specify whether the action attached with the c/commandflag should echo to the command output areas when invoked. This flag is false by default and must be specified with the c/commandflag.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getEnable(self, **kwargs):
        """
        Enable state for the menu item.  A disabled menu item is dimmed and unresponsive.  An enabled menu item is selectable and has normal appearance.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getEnableCommandRepeat(self, **kwargs):
        """
        This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getFamilyImage(self, **kwargs):
        """
        Get the filename of the family icon associated with the menu. The family icon will be used for the shelf unless an icon is specified with the imageflag.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getImage(self, **kwargs):
        """
        The filename of the icon associated with the menu item.  If the menu containing the menu item is being edited with a menuEditor widget, then the menuEditor will use this icon to represent the menu item. This icon will be displayed on the shelf when the menu item is placed there.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        Specify a short (5 character) text string to be overlayed on top of the icon associated with the menu item. This is primarily a mechanism for differentiating menu items that are using a Family icon due to the fact that an icon image had not been explicitly defined. The image overlay label will not be used if an icon image is defined for the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getIsCheckBox(self, **kwargs):
        """
        Returns true if the item is a check box item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getIsOptionBox(self, **kwargs):
        """
        Returns true if the item is an option box item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getIsRadioButton(self, **kwargs):
        """
        Returns true if the item is a radio button item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getItalicized(self, **kwargs):
        """
        Specify if text should be italicized. Only supported in menus which use the marking menu implementation.  Default is false.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getLongDivider(self, **kwargs):
        """
        Indicate whether the divider is long or short. Has no effect if divider label is set. Default is true.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getOptionBox(self, **kwargs):
        """
        Indicates that the menu item will be an option box item.  This item will appear to the right of the preceeding menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getOptionBoxIcon(self, **kwargs):
        """
        The filename of an icon to be used instead of the usual option box icon. The icon is searched for in the folder specified by the XBMLANGPATH environment variable. The icon can be any size, but will be resized to the standard 16x16 pixels when drawn.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getPostMenuCommand(self, **kwargs):
        """
        Specify a script to be executed when the submenu is about to be shown.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getPostMenuCommandOnce(self, **kwargs):
        """
        Indicate the pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the pmc/postMenuCommandis invoked everytime the sub menu is shown.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getRadialPosition(self, **kwargs):
        """
        The radial position of the menu item if it is in a Marking Menu.  Radial positions are given in the form of a cardinal direction, and may be N, NW, W, SW, S, SE, Eor NE.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getRadioButton(self, **kwargs):
        """
        Creates a radio button menu item.  Argument specifies the radio button value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getSourceType(self, **kwargs):
        """
        Set the language type for a command script. Can only be used in conjunction with a command flag.  Without this flag, commands are assumed to be the same language of the executing script.  In query mode, will return the language of the specified command. Valid values are meland python.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getSubMenu(self, **kwargs):
        """
        Indicates that the item will have a submenu. Subsequent menuItems will be added to the submenu until setParent -menuis called.  Note that a submenu item creates a menu object and consequently the menucommand may be used on the submenu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        For the case where the menu item is a sub menu this flag will make the sub menu tear-off-able. Note that this flag has no effect on the other menu item types.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this menu item feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def runTimeCommand(self, val='True', **kwargs):
        """
        A shortcut flag to link the menu item with a runTimeCommand. The value is the name of the runTimeCommand (unique). It copies the following fields from the runTimeCommand if those fields have not been provided to this command: label, annotation, image, command. Note: command will be set to the runTimeCommand itself.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the menu item with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setCheckBox(self, val='True', **kwargs):
        """
        Creates a check box menu item.  Argument specifies the check box value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Attaches a command/script that will be executed when the item is selected. Note this command is not executed when the menu item is in an optionMenucontrol.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setData(self, val='True', **kwargs):
        """
        Attaches a piece of user-defined data to the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setDividerLabel(self, val='True', **kwargs):
        """
        Adds a label to a divider menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setDragDoubleClickCommand(self, val='True', **kwargs):
        """
        If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is double clicked.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setDragMenuCommand(self, val='True', **kwargs):
        """
        If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is clicked.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setEchoCommand(self, val='True', **kwargs):
        """
        Specify whether the action attached with the c/commandflag should echo to the command output areas when invoked. This flag is false by default and must be specified with the c/commandflag.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        Enable state for the menu item.  A disabled menu item is dimmed and unresponsive.  An enabled menu item is selectable and has normal appearance.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setEnableCommandRepeat(self, val='True', **kwargs):
        """
        This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        The filename of the icon associated with the menu item.  If the menu containing the menu item is being edited with a menuEditor widget, then the menuEditor will use this icon to represent the menu item. This icon will be displayed on the shelf when the menu item is placed there.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        Specify a short (5 character) text string to be overlayed on top of the icon associated with the menu item. This is primarily a mechanism for differentiating menu items that are using a Family icon due to the fact that an icon image had not been explicitly defined. The image overlay label will not be used if an icon image is defined for the menu item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the item.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setLongDivider(self, val='True', **kwargs):
        """
        Indicate whether the divider is long or short. Has no effect if divider label is set. Default is true.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setOptionBoxIcon(self, val='True', **kwargs):
        """
        The filename of an icon to be used instead of the usual option box icon. The icon is searched for in the folder specified by the XBMLANGPATH environment variable. The icon can be any size, but will be resized to the standard 16x16 pixels when drawn.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setPostMenuCommand(self, val='True', **kwargs):
        """
        Specify a script to be executed when the submenu is about to be shown.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setPostMenuCommandOnce(self, val='True', **kwargs):
        """
        Indicate the pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the pmc/postMenuCommandis invoked everytime the sub menu is shown.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setRadialPosition(self, val='True', **kwargs):
        """
        The radial position of the menu item if it is in a Marking Menu.  Radial positions are given in the form of a cardinal direction, and may be N, NW, W, SW, S, SE, Eor NE.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setRadioButton(self, val='True', **kwargs):
        """
        Creates a radio button menu item.  Argument specifies the radio button value.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setSourceType(self, val='True', **kwargs):
        """
        Set the language type for a command script. Can only be used in conjunction with a command flag.  Without this flag, commands are assumed to be the same language of the executing script.  In query mode, will return the language of the specified command. Valid values are meland python.                  
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this menu item feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries menu items.
        
        Flags:
        - allowOptionBoxes : aob         (bool)          [create,query]
            Deprecated. All menus and menu items always allow option boxes. In the case of
            submenu items this flag specifies whether the submenu will be able to support
            option box menu items. Always returns true.
        
        - altModifier : alt              (bool)          []
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the menu item with an extra string value.
        
        - boldFont : bld                 (bool)          [create,query]
            Specify if text should be bold. Only supported in menus which use the marking
            menu implementation.  Default is false for Windows, and true for all other
            platforms.
        
        - checkBox : cb                  (bool)          [create,query,edit]
            Creates a check box menu item.  Argument specifies the check box value.
        
        - collection : cl                (unicode)       [create,query]
            To explicitly add a radio menu item to a radioMenuItemCollection.
        
        - command : c                    (script)        [create,query,edit]
            Attaches a command/script that will be executed when the item is selected. Note
            this command is not executed when the menu item is in an optionMenucontrol.
        
        - commandModifier : cmd          (bool)          []
        
        - ctrlModifier : ctl             (bool)          []
        
        - data : da                      (int)           [create,query,edit]
            Attaches a piece of user-defined data to the menu item.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - divider : d                    (bool)          [create,query]
            Creates a divider menu item.
        
        - dividerLabel : dl              (unicode)       [create,query,edit]
            Adds a label to a divider menu item.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the menu item.
        
        - dragDoubleClickCommand : ddc   (script)        [create,query,edit]
            If the menu item is put on the shelf then this command will be invoked when the
            corresponding shelf object is double clicked.
        
        - dragMenuCommand : dmc          (script)        [create,query,edit]
            If the menu item is put on the shelf then this command will be invoked when the
            corresponding shelf object is clicked.
        
        - echoCommand : ec               (bool)          [create,query,edit]
            Specify whether the action attached with the c/commandflag should echo to the
            command output areas when invoked. This flag is false by default and must be
            specified with the c/commandflag.
        
        - enable : en                    (bool)          [create,query,edit]
            Enable state for the menu item.  A disabled menu item is dimmed and
            unresponsive.  An enabled menu item is selectable and has normal appearance.
        
        - enableCommandRepeat : ecr      (bool)          [create,query,edit]
            This flag only affects menu items to which a command can be attached.  Specify
            true and the command may be repeated by executing the command repeatLast.  This
            flag is true by default for all items except for option box items.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - familyImage : fi               (unicode)       [query]
            Get the filename of the family icon associated with the menu. The family icon
            will be used for the shelf unless an icon is specified with the imageflag.
        
        - image : i                      (unicode)       [create,query,edit]
            The filename of the icon associated with the menu item.  If the menu containing
            the menu item is being edited with a menuEditor widget, then the menuEditor will
            use this icon to represent the menu item. This icon will be displayed on the
            shelf when the menu item is placed there.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            Specify a short (5 character) text string to be overlayed on top of the icon
            associated with the menu item. This is primarily a mechanism for differentiating
            menu items that are using a Family icon due to the fact that an icon image had
            not been explicitly defined. The image overlay label will not be used if an icon
            image is defined for the menu item.
        
        - insertAfter : ia               (unicode)       [create]
            Specify After which item the new one will be placed. If this flag is not
            specified, item is added at the end of the menu. Use the empty string to insert
            before the first item of the menu.
        
        - isCheckBox : icb               (bool)          [query]
            Returns true if the item is a check box item.
        
        - isOptionBox : iob              (bool)          [query]
            Returns true if the item is an option box item.
        
        - isRadioButton : irb            (bool)          [query]
            Returns true if the item is a radio button item.
        
        - italicized : itl               (bool)          [create,query]
            Specify if text should be italicized. Only supported in menus which use the
            marking menu implementation.  Default is false.
        
        - keyEquivalent : ke             (unicode)       []
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the item.
        
        - longDivider : ld               (bool)          [create,query,edit]
            Indicate whether the divider is long or short. Has no effect if divider label is
            set. Default is true.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - mnemonic : mn                  (unicode)       []
        
        - optionBox : ob                 (bool)          [create,query]
            Indicates that the menu item will be an option box item.  This item will appear
            to the right of the preceeding menu item.
        
        - optionBoxIcon : obi            (unicode)       [create,query,edit]
            The filename of an icon to be used instead of the usual option box icon. The
            icon is searched for in the folder specified by the XBMLANGPATH environment
            variable. The icon can be any size, but will be resized to the standard 16x16
            pixels when drawn.
        
        - optionModifier : opt           (bool)          []
        
        - parent : p                     (unicode)       [create]
            Specify the menu that the item will appear in.
        
        - postMenuCommand : pmc          (script)        [create,query,edit]
            Specify a script to be executed when the submenu is about to be shown.
        
        - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
            Indicate the pmc/postMenuCommandshould only be invoked once.  Default value is
            false, ie. the pmc/postMenuCommandis invoked everytime the sub menu is shown.
        
        - radialPosition : rp            (unicode)       [create,query,edit]
            The radial position of the menu item if it is in a Marking Menu.  Radial
            positions are given in the form of a cardinal direction, and may be N, NW, W,
            SW, S, SE, Eor NE.
        
        - radioButton : rb               (bool)          [create,query,edit]
            Creates a radio button menu item.  Argument specifies the radio button value.
        
        - runTimeCommand : rtc           (unicode)       [create,edit]
            A shortcut flag to link the menu item with a runTimeCommand. The value is the
            name of the runTimeCommand (unique). It copies the following fields from the
            runTimeCommand if those fields have not been provided to this command: label,
            annotation, image, command. Note: command will be set to the runTimeCommand
            itself.
        
        - shiftModifier : sh             (bool)          []
        
        - sourceType : stp               (unicode)       [create,query,edit]
            Set the language type for a command script. Can only be used in conjunction with
            a command flag.  Without this flag, commands are assumed to be the same language
            of the executing script.  In query mode, will return the language of the
            specified command. Valid values are meland python.
        
        - subMenu : sm                   (bool)          [create,query]
            Indicates that the item will have a submenu. Subsequent menuItems will be added
            to the submenu until setParent -menuis called.  Note that a submenu item creates
            a menu object and consequently the menucommand may be used on the submenu item.
        
        - tearOff : to                   (bool)          [create,query]
            For the case where the menu item is a sub menu this flag will make the sub menu
            tear-off-able. Note that this flag has no effect on the other menu item types.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this menu item feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).                  Flag can have multiple arguments, passed either as a
            tuple or a list.
        
        
        Derived from mel command `maya.cmds.menuItem`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class HyperShade(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Commands for shader editing in the hypergraph
        
        Flags:
        - assign : a                     (unicode)       [create]
            Assign the specified shader node to renderable objects on the active list. The
            node can either be a shading group or the shader node attached to the shading
            group.
        
        - clearWorkArea : cwa            (bool)          [create]
            Push the current work area on to the stack and create a clear work area
        
        - collapse : clp                 (unicode)       [create]
            Hide the upstream nodes from the specified node.
        
        - createNode : rcn               (unicode)       [create]
            Create a node of the specified type.  This is called when a new rendering node
            is created using drag and drop from the image browser or from the RMB context
            sensitive menu on nodes in the Visor Create folders.
        
        - dependGraphArea : dg           (bool)          [create]
            When setting a work area, and the work area doesn't already exist this flag
            inicates a new graph should be created that is either a depend graph or a folder
            view.
        
        - downStream : ds                (bool)          [create]
            Show nodes downstream from the specified node
        
        - duplicate : dup                (bool)          [create]
            Duplicate upstream nodes.  If the node is a shader make sure duplicate include
            the shading group if there is one
        
        - fixRenderSize : fix            (bool)          [create]
            If set to true dont rerender swatches when they change size as the user zooms
        
        - incremental : inc              (bool)          [create]
            Enable or disable incremental layout when making new nodes or connections
        
        - listDownstreamNodes : ldn      (PyNode)        [create]
            List all the downstream render nodes from the specified nodes.
        
        - listDownstreamShaderNodes : lds (PyNode)        [create]
            List all the downstream shader nodes from the specified nodes.
        
        - listUpstreamNodes : lun        (PyNode)        [create]
            List all the upstream render nodes from the specified nodes.
        
        - name : n                       (unicode)       [create]
            Name for the work area created by this command
        
        - networks : net                 (bool)          [create]
            Do an incremental layout on all of the nodes in the current selection list and
            that are in the current work area.
        
        - noSGShapes : nsg               (bool)          [create]
            Display only shapes that are connected to nodes in the network other than a
            shading group.
        
        - noShapes : ns                  (bool)          [create]
            Display no shapes when graphing networks.
        
        - noTransforms : nt              (bool)          [create]
            Display no transforms when graphing networks.
        
        - objects : o                    (unicode)       [create]
            Select the objects which are attached to the specified shader node. The shader
            node can be either the shading group or the shader attached to the shading
            group.  When this flag's argument is the empty string, we will use the currently
            selected shder node as the input.
        
        - renderCreateAndDrop : rcd      (unicode)       [create]
            Create a render node of the specified type and put user into drag and drop mode
            to place or connect it.
        
        - reset : rst                    (bool)          [create]
            Reset the Hypershade panel to its initial state.  In particular delete all the
            work areas.
        
        - resetGraph : rsg               (bool)          [create]
            Reset the current graph.  Typically called prior to rebuilding a folder in a
            Hypershade view.
        
        - resetSwatch : rss              (bool)          [create]
            For all selected nodes remove user defined swatches if the node has one
        
        - setAllowsRegraphing : sar      (bool)          [create]
            For internal use only.
        
        - setWorkArea : swa              (unicode)       [create]
            Set the work area to the existing named work area
        
        - shaderNetwork : sn             (unicode)       [create]
            Show the shader network for the specified material node.  If the materials
            shading group has a displacement or volume map these will be shown.  If not then
            the shading group will not be shown.
        
        - shaderNetworks : sns           (bool)          [create]
            Show the shader network for all the objects on the selection list that have
            shaders.
        
        - shaderNetworksSelectMaterialNodes : smn (bool)          [create]
            Select the material nodes in the shader network for all the objects on the
            selection list that have shaders.
        
        - snapShot : snp                 (bool)          [create]
            Put hypergraph in snapshot mode.  This is only for testing
        
        - uncollapse : ucl               (unicode)       [create]
            Unhide the upstream nodes from the specified node.
        
        - upStream : ups                 (bool)          [create]
            Show nodes upstream from the specified node
        
        - userDefinedLayout : udl        (bool)          [create]
            Enable or disable remembrance of user defined layouts.  Default is disabled
            until this functionality is better tested.
        
        - workAreaAddCmd : waa           (unicode)       [create]
            Set the MEL procedure called when a new work area is added to HyperShade
        
        - workAreaDeleteCmd : wad        (unicode)       [create]
            Set the MEL procedure called when a work area is deleted in HyperShade
        
        - workAreaSelectCmd : was        (unicode)       [create]
            Set the MEL procedure called when a work area is selected in HyperShade
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.hyperShade`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Canvas(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def pressCommand(self, val='True', **kwargs):
        """
        Command to be executed when there is a mouse press.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setHsvValue(self, val='True', **kwargs):
        """
        Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setRgbValue(self, val='True', **kwargs):
        """
        Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Creates a control capable of displaying a color swatch. This control can also
        accept a command to be called when the colour swatch is pressed by the user.
        Note: The -dgc/dragCallback and -dpc/dropCallback are not available for this
        control.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hsvValue : hsv                 (float, float, float) [create,query,edit]
            Three float values corresponding to the hue, saturation, and value color
            components, where the hue value ranges from 0.0 to 360.0 and the saturation and
            value components range from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - pressCommand : pc              (script)        [create,edit]
            Command to be executed when there is a mouse press.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rgbValue : rgb                 (float, float, float) [create,query,edit]
            Three float values corresponding to the red, green, and blue color components,
            all of which range from 0.0 to 1.0.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.canvas`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Visor(PyUI):
    def getAddFolder(self, **kwargs):
        """
        Add a new folder to the current visual browser                             
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getAddNodes(self, **kwargs):
        """
        Add dependency graph nodes by name to a user defined custom folder.  The argument is a string encolsed in quotes with 1 one more node names seperated by blanks                                    
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getAllowPanningInX(self, **kwargs):
        """
        Specifies whether or not the user should be able to pan the contents of the visor horizontally. Default is true.                                   
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getAllowPanningInY(self, **kwargs):
        """
        Specifies whether or not the user should be able to pan the contents of the visor vertically. Default is true.                             
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getAllowZooming(self, **kwargs):
        """
        Specifies whether or not the user should be able to zoom the contents of the visor. Default is true.                               
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Mel command which will return a list of nodes to add to a folder                                   
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getDeleteFolder(self, **kwargs):
        """
        Delete the specified folder and all of its children                                
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getEditFolder(self, **kwargs):
        """
        Edit the name and MEL command for an existing folder                               
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getFolderList(self, **kwargs):
        """
        Return a string array of the folders in the visor.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getMenu(self, **kwargs):
        """
        Set the name of the script to run to get a popup menu                              
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getNodeType(self, **kwargs):
        """
        A node type used by folders of type nodeTypeInDAG                                  
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getOpenDirectories(self, **kwargs):
        """
        When adding a new folder indicate if it sub directories will be show. The default is to not show sub directories.                                  
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getOpenFolder(self, **kwargs):
        """
        When adding a new folder indicate if it will be open or closed by default. The default is closed.                                  
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getPath(self, **kwargs):
        """
        Path to a file system directory to be displayed in the folder                              
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getPopupMenuScript(self, **kwargs):
        """
        Specifies the script to be called when the right mouse button is pressed in the visor. The name of the editor in which the right mouse button was pressed will be appended to the script at the time the script is called.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getRebuild(self, **kwargs):
        """
        Rebuild the visor after interactively adding a folder                              
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getRefreshAllSwatches(self, **kwargs):
        """
        Refresh the swatches of all files currently displayed in this visor.                               
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getRefreshSelectedSwatches(self, **kwargs):
        """
        Refresh the swatches of all files currently selected in any visor.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getRefreshSwatch(self, **kwargs):
        """
        Refresh the swatch of the file with the specified path.                                    
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getReset(self, **kwargs):
        """
        Clear all previously loaded folder descriptions in preperation for building a new visual browser                                   
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getRestrictPanAndZoom(self, **kwargs):
        """
        Specifies whether the panning and zooming of the visor should be restricted to keep the contents in the top left corner of the visor when they are smaller than the visible area within the visor. Default is true.                                
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getSaveSwatches(self, **kwargs):
        """
        Save swatches to disk for currently displayed image files.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getScrollBar(self, **kwargs):
        """
        Set the name of the scroll bar associated with visor                               
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getScrollPercent(self, **kwargs):
        """
        Set the percentage value for the scroll bar.  Typically called from a a scroll bars callback.                              
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getSelectedGadgets(self, **kwargs):
        """
        Return a string array of the currently selected gadgets (files, folders, nodes) in the visor.                              
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getShowDividers(self, **kwargs):
        """
        Specifies whether or not the visor should show dividers. The default is true. If -showDividers is set to false, dividers will be drawn as folders instead.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getShowFiles(self, **kwargs):
        """
        Specifies whether or not the visor should show files. The default is true.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getShowFolders(self, **kwargs):
        """
        Specifies whether or not the visor should show folders. The default is true.                               
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getShowNodes(self, **kwargs):
        """
        Specifies whether or not the visor should show nodes. The default is true.                                 
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Return the MEL command string to save the folder setup in visor                                    
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getStyle(self, **kwargs):
        """
        Set display style for the browser.  Options are:     outliner          A single column with an outliner style icon and a text label     singleColumn          A single column with an image style icon and a text label     multiColumn          A multiple column grid of swatches with the text label below the swatch                                   
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getTransform(self, **kwargs):
        """
        Name of a transform node used by folders of type nodeTypeInDAG                             
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    def getType(self, **kwargs):
        """
        Type of the new folder.  Options are: command A mel command that will return a list of depend nodes that will          be displayed in the folderconnectedNodes The nodes connected to the specified node name will be displayed          in the folderdefaultNodes A mel command that will generate default node types.  These nodes          will not be part of the scene and are used for drag and drop          creation of new nodes that are in the scene.  The mel command          use with this type is usually listNodetypes.directory A directory name in the file systemdirectoryCommand A mel command that will return a directory name in the file systemfolder An empty folder(the default value).  Empty folders can be used         as user defined folders by dropping dependency graph nodes in to themnodeTypeInDAG List all nodes of a given type under a specified transforms in the                 DAG.  For example list all the shaders for a character by specifying         the top transform of the charactershelfItems A directory containing mel files to use as shelf itemsFlag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Command for the creation and manipulation of a Visor UI element. The Visor is
        used to display the contents of a scene (rendering related nodes in particular),
        as well as files on disk which the user may wish to bring into the scene (shader
        and texture libraries for example).
        
        Flags:
        - addFolder : add                (bool)          [create,query]
            Add a new folder to the current visual browser
        
        - addNodes : adn                 (unicode)       [create,query]
            Add dependency graph nodes by name to a user defined custom folder.  The
            argument is a string encolsed in quotes with 1 one more node names seperated by
            blanks
        
        - allowPanningInX : apx          (bool)          [create,query]
            Specifies whether or not the user should be able to pan the contents of the
            visor horizontally. Default is true.
        
        - allowPanningInY : apy          (bool)          [create,query]
            Specifies whether or not the user should be able to pan the contents of the
            visor vertically. Default is true.
        
        - allowZooming : az              (bool)          [create,query]
            Specifies whether or not the user should be able to zoom the contents of the
            visor. Default is true.
        
        - command : cmd                  (unicode)       [create,query]
            Mel command which will return a list of nodes to add to a folder
        
        - deleteFolder : deleteFolder    (unicode)       [create,query]
            Delete the specified folder and all of its children
        
        - editFolder : edf               (unicode)       [create,query]
            Edit the name and MEL command for an existing folder
        
        - folderList : fl                (unicode)       [query]
            Return a string array of the folders in the visor.
        
        - menu : mn                      (unicode)       [create,query]
            Set the name of the script to run to get a popup menu
        
        - name : n                       (unicode)       [create,query]
            Name of the new folder
        
        - nodeType : ntp                 (unicode)       [create,query]
            A node type used by folders of type nodeTypeInDAG
        
        - openDirectories : opd          (bool)          [create,query]
            When adding a new folder indicate if it sub directories will be show. The
            default is to not show sub directories.
        
        - openFolder : opf               (bool)          [create,query]
            When adding a new folder indicate if it will be open or closed by default. The
            default is closed.
        
        - parent : p                     (unicode)       [create,query]
            Parent folder of this folder
        
        - path : pth                     (unicode)       [create,query]
            Path to a file system directory to be displayed in the folder
        
        - popupMenuScript : pms          (unicode)       [create,query]
            Specifies the script to be called when the right mouse button is pressed in the
            visor. The name of the editor in which the right mouse button was pressed will
            be appended to the script at the time the script is called.
        
        - rebuild : re                   (bool)          [create,query]
            Rebuild the visor after interactively adding a folder
        
        - refreshAllSwatches : ras       (bool)          [create,query]
            Refresh the swatches of all files currently displayed in this visor.
        
        - refreshSelectedSwatches : rss  (bool)          [create,query]
            Refresh the swatches of all files currently selected in any visor.
        
        - refreshSwatch : rs             (unicode)       [create,query]
            Refresh the swatch of the file with the specified path.
        
        - reset : rst                    (bool)          [create,query]
            Clear all previously loaded folder descriptions in preperation for building a
            new visual browser
        
        - restrictPanAndZoom : rpz       (bool)          [create,query]
            Specifies whether the panning and zooming of the visor should be restricted to
            keep the contents in the top left corner of the visor when they are smaller than
            the visible area within the visor. Default is true.
        
        - saveSwatches : ss              (bool)          [create,query]
            Save swatches to disk for currently displayed image files.
        
        - scrollBar : sb                 (unicode)       [create,query]
            Set the name of the scroll bar associated with visor
        
        - scrollPercent : sp             (float)         [create,query]
            Set the percentage value for the scroll bar.  Typically called from a a scroll
            bars callback.
        
        - selectedGadgets : sg           (unicode)       [query]
            Return a string array of the currently selected gadgets (files, folders, nodes)
            in the visor.
        
        - showDividers : sd              (bool)          [create,query]
            Specifies whether or not the visor should show dividers. The default is true. If
            -showDividers is set to false, dividers will be drawn as folders instead.
        
        - showFiles : sfi                (bool)          [create,query]
            Specifies whether or not the visor should show files. The default is true.
        
        - showFolders : sfo              (bool)          [create,query]
            Specifies whether or not the visor should show folders. The default is true.
        
        - showNodes : sn                 (bool)          [create,query]
            Specifies whether or not the visor should show nodes. The default is true.
        
        - stateString : sts              (bool)          [create,query]
            Return the MEL command string to save the folder setup in visor
        
        - style : stl                    (unicode)       [create,query]
            Set display style for the browser.  Options are:     outliner          A single
            column with an outliner style icon and a text label     singleColumn          A
            single column with an image style icon and a text label     multiColumn
            A multiple column grid of swatches with the text label below the swatch
        
        - transform : trn                (unicode)       [create,query]
            Name of a transform node used by folders of type nodeTypeInDAG
        
        - type : typ                     (unicode)       [create,query]
            Type of the new folder.  Options are: command A mel command that will return a
            list of depend nodes that will          be displayed in the folderconnectedNodes
            The nodes connected to the specified node name will be displayed          in the
            folderdefaultNodes A mel command that will generate default node types.  These
            nodes          will not be part of the scene and are used for drag and drop
            creation of new nodes that are in the scene.  The mel command          use with
            this type is usually listNodetypes.directory A directory name in the file
            systemdirectoryCommand A mel command that will return a directory name in the
            file systemfolder An empty folder(the default value).  Empty folders can be used
            as user defined folders by dropping dependency graph nodes in to
            themnodeTypeInDAG List all nodes of a given type under a specified transforms in
            the                 DAG.  For example list all the shaders for a character by
            specifying         the top transform of the charactershelfItems A directory
            containing mel files to use as shelf itemsFlag can have multiple arguments,
            passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.visor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ShelfButton(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getCommandRepeatable(self, **kwargs):
        """
        Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut to repeat the last executed command.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getDoubleClickCommand(self, **kwargs):
        """
        Command executed when the control is double clicked.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getEnableCommandRepeat(self, **kwargs):
        """
        This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFlat(self, **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFlexibleWidthType(self, **kwargs):
        """
        This flag is used to have the shelf button have a wider or thinner width. The valid values are: Standard = 1, Custom = 2, Automatic = 3. The Standard type will resize, keeping the aspect ratio, to 32x32 pixels. The Automatic type will adjust the button width to make sure wide images are used properly. The Custom type will allow the user to choose the desired width for the icon. Default value is 3.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFlexibleWidthValue(self, **kwargs):
        """
        This flag is only useful when the Custom flexibleWidthTypeis chosen. The value is a width in pixels.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getHighlightImage(self, **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getSelectionImage(self, **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getSourceType(self, **kwargs):
        """
        Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def handleNodeDropCallback(self, val='True', **kwargs):
        """
        Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def labelEditingCallback(self, val='True', **kwargs):
        """
        Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new label string will be passed to the callback.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def menuItem(self, val='True', **kwargs):
        """
        Creates menu items for this button by passing in arguments for the menu item label and command for each item.  These should be passed as strings: labelcommandfor each use of this flag in the command.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def menuItemPython(self, val='True', **kwargs):
        """
        This flag is used to specify that a menu item is in Python. The integer value is the index of the menuItem that is modified by this flag. This is 0 based, so it corresponds to the (index+1)th occurrence of the /-mi/-menuItemflag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def scaleIcon(self, val='True', **kwargs):
        """
        For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the flag is specified, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setCommandRepeatable(self, val='True', **kwargs):
        """
        Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut to repeat the last executed command.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setDoubleClickCommand(self, val='True', **kwargs):
        """
        Command executed when the control is double clicked.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setEnableCommandRepeat(self, val='True', **kwargs):
        """
        This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFlat(self, val='True', **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFlexibleWidthType(self, val='True', **kwargs):
        """
        This flag is used to have the shelf button have a wider or thinner width. The valid values are: Standard = 1, Custom = 2, Automatic = 3. The Standard type will resize, keeping the aspect ratio, to 32x32 pixels. The Automatic type will adjust the button width to make sure wide images are used properly. The Custom type will allow the user to choose the desired width for the icon. Default value is 3.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFlexibleWidthValue(self, val='True', **kwargs):
        """
        This flag is only useful when the Custom flexibleWidthTypeis chosen. The value is a width in pixels.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setHighlightImage(self, val='True', **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setSelectionImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setSourceType(self, val='True', **kwargs):
        """
        Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates an iconTextButtonthat is designed
        to be on the shelf. The button contains a command that can be drag'n'dropped.
        
        Flags:
        - actionIsSubstitute : ais       (bool)          []
        
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,query,edit]
            Command executed when the control is pressed.
        
        - commandRepeatable : rpt        (bool)          [create,query,edit]
            Set if the MEL command specified in the command flag should be repeatable or
            not.  The gkey, by default, is the shortcut to repeat the last executed command.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,query,edit]
            Command executed when the control is double clicked.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableCommandRepeat : ecr      (bool)          [create,query,edit]
            This flag only affects menu items to which a command can be attached.  Specify
            true and the command may be repeated by executing the command repeatLast.  This
            flag is true by default for all items except for option box items.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flat : fla                     (bool)          [create,query,edit]
            Sets whether the control will be a flat button (0 false, 1 true).
        
        - flexibleWidthType : fwt        (int)           [create,query,edit]
            This flag is used to have the shelf button have a wider or thinner width. The
            valid values are: Standard = 1, Custom = 2, Automatic = 3. The Standard type
            will resize, keeping the aspect ratio, to 32x32 pixels. The Automatic type will
            adjust the button width to make sure wide images are used properly. The Custom
            type will allow the user to choose the desired width for the icon. Default value
            is 3.
        
        - flexibleWidthValue : fwv       (int)           [create,query,edit]
            This flag is only useful when the Custom flexibleWidthTypeis chosen. The value
            is a width in pixels.
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - handleNodeDropCallback : hnd   (script)        [create,edit]
            Specify a script callback which is called when a node is dropped on the control.
            The name of the node being dropped will be passed to the function  (python
            callable) or appended to the end (script) to form the command to be executed.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - highlightImage : hi            (unicode)       [create,query,edit]
            Highlight image displayed while the cursor is over the control. Image size must
            be the same as the image specified with the -i/imageflag. This is a Windows only
            flag.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelEditingCallback : lec     (script)        [create,edit]
            Specify a callback which is called after the user double clicks the label of the
            control to give it a new label. The new label string will be passed to the
            callback.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - menuItem : mi                  (unicode, unicode) [create,edit]
            Creates menu items for this button by passing in arguments for the menu item
            label and command for each item.  These should be passed as strings:
            labelcommandfor each use of this flag in the command.
        
        - menuItemPython : mip           (int)           [create,edit]
            This flag is used to specify that a menu item is in Python. The integer value is
            the index of the menuItem that is modified by this flag. This is 0 based, so it
            corresponds to the (index+1)th occurrence of the /-mi/-menuItemflag.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - noDefaultPopup : ndp           (bool)          [create]
            Disable the default popup menus.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - scaleIcon : sic                (bool)          [create,edit]
            For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the
            flag is specified, the icon will be scaled to the size of the control.
        
        - selectionImage : si            (unicode)       [create,query,edit]
            Image displayed while the control is selected. Image size must be the same as
            the image specified with the -i/imageflag. This is a Windows only flag.
        
        - sourceType : stp               (unicode)       [create,query,edit]
            Sets the language type for the command script. Can only be used in conjunction
            with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled
            by default), and python.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.shelfButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class LayoutDialog(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The layoutDialog command creates a modal dialog containing a formLayout with 100
        divisions. The formLayout can be populated with arbitrary UI elements through
        use of the '-ui/-uiScript' flag. NOTE:A layoutDialog is not a window and certain
        UI elements will not function properly within it. In particular menuBars and
        panels containing menuBars should not be used with the layoutDialog.
        
        Flags:
        - backgroundColor : bgc          (float, float, float) [create]
            The background color of the dialog. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
            (Windows only flag)
        
        - dismiss : dis                  (unicode)       [create]
            Dismiss the current layoutDialog. The specified string will be set as the result
            of the initial layoutDialog command.
        
        - parent : p                     (unicode)       [create]
            Specify the parent window for the dialog.  The dialog will be centered on this
            window and raise and lower with it's parent. By default, the dialog is not
            parented to a particular window and is simply centered on the screen.
        
        - title : t                      (unicode)       [create]
            The dialog title.
        
        - uiScript : ui                  (script)        [create]
            The specified MEL procedure name will be invoked to build the UI of the
            layoutDialog. This flag is required when creating a layoutDialog. The top-level
            control of a layoutDialog is a formLayout with 100 divisions. It can be accessed
            by calling 'setParent -q' at the beginning of the specified MEL procedure.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.layoutDialog`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DeviceEditor(PyUI):
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def getTakePath(self, **kwargs):
        """
        The path used for writing/reading take data through the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def setTakePath(self, val='True', **kwargs):
        """
        The path used for writing/reading take data through the editor.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This creates an editor for creating/modifying attachments to input devices.
        
        Dynamic library stub function 
        
        Flags:
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - takePath : tp                  (unicode)       [query,edit]
            The path used for writing/reading take data through the editor.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.deviceEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CommandLine(PyUI):
    def command(self, val='True', **kwargs):
        """
        Command executed when the command line text changes.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def enterCommand(self, val='True', **kwargs):
        """
        Command executed when the keypad 'Enter' key is pressed.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getHoldFocus(self, **kwargs):
        """
        Sets whether the command line should hold focus after exectuing a command.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getInputAnnotation(self, **kwargs):
        """
        Annotate the input field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getNumberOfHistoryLines(self, **kwargs):
        """
        Sets the maximum number of commands saved to the command line history. Up to -nhl/numberOfHistoryLines previous commands will be available by pressing the up-arrow from within the input field. The default value is 50.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getOutputAnnotation(self, **kwargs):
        """
        Annotate the output field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getSourceType(self, **kwargs):
        """
        Sets the source type of this command line. Currently supports mel(enabled by default) and python.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setHoldFocus(self, val='True', **kwargs):
        """
        Sets whether the command line should hold focus after exectuing a command.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setInputAnnotation(self, val='True', **kwargs):
        """
        Annotate the input field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setNumberOfHistoryLines(self, val='True', **kwargs):
        """
        Sets the maximum number of commands saved to the command line history. Up to -nhl/numberOfHistoryLines previous commands will be available by pressing the up-arrow from within the input field. The default value is 50.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setOutputAnnotation(self, val='True', **kwargs):
        """
        Annotate the output field with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setSourceType(self, val='True', **kwargs):
        """
        Sets the source type of this command line. Currently supports mel(enabled by default) and python.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a single line for command input/output.The left half is for
        input, the right half for output.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,edit]
            Command executed when the command line text changes.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enterCommand : ec              (script)        [create,edit]
            Command executed when the keypad 'Enter' key is pressed.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - holdFocus : hf                 (bool)          [create,query,edit]
            Sets whether the command line should hold focus after exectuing a command.
        
        - inputAnnotation : ian          (unicode)       [create,query,edit]
            Annotate the input field with an extra string value.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfHistoryLines : nhl     (int)           [create,query,edit]
            Sets the maximum number of commands saved to the command line history. Up to
            -nhl/numberOfHistoryLines previous commands will be available by pressing the
            up-arrow from within the input field. The default value is 50.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - outputAnnotation : oan         (unicode)       [create,query,edit]
            Annotate the output field with an extra string value.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - sourceType : st                (unicode)       [create,query,edit]
            Sets the source type of this command line. Currently supports mel(enabled by
            default) and python.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.commandLine`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class MenuSet(PyUI):
    def getAllMenuSets(self, **kwargs):
        """
        Returns an array of the all the menu set object names in use.  Query returns string array.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getCurrentMenuSet(self, **kwargs):
        """
        The currently active menu set under which all operations affect (append, insert, remove, etc.).  Query returns string.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getExists(self, **kwargs):
        """
        Returns whether the specified menu set exists.  This query flag supports string arguments. ie. menuSet -q -exists animationMenuSet;       
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getHotBoxVisible(self, **kwargs):
        """
        Whether this menu set should be displayed in the hotbox as well as in the main menubar.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label of the current menu set.  Query returns string.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getMenuArray(self, **kwargs):
        """
        An array of menu names (strings) in the current menu set.  Query returns string array.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getNumberOfMenuSets(self, **kwargs):
        """
        Number of menuSets in total.  Query returns int.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getNumberOfMenus(self, **kwargs):
        """
        The mumber of menus in the current menu set.  Query returns int.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def getPermanent(self, **kwargs):
        """
        Whether this menu set can be removed.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def setHotBoxVisible(self, val='True', **kwargs):
        """
        Whether this menu set should be displayed in the hotbox as well as in the main menubar.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    def setPermanent(self, val='True', **kwargs):
        """
        Whether this menu set can be removed.                  
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a menu set which is used to logically order menus for display in the main
        menu bar.  Such menu sets can be edited and reordered dynamically.
        
        Flags:
        - addMenu : am                   (unicode)       [create]
            Appends a menu onto the end of the current menu set.
        
        - allMenuSets : ams              (bool)          [query]
            Returns an array of the all the menu set object names in use.  Query returns
            string array.
        
        - currentMenuSet : cms           (unicode)       [create,query]
            The currently active menu set under which all operations affect (append, insert,
            remove, etc.).  Query returns string.
        
        - exists : ex                    (unicode)       [query]
            Returns whether the specified menu set exists.  This query flag supports string
            arguments. ie. menuSet -q -exists animationMenuSet;
        
        - hotBoxVisible : hbv            (bool)          [create,query,edit]
            Whether this menu set should be displayed in the hotbox as well as in the main
            menubar.
        
        - insertMenu : im                (unicode, int)  [create]
            Inserts a menu into a specified index in the current menu set.
        
        - label : l                      (unicode)       [create,query]
            The label of the current menu set.  Query returns string.
        
        - menuArray : ma                 (unicode)       [create,query]
            An array of menu names (strings) in the current menu set.  Query returns string
            array.
        
        - moveMenu : mm                  (unicode, int)  [create]
            Moves a specified menu from the current menu set to a new position.
        
        - moveMenuSet : mms              (unicode, int)  [create]
            Moves a specified menu set to another index.
        
        - numberOfMenuSets : nms         (bool)          [query]
            Number of menuSets in total.  Query returns int.
        
        - numberOfMenus : nm             (bool)          [query]
            The mumber of menus in the current menu set.  Query returns int.
        
        - permanent : p                  (bool)          [create,query,edit]
            Whether this menu set can be removed.
        
        - removeMenu : rm                (unicode)       [create]
            Removes a specified menu from the current menu set.
        
        - removeMenuSet : rms            (unicode)       [create]
            Removes the specified menu set object from the list of all menu sets.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.menuSet`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class BlendShapeEditor(PyUI):
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getTargetControlList(self, **kwargs):
        """
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getTargetList(self, **kwargs):
        """
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def getVerticalSliders(self, **kwargs):
        """
        Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def setVerticalSliders(self, val='True', **kwargs):
        """
        Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates an editor that derives from the base editor class that has
        controls for blendShape, control nodes.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - targetControlList : tcl        (bool)          [query]
        
        - targetList : tl                (bool)          [query]
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - verticalSliders : vs           (bool)          [create,query,edit]
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.blendShapeEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class TextScrollList(PyUI):
    def append(self, val='True', **kwargs):
        """
        Add an item to the end of the list.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def appendPosition(self, val='True', **kwargs):
        """
        Append an item at the specified position. The position is a 1-based index.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def deleteKeyCommand(self, val='True', **kwargs):
        """
        Specify the command to be executed when the delete or backspace key is pressed.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def deselectAll(self, val='True', **kwargs):
        """
        Deselect all items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def deselectIndexedItem(self, val='True', **kwargs):
        """
        Deselect the indexed item.  Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def deselectItem(self, val='True', **kwargs):
        """
        Deselect the item that contains the specified text.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Specify the command to be executed when an item is double clicked.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def extend(self, appendList):
        """
        append a list of strings
        """
        ...
    def getAllItems(self, **kwargs):
        """
        All the items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getAllowAutomaticSelection(self, **kwargs):
        """
        Specify automatic selection mode.  When automaticSelection is on each item that the mouse is over (during dragging once an item has been selected) will be selected.  Thus, if -sc/selectCommand someCommandis set, someCommandwill be called for each selected item. If -aas/allowAutomaticSelectionis off, then only the item selected when the mouse button is up will be the selected item, so -sc/selectCommand someCommandis only called once if it is set.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getAllowMultiSelection(self, **kwargs):
        """
        Specify multi or single selection mode.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the list items.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getNumberOfItems(self, **kwargs):
        """
        Number of items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getNumberOfRows(self, **kwargs):
        """
        Number of visible rows.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getNumberOfSelectedItems(self, **kwargs):
        """
        Number of selected items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getSelectIndexedItem(self, **kwargs):
        """
        Select the indexed item. Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getSelectItem(self, **kwargs):
        """
        Select the item that contains the specified text.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getSelectUniqueTagItem(self, **kwargs):
        """
        Allow item selections based on the unique tag. In query mode, it will return the unique tag of the selected items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def lineFont(self, val='True', **kwargs):
        """
        Specify the font for a specific line of the list. The indices are 1-based. Valid font values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def removeAll(self, val='True', **kwargs):
        """
        Remove all items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def removeIndexedItem(self, val='True', **kwargs):
        """
        Remove the indexed item. Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def removeIndexedItems(self, removeList):
        """
        remove a list of indices
        """
        ...
    def removeItem(self, val='True', **kwargs):
        """
        Remove the item with the specified text.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def selectAll(self):
        """
        select all items
        """
        ...
    def selectCommand(self, val='True', **kwargs):
        """
        Specify the command to be executed when an item is selected.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def selectIndexedItems(self, selectList):
        """
        select a list of indices
        """
        ...
    def setAllowAutomaticSelection(self, val='True', **kwargs):
        """
        Specify automatic selection mode.  When automaticSelection is on each item that the mouse is over (during dragging once an item has been selected) will be selected.  Thus, if -sc/selectCommand someCommandis set, someCommandwill be called for each selected item. If -aas/allowAutomaticSelectionis off, then only the item selected when the mouse button is up will be the selected item, so -sc/selectCommand someCommandis only called once if it is set.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setAllowMultiSelection(self, val='True', **kwargs):
        """
        Specify multi or single selection mode.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the list items.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setNumberOfRows(self, val='True', **kwargs):
        """
        Number of visible rows.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setSelectIndexedItem(self, val='True', **kwargs):
        """
        Select the indexed item. Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setSelectItem(self, val='True', **kwargs):
        """
        Select the item that contains the specified text.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setSelectUniqueTagItem(self, val='True', **kwargs):
        """
        Allow item selections based on the unique tag. In query mode, it will return the unique tag of the selected items.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def showIndexedItem(self, val='True', **kwargs):
        """
        Show the indexed item.  Scroll the list as necessary so that the indexed item is visible.  Indices are 1-based.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    def uniqueTag(self, val='True', **kwargs):
        """
        This flag can only be used in conjunction with the append or the appendPosition flag. The string specifies a unique tag for the appended item; the tag can then be used to query an item. This tag provides an alternate way to uniquely identify a list item using a string instead of by index. Tags are case insensitive.                  
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries a text scrolling list. The list can be in
        single select mode where only one item at at time is selected, or in multi-
        select mode where many items may be selected. Note: The -dgc/dragCallback flag
        works only on Windows.
        
        Flags:
        - allItems : ai                  (bool)          [query]
            All the items.
        
        - allowAutomaticSelection : aas  (bool)          [create,query,edit]
            Specify automatic selection mode.  When automaticSelection is on each item that
            the mouse is over (during dragging once an item has been selected) will be
            selected.  Thus, if -sc/selectCommand someCommandis set, someCommandwill be
            called for each selected item. If -aas/allowAutomaticSelectionis off, then only
            the item selected when the mouse button is up will be the selected item, so
            -sc/selectCommand someCommandis only called once if it is set.
        
        - allowMultiSelection : ams      (bool)          [create,query,edit]
            Specify multi or single selection mode.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - append : a                     (unicode)       [create,edit]
            Add an item to the end of the list.
        
        - appendPosition : ap            (int, unicode)  [create,edit]
            Append an item at the specified position. The position is a 1-based index.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteKeyCommand : dkc         (script)        [create,edit]
            Specify the command to be executed when the delete or backspace key is pressed.
        
        - deselectAll : da               (bool)          [create,edit]
            Deselect all items.
        
        - deselectIndexedItem : dii      (int)           [create,edit]
            Deselect the indexed item.  Indices are 1-based.
        
        - deselectItem : di              (unicode)       [create,edit]
            Deselect the item that contains the specified text.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Specify the command to be executed when an item is double clicked.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the list items.  Valid values are boldLabelFont,
            smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont,
            obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - lineFont : lf                  (int, unicode)  [create,edit]
            Specify the font for a specific line of the list. The indices are 1-based. Valid
            font values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont,
            plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont,
            fixedWidthFontand smallFixedWidthFont.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfItems : ni             (bool)          [query]
            Number of items.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfRows : nr              (int)           [create,query,edit]
            Number of visible rows.
        
        - numberOfSelectedItems : nsi    (bool)          [query]
            Number of selected items.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - removeAll : ra                 (bool)          [create,edit]
            Remove all items.
        
        - removeIndexedItem : rii        (int)           [create,edit]
            Remove the indexed item. Indices are 1-based.
        
        - removeItem : ri                (unicode)       [create,edit]
            Remove the item with the specified text.
        
        - selectCommand : sc             (script)        [create,edit]
            Specify the command to be executed when an item is selected.
        
        - selectIndexedItem : sii        (int)           [create,query,edit]
            Select the indexed item. Indices are 1-based.
        
        - selectItem : si                (unicode)       [create,query,edit]
            Select the item that contains the specified text.
        
        - selectUniqueTagItem : sut      (unicode)       [create,query,edit]
            Allow item selections based on the unique tag. In query mode, it will return the
            unique tag of the selected items.
        
        - showIndexedItem : shi          (int)           [create,edit]
            Show the indexed item.  Scroll the list as necessary so that the indexed item is
            visible.  Indices are 1-based.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - uniqueTag : utg                (unicode)       [create,edit]
            This flag can only be used in conjunction with the append or the appendPosition
            flag. The string specifies a unique tag for the appended item; the tag can then
            be used to query an item. This tag provides an alternate way to uniquely
            identify a list item using a string instead of by index. Tags are case
            insensitive.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.textScrollList`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IconTextRadioCollection(PyUI):
    def disableCommands(self, val='True', **kwargs):
        """
        Allows a particular iconTextRadioButton in the collection to be selected without invoking the commands attached to the -cc/changeCommand, -onc/onCommand, or -ofc/offCommand flags. This flag is only meaningful when used in conjuction with the -edit and -select flags.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    def getCollectionItemArray(self, **kwargs):
        """
        Returns a string list giving the long names of all the items in this collection.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    def getGl(self, **kwargs):
        """
        Set the collection to have no parent layout.  If the collection has a parent layout then it will be deleted with that layout, otherwise if it is specified to be global it must be explicitly deleted.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    def getNumberOfCollectionItems(self, **kwargs):
        """
        Returns the number of items that are in this collection.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a cluster for iconTextRadioButtons.  Clusters will be
        parented to the current default layout if no parent is specified with the
        -p/parent flag. As children of the layout they will be deleted when the layout
        is deleted. Clusters may also span more than one window if the -g/global flag is
        used. In this case the cluster has no parent so must be explicitly deleted with
        the 'deleteUI' command.
        
        Flags:
        - collectionItemArray : cia      (bool)          [query]
            Returns a string list giving the long names of all the items in this collection.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disableCommands : dcm          (bool)          [edit]
            Allows a particular iconTextRadioButton in the collection to be selected without
            invoking the commands attached to the -cc/changeCommand, -onc/onCommand, or
            -ofc/offCommand flags. This flag is only meaningful when used in conjuction with
            the -edit and -select flags.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - gl : gl                        (bool)          [create,query]
            Set the collection to have no parent layout.  If the collection has a parent
            layout then it will be deleted with that layout, otherwise if it is specified to
            be global it must be explicitly deleted.
        
        - numberOfCollectionItems : nci  (bool)          [query]
            Returns the number of items that are in this collection.
        
        - parent : p                     (unicode)       [create]
            Set the specified layout to be the parent layout of the cluster.
        
        - select : sl                    (unicode)       [create,query,edit]
            Select the specified collection item.  If queried will return the name of the
            currently selected collection item.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextRadioCollection`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ChannelBox(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def execute(self, val='True', **kwargs):
        """
        Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in the channel box, for every matching selected object (ie, for every object would be affected if you changed a cell value.)  Before the command is executed, #Ais substituted with the name of the attribute, and #Nwith the name of the node, and #Pwith the full path name of the node.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAttrBgColor(self, **kwargs):
        """
        Controls the background text color of specific attribute names. As with the foreground option, this text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAttrColor(self, **kwargs):
        """
        Controls the foreground text color of specific attribute names. This text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAttrFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be placed on the channel box. This filters the attributes displayed. A filter of 0can be used to reset the filter.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAttrRegex(self, **kwargs):
        """
        Specifies a valid regular expression to specify which attribute names should be selected for foreground text coloring. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getAttributeEditorMode(self, **kwargs):
        """
        Modifies what appears in the channel box for use in the attribute editor. Default is false. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getContainerAtTop(self, **kwargs):
        """
        This flag can be used to specify whether or not the container is drawn at the top of the channel box when a node in the container is selected.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getEnableLabelSelection(self, **kwargs):
        """
        Enables the selection of attributes in the channelBox when used in conjunction with -attributeEditorMode. Default is false.  Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getFieldWidth(self, **kwargs):
        """
        An optional flag which is used to modify the width assigned to fields appearing in the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getFixedAttrList(self, **kwargs):
        """
        Forces the channel box to only display attributes with the specified names, in the order they are specified.  If an empty list is specified, then the channel box will revert to its default behaviour of listing all keyable attributes.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getHistoryObjectList(self, **kwargs):
        """
        Returns a list of strings, the names of every INPUT node associated with an object on the main object list that is of the same type as the node displayed in the INPUT section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getHyperbolic(self, **kwargs):
        """
        Determines whether or not the distance that the mouse has been dragged should be interpreted as a linear or hyperbolic function.  The default is set to hyperbolic being false.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getInputs(self, **kwargs):
        """
        Returns the items shown under the 'INPUTS' heading in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getLabelWidth(self, **kwargs):
        """
        An optional flag which is used to modify the width assigned to labels appearing in the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getLongNames(self, **kwargs):
        """
        Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object which the editor will use as its source of content.  The channel box will only display the (last) item contained in the selectionConnection object. If a NULL string () is specified, then the channel box will revert to its default behaviour of working on the active list.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getMainObjectList(self, **kwargs):
        """
        Returns a list of strings, the names of every object on the active list that is the same type as the object displayed in the top (main) section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getMaxHeight(self, **kwargs):
        """
        An optional flag which is used to limit the height of the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getMaxWidth(self, **kwargs):
        """
        An optional flag which is used to limit the width of the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getNiceNames(self, **kwargs):
        """
        Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getNodeRegex(self, **kwargs):
        """
        Specifies a valid regular expression to specify which node names should (potentially) have their attributes selected for foreground text coloring. If nodeRegex is unspecified then it will assume a value of \*' for a regular expression. The same idea simultaneously applies to the flag attrRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve Note: nodes in namespaces have regular expressions applied as though those nodes weren't in namespaces                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getOutputObjectList(self, **kwargs):
        """
        Returns a list of strings, the names of every OUTPUT node associated an object on the main object list that is of the same type as the node displayed in the OUTPUT section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getOutputs(self, **kwargs):
        """
        Returns the items shown under the 'OUTPUTS' heading in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getPrecision(self, **kwargs):
        """
        Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getSelectedHistoryAttributes(self, **kwargs):
        """
        Returns a list of strings, the names of all the selected attributes in the INPUT section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getSelectedMainAttributes(self, **kwargs):
        """
        Returns a list of strings, the names of all the selected attributes in the top section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getSelectedOutputAttributes(self, **kwargs):
        """
        Returns a list of strings, the names of all the selected attributes in the OUTPUT section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getSelectedShapeAttributes(self, **kwargs):
        """
        Returns a list of strings, the names of all the selected attributes in the middle (shape) section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getShapeObjectList(self, **kwargs):
        """
        Returns a list of strings, the names of every shape associated with an object on the main object list that is of the same type as the object displayed in the middle (shape) section of the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getShapes(self, **kwargs):
        """
        Returns the items shown under the 'SHAPES' heading in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getShowNamespace(self, **kwargs):
        """
        Controls whether or not the namespace of an object is displayed if the object is not in the root namespace.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getShowTransforms(self, **kwargs):
        """
        Controls whether this control will display transform attributes only, or all other attributes. False by default. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getSpeed(self, **kwargs):
        """
        Controls the speed at which the attributes are changed based on the distance the mouse has been dragged.  Common settings for slow/medium/fast are 0.1/1.0/10.0 respectively.  The default is 1.0.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getUseManips(self, **kwargs):
        """
        When you click on a field or label in the channel box, the tool switches to a manipulator that can change that value if you drag in the 3d view.  This flag controls the kind of manips.  Allowed values are none(self-explanatory), invisible(you won't see anything, but dragging in the window will adjust any of the selected attributes), and standard(the same as invisible, except for scale, rotate, and translate, which will be represented by their usual manips.)                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def select(self, val='True', **kwargs):
        """
        Allows programmatic selection of items (nodes or plugs) in the channel box. Selection is equivalent to clicking the item with the mouse; therefore only items currently shown in the channel box can be selected this way.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAttrBgColor(self, val='True', **kwargs):
        """
        Controls the background text color of specific attribute names. As with the foreground option, this text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAttrColor(self, val='True', **kwargs):
        """
        Controls the foreground text color of specific attribute names. This text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAttrFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be placed on the channel box. This filters the attributes displayed. A filter of 0can be used to reset the filter.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAttrRegex(self, val='True', **kwargs):
        """
        Specifies a valid regular expression to specify which attribute names should be selected for foreground text coloring. If attrRegex is unspecified then it will assume a value of \*for a regular expression. The same idea simultaneously applies to the flag nodeRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setAttributeEditorMode(self, val='True', **kwargs):
        """
        Modifies what appears in the channel box for use in the attribute editor. Default is false. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setContainerAtTop(self, val='True', **kwargs):
        """
        This flag can be used to specify whether or not the container is drawn at the top of the channel box when a node in the container is selected.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setEnableLabelSelection(self, val='True', **kwargs):
        """
        Enables the selection of attributes in the channelBox when used in conjunction with -attributeEditorMode. Default is false.  Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setFieldWidth(self, val='True', **kwargs):
        """
        An optional flag which is used to modify the width assigned to fields appearing in the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setFixedAttrList(self, val='True', **kwargs):
        """
        Forces the channel box to only display attributes with the specified names, in the order they are specified.  If an empty list is specified, then the channel box will revert to its default behaviour of listing all keyable attributes.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setHyperbolic(self, val='True', **kwargs):
        """
        Determines whether or not the distance that the mouse has been dragged should be interpreted as a linear or hyperbolic function.  The default is set to hyperbolic being false.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setLabelWidth(self, val='True', **kwargs):
        """
        An optional flag which is used to modify the width assigned to labels appearing in the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setLongNames(self, val='True', **kwargs):
        """
        Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object which the editor will use as its source of content.  The channel box will only display the (last) item contained in the selectionConnection object. If a NULL string () is specified, then the channel box will revert to its default behaviour of working on the active list.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setMaxHeight(self, val='True', **kwargs):
        """
        An optional flag which is used to limit the height of the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setMaxWidth(self, val='True', **kwargs):
        """
        An optional flag which is used to limit the width of the channelBox.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setNiceNames(self, val='True', **kwargs):
        """
        Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setNodeRegex(self, val='True', **kwargs):
        """
        Specifies a valid regular expression to specify which node names should (potentially) have their attributes selected for foreground text coloring. If nodeRegex is unspecified then it will assume a value of \*' for a regular expression. The same idea simultaneously applies to the flag attrRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve Note: nodes in namespaces have regular expressions applied as though those nodes weren't in namespaces                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setPrecision(self, val='True', **kwargs):
        """
        Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setShowNamespace(self, val='True', **kwargs):
        """
        Controls whether or not the namespace of an object is displayed if the object is not in the root namespace.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setShowTransforms(self, val='True', **kwargs):
        """
        Controls whether this control will display transform attributes only, or all other attributes. False by default. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setSpeed(self, val='True', **kwargs):
        """
        Controls the speed at which the attributes are changed based on the distance the mouse has been dragged.  Common settings for slow/medium/fast are 0.1/1.0/10.0 respectively.  The default is 1.0.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setUseManips(self, val='True', **kwargs):
        """
        When you click on a field or label in the channel box, the tool switches to a manipulator that can change that value if you drag in the 3d view.  This flag controls the kind of manips.  Allowed values are none(self-explanatory), invisible(you won't see anything, but dragging in the window will adjust any of the selected attributes), and standard(the same as invisible, except for scale, rotate, and translate, which will be represented by their usual manips.)                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def takeFocus(self, val='True', **kwargs):
        """
        causes the channel box to take over the keyboard focus, if it can.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    def update(self, val='True', **kwargs):
        """
        This flag can be used to force an update of the channel box display, for example after changing a display preference.                  
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a channel box, which is sensitive to the active list.  It
        displays certain attributes (channels) of the last node on the active list, and
        provides a two-way connection to keep the widget up to date. Note: when setting
        the color of attribute names, that color is only valid for its current Maya
        session; each subsequent session will display the default color for the
        attribute name(s) listed in the Channel Box. Any subsequent attributes that are
        added to the Channel Box will be affected by prior regular expressions in their
        current Maya session.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attrBgColor : bc               (float, float, float) [create,query,edit]
            Controls the background text color of specific attribute names. As with the
            foreground option, this text coloring also depends on the node name choice for
            the nodeRegex flag. Arguments correspond to the red, green, and blue color
            components. Each component ranges in value from 0.0 to 1.0. If attrRegex is
            unspecified then it will assume a value of \*for a regular expression. The same
            idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed
            will have their node name coloring be affected in the channel box.
        
        - attrColor : ac                 (float, float, float) [create,query,edit]
            Controls the foreground text color of specific attribute names. This text
            coloring also depends on the node name choice for the nodeRegex flag. Arguments
            correspond to the red, green, and blue color components. Each component ranges
            in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a
            value of \*for a regular expression. The same idea simultaneously applies to the
            flag nodeRegex. Note: nodes that are renamed will have their node name coloring
            be affected in the channel box.
        
        - attrFilter : af                (unicode)       [query,edit]
            Specifies the name of an itemFilter object to be placed on the channel box. This
            filters the attributes displayed. A filter of 0can be used to reset the filter.
        
        - attrRegex : ar                 (unicode)       [create,query,edit]
            Specifies a valid regular expression to specify which attribute names should be
            selected for foreground text coloring. If attrRegex is unspecified then it will
            assume a value of \*for a regular expression. The same idea simultaneously
            applies to the flag nodeRegex. The attrColor flag is required to be specified.
            Note: this regular expression will be treated as though it were case-insensitve
        
        - attributeEditorMode : aem      (bool)          [query,edit]
            Modifies what appears in the channel box for use in the attribute editor.
            Default is false. Queried, returns a boolean.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - containerAtTop : cat           (bool)          [query,edit]
            This flag can be used to specify whether or not the container is drawn at the
            top of the channel box when a node in the container is selected.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enableLabelSelection : els     (bool)          [query,edit]
            Enables the selection of attributes in the channelBox when used in conjunction
            with -attributeEditorMode. Default is false.  Queried, returns a boolean.
        
        - execute : exe                  (unicode, bool) [edit]
            Immediately executes the command string once for every cell (or every selected
            cell, if the boolean argument is TRUE) in the channel box, for every matching
            selected object (ie, for every object would be affected if you changed a cell
            value.)  Before the command is executed, #Ais substituted with the name of the
            attribute, and #Nwith the name of the node, and #Pwith the full path name of the
            node.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fieldWidth : fw                (int)           [query,edit]
            An optional flag which is used to modify the width assigned to fields appearing
            in the channelBox.
        
        - fixedAttrList : fal            (unicode)       [create,query,edit]
            Forces the channel box to only display attributes with the specified names, in
            the order they are specified.  If an empty list is specified, then the channel
            box will revert to its default behaviour of listing all keyable attributes.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - historyObjectList : hol        (bool)          [query]
            Returns a list of strings, the names of every INPUT node associated with an
            object on the main object list that is of the same type as the node displayed in
            the INPUT section of the channel box.
        
        - hyperbolic : hyp               (bool)          [create,query,edit]
            Determines whether or not the distance that the mouse has been dragged should be
            interpreted as a linear or hyperbolic function.  The default is set to
            hyperbolic being false.
        
        - inputs : inputs                (bool)          [query]
            Returns the items shown under the 'INPUTS' heading in the channel box.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - labelWidth : lw                (int)           [query,edit]
            An optional flag which is used to modify the width assigned to labels appearing
            in the channelBox.
        
        - longNames : ln                 (bool)          [query,edit]
            Controls whether long or short attribute names will be used in the interface.
            Note that this flag is ignored if the -niceNames flag is set.  Default is short
            names. Queried, returns a boolean.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object which the editor will use as
            its source of content.  The channel box will only display the (last) item
            contained in the selectionConnection object. If a NULL string () is specified,
            then the channel box will revert to its default behaviour of working on the
            active list.
        
        - mainObjectList : mol           (bool)          [query]
            Returns a list of strings, the names of every object on the active list that is
            the same type as the object displayed in the top (main) section of the channel
            box.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxHeight : mh                 (int)           [query,edit]
            An optional flag which is used to limit the height of the channelBox.
        
        - maxWidth : mw                  (int)           [query,edit]
            An optional flag which is used to limit the width of the channelBox.
        
        - niceNames : nn                 (bool)          [query,edit]
            Controls whether the attribute names will be displayed in a more user-friendly,
            readable way.  When this is on, the longNames flag is ignored.  When this is
            off, attribute names will be displayed either long or short, according to the
            longNames flag. Default is on. Queried, returns a boolean.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - nodeRegex : nr                 (unicode)       [create,query,edit]
            Specifies a valid regular expression to specify which node names should
            (potentially) have their attributes selected for foreground text coloring. If
            nodeRegex is unspecified then it will assume a value of \*' for a regular
            expression. The same idea simultaneously applies to the flag attrRegex. The
            attrColor flag is required to be specified. Note: this regular expression will
            be treated as though it were case-insensitve Note: nodes in namespaces have
            regular expressions applied as though those nodes weren't in namespaces
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - outputObjectList : ool         (bool)          [query]
            Returns a list of strings, the names of every OUTPUT node associated an object
            on the main object list that is of the same type as the node displayed in the
            OUTPUT section of the channel box.
        
        - outputs : out                  (bool)          [query]
            Returns the items shown under the 'OUTPUTS' heading in the channel box.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [query,edit]
            Controls the number of digits to the right of the decimal point that will be
            displayed for float-valued channels. Default is 3.  Queried, returns an int.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - select : s                     (unicode)       [edit]
            Allows programmatic selection of items (nodes or plugs) in the channel box.
            Selection is equivalent to clicking the item with the mouse; therefore only
            items currently shown in the channel box can be selected this way.
        
        - selectedHistoryAttributes : sha (bool)          [query]
            Returns a list of strings, the names of all the selected attributes in the INPUT
            section of the channel box.
        
        - selectedMainAttributes : sma   (bool)          [query]
            Returns a list of strings, the names of all the selected attributes in the top
            section of the channel box.
        
        - selectedOutputAttributes : soa (bool)          [query]
            Returns a list of strings, the names of all the selected attributes in the
            OUTPUT section of the channel box.
        
        - selectedShapeAttributes : ssa  (bool)          [query]
            Returns a list of strings, the names of all the selected attributes in the
            middle (shape) section of the channel box.
        
        - shapeObjectList : sol          (bool)          [query]
            Returns a list of strings, the names of every shape associated with an object on
            the main object list that is of the same type as the object displayed in the
            middle (shape) section of the channel box.
        
        - shapes : shp                   (bool)          [query]
            Returns the items shown under the 'SHAPES' heading in the channel box.
        
        - showNamespace : sn             (bool)          [create,query,edit]
            Controls whether or not the namespace of an object is displayed if the object is
            not in the root namespace.
        
        - showTransforms : st            (bool)          [query,edit]
            Controls whether this control will display transform attributes only, or all
            other attributes. False by default. Queried, returns a boolean.
        
        - speed : spd                    (float)         [create,query,edit]
            Controls the speed at which the attributes are changed based on the distance the
            mouse has been dragged.  Common settings for slow/medium/fast are 0.1/1.0/10.0
            respectively.  The default is 1.0.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - takeFocus : tf                 (bool)          [edit]
            causes the channel box to take over the keyboard focus, if it can.
        
        - update : u                     (bool)          [edit]
            This flag can be used to force an update of the channel box display, for example
            after changing a display preference.
        
        - useManips : mnp                (unicode)       [create,query,edit]
            When you click on a field or label in the channel box, the tool switches to a
            manipulator that can change that value if you drag in the 3d view.  This flag
            controls the kind of manips.  Allowed values are none(self-explanatory),
            invisible(you won't see anything, but dragging in the window will adjust any of
            the selected attributes), and standard(the same as invisible, except for scale,
            rotate, and translate, which will be represented by their usual manips.)
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.channelBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Panel(PyUI):
    """
    pymel panel class
    """
    
    
    
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command allows editing or querying properties of any panels. Not all of the
        common properites of panels can be used with this command. Flags such as
        -tearOff and -replacePanel require that you use the explicit panel command. The
        command 'getPanel -typeOf panelName' will return the explicit type of a panel.
        In query mode, return type is based on queried flag.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.panel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ShellField(PyUI):
    __melui__ : str


class KeyframeOutliner(PyUI):
    def animCurve(self, val='True', **kwargs):
        """
        Name of the animation curve for which to display keyframes.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getDisplay(self, **kwargs):
        """
        narrow | wide What columns to display.  When narrow, time and value will be displayed, when widetangent information will be displayed as well                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setDisplay(self, val='True', **kwargs):
        """
        narrow | wide What columns to display.  When narrow, time and value will be displayed, when widetangent information will be displayed as well                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries a keyframe outliner control.
        
        Flags:
        - animCurve : ac                 (unicode)       [edit]
            Name of the animation curve for which to display keyframes.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - display : dsp                  (unicode)       [query,edit]
            narrow | wide What columns to display.  When narrow, time and value will be
            displayed, when widetangent information will be displayed as well
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.keyframeOutliner`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FontDialog(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Displays a dialog of available fonts for the user to select from. The name of
        the selected font is returned, or an empty string if no font was selected. When
        the FontListflag is used, no dialog is displayed. Instead the command returns an
        array of the available fonts.
        
        Flags:
        - FontList : fl                  (bool)          [create]
            Returns an array of all available font names. No dialog is displayed.
        
        - scalable : sc                  (bool)          [create]
            Limits the fonts returned or displayed to just those that are scalable.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.fontDialog`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ModelEditor(PyUI):
    def activeCustomEnvironment(self, val='True', **kwargs):
        """
        Specifies a path to an image file to be used as environment map. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def addObjects(self, val='True', **kwargs):
        """
        This flag causes the objects contained within the selection connection to be added to the list of objects visible in the view (if viewSelected is true).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def addSelected(self, val='True', **kwargs):
        """
        This flag causes the currently active objects to be added to the list of objects visible in the view (if viewSelected is true).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def cameraName(self, val='True', **kwargs):
        """
        Set the name of the panel's camera transform and shape. The shape name is computed by appending the string Shapeto the transform name. This flag may not be queried.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveComponentsXray(self, **kwargs):
        """
        Turns on or off Xray mode for active components.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveCustomGeometry(self, **kwargs):
        """
        Specifies an identifier for custom geometry to override the geometry to display. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveCustomLighSet(self, **kwargs):
        """
        Specifies an identifier for the light set to use with a scene render filter. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveCustomOverrideGeometry(self, **kwargs):
        """
        Specifies an identifier for an override on the custom geometry for a scene render filter.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveCustomRenderer(self, **kwargs):
        """
        Specifies an identifier for custom renderer to use when a valid scene render filter is also specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveOnly(self, **kwargs):
        """
        Sets whether only active objects should appear shaded in shaded display.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveShadingGraph(self, **kwargs):
        """
        Specifies the shading graph to use to override material display. Only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getActiveView(self, **kwargs):
        """
        Sets this model editor to be the active view.  Returns true if successful.  On query this flag will return whether the view is the active view.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getAllObjects(self, **kwargs):
        """
        Turn on/off the display of all objects for the view of the model editor. This excludes NURBS, CVs, hulls, grids and manipulators.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getBackfaceCulling(self, **kwargs):
        """
        Turns on or off backface culling for the whole view.  This setting overrides the culling settings of individual objects.  All objects draw in the view will be backface culled.  When backface culling is turned on, surfaces becomes invisible in areas where the normal is pointing away from the camera.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getBufferMode(self, **kwargs):
        """
        Deprecated: this is not supported in Viewport 2.0.  Sets the graphic buffer mode.  Possible values are singleor double.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getBumpResolution(self, **kwargs):
        """
        Set the resolution for bakedbump map textures when using the hardware renderer. The default value is 512, 512 respectively.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCamera(self, **kwargs):
        """
        Change or query the name of the camera in model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCameraSet(self, **kwargs):
        """
        Name of the camera set                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCameraSetup(self, **kwargs):
        """
        Based on the model editor name passed in will returns a string list containing camera setups. A camera setup can contain one or more cameras which are associated with each other. Camera setups are defined as pairs of consecutive strings in the list. Each pair is comprised of: a string which identifies an active camera, and a string which defines a script to set up a given active camera. As many pairs of strings can be returned as the number of active cameras. If nothing is returned then it is assumed that no set up is required to activate a given camera.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCameras(self, **kwargs):
        """
        Turn on/off the display of cameras for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCapture(self, **kwargs):
        """
        Perform an one-time capture of the viewport to the named image file on disk.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCaptureSequenceNumber(self, **kwargs):
        """
        When a number greater or equal to 0 is specified each subsequent refresh will save an image file to disk if the capture flag has been enabled.  The naming of the file is:  {root name}.#.{extension}  if the name {root name}.{extension} is used for the capture flag argument.  The value of # starts at the number specified to for this argument and increments for each subsequent refresh.  Sequence capture can be disabled by specifying a number less than 0 or an empty file name for the capture flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getClipGhosts(self, **kwargs):
        """
        Define whether the clip ghosts should be added or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCmEnabled(self, **kwargs):
        """
        Turn on or off applying color management in the editor.  If set, the color management configuration set in the current editor is used.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getColorMap(self, **kwargs):
        """
        Queries the color map style for the model panel. Possible values are colorIndexand rgb.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getColorResolution(self, **kwargs):
        """
        Set the resolution for bakedcolor textures when using the hardware renderer. The default value is 256, 256 respectively.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getControlVertices(self, **kwargs):
        """
        Turn on/off the display of NURBS CVs for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getCullingOverride(self, **kwargs):
        """
        Set whether to override the culling attributes on objects when using the hardware renderer. The options are: none: Use the culling object attributes per object.doubleSided: Force all objects to be double sided.singleSided: Force all objects to be single sided.The default value is none.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDefault(self, **kwargs):
        """
        Causes this command to modify the default value of this setting. Newly created model editors will inherit the values.  This flag may be used with the -interactive to set default interactive settings.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDeformers(self, **kwargs):
        """
        Turn on/off the display of deformer objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDimensions(self, **kwargs):
        """
        Turn on/off the display of dimension objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDisplayAppearance(self, **kwargs):
        """
        Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDisplayLights(self, **kwargs):
        """
        Sets the lighting for shaded mode.  Possible values are selected, active, all, default, none.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDisplayTextures(self, **kwargs):
        """
        Turns on or off display of textures in shaded mode                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDynamicConstraints(self, **kwargs):
        """
        Turn on/off the display of dynamicConstraints for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getDynamics(self, **kwargs):
        """
        Turn on/off the display of dynamics objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getEditorChanged(self, **kwargs):
        """
        An optional script callback which is called when the editors options have changed.  This is useful in a situation where a scripted panel contains a modelEditor and wants to be notified when the contained editor changes its options.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getExposure(self, **kwargs):
        """
        The exposure value used by the color management of the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFilteredObjectList(self, **kwargs):
        """
        For model editors with filtering on (either using an object filter, or isolate select), this flag returns a string list of the objects which are displayed in this editor. Note that this list does not take into account visibility (based on camera frustum or flags), it purely captures the objects which are considered when rendering the view.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFluids(self, **kwargs):
        """
        Turn on/off the display of fluids for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogColor(self, **kwargs):
        """
        The color used for hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogDensity(self, **kwargs):
        """
        Determines the density of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogEnd(self, **kwargs):
        """
        The end location of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogMode(self, **kwargs):
        """
        This determines the drop-off mode for fog. The possibilities are: linear: linear drop-offexponent: exponential drop-offexponent2: squared exponential drop-off
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogSource(self, **kwargs):
        """
        Set the type of fog algorithm to use. If the argument is fragment(default) then fog is computed per pixel. If the argument is coordinatethen if the geometry has specified vertex fog coordinates, and the OpenGL extension for vertex fog is supported by the graphics system, then fog is computed per vertex.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogStart(self, **kwargs):
        """
        The start location of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFogging(self, **kwargs):
        """
        Set whether hardware fogging is enabled or not.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getFollicles(self, **kwargs):
        """
        Turn on/off the display of follicles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getGamma(self, **kwargs):
        """
        The gamma value used by the color management of the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getGreasePencils(self, **kwargs):
        """
        Define whether the grease pencil marks should be added or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getGrid(self, **kwargs):
        """
        Turn on/off the display of the grid for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHairSystems(self, **kwargs):
        """
        Turn on/off the display of hairSystems for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHandles(self, **kwargs):
        """
        Turn on/off the display of select handles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHeadsUpDisplay(self, **kwargs):
        """
        Sets whether the model panel will draw any enabled heads up display     elements in this window (if true).  Currently this requires the HUD elements to be globally enabled.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHeight(self, **kwargs):
        """
        Return the height of the associated viewport in pixels                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getHulls(self, **kwargs):
        """
        Turn on/off the display of NURBS hulls for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getIgnorePanZoom(self, **kwargs):
        """
        Sets whether the model panel will ignore the 2D pan/zoom value to give an overview of the scene.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getIkHandles(self, **kwargs):
        """
        Turn on/off the display of ik handles and end effectors for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getImagePlane(self, **kwargs):
        """
        Turn on/off the display of image plane for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getInteractive(self, **kwargs):
        """
        Causes this command to modify the interactive refresh settings of the view.  In this way it is possible to change the behavior of the model editor during playback for improved performance.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getInteractiveBackFaceCull(self, **kwargs):
        """
        Define whether interactive backface culling should be on or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getInteractiveDisableShadows(self, **kwargs):
        """
        Define whether interactive shadows should be disabled or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getIsFiltered(self, **kwargs):
        """
        Returns true for model editors with filtering applied to their view of the scene. This could either be an explicit object filter, or a display option such as isolate select which filters the objects that are displayed.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getJointXray(self, **kwargs):
        """
        Turns on or off Xray mode for joints.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getJoints(self, **kwargs):
        """
        Turn on/off the display of joints for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getLights(self, **kwargs):
        """
        Turn on/off the display of lights for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getLineWidth(self, **kwargs):
        """
        Set width of lines for display                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getLocators(self, **kwargs):
        """
        Turn on/off the display of locator objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getLowQualityLighting(self, **kwargs):
        """
        Set whether to use low quality lightingwhen using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getManipulators(self, **kwargs):
        """
        Turn on/off the display of manipulator objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getMaxConstantTransparency(self, **kwargs):
        """
        Sets the maximum constant transparency.  Setting this value remaps constant transparency values from the range [0.0, 1.0] to the range [0.0, maxConstantTransparency]. All transparency values are shifted linearly to the new range, so a fully transparency object (transparency 1.0) would appear with a transparency of maxConstantTransparency in the viewport, allowing highly transparent objects to be made visible.  This flag only affects constant (non-textured) transparent objects.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getMaximumNumHardwareLights(self, **kwargs):
        """
        Define whether the hardware light maximum should be respected or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getMotionTrails(self, **kwargs):
        """
        Turn on/off the Motion Trail display in the Viewport.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getNCloths(self, **kwargs):
        """
        Turn on/off the display of nCloths for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getNParticles(self, **kwargs):
        """
        Turn on/off the display of nParticles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getNRigids(self, **kwargs):
        """
        Turn on/off the display of nRigids for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getNurbsCurves(self, **kwargs):
        """
        Turn on/off the display of nurbs curves for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getNurbsSurfaces(self, **kwargs):
        """
        Turn on/off the display of nurbs surfaces for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getObjectFilter(self, **kwargs):
        """
        Set or query the current object filter name. An object filter is required to have already been registered.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getObjectFilterList(self, **kwargs):
        """
        Return a list of names of registered filters.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getObjectFilterListUI(self, **kwargs):
        """
        Return a list of UI names of registered filters.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getObjectFilterShowInHUD(self, **kwargs):
        """
        Sets whether or not to display the object filter UI name in the heads up display when an object filter is active. This string is concatenated with the camera name.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getObjectFilterUI(self, **kwargs):
        """
        Query the current object filter UI name. The object filter is required to have already been registered.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getOcclusionCulling(self, **kwargs):
        """
        Set whether to enable occlusion culling testing when using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getParticleInstancers(self, **kwargs):
        """
        Define whether the particle instances should be shown or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getPivots(self, **kwargs):
        """
        Turn on/off the display of transform pivots for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getPlanes(self, **kwargs):
        """
        Turn on/off the display of sketch planes for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getPolymeshes(self, **kwargs):
        """
        Turn on/off the display of polygon meshes for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getQueryPluginObjects(self, **kwargs):
        """
        Query the on/off state of plug-in objects display for the view. To set the on/off state, use -pluginObjects instead.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererDeviceName(self, **kwargs):
        """
        Query for the name of the draw API used by the Viewport 2.0 renderer for a 3d modeling viewport. The possible return values are VirtualDeviceGLif Maya is set to use OpenGL - Legacyfor Viewport 2.0, VirtualDeviceGLCoreif Maya is set to use OpenGL - Core Profile(either Compatibility or Strict) for Viewport 2.0, or VirtualDeviceDx11if Maya is set to use DirectX for Viewport 2.0. If the renderer for the 3d modeling viewport is not Viewport 2.0, an empty string will be returned.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererList(self, **kwargs):
        """
        Query for a list of the internal names for renderers available for use with the 3d modeling viewport. The default list contains at least vp2Renderer, if supported. See rendererName for more details on these renderers. Any plug-in viewport renderers will also appear in this list.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererListUI(self, **kwargs):
        """
        Query for a list of the UI names for renderers available for use with the 3d modeling viewport. The default list consists of the UI name for vp2Renderer, if it is supported. Any plug-in viewport renderer's UI names will also appear in this list. This list and the list returned from rendererList have a 1:1 correspondance.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererName(self, **kwargs):
        """
        Set or get the renderer used for a 3d modeling viewport. The name provided should be an internal name of a renderer. The 'rendererList' flag can be used to query for a list of available names. The default renderer is vp2Renderer: Viewport 2.0.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererOverrideList(self, **kwargs):
        """
        Query for a list of the internal names for renderer overrides for a 3d viewport renderer. Currently only the Viewport 2renderer supports renderer overrides.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererOverrideListUI(self, **kwargs):
        """
        Query for a list of the UI names for renderer overrides for a 3d viewport renderer. Currently only the Viewport 2renderer supports renderer overrides.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getRendererOverrideName(self, **kwargs):
        """
        Set or get the override used for a 3d viewport renderer. The name provided should be the internal name for an override.  The 'rendererOverrideList' flag can be used to query for a list of available names. Currently only the Viewport 2renderer  supports renderer overrides. Setting an empty string will unset any currently active override.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSceneRenderFilter(self, **kwargs):
        """
        Specifies the name of a scene render filter                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSelectionHiliteDisplay(self, **kwargs):
        """
        Sets whether the model panel will draw any selection hiliting on the objects in this window.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getShadingModel(self, **kwargs):
        """
        Shading model to use                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getShadows(self, **kwargs):
        """
        Turn on/off the display of hardware shadows in shaded mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSmallObjectCulling(self, **kwargs):
        """
        Define whether small object culling should be enabled or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSmallObjectThreshold(self, **kwargs):
        """
        Threshold used for small object culling                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSmoothWireframe(self, **kwargs):
        """
        Turns on or off smoothing of wireframe lines and points                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSortTransparent(self, **kwargs):
        """
        This flag turns on/off sorting of transparent objects during shaded mode refresh. Normally, objects are sorted according to their origin in camera space but when this flag is turned off they will be drawn according to their (depth-first traversal) order in the scene graph. This is a global flag that affects all model editors.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getStereoDrawMode(self, **kwargs):
        """
        If this flag is used then set stereo draw mode                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getStrokes(self, **kwargs):
        """
        Turn on/off the display of Paint Effects strokes for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getSubdivSurfaces(self, **kwargs):
        """
        Turn on/off the display of subdivision surfaces for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureAnisotropic(self, **kwargs):
        """
        Set whether to perform anisotropic texture filtering. Will work only if the anisotropic texture filtering extension is supported in OpenGL on the graphics system.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureCompression(self, **kwargs):
        """
        Defines whether texture compression should be used or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureDisplay(self, **kwargs):
        """
        Set the type of blending to use for textures. The blend is performed between the destination fragment and the texture fragment. The source is usually the material color. Argument options are: modulate: multiply the destination and texture fragment decal: overwrite the destination with the texture fragment                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureEnvironmentMap(self, **kwargs):
        """
        If true then use a texture environment map                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureHilight(self, **kwargs):
        """
        Set whether to show specular hilighting when the display is in shaded textured mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureMaxSize(self, **kwargs):
        """
        Set maximum texture size for hardware texturing.  The integer value must be a power of 2.  Recommended values are 128 or 256.  If the value specified is larger than the OpenGL maximim textures size for the graphics hardware it will be clamped to the OpenGL size.  If many large textures are used in a scene reducing this value improves performance.  On Impact texture memory is pinned in RAM so using large textures can cause reliability and performance problems. Again reducing this value will help. Software rendering does not use this value. This flag is obsolete as of Maya 6.5. The maxTextureResolution/mtr argument on the displayPref command should be used instead.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureMemoryUsed(self, **kwargs):
        """
        Returns the total number of bytes used by all texture maps.  This is typicly width\*height\*channels for all texture objects in the scene If the texture is mip mapped all mip map levels are included in the total though not never more than two level will be in use at one time                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextureSampling(self, **kwargs):
        """
        Set the type of sampling to be used for texture display. The argument can be either: 1 : means to perform point sample2 : means to perform bilinear interpolation (default)
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTextures(self, **kwargs):
        """
        Turn on/off the display of texture objects for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTranspInShadows(self, **kwargs):
        """
        Set whether to enable display of transparency in shadows when using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTransparencyAlgorithm(self, **kwargs):
        """
        Set the transparency algorithm. The options are: 1) frontAndBackCull: Two pass front and back culling technique.2) perPolygonSort: Draw transparent polygons in back-to-front order technique.transparency pptions 1) and 2) are supported by the hardware renderer. Options 1) is supported by the interactive modeling viewports. The default value is frontAndBackCull.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getTwoSidedLighting(self, **kwargs):
        """
        Turns on or off two sided lighting.  This may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseBaseRenderer(self, **kwargs):
        """
        Set whether to use the baserenderer when using the hardware renderer and in interactive display mode(-useInteractiveMode) The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseColorIndex(self, **kwargs):
        """
        Sets whether the model panel will attempt to use color index mode when possible.  Color index mode can provide a performance increase for point, bounding box, and wireframe display modes. This may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseDefaultMaterial(self, **kwargs):
        """
        Sets whether the model panel will draw all the shaded surfaces using the default material as opposed to using the material(s) currently assigned to the surfaces.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseInteractiveMode(self, **kwargs):
        """
        Turns on or off the use of the special interaction settings during playback.  This flag may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseRGBImagePlane(self, **kwargs):
        """
        Sets whether the model panel will be forced into RGB mode when there is an image plane attached to the panel's camera.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUseReducedRenderer(self, **kwargs):
        """
        Set true if using the reduced renderer                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getUserNode(self, **kwargs):
        """
        Allows the user to associate a node name with the modelEditor. The value is automatically updated in the event the node is deleted or renamed.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getViewObjects(self, **kwargs):
        """
        Returns the name (if any) of the objectSet which contains the list of objects visible in the view if viewSelected is true and the list of objects being displayed does notcome from the active list.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getViewSelected(self, **kwargs):
        """
        This flag turns on/off viewing of selected objects. When the flag is set to true, the currently active objects are captured and used as the list of objects to view.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getViewTransformName(self, **kwargs):
        """
        Sets the view pipeline to be applied if color management is enabled in the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getViewType(self, **kwargs):
        """
        Returns a string indicating the type of the model editor. For the default model editor, returns the empty string. For custom model editor types created via the API, returns the same string as is returned via the method MPx3dModelView::viewType().                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getWidth(self, **kwargs):
        """
        Return the width of the associated viewport in pixels.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getWireframeBackingStore(self, **kwargs):
        """
        Sets whether a backing store is used to optimization the drawing of active objects. This mode can provide a performance increase in wireframe mode for certain scenes.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getWireframeOnShaded(self, **kwargs):
        """
        Sets whether the model panel will draw the wireframe on all shaded objects (if true) or only for active objects (if false).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def getXray(self, **kwargs):
        """
        Turns on or off Xray mode.  This may be used with the -default flag.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def noUndo(self, val='True', **kwargs):
        """
        This flag prevents some viewport operations (such as isolate select) from being added to the undo queue.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def pluginObjects(self, val='True', **kwargs):
        """
        Turn on/off the display of plug-in objects for the view. It depends on the plug-in implementation whether to respect this flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def pluginShapes(self, val='True', **kwargs):
        """
        Turn on/off the display of plug-in shapes for the view. It depends on the plug-in implementation whether to respect this flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def removeSelected(self, val='True', **kwargs):
        """
        This flag causes the currently active objects to be removed from the list of objects visible in the view (if viewSelected is true).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def resetCustomCamera(self, val='True', **kwargs):
        """
        When specified will reset the camera transform for the active custom camera used for a scene render filter. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveComponentsXray(self, val='True', **kwargs):
        """
        Turns on or off Xray mode for active components.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveCustomGeometry(self, val='True', **kwargs):
        """
        Specifies an identifier for custom geometry to override the geometry to display. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveCustomLighSet(self, val='True', **kwargs):
        """
        Specifies an identifier for the light set to use with a scene render filter. It is only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveCustomOverrideGeometry(self, val='True', **kwargs):
        """
        Specifies an identifier for an override on the custom geometry for a scene render filter.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveCustomRenderer(self, val='True', **kwargs):
        """
        Specifies an identifier for custom renderer to use when a valid scene render filter is also specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveOnly(self, val='True', **kwargs):
        """
        Sets whether only active objects should appear shaded in shaded display.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveShadingGraph(self, val='True', **kwargs):
        """
        Specifies the shading graph to use to override material display. Only enabled when a valid scene render filter is specified.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setActiveView(self, val='True', **kwargs):
        """
        Sets this model editor to be the active view.  Returns true if successful.  On query this flag will return whether the view is the active view.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setAllObjects(self, val='True', **kwargs):
        """
        Turn on/off the display of all objects for the view of the model editor. This excludes NURBS, CVs, hulls, grids and manipulators.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setBackfaceCulling(self, val='True', **kwargs):
        """
        Turns on or off backface culling for the whole view.  This setting overrides the culling settings of individual objects.  All objects draw in the view will be backface culled.  When backface culling is turned on, surfaces becomes invisible in areas where the normal is pointing away from the camera.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setBufferMode(self, val='True', **kwargs):
        """
        Deprecated: this is not supported in Viewport 2.0.  Sets the graphic buffer mode.  Possible values are singleor double.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setBumpResolution(self, val='True', **kwargs):
        """
        Set the resolution for bakedbump map textures when using the hardware renderer. The default value is 512, 512 respectively.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCamera(self, val='True', **kwargs):
        """
        Change or query the name of the camera in model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCameraSet(self, val='True', **kwargs):
        """
        Name of the camera set                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCameras(self, val='True', **kwargs):
        """
        Turn on/off the display of cameras for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCapture(self, val='True', **kwargs):
        """
        Perform an one-time capture of the viewport to the named image file on disk.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCaptureSequenceNumber(self, val='True', **kwargs):
        """
        When a number greater or equal to 0 is specified each subsequent refresh will save an image file to disk if the capture flag has been enabled.  The naming of the file is:  {root name}.#.{extension}  if the name {root name}.{extension} is used for the capture flag argument.  The value of # starts at the number specified to for this argument and increments for each subsequent refresh.  Sequence capture can be disabled by specifying a number less than 0 or an empty file name for the capture flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setClipGhosts(self, val='True', **kwargs):
        """
        Define whether the clip ghosts should be added or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCmEnabled(self, val='True', **kwargs):
        """
        Turn on or off applying color management in the editor.  If set, the color management configuration set in the current editor is used.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setColorResolution(self, val='True', **kwargs):
        """
        Set the resolution for bakedcolor textures when using the hardware renderer. The default value is 256, 256 respectively.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setControlVertices(self, val='True', **kwargs):
        """
        Turn on/off the display of NURBS CVs for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setCullingOverride(self, val='True', **kwargs):
        """
        Set whether to override the culling attributes on objects when using the hardware renderer. The options are: none: Use the culling object attributes per object.doubleSided: Force all objects to be double sided.singleSided: Force all objects to be single sided.The default value is none.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDefault(self, val='True', **kwargs):
        """
        Causes this command to modify the default value of this setting. Newly created model editors will inherit the values.  This flag may be used with the -interactive to set default interactive settings.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDeformers(self, val='True', **kwargs):
        """
        Turn on/off the display of deformer objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDimensions(self, val='True', **kwargs):
        """
        Turn on/off the display of dimension objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDisplayAppearance(self, val='True', **kwargs):
        """
        Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDisplayLights(self, val='True', **kwargs):
        """
        Sets the lighting for shaded mode.  Possible values are selected, active, all, default, none.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDisplayTextures(self, val='True', **kwargs):
        """
        Turns on or off display of textures in shaded mode                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDynamicConstraints(self, val='True', **kwargs):
        """
        Turn on/off the display of dynamicConstraints for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setDynamics(self, val='True', **kwargs):
        """
        Turn on/off the display of dynamics objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setEditorChanged(self, val='True', **kwargs):
        """
        An optional script callback which is called when the editors options have changed.  This is useful in a situation where a scripted panel contains a modelEditor and wants to be notified when the contained editor changes its options.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setExposure(self, val='True', **kwargs):
        """
        The exposure value used by the color management of the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFluids(self, val='True', **kwargs):
        """
        Turn on/off the display of fluids for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogColor(self, val='True', **kwargs):
        """
        The color used for hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogDensity(self, val='True', **kwargs):
        """
        Determines the density of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogEnd(self, val='True', **kwargs):
        """
        The end location of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogMode(self, val='True', **kwargs):
        """
        This determines the drop-off mode for fog. The possibilities are: linear: linear drop-offexponent: exponential drop-offexponent2: squared exponential drop-off
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogSource(self, val='True', **kwargs):
        """
        Set the type of fog algorithm to use. If the argument is fragment(default) then fog is computed per pixel. If the argument is coordinatethen if the geometry has specified vertex fog coordinates, and the OpenGL extension for vertex fog is supported by the graphics system, then fog is computed per vertex.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogStart(self, val='True', **kwargs):
        """
        The start location of hardware fogging.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFogging(self, val='True', **kwargs):
        """
        Set whether hardware fogging is enabled or not.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setFollicles(self, val='True', **kwargs):
        """
        Turn on/off the display of follicles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setGamma(self, val='True', **kwargs):
        """
        The gamma value used by the color management of the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setGreasePencils(self, val='True', **kwargs):
        """
        Define whether the grease pencil marks should be added or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setGrid(self, val='True', **kwargs):
        """
        Turn on/off the display of the grid for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setHairSystems(self, val='True', **kwargs):
        """
        Turn on/off the display of hairSystems for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setHandles(self, val='True', **kwargs):
        """
        Turn on/off the display of select handles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setHeadsUpDisplay(self, val='True', **kwargs):
        """
        Sets whether the model panel will draw any enabled heads up display     elements in this window (if true).  Currently this requires the HUD elements to be globally enabled.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setHulls(self, val='True', **kwargs):
        """
        Turn on/off the display of NURBS hulls for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setIgnorePanZoom(self, val='True', **kwargs):
        """
        Sets whether the model panel will ignore the 2D pan/zoom value to give an overview of the scene.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setIkHandles(self, val='True', **kwargs):
        """
        Turn on/off the display of ik handles and end effectors for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setImagePlane(self, val='True', **kwargs):
        """
        Turn on/off the display of image plane for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setInteractive(self, val='True', **kwargs):
        """
        Causes this command to modify the interactive refresh settings of the view.  In this way it is possible to change the behavior of the model editor during playback for improved performance.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setInteractiveBackFaceCull(self, val='True', **kwargs):
        """
        Define whether interactive backface culling should be on or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setInteractiveDisableShadows(self, val='True', **kwargs):
        """
        Define whether interactive shadows should be disabled or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setJointXray(self, val='True', **kwargs):
        """
        Turns on or off Xray mode for joints.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setJoints(self, val='True', **kwargs):
        """
        Turn on/off the display of joints for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setLights(self, val='True', **kwargs):
        """
        Turn on/off the display of lights for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setLineWidth(self, val='True', **kwargs):
        """
        Set width of lines for display                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setLocators(self, val='True', **kwargs):
        """
        Turn on/off the display of locator objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setLowQualityLighting(self, val='True', **kwargs):
        """
        Set whether to use low quality lightingwhen using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setManipulators(self, val='True', **kwargs):
        """
        Turn on/off the display of manipulator objects for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setMaxConstantTransparency(self, val='True', **kwargs):
        """
        Sets the maximum constant transparency.  Setting this value remaps constant transparency values from the range [0.0, 1.0] to the range [0.0, maxConstantTransparency]. All transparency values are shifted linearly to the new range, so a fully transparency object (transparency 1.0) would appear with a transparency of maxConstantTransparency in the viewport, allowing highly transparent objects to be made visible.  This flag only affects constant (non-textured) transparent objects.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setMaximumNumHardwareLights(self, val='True', **kwargs):
        """
        Define whether the hardware light maximum should be respected or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setMotionTrails(self, val='True', **kwargs):
        """
        Turn on/off the Motion Trail display in the Viewport.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setNCloths(self, val='True', **kwargs):
        """
        Turn on/off the display of nCloths for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setNParticles(self, val='True', **kwargs):
        """
        Turn on/off the display of nParticles for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setNRigids(self, val='True', **kwargs):
        """
        Turn on/off the display of nRigids for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setNurbsCurves(self, val='True', **kwargs):
        """
        Turn on/off the display of nurbs curves for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setNurbsSurfaces(self, val='True', **kwargs):
        """
        Turn on/off the display of nurbs surfaces for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setObjectFilter(self, val='True', **kwargs):
        """
        Set or query the current object filter name. An object filter is required to have already been registered.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setObjectFilterShowInHUD(self, val='True', **kwargs):
        """
        Sets whether or not to display the object filter UI name in the heads up display when an object filter is active. This string is concatenated with the camera name.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setOcclusionCulling(self, val='True', **kwargs):
        """
        Set whether to enable occlusion culling testing when using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setParticleInstancers(self, val='True', **kwargs):
        """
        Define whether the particle instances should be shown or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setPivots(self, val='True', **kwargs):
        """
        Turn on/off the display of transform pivots for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setPlanes(self, val='True', **kwargs):
        """
        Turn on/off the display of sketch planes for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setPolymeshes(self, val='True', **kwargs):
        """
        Turn on/off the display of polygon meshes for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setRendererName(self, val='True', **kwargs):
        """
        Set or get the renderer used for a 3d modeling viewport. The name provided should be an internal name of a renderer. The 'rendererList' flag can be used to query for a list of available names. The default renderer is vp2Renderer: Viewport 2.0.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setRendererOverrideName(self, val='True', **kwargs):
        """
        Set or get the override used for a 3d viewport renderer. The name provided should be the internal name for an override.  The 'rendererOverrideList' flag can be used to query for a list of available names. Currently only the Viewport 2renderer  supports renderer overrides. Setting an empty string will unset any currently active override.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSceneRenderFilter(self, val='True', **kwargs):
        """
        Specifies the name of a scene render filter                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSelected(self, val='True', **kwargs):
        """
        This flag causes the currently active objects to be the only objects visible in the view (if viewSelected is true).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSelectionHiliteDisplay(self, val='True', **kwargs):
        """
        Sets whether the model panel will draw any selection hiliting on the objects in this window.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setShadingModel(self, val='True', **kwargs):
        """
        Shading model to use                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setShadows(self, val='True', **kwargs):
        """
        Turn on/off the display of hardware shadows in shaded mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSmallObjectCulling(self, val='True', **kwargs):
        """
        Define whether small object culling should be enabled or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSmallObjectThreshold(self, val='True', **kwargs):
        """
        Threshold used for small object culling                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSmoothWireframe(self, val='True', **kwargs):
        """
        Turns on or off smoothing of wireframe lines and points                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSortTransparent(self, val='True', **kwargs):
        """
        This flag turns on/off sorting of transparent objects during shaded mode refresh. Normally, objects are sorted according to their origin in camera space but when this flag is turned off they will be drawn according to their (depth-first traversal) order in the scene graph. This is a global flag that affects all model editors.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setStereoDrawMode(self, val='True', **kwargs):
        """
        If this flag is used then set stereo draw mode                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setStrokes(self, val='True', **kwargs):
        """
        Turn on/off the display of Paint Effects strokes for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setSubdivSurfaces(self, val='True', **kwargs):
        """
        Turn on/off the display of subdivision surfaces for the view of the model editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureAnisotropic(self, val='True', **kwargs):
        """
        Set whether to perform anisotropic texture filtering. Will work only if the anisotropic texture filtering extension is supported in OpenGL on the graphics system.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureCompression(self, val='True', **kwargs):
        """
        Defines whether texture compression should be used or not                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureDisplay(self, val='True', **kwargs):
        """
        Set the type of blending to use for textures. The blend is performed between the destination fragment and the texture fragment. The source is usually the material color. Argument options are: modulate: multiply the destination and texture fragment decal: overwrite the destination with the texture fragment                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureEnvironmentMap(self, val='True', **kwargs):
        """
        If true then use a texture environment map                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureHilight(self, val='True', **kwargs):
        """
        Set whether to show specular hilighting when the display is in shaded textured mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureMaxSize(self, val='True', **kwargs):
        """
        Set maximum texture size for hardware texturing.  The integer value must be a power of 2.  Recommended values are 128 or 256.  If the value specified is larger than the OpenGL maximim textures size for the graphics hardware it will be clamped to the OpenGL size.  If many large textures are used in a scene reducing this value improves performance.  On Impact texture memory is pinned in RAM so using large textures can cause reliability and performance problems. Again reducing this value will help. Software rendering does not use this value. This flag is obsolete as of Maya 6.5. The maxTextureResolution/mtr argument on the displayPref command should be used instead.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextureSampling(self, val='True', **kwargs):
        """
        Set the type of sampling to be used for texture display. The argument can be either: 1 : means to perform point sample2 : means to perform bilinear interpolation (default)
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTextures(self, val='True', **kwargs):
        """
        Turn on/off the display of texture objects for the view                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTranspInShadows(self, val='True', **kwargs):
        """
        Set whether to enable display of transparency in shadows when using the hardware renderer. The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTransparencyAlgorithm(self, val='True', **kwargs):
        """
        Set the transparency algorithm. The options are: 1) frontAndBackCull: Two pass front and back culling technique.2) perPolygonSort: Draw transparent polygons in back-to-front order technique.transparency pptions 1) and 2) are supported by the hardware renderer. Options 1) is supported by the interactive modeling viewports. The default value is frontAndBackCull.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setTwoSidedLighting(self, val='True', **kwargs):
        """
        Turns on or off two sided lighting.  This may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseBaseRenderer(self, val='True', **kwargs):
        """
        Set whether to use the baserenderer when using the hardware renderer and in interactive display mode(-useInteractiveMode) The default value is false.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseColorIndex(self, val='True', **kwargs):
        """
        Sets whether the model panel will attempt to use color index mode when possible.  Color index mode can provide a performance increase for point, bounding box, and wireframe display modes. This may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseDefaultMaterial(self, val='True', **kwargs):
        """
        Sets whether the model panel will draw all the shaded surfaces using the default material as opposed to using the material(s) currently assigned to the surfaces.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseInteractiveMode(self, val='True', **kwargs):
        """
        Turns on or off the use of the special interaction settings during playback.  This flag may be used with the -default flag.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseRGBImagePlane(self, val='True', **kwargs):
        """
        Sets whether the model panel will be forced into RGB mode when there is an image plane attached to the panel's camera.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUseReducedRenderer(self, val='True', **kwargs):
        """
        Set true if using the reduced renderer                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setUserNode(self, val='True', **kwargs):
        """
        Allows the user to associate a node name with the modelEditor. The value is automatically updated in the event the node is deleted or renamed.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setViewSelected(self, val='True', **kwargs):
        """
        This flag turns on/off viewing of selected objects. When the flag is set to true, the currently active objects are captured and used as the list of objects to view.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setViewTransformName(self, val='True', **kwargs):
        """
        Sets the view pipeline to be applied if color management is enabled in the current editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setWireframeBackingStore(self, val='True', **kwargs):
        """
        Sets whether a backing store is used to optimization the drawing of active objects. This mode can provide a performance increase in wireframe mode for certain scenes.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setWireframeOnShaded(self, val='True', **kwargs):
        """
        Sets whether the model panel will draw the wireframe on all shaded objects (if true) or only for active objects (if false).                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def setXray(self, val='True', **kwargs):
        """
        Turns on or off Xray mode.  This may be used with the -default flag.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def toggleExposure(self, val='True', **kwargs):
        """
        Toggles between the current and the default exposure value of the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def toggleGamma(self, val='True', **kwargs):
        """
        Toggles between the current and the default gamma value of the editor.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def updateColorMode(self, val='True', **kwargs):
        """
        Using this flag tells the model panel to check which color mode it should be in, and to switch accordingly.  This flag may be used to update a model panel after a camera image plane has been added or removed.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create, edit or query a model editor. Note that some of the flags of this
        command may have different settings for normal mode and for interactive/playback
        mode.  For example, a modelEditor can be set to use shaded mode normally, but to
        use wireframe during playback for greater speed.  Some flags also support having
        defaults set so that new model editors will be created with those settings.
        
        Flags:
        - activeComponentsXray : acx     (bool)          [query,edit]
            Turns on or off Xray mode for active components.
        
        - activeCustomEnvironment : ace  (unicode)       [edit]
            Specifies a path to an image file to be used as environment map. It is only
            enabled when a valid scene render filter is specified.
        
        - activeCustomGeometry : acg     (unicode)       [query,edit]
            Specifies an identifier for custom geometry to override the geometry to display.
            It is only enabled when a valid scene render filter is specified.
        
        - activeCustomLighSet : acl      (unicode)       [query,edit]
            Specifies an identifier for the light set to use with a scene render filter. It
            is only enabled when a valid scene render filter is specified.
        
        - activeCustomOverrideGeometry : aog (unicode)       [query,edit]
            Specifies an identifier for an override on the custom geometry for a scene
            render filter.
        
        - activeCustomRenderer : acr     (unicode)       [query,edit]
            Specifies an identifier for custom renderer to use when a valid scene render
            filter is also specified.
        
        - activeOnly : ao                (bool)          [query,edit]
            Sets whether only active objects should appear shaded in shaded display.
        
        - activeShadingGraph : asg       (unicode)       [query,edit]
            Specifies the shading graph to use to override material display. Only enabled
            when a valid scene render filter is specified.
        
        - activeView : av                (bool)          [query,edit]
            Sets this model editor to be the active view.  Returns true if successful.  On
            query this flag will return whether the view is the active view.
        
        - addObjects : aob               (unicode)       [edit]
            This flag causes the objects contained within the selection connection to be
            added to the list of objects visible in the view (if viewSelected is true).
        
        - addSelected : addSelected      (bool)          [edit]
            This flag causes the currently active objects to be added to the list of objects
            visible in the view (if viewSelected is true).
        
        - addSelectedObjects : aso       (bool)          [create]
            If set then add the selected objects to the editor
        
        - allObjects : alo               (bool)          [query,edit]
            Turn on/off the display of all objects for the view of the model editor. This
            excludes NURBS, CVs, hulls, grids and manipulators.
        
        - backfaceCulling : bfc          (bool)          [query,edit]
            Turns on or off backface culling for the whole view.  This setting overrides the
            culling settings of individual objects.  All objects draw in the view will be
            backface culled.  When backface culling is turned on, surfaces becomes invisible
            in areas where the normal is pointing away from the camera.
        
        - bufferMode : bm                (unicode)       [query,edit]
            Deprecated: this is not supported in Viewport 2.0.  Sets the graphic buffer
            mode.  Possible values are singleor double.
        
        - bumpResolution : brz           (int, int)      [query,edit]
            Set the resolution for bakedbump map textures when using the hardware renderer.
            The default value is 512, 512 respectively.
        
        - camera : cam                   (unicode)       [query,edit]
            Change or query the name of the camera in model editor.
        
        - cameraName : cn                (unicode)       [create,edit]
            Set the name of the panel's camera transform and shape. The shape name is
            computed by appending the string Shapeto the transform name. This flag may not
            be queried.
        
        - cameraSet : cst                (unicode)       [create,query,edit]
            Name of the camera set
        
        - cameraSetup : cs               (bool)          [query]
            Based on the model editor name passed in will returns a string list containing
            camera setups. A camera setup can contain one or more cameras which are
            associated with each other. Camera setups are defined as pairs of consecutive
            strings in the list. Each pair is comprised of: a string which identifies an
            active camera, and a string which defines a script to set up a given active
            camera. As many pairs of strings can be returned as the number of active
            cameras. If nothing is returned then it is assumed that no set up is required to
            activate a given camera.
        
        - cameras : ca                   (bool)          [query,edit]
            Turn on/off the display of cameras for the view of the model editor.
        
        - capture : cpt                  (unicode)       [query,edit]
            Perform an one-time capture of the viewport to the named image file on disk.
        
        - captureSequenceNumber : csn    (int)           [query,edit]
            When a number greater or equal to 0 is specified each subsequent refresh will
            save an image file to disk if the capture flag has been enabled.  The naming of
            the file is:  {root name}.#.{extension}  if the name {root name}.{extension} is
            used for the capture flag argument.  The value of # starts at the number
            specified to for this argument and increments for each subsequent refresh.
            Sequence capture can be disabled by specifying a number less than 0 or an empty
            file name for the capture flag.
        
        - clipGhosts : cg                (bool)          [create,query,edit]
            Define whether the clip ghosts should be added or not
        
        - cmEnabled : cme                (bool)          [query,edit]
            Turn on or off applying color management in the editor.  If set, the color
            management configuration set in the current editor is used.
        
        - colorMap : cm                  (bool)          [query]
            Queries the color map style for the model panel. Possible values are
            colorIndexand rgb.
        
        - colorResolution : crz          (int, int)      [query,edit]
            Set the resolution for bakedcolor textures when using the hardware renderer. The
            default value is 256, 256 respectively.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - controlVertices : cv           (bool)          [query,edit]
            Turn on/off the display of NURBS CVs for the view of the model editor.
        
        - controllers : cts              (bool)          []
        
        - cullingOverride : cov          (unicode)       [query,edit]
            Set whether to override the culling attributes on objects when using the
            hardware renderer. The options are: none: Use the culling object attributes per
            object.doubleSided: Force all objects to be double sided.singleSided: Force all
            objects to be single sided.The default value is none.
        
        - default : d                    (bool)          [query,edit]
            Causes this command to modify the default value of this setting. Newly created
            model editors will inherit the values.  This flag may be used with the
            -interactive to set default interactive settings.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deformers : df                 (bool)          [query,edit]
            Turn on/off the display of deformer objects for the view of the model editor.
        
        - depthOfFieldPreview : dof      (bool)          []
        
        - dimensions : dim               (bool)          [query,edit]
            Turn on/off the display of dimension objects for the view of the model editor.
        
        - displayAppearance : da         (unicode)       [query,edit]
            Sets the display appearance of the model panel.  Possible values are wireframe,
            points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the
            -interactive and -default flags.  Note that only wireframe, points, and
            boundingBoxare valid for the interactive mode.
        
        - displayLights : dl             (unicode)       [query,edit]
            Sets the lighting for shaded mode.  Possible values are selected, active, all,
            default, none.
        
        - displayTextures : dtx          (bool)          [query,edit]
            Turns on or off display of textures in shaded mode
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - dynamicConstraints : dc        (bool)          [query,edit]
            Turn on/off the display of dynamicConstraints for the view of the model editor.
        
        - dynamics : dy                  (bool)          [query,edit]
            Turn on/off the display of dynamics objects for the view of the model editor.
        
        - editorChanged : ec             (script)        [create,query,edit]
            An optional script callback which is called when the editors options have
            changed.  This is useful in a situation where a scripted panel contains a
            modelEditor and wants to be notified when the contained editor changes its
            options.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - exposure : exp                 (float)         [query,edit]
            The exposure value used by the color management of the current editor.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - filteredObjectList : fol       (bool)          [query]
            For model editors with filtering on (either using an object filter, or isolate
            select), this flag returns a string list of the objects which are displayed in
            this editor. Note that this list does not take into account visibility (based on
            camera frustum or flags), it purely captures the objects which are considered
            when rendering the view.
        
        - fluids : fl                    (bool)          [query,edit]
            Turn on/off the display of fluids for the view of the model editor.
        
        - fogColor : fcl                 (float, float, float, float) [query,edit]
            The color used for hardware fogging.
        
        - fogDensity : fdn               (float)         [query,edit]
            Determines the density of hardware fogging.
        
        - fogEnd : fen                   (float)         [query,edit]
            The end location of hardware fogging.
        
        - fogMode : fmd                  (unicode)       [query,edit]
            This determines the drop-off mode for fog. The possibilities are: linear: linear
            drop-offexponent: exponential drop-offexponent2: squared exponential drop-off
        
        - fogSource : fsc                (unicode)       [query,edit]
            Set the type of fog algorithm to use. If the argument is fragment(default) then
            fog is computed per pixel. If the argument is coordinatethen if the geometry has
            specified vertex fog coordinates, and the OpenGL extension for vertex fog is
            supported by the graphics system, then fog is computed per vertex.
        
        - fogStart : fst                 (float)         [query,edit]
            The start location of hardware fogging.
        
        - fogging : fg                   (bool)          [query,edit]
            Set whether hardware fogging is enabled or not.
        
        - follicles : fo                 (bool)          [query,edit]
            Turn on/off the display of follicles for the view of the model editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - gamma : ga                     (float)         [query,edit]
            The gamma value used by the color management of the current editor.
        
        - greasePencils : gp             (bool)          [create,query,edit]
            Define whether the grease pencil marks should be added or not
        
        - grid : gr                      (bool)          [query,edit]
            Turn on/off the display of the grid for the view of the model editor.
        
        - hairSystems : hs               (bool)          [query,edit]
            Turn on/off the display of hairSystems for the view of the model editor.
        
        - handles : ha                   (bool)          [query,edit]
            Turn on/off the display of select handles for the view of the model editor.
        
        - headsUpDisplay : hud           (bool)          [query,edit]
            Sets whether the model panel will draw any enabled heads up display     elements
            in this window (if true).  Currently this requires the HUD elements to be
            globally enabled.
        
        - height : h                     (bool)          [query]
            Return the height of the associated viewport in pixels
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - holdOuts : hos                 (bool)          []
        
        - hulls : hu                     (bool)          [query,edit]
            Turn on/off the display of NURBS hulls for the view of the model editor.
        
        - ignorePanZoom : ipz            (bool)          [query,edit]
            Sets whether the model panel will ignore the 2D pan/zoom value to give an
            overview of the scene.
        
        - ikHandles : ikh                (bool)          [query,edit]
            Turn on/off the display of ik handles and end effectors for the view of the
            model editor.
        
        - imagePlane : imp               (bool)          [query,edit]
            Turn on/off the display of image plane for the view
        
        - interactive : i                (bool)          [query,edit]
            Causes this command to modify the interactive refresh settings of the view.  In
            this way it is possible to change the behavior of the model editor during
            playback for improved performance.
        
        - interactiveBackFaceCull : ibc  (bool)          [create,query,edit]
            Define whether interactive backface culling should be on or not
        
        - interactiveDisableShadows : dis (bool)          [create,query,edit]
            Define whether interactive shadows should be disabled or not
        
        - isFiltered : isFiltered        (bool)          [query]
            Returns true for model editors with filtering applied to their view of the
            scene. This could either be an explicit object filter, or a display option such
            as isolate select which filters the objects that are displayed.
        
        - jointXray : jx                 (bool)          [query,edit]
            Turns on or off Xray mode for joints.
        
        - joints : j                     (bool)          [query,edit]
            Turn on/off the display of joints for the view of the model editor.
        
        - lights : lt                    (bool)          [query,edit]
            Turn on/off the display of lights for the view of the model editor.
        
        - lineWidth : lw                 (float)         [query,edit]
            Set width of lines for display
        
        - locators : lc                  (bool)          [query,edit]
            Turn on/off the display of locator objects for the view of the model editor.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - lowQualityLighting : lql       (bool)          [query,edit]
            Set whether to use low quality lightingwhen using the hardware renderer. The
            default value is false.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - manipulators : m               (bool)          [query,edit]
            Turn on/off the display of manipulator objects for the view of the model editor.
        
        - maxConstantTransparency : mct  (float)         [query,edit]
            Sets the maximum constant transparency.  Setting this value remaps constant
            transparency values from the range [0.0, 1.0] to the range [0.0,
            maxConstantTransparency]. All transparency values are shifted linearly to the
            new range, so a fully transparency object (transparency 1.0) would appear with a
            transparency of maxConstantTransparency in the viewport, allowing highly
            transparent objects to be made visible.  This flag only affects constant (non-
            textured) transparent objects.
        
        - maximumNumHardwareLights : mhl (bool)          [create,query,edit]
            Define whether the hardware light maximum should be respected or not
        
        - modelPanel : mp                (unicode)       [create]
            Allows the created model editor to be embedded in the named model panel.
            Intended for use with custom model editors created via the API (i.e. the flag
            would be used on the derived MPxModelEditorCommand), though the flag may also be
            used on the base modelEditor command to restore a default Maya model editor to
            the panel. Note that the model editor previously owned by the panel is deleted.
        
        - motionTrails : mt              (bool)          [query,edit]
            Turn on/off the Motion Trail display in the Viewport.
        
        - nCloths : ncl                  (bool)          [query,edit]
            Turn on/off the display of nCloths for the view of the model editor.
        
        - nParticles : npa               (bool)          [query,edit]
            Turn on/off the display of nParticles for the view of the model editor.
        
        - nRigids : nr                   (bool)          [query,edit]
            Turn on/off the display of nRigids for the view of the model editor.
        
        - noUndo : nud                   (bool)          [edit]
            This flag prevents some viewport operations (such as isolate select) from being
            added to the undo queue.
        
        - nurbsCurves : nc               (bool)          [query,edit]
            Turn on/off the display of nurbs curves for the view of the model editor.
        
        - nurbsSurfaces : ns             (bool)          [query,edit]
            Turn on/off the display of nurbs surfaces for the view of the model editor.
        
        - objectFilter : obf             (script)        [query,edit]
            Set or query the current object filter name. An object filter is required to
            have already been registered.
        
        - objectFilterList : ofl         (script)        [query]
            Return a list of names of registered filters.
        
        - objectFilterListUI : ofu       (script)        [query]
            Return a list of UI names of registered filters.
        
        - objectFilterShowInHUD : ofs    (bool)          [query,edit]
            Sets whether or not to display the object filter UI name in the heads up display
            when an object filter is active. This string is concatenated with the camera
            name.
        
        - objectFilterUI : obu           (script)        [query]
            Query the current object filter UI name. The object filter is required to have
            already been registered.
        
        - occlusionCulling : ocl         (bool)          [query,edit]
            Set whether to enable occlusion culling testing when using the hardware
            renderer. The default value is false.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - particleInstancers : pi        (bool)          [create,query,edit]
            Define whether the particle instances should be shown or not
        
        - pivots : pv                    (bool)          [query,edit]
            Turn on/off the display of transform pivots for the view of the model editor.
        
        - planes : pl                    (bool)          [query,edit]
            Turn on/off the display of sketch planes for the view of the model editor.
        
        - pluginObjects : po             (unicode, bool) [edit]
            Turn on/off the display of plug-in objects for the view. It depends on the plug-
            in implementation whether to respect this flag.
        
        - pluginShapes : ps              (bool)          [edit]
            Turn on/off the display of plug-in shapes for the view. It depends on the plug-
            in implementation whether to respect this flag.
        
        - polymeshes : pm                (bool)          [query,edit]
            Turn on/off the display of polygon meshes for the view of the model editor.
        
        - queryPluginObjects : qpo       (unicode)       [query]
            Query the on/off state of plug-in objects display for the view. To set the
            on/off state, use -pluginObjects instead.
        
        - removeSelected : rs            (bool)          [edit]
            This flag causes the currently active objects to be removed from the list of
            objects visible in the view (if viewSelected is true).
        
        - rendererDeviceName : rdn       (bool)          [query]
            Query for the name of the draw API used by the Viewport 2.0 renderer for a 3d
            modeling viewport. The possible return values are VirtualDeviceGLif Maya is set
            to use OpenGL - Legacyfor Viewport 2.0, VirtualDeviceGLCoreif Maya is set to use
            OpenGL - Core Profile(either Compatibility or Strict) for Viewport 2.0, or
            VirtualDeviceDx11if Maya is set to use DirectX for Viewport 2.0. If the renderer
            for the 3d modeling viewport is not Viewport 2.0, an empty string will be
            returned.
        
        - rendererList : rls             (bool)          [query]
            Query for a list of the internal names for renderers available for use with the
            3d modeling viewport. The default list contains at least vp2Renderer, if
            supported. See rendererName for more details on these renderers. Any plug-in
            viewport renderers will also appear in this list.
        
        - rendererListUI : rlu           (bool)          [query]
            Query for a list of the UI names for renderers available for use with the 3d
            modeling viewport. The default list consists of the UI name for vp2Renderer, if
            it is supported. Any plug-in viewport renderer's UI names will also appear in
            this list. This list and the list returned from rendererList have a 1:1
            correspondance.
        
        - rendererName : rnm             (unicode)       [query,edit]
            Set or get the renderer used for a 3d modeling viewport. The name provided
            should be an internal name of a renderer. The 'rendererList' flag can be used to
            query for a list of available names. The default renderer is vp2Renderer:
            Viewport 2.0.
        
        - rendererOverrideList : rol     (bool)          [query]
            Query for a list of the internal names for renderer overrides for a 3d viewport
            renderer. Currently only the Viewport 2renderer supports renderer overrides.
        
        - rendererOverrideListUI : rou   (bool)          [query]
            Query for a list of the UI names for renderer overrides for a 3d viewport
            renderer. Currently only the Viewport 2renderer supports renderer overrides.
        
        - rendererOverrideName : rom     (unicode)       [query,edit]
            Set or get the override used for a 3d viewport renderer. The name provided
            should be the internal name for an override.  The 'rendererOverrideList' flag
            can be used to query for a list of available names. Currently only the Viewport
            2renderer  supports renderer overrides. Setting an empty string will unset any
            currently active override.
        
        - resetCustomCamera : rcc        (bool)          [edit]
            When specified will reset the camera transform for the active custom camera used
            for a scene render filter. It is only enabled when a valid scene render filter
            is specified.
        
        - sceneRenderFilter : srf        (unicode)       [query,edit]
            Specifies the name of a scene render filter
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - selectionHiliteDisplay : sel   (bool)          [query,edit]
            Sets whether the model panel will draw any selection hiliting on the objects in
            this window.
        
        - setSelected : ss               (bool)          [edit]
            This flag causes the currently active objects to be the only objects visible in
            the view (if viewSelected is true).
        
        - shadingModel : sml             (int)           [create,query,edit]
            Shading model to use
        
        - shadows : sdw                  (bool)          [query,edit]
            Turn on/off the display of hardware shadows in shaded mode.
        
        - smallObjectCulling : soc       (bool)          [create,query,edit]
            Define whether small object culling should be enabled or not
        
        - smallObjectThreshold : sot     (float)         [create,query,edit]
            Threshold used for small object culling
        
        - smoothWireframe : swf          (bool)          [query,edit]
            Turns on or off smoothing of wireframe lines and points
        
        - sortTransparent : st           (bool)          [query,edit]
            This flag turns on/off sorting of transparent objects during shaded mode
            refresh. Normally, objects are sorted according to their origin in camera space
            but when this flag is turned off they will be drawn according to their (depth-
            first traversal) order in the scene graph. This is a global flag that affects
            all model editors.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - stereoDrawMode : sdm           (bool)          [create,query,edit]
            If this flag is used then set stereo draw mode
        
        - strokes : str                  (bool)          [query,edit]
            Turn on/off the display of Paint Effects strokes for the view
        
        - subdivSurfaces : sds           (bool)          [query,edit]
            Turn on/off the display of subdivision surfaces for the view of the model
            editor.
        
        - textureAnisotropic : ta        (bool)          [query,edit]
            Set whether to perform anisotropic texture filtering. Will work only if the
            anisotropic texture filtering extension is supported in OpenGL on the graphics
            system.
        
        - textureCompression : tcp       (bool)          [create,query,edit]
            Defines whether texture compression should be used or not
        
        - textureDisplay : td            (unicode)       [query,edit]
            Set the type of blending to use for textures. The blend is performed between the
            destination fragment and the texture fragment. The source is usually the
            material color. Argument options are: modulate: multiply the destination and
            texture fragment decal: overwrite the destination with the texture fragment
        
        - textureEnvironmentMap : tem    (bool)          [create,query,edit]
            If true then use a texture environment map
        
        - textureHilight : th            (bool)          [query,edit]
            Set whether to show specular hilighting when the display is in shaded textured
            mode.
        
        - textureMaxSize : tms           (int)           [query,edit]
            Set maximum texture size for hardware texturing.  The integer value must be a
            power of 2.  Recommended values are 128 or 256.  If the value specified is
            larger than the OpenGL maximim textures size for the graphics hardware it will
            be clamped to the OpenGL size.  If many large textures are used in a scene
            reducing this value improves performance.  On Impact texture memory is pinned in
            RAM so using large textures can cause reliability and performance problems.
            Again reducing this value will help. Software rendering does not use this value.
            This flag is obsolete as of Maya 6.5. The maxTextureResolution/mtr argument on
            the displayPref command should be used instead.
        
        - textureMemoryUsed : tmu        (bool)          [query]
            Returns the total number of bytes used by all texture maps.  This is typicly
            width\*height\*channels for all texture objects in the scene If the texture is
            mip mapped all mip map levels are included in the total though not never more
            than two level will be in use at one time
        
        - textureSampling : ts           (int)           [query,edit]
            Set the type of sampling to be used for texture display. The argument can be
            either: 1 : means to perform point sample2 : means to perform bilinear
            interpolation (default)
        
        - textures : tx                  (bool)          [query,edit]
            Turn on/off the display of texture objects for the view
        
        - toggleExposure : tge           (bool)          [edit]
            Toggles between the current and the default exposure value of the editor.
        
        - toggleGamma : tgg              (bool)          [edit]
            Toggles between the current and the default gamma value of the editor.
        
        - transpInShadows : tis          (bool)          [query,edit]
            Set whether to enable display of transparency in shadows when using the hardware
            renderer. The default value is false.
        
        - transparencyAlgorithm : tal    (unicode)       [query,edit]
            Set the transparency algorithm. The options are: 1) frontAndBackCull: Two pass
            front and back culling technique.2) perPolygonSort: Draw transparent polygons in
            back-to-front order technique.transparency pptions 1) and 2) are supported by
            the hardware renderer. Options 1) is supported by the interactive modeling
            viewports. The default value is frontAndBackCull.
        
        - twoSidedLighting : tsl         (bool)          [query,edit]
            Turns on or off two sided lighting.  This may be used with the -default flag.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateColorMode : ucm          (bool)          [edit]
            Using this flag tells the model panel to check which color mode it should be in,
            and to switch accordingly.  This flag may be used to update a model panel after
            a camera image plane has been added or removed.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useBaseRenderer : ubr          (bool)          [query,edit]
            Set whether to use the baserenderer when using the hardware renderer and in
            interactive display mode(-useInteractiveMode) The default value is false.
        
        - useColorIndex : uci            (bool)          [query,edit]
            Sets whether the model panel will attempt to use color index mode when possible.
            Color index mode can provide a performance increase for point, bounding box, and
            wireframe display modes. This may be used with the -default flag.
        
        - useDefaultMaterial : udm       (bool)          [query,edit]
            Sets whether the model panel will draw all the shaded surfaces using the default
            material as opposed to using the material(s) currently assigned to the surfaces.
        
        - useInteractiveMode : ui        (bool)          [query,edit]
            Turns on or off the use of the special interaction settings during playback.
            This flag may be used with the -default flag.
        
        - useRGBImagePlane : ip          (bool)          [query,edit]
            Sets whether the model panel will be forced into RGB mode when there is an image
            plane attached to the panel's camera.
        
        - useReducedRenderer : urr       (bool)          [create,query,edit]
            Set true if using the reduced renderer
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - userNode : un                  (unicode)       [query,edit]
            Allows the user to associate a node name with the modelEditor. The value is
            automatically updated in the event the node is deleted or renamed.
        
        - viewObjects : vo               (bool)          [query]
            Returns the name (if any) of the objectSet which contains the list of objects
            visible in the view if viewSelected is true and the list of objects being
            displayed does notcome from the active list.
        
        - viewSelected : vs              (bool)          [query,edit]
            This flag turns on/off viewing of selected objects. When the flag is set to
            true, the currently active objects are captured and used as the list of objects
            to view.
        
        - viewTransformName : vtn        (unicode)       [query,edit]
            Sets the view pipeline to be applied if color management is enabled in the
            current editor.
        
        - viewType : vt                  (bool)          [query]
            Returns a string indicating the type of the model editor. For the default model
            editor, returns the empty string. For custom model editor types created via the
            API, returns the same string as is returned via the method
            MPx3dModelView::viewType().
        
        - width : w                      (bool)          [query]
            Return the width of the associated viewport in pixels.
        
        - wireframeBackingStore : wbs    (bool)          [query,edit]
            Sets whether a backing store is used to optimization the drawing of active
            objects. This mode can provide a performance increase in wireframe mode for
            certain scenes.
        
        - wireframeOnShaded : wos        (bool)          [query,edit]
            Sets whether the model panel will draw the wireframe on all shaded objects (if
            true) or only for active objects (if false).
        
        - xray : xr                      (bool)          [query,edit]
            Turns on or off Xray mode.  This may be used with the -default flag.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.modelEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatSlider(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the slider's value marker.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getStep(self, **kwargs):
        """
        The step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        The step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a slider control that accepts only float values and is bound by a minimum
        and maximum value.  The slider displays a marker indicating the current value of
        the slider relative to its minimum and maximum values.  Click and drag the
        marker, or on the slider itself to change the current value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/value flag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the slider's value marker.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query]
            Orientation of the slider.  This flag is true by default, which corresponds to a
            horizontally oriented slider.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Upper limit of the slider.
        
        - minValue : min                 (float)         [create,query,edit]
            Lower limit of the slider.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            The step value represents the amount the value will increase or decrease when
            you click either side of the slider.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float)         [create,query,edit]
            Value of the slider.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatSlider`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ProgressBar(PyUI):
    def beginProgress(self, val='True', **kwargs):
        """
        Only valid for the main progress barShows the main progress bar (normally in the Help Line). This is normally issued through MEL when a length computation is about to occur.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def endProgress(self, val='True', **kwargs):
        """
        Only valid for the main progress barHides the progress bar. No other flags can be used at the same time. This is normally issued through MEL in response to the -ic/isCancelled flag being set or if the progress value reaches its maximum.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getIsCancelled(self, **kwargs):
        """
        Returns true if the user has tried to cancel the operation. Returns false otherwise.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getIsInterruptable(self, **kwargs):
        """
        Only valid for the main progress barReturns true if the isCancelled flag should respond to attempts to cancel the operation. Setting this to true will add a note in the help line display message to the user indicating that they can cancel the operation.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getIsMainProgressBar(self, **kwargs):
        """
        Determines whether this progressBar is used to show the progress of all basic operations such as Open/Save file.The main progressBar behaves very differently, in that it only shows itself when there is an ongoing basic operation.Defaults to false, and only one progress bar will be recognized as the mainone.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        The maximum or endingvalue of the progress indicator. If the progress value is greater than the -max/maxValue, the progress value will be set to the maximum. Default value is 100.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        The minimum or startingvalue of the progress indicator. If the progress value is less than the -min/minValue, the progress value will be set to the minimum. Default value is 0.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getProgress(self, **kwargs):
        """
        The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to the minimum when the control is created.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getStatus(self, **kwargs):
        """
        Only valid for the main progress barSets the contents of the helpLine control when the progressBar is showing. Use this instead of setting the helpLine directly because this will force a graphical refresh before returning.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setIsInterruptable(self, val='True', **kwargs):
        """
        Only valid for the main progress barReturns true if the isCancelled flag should respond to attempts to cancel the operation. Setting this to true will add a note in the help line display message to the user indicating that they can cancel the operation.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setIsMainProgressBar(self, val='True', **kwargs):
        """
        Determines whether this progressBar is used to show the progress of all basic operations such as Open/Save file.The main progressBar behaves very differently, in that it only shows itself when there is an ongoing basic operation.Defaults to false, and only one progress bar will be recognized as the mainone.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        The maximum or endingvalue of the progress indicator. If the progress value is greater than the -max/maxValue, the progress value will be set to the maximum. Default value is 100.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        The minimum or startingvalue of the progress indicator. If the progress value is less than the -min/minValue, the progress value will be set to the minimum. Default value is 0.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setProgress(self, val='True', **kwargs):
        """
        The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to the minimum when the control is created.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setStatus(self, val='True', **kwargs):
        """
        Only valid for the main progress barSets the contents of the helpLine control when the progressBar is showing. Use this instead of setting the helpLine directly because this will force a graphical refresh before returning.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    def step(self, val='True', **kwargs):
        """
        Increments the -pr/progress value by the amount specified.                  
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Creates a progress bar control that graphically fills in as its progress value
        increases.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - beginProgress : bp             (bool)          [create,edit]
            Only valid for the main progress barShows the main progress bar (normally in the
            Help Line). This is normally issued through MEL when a length computation is
            about to occur.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - endProgress : ep               (bool)          [edit]
            Only valid for the main progress barHides the progress bar. No other flags can
            be used at the same time. This is normally issued through MEL in response to the
            -ic/isCancelled flag being set or if the progress value reaches its maximum.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isCancelled : ic               (bool)          [query]
            Returns true if the user has tried to cancel the operation. Returns false
            otherwise.
        
        - isInterruptable : ii           (bool)          [create,query,edit]
            Only valid for the main progress barReturns true if the isCancelled flag should
            respond to attempts to cancel the operation. Setting this to true will add a
            note in the help line display message to the user indicating that they can
            cancel the operation.
        
        - isMainProgressBar : imp        (bool)          [create,query,edit]
            Determines whether this progressBar is used to show the progress of all basic
            operations such as Open/Save file.The main progressBar behaves very differently,
            in that it only shows itself when there is an ongoing basic operation.Defaults
            to false, and only one progress bar will be recognized as the mainone.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            The maximum or endingvalue of the progress indicator. If the progress value is
            greater than the -max/maxValue, the progress value will be set to the maximum.
            Default value is 100.
        
        - minValue : min                 (int)           [create,query,edit]
            The minimum or startingvalue of the progress indicator. If the progress value is
            less than the -min/minValue, the progress value will be set to the minimum.
            Default value is 0.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - progress : pr                  (int)           [create,query,edit]
            The amount of progress currently shown on the control. The value will always be
            between min and max. Default is equal to the minimum when the control is
            created.
        
        - status : st                    (unicode)       [create,query,edit]
            Only valid for the main progress barSets the contents of the helpLine control
            when the progressBar is showing. Use this instead of setting the helpLine
            directly because this will force a graphical refresh before returning.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (int)           [edit]
            Increments the -pr/progress value by the amount specified.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.progressBar`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class PromptDialog(PyUI):
    def getText(self, **kwargs):
        """
        The field text.                  
        
        
        Derived from mel command `maya.cmds.promptDialog`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The promptDialog command creates a modal dialog with a message to the user, a
        text field in which the user may enter a response, and a variable number of
        buttons to dismiss the dialog.  The dialog is dismissed when the user presses
        any button or chooses the close item from the window menu.  In the case where a
        button is pressed then the name of the button selected is returned.  If the
        dialog is dismissed via the close item then the string returned is specified by
        the -ds/dismissStringflag. The default behaviour when no arguments are specified
        is to create an empty single button dialog. To obtain the text entered by the
        user simply query the -tx/textflag.
        
        Flags:
        - backgroundColor : bgc          (float, float, float) [create]
            The background color of the dialog. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
            (Windows only flag)
        
        - button : b                     (unicode)       [create]
            Create a button with the given string as it's text.
        
        - cancelButton : cb              (unicode)       [create]
            The cancel button is activated by pressing the escape key. Note that this flag
            does not create a button, it simply indicates which button created via the
            -b/buttonflag shall respond to the escape key.
        
        - defaultButton : db             (unicode)       [create]
            The default button is activated by pressing the enter key. Note that this flag
            does not create a button, it simply indicates which button created via the
            -b/buttonflag shall respond to the enter key.
        
        - dismissString : ds             (unicode)       [create]
            The string returned when the user selects the 'Close' item from the Window
            Manager menu.  If this flag is not set then the string dismissis returned.
        
        - message : m                    (unicode)       [create]
            The message text appearing in the dialog.
        
        - messageAlign : ma              (unicode)       [create]
            Align the message left, center, or right.
        
        - parent : p                     (unicode)       [create]
            Specify the parent window for the dialog.  The dialog will be centered on this
            window and raise and lower with it's parent. By default, the dialog is not
            parented to a particular window and is simply centered on the screen.
        
        - scrollableField : sf           (bool)          [create]
            By default a single line text field is used in the dialog. Specify true for a
            multi-line scroll field.
        
        - style : st                     (unicode)       [create]
            Specify the type of input expected in the input field. Vaid input types are
            integerfloattext. If this flag is not specified, we assume the input type is
            text.
        
        - text : tx                      (unicode)       [create,query]
            The field text.
        
        - title : t                      (unicode)       [create]
            The dialog title.                  Flag can have multiple arguments, passed
            either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.promptDialog`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IntScrollBar(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the scroll bar's value marker.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Orientation of the scroll bar.  This flag is true by default, which corresponds to a horizontally oriented scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getLargeStep(self, **kwargs):
        """
        Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getStep(self, **kwargs):
        """
        Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setLargeStep(self, val='True', **kwargs):
        """
        Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the scroll bar.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a scroll bar control that accepts only integer values and is bound by a
        minimum and maximum value.  The scroll bar displays a marker indicating the
        current value of the scroll bar relative to its minimum and maximum values.
        Click and drag the marker or on the scroll bar itself to change the current
        value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/value flag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the scroll bar's value
            marker.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query]
            Orientation of the scroll bar.  This flag is true by default, which corresponds
            to a horizontally oriented scroll bar.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - largeStep : ls                 (int)           [create,query,edit]
            Larger increment for the scroll bar, ie. the increment used when the press is
            between the arrow button and the thumb.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            Upper limit of the scroll bar.
        
        - minValue : min                 (int)           [create,query,edit]
            Lower limit of the scroll bar.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (int)           [create,query,edit]
            Smaller increment for the scroll bar, ie. the increment used when the arrow
            buttons are pressed.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int)           [create,query,edit]
            Value of the scroll bar.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.intScrollBar`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CheckBox(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getAlign(self, **kwargs):
        """
        This flag is obsolete and should no longer be used. The check box label will always be left-aligned.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the check box.  By default, this flag is set to true and the check box value may be changed by clicking on it.  If false then the check box is 'read only' and can not be clicked on. The value of the check box can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label text. The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getOffCommand(self, **kwargs):
        """
        Command executed when the check box is turned off.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getOnCommand(self, **kwargs):
        """
        Command executed when the check box is turned on.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getRecomputeSize(self, **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getValue(self, **kwargs):
        """
        State of the check box.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        This flag is obsolete and should no longer be used. The check box label will always be left-aligned.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the check box.  By default, this flag is set to true and the check box value may be changed by clicking on it.  If false then the check box is 'read only' and can not be clicked on. The value of the check box can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label text. The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setOffCommand(self, val='True', **kwargs):
        """
        Command executed when the check box is turned off.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setOnCommand(self, val='True', **kwargs):
        """
        Command executed when the check box is turned on.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setRecomputeSize(self, val='True', **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        State of the check box.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a check box.  A check box is a simple control containing a
        text label and a state of either on or off.  Commands can be attached to any or
        all of the following events:  when the check box is turned on, turned off, or
        simply when it's state is changed.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            This flag is obsolete and should no longer be used. The check box label will
            always be left-aligned.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,query,edit]
            Command executed when the check box's state is changed. Note that this flag
            should not be used in conjunction with onCommand and offCommand. That is, one
            should either use changeCommand and test the state of the check box from inside
            the callback, or use onCommand and offCommand as separate callbacks.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the check box.  By default, this flag is set to true and the
            check box value may be changed by clicking on it.  If false then the check box
            is 'read only' and can not be clicked on. The value of the check box can always
            be changed with the -v/valueflag regardless of the state of the
            -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The label text. The default label is the name of the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,query,edit]
            Command executed when the check box is turned off.
        
        - onCommand : onc                (script)        [create,query,edit]
            Command executed when the check box is turned on.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - recomputeSize : rs             (bool)          [create,query,edit]
            If true then the control will recompute it's size to just fit the size of the
            label.  If false then the control size will remain fixed as you change the size
            of the label.  The default value of this flag is true.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (bool)          [create,query,edit]
            State of the check box.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.checkBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class SymbolButton(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the symbol button is pressed.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image for the button.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the symbol button is pressed.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image for the button.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a symbol button.  A symbol button behaves like a regular
        button, the only difference is a symbol button displays an image rather that a
        text label.  A command may be attached to the button which will be executed when
        the button is pressed.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,query,edit]
            Command executed when the symbol button is pressed.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            Image for the button.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.symbolButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Image(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getImage(self, **kwargs):
        """
        Sets the image given the file name.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Sets the image given the file name.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a static image for non-xpm files. Any image file format
        supported by the file texture node is supported by this command.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            Sets the image given the file name.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.image`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class MessageLine(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a message line where tool feedback is shown.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.messageLine`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class NodeIconButton(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the control is pressed. The command should return a string which will be used to facilitate node drag and drop.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the control is pressed. The command should return a string which will be used to facilitate node drag and drop.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates a button that can be displayed
        with different icons, with or without a text label. If the button is drag and
        dropped onto other controls (e.g., HyperShade), the command will be executed and
        the return string will be used as the name of a dropped node.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,query,edit]
            Command executed when the control is pressed. The command should return a string
            which will be used to facilitate node drag and drop.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.nodeIconButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class HyperGraph(PyUI):
    def addBookmark(self, val='True', **kwargs):
        """
        Create a bookmark for the current hypergraph view.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def addDependGraph(self, val='True', **kwargs):
        """
        Add a dependency graph starting at the named node to the view                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def addDependNode(self, val='True', **kwargs):
        """
        Add a dependency node to the dependency graph view                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def attributeEditor(self, val='True', **kwargs):
        """
        Launches attribute editor on selected node.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def backward(self, val='True', **kwargs):
        """
        Navigate backward one step.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def clear(self, val='True', **kwargs):
        """
        Clears the current hypergraph view and deletes the graph UI. (see also -rebuild flag)                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def collapseContainer(self, val='True', **kwargs):
        """
        Collapses containers selected in DG graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def connectionDrawStyle(self, val='True', **kwargs):
        """
        Specify how connections between nodes should be drawn. Valid values are center(draws connection lines from the center of one node to the center of the other) and side(draws connection lines from the right side of the source node to the left side of the destination node). The default is center. This flag does not apply to Hypershade graphs, which are always drawn with the sideconnection draw style.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def debug(self, val='True', **kwargs):
        """
        Run a debug method on the graph                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def deleteBookmark(self, val='True', **kwargs):
        """
        Delete the bookmark with the corresponding node name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def dependGraph(self, val='True', **kwargs):
        """
        Displays dependency graph iterated from specified node.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def dependNode(self, val='True', **kwargs):
        """
        Displays dependency node in view.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def directoryPressCommand(self, val='True', **kwargs):
        """
        Specify a command to run when a directory is pressed.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def down(self, val='True', **kwargs):
        """
        Navigate down to the dependency graph containing the current selection. Shows upstream and downstream connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def downstream(self, val='True', **kwargs):
        """
        Show downstream dependency graph of selected node(s).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def dragAndDropBehaviorCommand(self, val='True', **kwargs):
        """
        Mel proc called when a drag and drop onto a hyperGraph node has occurred. Proc signature is procName (string $editor, string $sourceNode, string $destinationNode).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def edgeDblClickCommand(self, val='True', **kwargs):
        """
        Mel proc called when an edge is double clicked.  Proc signature is procName (string $editor, string $edge).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def edgeDimmedDblClickCommand(self, val='True', **kwargs):
        """
        Mel proc called when a dimmed edge is double clicked.  Proc signature is procName (string $editor, string $edge).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def edgeDropCommand(self, val='True', **kwargs):
        """
        Command to execute when an edge drop occurs.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def edgePressCommand(self, val='True', **kwargs):
        """
        Command to execute when an edge press occurs.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def edgeReleaseCommand(self, val='True', **kwargs):
        """
        Command to execute when an edge release occurs.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def enableAutomaticLayout(self, val='True', **kwargs):
        """
        Rebuild the graph if a node is added or removed from the graph via drag and drop or dg messages. Default is true.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def expandContainer(self, val='True', **kwargs):
        """
        Expands containers selected in DG graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def filterDetail(self, val='True', **kwargs):
        """
        This flag is obsolete. Use the showConstraints, showExpressions, showDeformer, showInvisible, showShapes and showUnderworld flags instead.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def focusCommand(self, val='True', **kwargs):
        """
        Mel proc to be run when the mouse is clicked in the hyper graph. Primarily of use in setting the window focus.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def fold(self, val='True', **kwargs):
        """
        Folds (Collapses) selected object.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def forceRefresh(self, val='True', **kwargs):
        """
        Forces the hypergraph to refresh (redraw) its contents.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def forward(self, val='True', **kwargs):
        """
        Navigate forward one step.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def frame(self, val='True', **kwargs):
        """
        Frames the selected objects                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def frameBranch(self, val='True', **kwargs):
        """
        Frames the the branch from the selected node on downward.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def frameGraph(self, val='True', **kwargs):
        """
        Frames the entire graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def frameGraphNoRebuild(self, val='True', **kwargs):
        """
        Specify that on zoom out the graph should not rebuild; for efficiency.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def frameHierarchy(self, val='True', **kwargs):
        """
        Frames the hierarchy that contains the selected node.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getAnimateTransition(self, **kwargs):
        """
        Turns animate transitions off and on.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getBookmarkName(self, **kwargs):
        """
        Returns the bookmark name for the most recently created bookmark.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getBreakConnectionCommand(self, **kwargs):
        """
        Specify the command to call when a connection is broken.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getCurrentEdge(self, **kwargs):
        """
        Return the current edge name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getCurrentNode(self, **kwargs):
        """
        Return the current node name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getDropNode(self, **kwargs):
        """
        Returns the name of the source node in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getDropTargetNode(self, **kwargs):
        """
        Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFeedbackGadget(self, **kwargs):
        """
        Returns the name of the current gadget.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFeedbackNode(self, **kwargs):
        """
        Returns the name of the current feedback or highlight node.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFreeform(self, **kwargs):
        """
        Enable freeform layout mode.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFromAttr(self, **kwargs):
        """
        Returns the name of the source attribute in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getFromNode(self, **kwargs):
        """
        Returns the name of the source node in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getGetNodeList(self, **kwargs):
        """
        Returns a string array that represents a list of all the nodes in the graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getGetNodePosition(self, **kwargs):
        """
        Returns the position of a specified node in x,y graph coords. This flag and its argument must be passed to the command before the -q flag (see examples).       In query mode, this flag can accept a value.
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getGraphLayoutStyle(self, **kwargs):
        """
        This flag is obsolete.  The only supported graph layout style is hierarchicalLayout. Use of any other style will trigger a warning.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getGraphType(self, **kwargs):
        """
        Returns the type name of the current graph in the view (either DAG or DG).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getHeatMapDisplay(self, **kwargs):
        """
        Specify whether the heat map should be shown or not.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getIconSize(self, **kwargs):
        """
        Set or query the icon size for this hyper graph editor. The currently allowed icon sizes are smallIcons, mediumIcons, largeIconsand superIcons.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getImage(self, **kwargs):
        """
        Specify background image to be loaded from the project image directory.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getImageEnabled(self, **kwargs):
        """
        Enable display of a loaded background image (Freeform DAG view or DG view)                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getImageForContainer(self, **kwargs):
        """
        Specify that the following flags work on selected containers instead of the whole image: -imageScale,-imagePosition, fitImageToWidth, -fitImageToHeight, -image                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getImagePosition(self, **kwargs):
        """
        Position of the background image.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getImageScale(self, **kwargs):
        """
        Uniform scale of the background image.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getIsHotkeyTarget(self, **kwargs):
        """
        For internal use.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getMergeConnections(self, **kwargs):
        """
        Merge groups of connections into 'fat' connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getOpaqueContainers(self, **kwargs):
        """
        Sets expanded container background opacity.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getOrientation(self, **kwargs):
        """
        Selects orientation style of graph: horiz|vert
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getRange(self, **kwargs):
        """
        Limits the display of nodes to only those within the range. There are two float values expected, the first the lower threshold of the range and the second the upper threshold of the range. The values are absolute timing values, not percentages.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowConnectionFromSelected(self, **kwargs):
        """
        Show the connects (constraints, expresions, and deformers - see showConstraints for example) leaving from selected nodes. This can be combined with showConnectionToSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowConnectionToSelected(self, **kwargs):
        """
        Show the connects (constraints, expresions, and deformers - see showConstraints for example) arriving at selected nodes. This can be combined with showConnectionFromSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowConstraints(self, **kwargs):
        """
        Show constraint relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowDeformers(self, **kwargs):
        """
        Show deformer or geometry filter relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowExpressions(self, **kwargs):
        """
        Show expression relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowInvisible(self, **kwargs):
        """
        Show invisible nodes in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowRelationships(self, **kwargs):
        """
        Show relationship (message) connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowShapes(self, **kwargs):
        """
        Show shape nodes in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getShowUnderworld(self, **kwargs):
        """
        Show underworld graphs in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getToAttr(self, **kwargs):
        """
        Returns the name of the destination attribute in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getToNode(self, **kwargs):
        """
        Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getTransitionFrames(self, **kwargs):
        """
        Specify te number of transition frames for animate transitions.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getUpdateNodeAdded(self, **kwargs):
        """
        Update graph when a new node is added to the database                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getUpdateSelection(self, **kwargs):
        """
        Update selection state in the graph when the selection state of database changes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getUseFeedbackList(self, **kwargs):
        """
        Use feedback or highlight list as the target selection when processing other hypergraph command-line options.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def getViewOption(self, **kwargs):
        """
        Set or query the view option for this hyper graph editor. The currently allowed views are asIconsand asList.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def graphDescription(self, val='True', **kwargs):
        """
        When used, return a description of the current graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def initializeScript(self, val='True', **kwargs):
        """
        Script to call when the graph is initialized.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def layout(self, val='True', **kwargs):
        """
        Perform an automatic layout on the graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def layoutSelected(self, val='True', **kwargs):
        """
        This flag is obsolete.  The only supported graph layout style is hierarchicalLayout. Use of any other style will trigger a warning.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def limitGraphTraversal(self, val='True', **kwargs):
        """
        Limit the graph traversal to a certain number of levels.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def look(self, val='True', **kwargs):
        """
        Look at a coordinate in the graph view                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def navigateHome(self, val='True', **kwargs):
        """
        Navigate to the home (DAG) view.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def navup(self, val='True', **kwargs):
        """
        Navigate up to the dependency graph containing the current selection. Shows upstream and downstream connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def newInputConnection(self, val='True', **kwargs):
        """
        Specify a new connection, input side                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def newOutputConnection(self, val='True', **kwargs):
        """
        Specify a new connection, output side                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nextView(self, val='True', **kwargs):
        """
        Changes the view to the next DAG view.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodeConnectCommand(self, val='True', **kwargs):
        """
        Command to call when a node is connected.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodeDblClickCommand(self, val='True', **kwargs):
        """
        Command to call when a node is double-clicked.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodeDropCommand(self, val='True', **kwargs):
        """
        Set the command to be called when a node is dropped in the hypergraph window.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodeMenuCommand(self, val='True', **kwargs):
        """
        Command to call when a node menu is activated.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodePressCommand(self, val='True', **kwargs):
        """
        Set the command to be called when the user presses a mouse button while the cursor is over a node in the hypergraph window.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def nodeReleaseCommand(self, val='True', **kwargs):
        """
        Set the command to be called when the user releases a mouse button while the cursor is over a node in the hypergraph window.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def panView(self, val='True', **kwargs):
        """
        Pan the view to a new center.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def popupMenuScript(self, val='True', **kwargs):
        """
        Set the script to be called to register the popup menu with the control for this hypergraph. The script will be called with a string argument which gives the name of the hypergraph whose control the popup menu should be parented to.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def previousView(self, val='True', **kwargs):
        """
        Changes the view back to the previous DAG view.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def rebuild(self, val='True', **kwargs):
        """
        Rebuilds graph                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def removeNode(self, val='True', **kwargs):
        """
        Removes the node identified by string from the graph.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def resetFreeform(self, val='True', **kwargs):
        """
        Resets freeform position on all nodes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def restoreBookmark(self, val='True', **kwargs):
        """
        Restore the view corresponding to the bookmark.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def scrollUpDownNoZoom(self, val='True', **kwargs):
        """
        Specify if we want to be in the scroll along y only with no free zooming mode. By default, hyper graph editor allows user to pan left and right.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setAnimateTransition(self, val='True', **kwargs):
        """
        Turns animate transitions off and on.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setBreakConnectionCommand(self, val='True', **kwargs):
        """
        Specify the command to call when a connection is broken.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setCurrentEdge(self, val='True', **kwargs):
        """
        Return the current edge name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setCurrentNode(self, val='True', **kwargs):
        """
        Return the current node name.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setFreeform(self, val='True', **kwargs):
        """
        Enable freeform layout mode.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setGraphLayoutStyle(self, val='True', **kwargs):
        """
        This flag is obsolete.  The only supported graph layout style is hierarchicalLayout. Use of any other style will trigger a warning.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setHeatMapDisplay(self, val='True', **kwargs):
        """
        Specify whether the heat map should be shown or not.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setIconSize(self, val='True', **kwargs):
        """
        Set or query the icon size for this hyper graph editor. The currently allowed icon sizes are smallIcons, mediumIcons, largeIconsand superIcons.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Specify background image to be loaded from the project image directory.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setImageEnabled(self, val='True', **kwargs):
        """
        Enable display of a loaded background image (Freeform DAG view or DG view)                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setImageForContainer(self, val='True', **kwargs):
        """
        Specify that the following flags work on selected containers instead of the whole image: -imageScale,-imagePosition, fitImageToWidth, -fitImageToHeight, -image                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setImagePosition(self, val='True', **kwargs):
        """
        Position of the background image.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setImageScale(self, val='True', **kwargs):
        """
        Uniform scale of the background image.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setMergeConnections(self, val='True', **kwargs):
        """
        Merge groups of connections into 'fat' connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setNodePosition(self, val='True', **kwargs):
        """
        Sets the node identified by string to the (x,y) position in the window specified by the two floats. If the node is not in the graph than it will be added to the graph and then moved to the new position.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setOpaqueContainers(self, val='True', **kwargs):
        """
        Sets expanded container background opacity.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setOrientation(self, val='True', **kwargs):
        """
        Selects orientation style of graph: horiz|vert
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setRange(self, val='True', **kwargs):
        """
        Limits the display of nodes to only those within the range. There are two float values expected, the first the lower threshold of the range and the second the upper threshold of the range. The values are absolute timing values, not percentages.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowConnectionFromSelected(self, val='True', **kwargs):
        """
        Show the connects (constraints, expresions, and deformers - see showConstraints for example) leaving from selected nodes. This can be combined with showConnectionToSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowConnectionToSelected(self, val='True', **kwargs):
        """
        Show the connects (constraints, expresions, and deformers - see showConstraints for example) arriving at selected nodes. This can be combined with showConnectionFromSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowConstraints(self, val='True', **kwargs):
        """
        Show constraint relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowDeformers(self, val='True', **kwargs):
        """
        Show deformer or geometry filter relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowExpressions(self, val='True', **kwargs):
        """
        Show expression relationships in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowInvisible(self, val='True', **kwargs):
        """
        Show invisible nodes in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowRelationships(self, val='True', **kwargs):
        """
        Show relationship (message) connections.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowShapes(self, val='True', **kwargs):
        """
        Show shape nodes in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setShowUnderworld(self, val='True', **kwargs):
        """
        Show underworld graphs in the DAG.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setTransitionFrames(self, val='True', **kwargs):
        """
        Specify te number of transition frames for animate transitions.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setUpdateNodeAdded(self, val='True', **kwargs):
        """
        Update graph when a new node is added to the database                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setUpdateSelection(self, val='True', **kwargs):
        """
        Update selection state in the graph when the selection state of database changes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setUseFeedbackList(self, val='True', **kwargs):
        """
        Use feedback or highlight list as the target selection when processing other hypergraph command-line options.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def setViewOption(self, val='True', **kwargs):
        """
        Set or query the view option for this hyper graph editor. The currently allowed views are asIconsand asList.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def showCachedConnections(self, val='True', **kwargs):
        """
        Specify whether cached connections should be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def showConstraintLabels(self, val='True', **kwargs):
        """
        Specify whether constraint labels should be shown.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unfold(self, val='True', **kwargs):
        """
        Unfolds (expands) selected object.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unfoldAll(self, val='True', **kwargs):
        """
        Unfolds everything under selected object.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unfoldAllShapes(self, val='True', **kwargs):
        """
        Unfolds all shapes.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unfoldHidden(self, val='True', **kwargs):
        """
        Unfolds all hidden objects.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def upstream(self, val='True', **kwargs):
        """
        Show upstream dependency graph of selected node(s).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def useDrawOverrideColor(self, val='True', **kwargs):
        """
        Specify whether or not to use draw override coloring.                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def visibility(self, val='True', **kwargs):
        """
        Set the visible state of the selected node(s).                  
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    def zoom(self, val='True', **kwargs):
        """
        Specify the zoom factor for animating transitions                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The following is an overview of the basic features of the hypergraph. A more
        detailed description is given in the user manuals. The hypergraph provides the
        user with the ability to view and edit the maya scene graph.  The hypergraph
        supports two types of graphs: the DAG or scene hierarchy and the dependency
        graph. The default view of the hypergraph editor is the DAG view. The user can
        show the dependency graph for a collection of nodes by first selecting the nodes
        and navigating to the dependency graph using one of the graph options.  The user
        can save any view by setting a bookmark to that view.  The user can also show
        previous views using the view options provided. The hypergraph supports a simple
        editing mechanism for editing hierarchy in the DAG view and connections in
        dependency graph view. In the DAG  view, the user can reparent or reorder nodes
        in the graph using drag-and-drop. In the dependency graph view, the user can
        select connections and delete them or make new connections by dragging and
        dropping nodes or existing connections. The hypergraph supports two layout modes
        in the DAG view: automatic and freeform.  In automatic mode, the graph nodes are
        automatically positioned according to the layout preferences.  In freeform mode,
        the user can position nodes manually.  The node position is saved in the scene.
        A background image can be placed behind DG or DAG in freeform mode. This can be
        used as a template for positioning nodes in a user-defined layout. Nodes in the
        DAG view can be expanded or collapsed.  The state is saved in the scene.  The
        performance of the graph drawing will increase as hierarchies are collapsed. In
        addition to hierachy relationships, the hypergraph can show expression,
        constraint and deformation relationships in the DAG. These can be
        enabled/disabled through the options provided.  There are also additional
        filters for showing shape nodes and invisible nodes.  The amount of detail show
        may affect the speed of the display of the graph. Most of the UI features of the
        hypergraph are addressable through the hypergraph command-line interface.  The
        available command-line options are described in the next section.
        
        Flags:
        - addBookmark : abk              (bool)          [create,edit]
            Create a bookmark for the current hypergraph view.
        
        - addDependGraph : adg           (PyNode)        [create,edit]
            Add a dependency graph starting at the named node to the view
        
        - addDependNode : adn            (PyNode)        [create,edit]
            Add a dependency node to the dependency graph view
        
        - animateTransition : atr        (bool)          [create,query,edit]
            Turns animate transitions off and on.
        
        - attributeEditor : ae           (unicode)       [create,edit]
            Launches attribute editor on selected node.
        
        - backward : bak                 (bool)          [create,edit]
            Navigate backward one step.
        
        - bookmarkName : bn              (bool)          [query]
            Returns the bookmark name for the most recently created bookmark.
        
        - breakConnectionCommand : bco   (unicode)       [create,query,edit]
            Specify the command to call when a connection is broken.
        
        - clear : clr                    (bool)          [create,edit]
            Clears the current hypergraph view and deletes the graph UI. (see also -rebuild
            flag)
        
        - collapseContainer : cc         (bool)          [create,edit]
            Collapses containers selected in DG graph.
        
        - connectionDrawStyle : cds      (unicode)       [create,edit]
            Specify how connections between nodes should be drawn. Valid values are
            center(draws connection lines from the center of one node to the center of the
            other) and side(draws connection lines from the right side of the source node to
            the left side of the destination node). The default is center. This flag does
            not apply to Hypershade graphs, which are always drawn with the sideconnection
            draw style.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - currentEdge : ced              (unicode)       [query,edit]
            Return the current edge name.
        
        - currentNode : cno              (unicode)       [query,edit]
            Return the current node name.
        
        - debug : deb                    (unicode)       [create,edit]
            Run a debug method on the graph
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteBookmark : dbk           (unicode)       [create,edit]
            Delete the bookmark with the corresponding node name.
        
        - dependGraph : dg               (bool)          [create,edit]
            Displays dependency graph iterated from specified node.
        
        - dependNode : dn                (unicode)       [create,edit]
            Displays dependency node in view.
        
        - directoryPressCommand : dp     (unicode)       [create,edit]
            Specify a command to run when a directory is pressed.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - down : do                      (bool)          [create,edit]
            Navigate down to the dependency graph containing the current selection. Shows
            upstream and downstream connections.
        
        - downstream : ds                (bool)          [create,edit]
            Show downstream dependency graph of selected node(s).
        
        - dragAndDropBehaviorCommand : ddc (unicode)       [create,edit]
            Mel proc called when a drag and drop onto a hyperGraph node has occurred. Proc
            signature is procName (string $editor, string $sourceNode, string
            $destinationNode).
        
        - dropNode : dr                  (unicode)       [query]
            Returns the name of the source node in a drag and drop connection, when called
            during processing of a drop.
        
        - dropTargetNode : drt           (unicode)       [query]
            Returns the name of the destination node in a drag and drop connection, when
            called during processing of a drop.
        
        - edgeDblClickCommand : edc      (unicode)       [create,edit]
            Mel proc called when an edge is double clicked.  Proc signature is procName
            (string $editor, string $edge).
        
        - edgeDimmedDblClickCommand : edd (unicode)       [create,edit]
            Mel proc called when a dimmed edge is double clicked.  Proc signature is
            procName (string $editor, string $edge).
        
        - edgeDropCommand : edr          (unicode)       [create,edit]
            Command to execute when an edge drop occurs.
        
        - edgePressCommand : ep          (unicode)       [create,edit]
            Command to execute when an edge press occurs.
        
        - edgeReleaseCommand : er        (unicode)       [create,edit]
            Command to execute when an edge release occurs.
        
        - enableAutomaticLayout : eal    (bool)          [create,edit]
            Rebuild the graph if a node is added or removed from the graph via drag and drop
            or dg messages. Default is true.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - expandContainer : ec           (bool)          [create,edit]
            Expands containers selected in DG graph.
        
        - feedbackGadget : fbg           (unicode)       [query]
            Returns the name of the current gadget.
        
        - feedbackNode : fbn             (unicode)       [query]
            Returns the name of the current feedback or highlight node.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - filterDetail : fd              (unicode, bool) [create,edit]
            This flag is obsolete. Use the showConstraints, showExpressions, showDeformer,
            showInvisible, showShapes and showUnderworld flags instead.
        
        - fitImageToHeight : fih         (bool)          [create]
            Changes position and scale of background image, so its height fits current
            editor view.
        
        - fitImageToWidth : fiw          (bool)          [create]
            Changes position and scale of background image, so its width fits current editor
            view.
        
        - focusCommand : fc              (unicode)       [create,edit]
            Mel proc to be run when the mouse is clicked in the hyper graph. Primarily of
            use in setting the window focus.
        
        - fold : fo                      (bool)          [create,edit]
            Folds (Collapses) selected object.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - forceRefresh : frf             (bool)          [create,edit]
            Forces the hypergraph to refresh (redraw) its contents.
        
        - forward : fow                  (bool)          [create,edit]
            Navigate forward one step.
        
        - frame : fr                     (bool)          [create,edit]
            Frames the selected objects
        
        - frameBranch : frb              (bool)          [create,edit]
            Frames the the branch from the selected node on downward.
        
        - frameGraph : fg                (bool)          [create,edit]
            Frames the entire graph.
        
        - frameGraphNoRebuild : fgn      (bool)          [create,edit]
            Specify that on zoom out the graph should not rebuild; for efficiency.
        
        - frameHierarchy : frh           (bool)          [create,edit]
            Frames the hierarchy that contains the selected node.
        
        - freeform : fre                 (bool)          [create,query,edit]
            Enable freeform layout mode.
        
        - fromAttr : fat                 (unicode)       [query]
            Returns the name of the source attribute in a drag and drop connection, when
            called during processing of a drop.
        
        - fromNode : frn                 (unicode)       [query]
            Returns the name of the source node in a drag and drop connection, when called
            during processing of a drop.
        
        - getNodeList : gnl              (bool)          [query]
            Returns a string array that represents a list of all the nodes in the graph.
        
        - getNodePosition : gnp          (unicode)       [query]
            Returns the position of a specified node in x,y graph coords. This flag and its
            argument must be passed to the command before the -q flag (see examples).
            In query mode, this flag can accept a value.
        
        - graphDescription : gd          (bool)          [create,edit]
            When used, return a description of the current graph.
        
        - graphLayoutStyle : gls         (unicode)       [create,query,edit]
            This flag is obsolete.  The only supported graph layout style is
            hierarchicalLayout. Use of any other style will trigger a warning.
        
        - graphType : gt                 (unicode)       [query]
            Returns the type name of the current graph in the view (either DAG or DG).
        
        - heatMapDisplay : hmd           (bool)          [query,edit]
            Specify whether the heat map should be shown or not.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - iconSize : ics                 (unicode)       [create,query,edit]
            Set or query the icon size for this hyper graph editor. The currently allowed
            icon sizes are smallIcons, mediumIcons, largeIconsand superIcons.
        
        - image : img                    (unicode)       [create,query,edit]
            Specify background image to be loaded from the project image directory.
        
        - imageEnabled : ime             (bool)          [create,query,edit]
            Enable display of a loaded background image (Freeform DAG view or DG view)
        
        - imageForContainer : ifc        (bool)          [create,query,edit]
            Specify that the following flags work on selected containers instead of the
            whole image: -imageScale,-imagePosition, fitImageToWidth, -fitImageToHeight,
            -image
        
        - imagePosition : imp            (float, float)  [create,query,edit]
            Position of the background image.
        
        - imageScale : ims               (float)         [create,query,edit]
            Uniform scale of the background image.
        
        - initializeScript : ini         (unicode)       [create,edit]
            Script to call when the graph is initialized.
        
        - isHotkeyTarget : iht           (bool)          [query]
            For internal use.
        
        - layout : lay                   (bool)          [create,edit]
            Perform an automatic layout on the graph.
        
        - layoutSelected : lsl           (unicode)       [create,edit]
            This flag is obsolete.  The only supported graph layout style is
            hierarchicalLayout. Use of any other style will trigger a warning.
        
        - layoutSubtree : lsb            (bool)          []
        
        - limitGraphTraversal : lgt      (int)           [create,edit]
            Limit the graph traversal to a certain number of levels.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - look : loo                     (float, float)  [create,edit]
            Look at a coordinate in the graph view
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - mergeConnections : mc          (bool)          [create,query,edit]
            Merge groups of connections into 'fat' connections.
        
        - navigateHome : hom             (bool)          [create,edit]
            Navigate to the home (DAG) view.
        
        - navup : nu                     (bool)          [create,edit]
            Navigate up to the dependency graph containing the current selection. Shows
            upstream and downstream connections.
        
        - newInputConnection : nin       (unicode)       [create,edit]
            Specify a new connection, input side
        
        - newOutputConnection : nou      (unicode)       [create,edit]
            Specify a new connection, output side
        
        - nextView : nvw                 (bool)          [create,edit]
            Changes the view to the next DAG view.
        
        - nodeConnectCommand : nco       (unicode)       [create,edit]
            Command to call when a node is connected.
        
        - nodeDblClickCommand : ndc      (unicode)       [create,edit]
            Command to call when a node is double-clicked.
        
        - nodeDropCommand : ndr          (unicode)       [create,edit]
            Set the command to be called when a node is dropped in the hypergraph window.
        
        - nodeMenuCommand : nm           (unicode)       [create,edit]
            Command to call when a node menu is activated.
        
        - nodePressCommand : np          (unicode)       [create,edit]
            Set the command to be called when the user presses a mouse button while the
            cursor is over a node in the hypergraph window.
        
        - nodeReleaseCommand : nr        (unicode)       [create,edit]
            Set the command to be called when the user releases a mouse button while the
            cursor is over a node in the hypergraph window.
        
        - opaqueContainers : opc         (bool)          [query,edit]
            Sets expanded container background opacity.
        
        - orientation : orientation      (unicode)       [create,query,edit]
            Selects orientation style of graph: horiz|vert
        
        - panView : pan                  (float, float)  [create,edit]
            Pan the view to a new center.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - popupMenuScript : pms          (unicode)       [create,edit]
            Set the script to be called to register the popup menu with the control for this
            hypergraph. The script will be called with a string argument which gives the
            name of the hypergraph whose control the popup menu should be parented to.
        
        - previousView : pvw             (bool)          [create,edit]
            Changes the view back to the previous DAG view.
        
        - range : rg                     (float, float)  [create,query,edit]
            Limits the display of nodes to only those within the range. There are two float
            values expected, the first the lower threshold of the range and the second the
            upper threshold of the range. The values are absolute timing values, not
            percentages.
        
        - rebuild : rb                   (bool)          [create,edit]
            Rebuilds graph
        
        - removeNode : rmn               (unicode)       [create,edit]
            Removes the node identified by string from the graph.
        
        - rename : rn                    (bool)          [create,edit]
            Pops up text field over selected object for renaming
        
        - resetFreeform : rf             (bool)          [create,edit]
            Resets freeform position on all nodes.
        
        - restoreBookmark : rbk          (unicode)       [create,edit]
            Restore the view corresponding to the bookmark.
        
        - scrollUpDownNoZoom : snz       (bool)          [create,edit]
            Specify if we want to be in the scroll along y only with no free zooming mode.
            By default, hyper graph editor allows user to pan left and right.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - setNodePosition : snp          (unicode, float, float) [create,edit]
            Sets the node identified by string to the (x,y) position in the window specified
            by the two floats. If the node is not in the graph than it will be added to the
            graph and then moved to the new position.
        
        - showCachedConnections : scc    (bool)          [create,edit]
            Specify whether cached connections should be shown.
        
        - showConnectionFromSelected : scf (bool)          [create,query,edit]
            Show the connects (constraints, expresions, and deformers - see showConstraints
            for example) leaving from selected nodes. This can be combined with
            showConnectionToSelected to show both arrive and leaving connects. If both flags
            are false then all the connections will be shown.
        
        - showConnectionToSelected : sct (bool)          [create,query,edit]
            Show the connects (constraints, expresions, and deformers - see showConstraints
            for example) arriving at selected nodes. This can be combined with
            showConnectionFromSelected to show both arrive and leaving connects. If both
            flags are false then all the connections will be shown.
        
        - showConstraintLabels : scl     (bool)          [create,edit]
            Specify whether constraint labels should be shown.
        
        - showConstraints : shc          (bool)          [create,query,edit]
            Show constraint relationships in the DAG.
        
        - showDeformers : shd            (bool)          [create,query,edit]
            Show deformer or geometry filter relationships in the DAG.
        
        - showExpressions : shx          (bool)          [create,query,edit]
            Show expression relationships in the DAG.
        
        - showInvisible : shi            (bool)          [create,query,edit]
            Show invisible nodes in the DAG.
        
        - showRelationships : shr        (bool)          [create,query,edit]
            Show relationship (message) connections.
        
        - showShapes : shs               (bool)          [create,query,edit]
            Show shape nodes in the DAG.
        
        - showUnderworld : shu           (bool)          [create,query,edit]
            Show underworld graphs in the DAG.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - toAttr : tat                   (unicode)       [query]
            Returns the name of the destination attribute in a drag and drop connection,
            when called during processing of a drop.
        
        - toNode : ton                   (unicode)       [query]
            Returns the name of the destination node in a drag and drop connection, when
            called during processing of a drop.
        
        - transitionFrames : tfr         (int)           [create,query,edit]
            Specify te number of transition frames for animate transitions.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unfold : uf                    (bool)          [create,edit]
            Unfolds (expands) selected object.
        
        - unfoldAll : ua                 (bool)          [create,edit]
            Unfolds everything under selected object.
        
        - unfoldAllShapes : uas          (bool)          [create,edit]
            Unfolds all shapes.
        
        - unfoldHidden : ufh             (bool)          [create,edit]
            Unfolds all hidden objects.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - updateNodeAdded : una          (bool)          [create,query,edit]
            Update graph when a new node is added to the database
        
        - updateSelection : us           (bool)          [create,query,edit]
            Update selection state in the graph when the selection state of database
            changes.
        
        - upstream : ups                 (bool)          [create,edit]
            Show upstream dependency graph of selected node(s).
        
        - useDrawOverrideColor : drc     (bool)          [create,edit]
            Specify whether or not to use draw override coloring.
        
        - useFeedbackList : ufl          (bool)          [create,query,edit]
            Use feedback or highlight list as the target selection when processing other
            hypergraph command-line options.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - viewOption : vo                (unicode)       [create,query,edit]
            Set or query the view option for this hyper graph editor. The currently allowed
            views are asIconsand asList.
        
        - visibility : vis               (bool)          [create,edit]
            Set the visible state of the selected node(s).
        
        - zoom : zm                      (float)         [create,edit]
            Specify the zoom factor for animating transitions                  Flag can have
            multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.hyperGraph`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RadioCollection(PyUI):
    def getCollectionItemArray(self, **kwargs):
        """
        Return a string list giving the long names of all the items in this collection.                  
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    def getGl(self, **kwargs):
        """
        Set the collection to have no parent layout.  Global collections must be explicitly deleted.                  
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    def getNumberOfCollectionItems(self, **kwargs):
        """
        Return the number of items in this collection.                  
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a radio button collection. Collections are parented to the
        current default layout if no parent is specified with the -p/parentflag.  As
        children of the layout they will be deleted when the layout is deleted.
        Collections may also span more than one window if the -gl/globalflag is used. In
        this case the collection has no parent and must be explicitly deleted with the
        deleteUIcommand when it is no longer wanted.
        
        Flags:
        - collectionItemArray : cia      (bool)          [query]
            Return a string list giving the long names of all the items in this collection.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - gl : gl                        (bool)          [create,query]
            Set the collection to have no parent layout.  Global collections must be
            explicitly deleted.
        
        - numberOfCollectionItems : nci  (bool)          [query]
            Return the number of items in this collection.
        
        - parent : p                     (unicode)       [create]
            The parent of the collection.  The collection will be deleted along with the
            parent.
        
        - select : sl                    (unicode)       [create,query,edit]
            Select the specified collection item.  If queried will return the name of the
            currently selected collection item.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.radioCollection`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class GradientControl(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getAdaptiveScaling(self, **kwargs):
        """
        Allow the ramp widget display to scale vertically to accommodate values greater than 1.0. True if adaptive scaling is enabled, false (the default) if not.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getNumberOfControls(self, **kwargs):
        """
        Returns the number of controls in the ramp widget                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getRefreshOnRelease(self, **kwargs):
        """
        Define how updates are dispatched during interactive editing of the ramp widget. True causes updates to only dispatch after releasing the mouse button after editing. False (the default) causes updates to dispatch interactively during editing (e.g. while moving ramp curve points). Note that the global update mode, if set to on releasecan disable the effect of this option.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getStaticNumberOfControls(self, **kwargs):
        """
        When 'true', this flag disables the creation/deletion of ramp entries (control points) via ramp widget interaction. Default is false.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getStaticPositions(self, **kwargs):
        """
        When 'true', this flag disables the interactive modification of ramp entry positions. Default is false.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getUpperLimitControl(self, **kwargs):
        """
        Specify the name of a text control which is updated with the current upper display limit for the ramp. This option is only effective when adaptiveScaling is specified.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getVerticalLayout(self, **kwargs):
        """
        When 'true', this makes the control orient vertically rather than horizontally. The default is `false` or horizontal.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def selectedColorControl(self, val='True', **kwargs):
        """
        Specifies the name of a color control to edit the selected color.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def selectedInterpControl(self, val='True', **kwargs):
        """
        Specifies the name of an enum control to edit the selected interpolation.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def selectedPositionControl(self, val='True', **kwargs):
        """
        Specifies the name of a float slider to edit the selected position.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setAdaptiveScaling(self, val='True', **kwargs):
        """
        Allow the ramp widget display to scale vertically to accommodate values greater than 1.0. True if adaptive scaling is enabled, false (the default) if not.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setRefreshOnRelease(self, val='True', **kwargs):
        """
        Define how updates are dispatched during interactive editing of the ramp widget. True causes updates to only dispatch after releasing the mouse button after editing. False (the default) causes updates to dispatch interactively during editing (e.g. while moving ramp curve points). Note that the global update mode, if set to on releasecan disable the effect of this option.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setStaticNumberOfControls(self, val='True', **kwargs):
        """
        When 'true', this flag disables the creation/deletion of ramp entries (control points) via ramp widget interaction. Default is false.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setStaticPositions(self, val='True', **kwargs):
        """
        When 'true', this flag disables the interactive modification of ramp entry positions. Default is false.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setUpperLimitControl(self, val='True', **kwargs):
        """
        Specify the name of a text control which is updated with the current upper display limit for the ramp. This option is only effective when adaptiveScaling is specified.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setVerticalLayout(self, val='True', **kwargs):
        """
        When 'true', this makes the control orient vertically rather than horizontally. The default is `false` or horizontal.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a control that displays the gradient attribute specified.
        The gradient attribute must be of the correct form and naming. It should be a
        multi attribute with each entry a compound composed of: Either a color compound
        or a float value (the control will automatically detect which and display a ramp
        or graph accordingly).A single float attribute for position.An enum for the
        interpolation types.Currently the routines to get the value of a ramp structure
        (with interpolation) are not available through MEL, which limits the use of this
        control by end users. The MEL command AEaddRampControl should be used to attach
        this control to an attribute from attribute editor templates.
        
        Flags:
        - adaptiveScaling : adaptiveScaling (bool)          [create,query,edit]
            Allow the ramp widget display to scale vertically to accommodate values greater
            than 1.0. True if adaptive scaling is enabled, false (the default) if not.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attribute : at                 (PyNode)        [create]
            Specifies the name of the gradient attribute to control.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfControls : nc          (int)           [query]
            Returns the number of controls in the ramp widget
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - refreshOnRelease : ror         (int)           [create,query,edit]
            Define how updates are dispatched during interactive editing of the ramp widget.
            True causes updates to only dispatch after releasing the mouse button after
            editing. False (the default) causes updates to dispatch interactively during
            editing (e.g. while moving ramp curve points). Note that the global update mode,
            if set to on releasecan disable the effect of this option.
        
        - selectedColorControl : scc     (unicode)       [create,edit]
            Specifies the name of a color control to edit the selected color.
        
        - selectedInterpControl : sic    (unicode)       [create,edit]
            Specifies the name of an enum control to edit the selected interpolation.
        
        - selectedPositionControl : spc  (unicode)       [create,edit]
            Specifies the name of a float slider to edit the selected position.
        
        - staticNumberOfControls : snc   (bool)          [create,query,edit]
            When 'true', this flag disables the creation/deletion of ramp entries (control
            points) via ramp widget interaction. Default is false.
        
        - staticPositions : sp           (bool)          [create,query,edit]
            When 'true', this flag disables the interactive modification of ramp entry
            positions. Default is false.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - upperLimitControl : ulc        (unicode)       [create,query,edit]
            Specify the name of a text control which is updated with the current upper
            display limit for the ramp. This option is only effective when adaptiveScaling
            is specified.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - verticalLayout : vl            (bool)          [create,query,edit]
            When 'true', this makes the control orient vertically rather than horizontally.
            The default is `false` or horizontal.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.gradientControl`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ClipEditor(PyUI):
    def clipDropCmd(self, val='True', **kwargs):
        """
        Command executed when clip node is dropped on the TraX editor                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def deleteCmd(self, val='True', **kwargs):
        """
        Command executed when backspacekey is pressed                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def deselectAll(self, val='True', **kwargs):
        """
        Deselect all clips and blends in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayActiveKeyTangents(self, val='True', **kwargs):
        """
        on | off | tgl Display active key tangents in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayActiveKeys(self, val='True', **kwargs):
        """
        on | off | tgl Display active keys in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayInfinities(self, val='True', **kwargs):
        """
        on | off | tgl Display infinities in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayKeys(self, val='True', **kwargs):
        """
        on | off | tgl Display keyframes in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayTangents(self, val='True', **kwargs):
        """
        on | off | tgl Display tangents in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def displayValues(self, val='True', **kwargs):
        """
        on | off | tgl Display active keys and tangents values in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def frameAll(self, val='True', **kwargs):
        """
        Frame view around all clips in the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getAutoFit(self, **kwargs):
        """
        on | off | tgl Auto fit-to-view.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getAutoFitTime(self, **kwargs):
        """
        on | off | tgl Auto fit-to-view along the time axis, as well.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getClipStyle(self, **kwargs):
        """
        Set/return the clip track style in the specified editor. Default is 2. Valid values are 1-3.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getFrameRange(self, **kwargs):
        """
        The editor's current frame range.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getHighlightedBlend(self, **kwargs):
        """
        Returns the highlighted blend, listed as scheduler and index                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getHighlightedClip(self, **kwargs):
        """
        Returns the highlighted clip, listed as scheduler and index                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getInitialized(self, **kwargs):
        """
        Returns whether the clip editor is fully initialized, and has a port to draw through. If not, the -frameRange and -frameAll flags will fail.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getManageSequencer(self, **kwargs):
        """
        Sets/returns whether the clip editor should manage sequencer nodes.  If so, animation clips and characters are not represented.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getMenuContext(self, **kwargs):
        """
        Returns a string array denoting the type of data object the cursor is over.  Returned values are: timeSlider nothing track, track index, character node name, group name clip, clip node name                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getSelectBlend(self, **kwargs):
        """
        Select the blends specified by the scheduler name and the indicies of the two clips used in the blend. When queried, a string containing the scheduler name and the two clip indicies for all of the selected blends is returned.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getSelectClip(self, **kwargs):
        """
        Selects the clip specified by the scheduler name and the clip index. When queried, a string containing the scheduler and clip index of all of the selected clips is returned.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getSnapTime(self, **kwargs):
        """
        none | integer | keyframe Keyframe move snap in time.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getSnapValue(self, **kwargs):
        """
        none | integer | keyframe Keyframe move snap in values.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def listAllCharacters(self, val='True', **kwargs):
        """
        List all characters in the editor and outliner.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def listCurrentCharacters(self, val='True', **kwargs):
        """
        List only the characters in the editor and outliner.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def lookAt(self, val='True', **kwargs):
        """
        all | selected | currentTime FitView helpers.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setAutoFit(self, val='True', **kwargs):
        """
        on | off | tgl Auto fit-to-view.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setAutoFitTime(self, val='True', **kwargs):
        """
        on | off | tgl Auto fit-to-view along the time axis, as well.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setClipStyle(self, val='True', **kwargs):
        """
        Set/return the clip track style in the specified editor. Default is 2. Valid values are 1-3.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setFrameRange(self, val='True', **kwargs):
        """
        The editor's current frame range.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setManageSequencer(self, val='True', **kwargs):
        """
        Sets/returns whether the clip editor should manage sequencer nodes.  If so, animation clips and characters are not represented.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setSelectBlend(self, val='True', **kwargs):
        """
        Select the blends specified by the scheduler name and the indicies of the two clips used in the blend. When queried, a string containing the scheduler name and the two clip indicies for all of the selected blends is returned.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setSelectClip(self, val='True', **kwargs):
        """
        Selects the clip specified by the scheduler name and the clip index. When queried, a string containing the scheduler and clip index of all of the selected clips is returned.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setSnapTime(self, val='True', **kwargs):
        """
        none | integer | keyframe Keyframe move snap in time.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def setSnapValue(self, val='True', **kwargs):
        """
        none | integer | keyframe Keyframe move snap in values.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a clip editor with the given name.
        
        Flags:
        - allTrackHeights : th           (int)           []
            OBSOLETE flag. Use clipStyle instead.
        
        - autoFit : af                   (unicode)       [query,edit]
            on | off | tgl Auto fit-to-view.
        
        - autoFitTime : aft              (unicode)       [query,edit]
            on | off | tgl Auto fit-to-view along the time axis, as well.
        
        - characterOutline : co          (unicode)       []
        
        - clipDropCmd : cd               (unicode)       [edit]
            Command executed when clip node is dropped on the TraX editor
        
        - clipStyle : cs                 (int)           [query,edit]
            Set/return the clip track style in the specified editor. Default is 2. Valid
            values are 1-3.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteCmd : dc                 (unicode)       [edit]
            Command executed when backspacekey is pressed
        
        - deselectAll : da               (bool)          [edit]
            Deselect all clips and blends in the editor.
        
        - displayActiveKeyTangents : dat (unicode)       [edit]
            on | off | tgl Display active key tangents in the editor.
        
        - displayActiveKeys : dak        (unicode)       [edit]
            on | off | tgl Display active keys in the editor.
        
        - displayInfinities : di         (unicode)       [edit]
            on | off | tgl Display infinities in the editor.
        
        - displayKeys : dk               (unicode)       [edit]
            on | off | tgl Display keyframes in the editor.
        
        - displayTangents : dtn          (unicode)       [edit]
            on | off | tgl Display tangents in the editor.
        
        - displayValues : dv             (unicode)       [edit]
            on | off | tgl Display active keys and tangents values in the editor.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - frameAll : fa                  (bool)          [edit]
            Frame view around all clips in the editor.
        
        - frameRange : fr                (float, float)  [query,edit]
            The editor's current frame range.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - highlightedBlend : hb          (unicode, unicode) [query]
            Returns the highlighted blend, listed as scheduler and index
        
        - highlightedClip : hc           (unicode, unicode) [query]
            Returns the highlighted clip, listed as scheduler and index
        
        - initialized : it               (bool)          [query]
            Returns whether the clip editor is fully initialized, and has a port to draw
            through. If not, the -frameRange and -frameAll flags will fail.
        
        - listAllCharacters : lac        (bool)          [edit]
            List all characters in the editor and outliner.
        
        - listCurrentCharacters : lc     (bool)          [edit]
            List only the characters in the editor and outliner.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - lookAt : la                    (unicode)       [edit]
            all | selected | currentTime FitView helpers.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - manageSequencer : ms           (bool)          [create,query,edit]
            Sets/returns whether the clip editor should manage sequencer nodes.  If so,
            animation clips and characters are not represented.
        
        - menuContext : mc               (unicode)       [query]
            Returns a string array denoting the type of data object the cursor is over.
            Returned values are: timeSlider nothing track, track index, character node name,
            group name clip, clip node name
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - selectBlend : sb               (unicode, unicode, unicode) [query,edit]
            Select the blends specified by the scheduler name and the indicies of the two
            clips used in the blend. When queried, a string containing the scheduler name
            and the two clip indicies for all of the selected blends is returned.
        
        - selectClip : sc                (unicode, unicode) [query,edit]
            Selects the clip specified by the scheduler name and the clip index. When
            queried, a string containing the scheduler and clip index of all of the selected
            clips is returned.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - snapTime : st                  (unicode)       [query,edit]
            none | integer | keyframe Keyframe move snap in time.
        
        - snapValue : sv                 (unicode)       [query,edit]
            none | integer | keyframe Keyframe move snap in values.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.clipEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Separator(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Specify the orientation of the separator.  True for horizontal and false for vertical.  Only valid when style equals single.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getStyle(self, **kwargs):
        """
        Specify the style of the separator.  Valid values are none, single, in, outand shelf.  Note: the values double, singleDashand doubleDashand no longer supported.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        Specify the style of the separator.  Valid values are none, single, in, outand shelf.  Note: the values double, singleDashand doubleDashand no longer supported.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a separator widget in a variety of drawing styles.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query]
            Specify the orientation of the separator.  True for horizontal and false for
            vertical.  Only valid when style equals single.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            Specify the style of the separator.  Valid values are none, single, in, outand
            shelf.  Note: the values double, singleDashand doubleDashand no longer
            supported.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.separator`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatField(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the field changes.  This command is not invoked when the value changes via the -v/valueflag.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when dragging in the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def enterCommand(self, val='True', **kwargs):
        """
        Command executed when the keypad 'Enter' key is pressed.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.  If false then the field can not be changed interactively.  However, you can change the field text with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getPrecision(self, **kwargs):
        """
        Number of digits to the right of the decimal place.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getShowTrailingZeros(self, **kwargs):
        """
        Show trailing zeros or not                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getStep(self, **kwargs):
        """
        Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def receiveFocusCommand(self, val='True', **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.  If false then the field can not be changed interactively.  However, you can change the field text with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setPrecision(self, val='True', **kwargs):
        """
        Number of digits to the right of the decimal place.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setShowTrailingZeros(self, val='True', **kwargs):
        """
        Show trailing zeros or not                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the field.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a field control that accepts only float values and is bound by a minimum
        and maximum value.  An invisible slider is attached to the field and accessed by
        holding down the Ctrl modifier key while pressing one of the mouse buttons.
        Dragging the invisible slider to the right with the middle mouse button
        increases the field value by the amount specified with the -s/stepflag, while
        dragging to the left decreases the value by the same amount.  The left and right
        mouse buttons apply a factor of 0.1 and 10 to the step value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the field changes.  This command is not invoked when the
            value changes via the -v/valueflag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when dragging in the field.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it.  If false then the field can not be
            changed interactively.  However, you can change the field text with the
            -v/valueflag regardless of the state of the -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enterCommand : ec              (script)        [create,edit]
            Command executed when the keypad 'Enter' key is pressed.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Upper limit of the field.
        
        - minValue : min                 (float)         [create,query,edit]
            Lower limit of the field.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,query,edit]
            Number of digits to the right of the decimal place.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (script)        [create,edit]
            Command executed when the field receives focus.
        
        - showTrailingZeros : tze        (bool)          [create,query,edit]
            Show trailing zeros or not
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Increment for the invisible slider.   The field value will change by this amount
            when the invisible slider is dragged.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float)         [create,query,edit]
            Value of the field.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatField`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class NameField(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        This command is executed when the field text is changed by the user.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getDrawInactiveFrame(self, **kwargs):
        """
        Sets whether the name field draws itself with a frame when it is inactive. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getNameChangeCommand(self, **kwargs):
        """
        This command is executed when the name of the node changes. NOTE: this will be executed when the node name changes, whether or not the name-change originated with the user typing into the field. If you want to attach a command to be executed when the user types into the field, use the -cc/changeCommand flag.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getObject(self, **kwargs):
        """
        Attaches the field to the named dage object, so that the field will always display the object's name.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getReceiveFocusCommand(self, **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        This command is executed when the field text is changed by the user.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setDrawInactiveFrame(self, val='True', **kwargs):
        """
        Sets whether the name field draws itself with a frame when it is inactive. By default, this option is false.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setNameChangeCommand(self, val='True', **kwargs):
        """
        This command is executed when the name of the node changes. NOTE: this will be executed when the node name changes, whether or not the name-change originated with the user typing into the field. If you want to attach a command to be executed when the user types into the field, use the -cc/changeCommand flag.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setObject(self, val='True', **kwargs):
        """
        Attaches the field to the named dage object, so that the field will always display the object's name.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setReceiveFocusCommand(self, val='True', **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates an editable field that can be linked to the name of a Maya
        object. The field will always show the name of the object.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,query,edit]
            This command is executed when the field text is changed by the user.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - drawInactiveFrame : dif        (bool)          [create,query,edit]
            Sets whether the name field draws itself with a frame when it is inactive. By
            default, this option is false.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - nameChangeCommand : ncc        (script)        [create,query,edit]
            This command is executed when the name of the node changes. NOTE: this will be
            executed when the node name changes, whether or not the name-change originated
            with the user typing into the field. If you want to attach a command to be
            executed when the user types into the field, use the -cc/changeCommand flag.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - object : o                     (unicode)       [create,query,edit]
            Attaches the field to the named dage object, so that the field will always
            display the object's name.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (script)        [create,query,edit]
            Command executed when the field receives focus.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.nameField`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class OutlinerEditor(PyUI):
    def allowMultiSelection(self, val='True', **kwargs):
        """
        If true then multiple selection will be allowed in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def alwaysToggleSelect(self, val='True', **kwargs):
        """
        If true, then clicking on an item in the outliner will select or deselect it without affecting the selection of other items (unless allowMultiSelection is false). If false, clicking on an item in the outliner will replace the current selection with the selected item.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def directSelect(self, val='True', **kwargs):
        """
        If true then clicking on an item in the outliner will add or remove just that item from the selection connection. If false then clicking on an item in the outliner causes the selection connection to be reloaded with the currently selected items in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def expandAllItems(self, val='True', **kwargs):
        """
        Expand or collapse all items in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def expandAllSelectedItems(self, val='True', **kwargs):
        """
        Expand or collapse all selected items in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def expandAttribute(self, val='True', **kwargs):
        """
        Force the outliner to fill the selection list with only attributes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAnimLayerFilterOptions(self, **kwargs):
        """
        Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be allAffecting(no filter), active(only the active layers on the object will be displayed) and animLayerEditor(the settings will be taken from the animation layer editor).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAttrAlphaOrder(self, **kwargs):
        """
        Specify how attributes are to be sorted. Current recognised values are defaultfor no sorting and ascendto sort attributes from 'a' to ''z' and descendto sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAttrFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be placed on this editor. This filters the attributes displayed in the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAutoExpand(self, **kwargs):
        """
        This flag specifies whether or not objects that are loaded in should have their attributes automatically expanded.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAutoExpandLayers(self, **kwargs):
        """
        If true then when a node with animation layer is displayed, all the animation layers will show up in expanded form.                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getAutoSelectNewObjects(self, **kwargs):
        """
        This flag specifies whether or not new objects added to the outliner should be automatically selected.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getContainersIgnoreFilters(self, **kwargs):
        """
        This flag specifices whether or not filters should be ignored when displaying container contents.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getDisplayMode(self, **kwargs):
        """
        Affects how the outliner displays when a filter is applied. List mode is a non-indented flat list. DAG mode indents to represent the hierarchical structure of the model.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getDoNotSelectNewObjects(self, **kwargs):
        """
        If true this flag specifies that new objects added to the outliner will not be selected, even if they are active.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getDropIsParent(self, **kwargs):
        """
        This flag specifies the mode for drag and drop. If the flag is true, dropping items will do a reparent. If it is false, dropping will reorder items. By default, the flag is true (parent).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getEditAttrName(self, **kwargs):
        """
        This flag specifies whether or not attribute names can be edited. By default double-clicking on an attribute will open the expression editor for that attribute.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getExpandConnections(self, **kwargs):
        """
        This flag specifies whether or not attributes should be expanded to show their input connections. Note: currently the expansion will only show animCurves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getExpandObjects(self, **kwargs):
        """
        This flag specifies whether or not objects that are loaded in should be automatically expanded.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getFeedbackItemName(self, **kwargs):
        """
        Returns the outliner item name at the current mouse position, if any.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getFeedbackRowNumber(self, **kwargs):
        """
        Returns the outliner row number at the current mouse position, if any.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getGetCurrentSetOfItem(self, **kwargs):
        """
        Returns the current set of item at the given row. As an item can belong to number of sets, current set is the set to which the item belongs to currently.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getHighlightActive(self, **kwargs):
        """
        This flag specifies whether or not the outliner should highlight objects that are active. Note: if the outliner is driving the contents of another editor, setting highlightActive to true may produce unexpected behavior.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getHighlightSecondary(self, **kwargs):
        """
        This flag specifies whether or not the outliner should highlight objects that are contained in the highlightConnection.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIgnoreDagHierarchy(self, **kwargs):
        """
        This flag specifies whether or not DAG objects are displayed in their DAG hierarchy. Warning: using this flag without some other form of sensible filtering will lead to a very confusing outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIgnoreHiddenAttribute(self, **kwargs):
        """
        Sets whether or not the outliner ignores the 'hidden in outliner' flag on nodes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIgnoreOutlinerColor(self, **kwargs):
        """
        Sets whether or not the outliner ignores the 'use outliner color' flag on nodes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIsChildSelected(self, **kwargs):
        """
        This flag allows you to query if one or more of the children of the specified item is selected in the outliner. The item should be specified using a unique DAG path. Note that if the specified item appears multiple times in the outliner, the result will be true if one or more children of any occurrence of the specified item in the outliner is/are selected.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIsSet(self, **kwargs):
        """
        Returns true if the item present at the given row is a set.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getIsSetMember(self, **kwargs):
        """
        Returns true if the item present at the given row is a set member.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getLongNames(self, **kwargs):
        """
        Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getMapMotionTrails(self, **kwargs):
        """
        Sets whether or not we replace the motion trail in the outliner with the object it is trailing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getMasterOutliner(self, **kwargs):
        """
        This flag is the name of an outliner that this outliner will share the objects and state from. When an outliner is shared, all of its state information comes from, and is applied to, the master outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getNiceNames(self, **kwargs):
        """
        Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getObject(self, **kwargs):
        """
        This flags is used together with the parentObjectflag to get the name of the parent object for the specified object.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getOrganizeByClip(self, **kwargs):
        """
        If true then when a node with Time Editor clips is displayed, attributes will be displayed according to the clip(s) it belongs to. eg:  Clip1 Attr1 Attr2 Clip2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Clip1 Clip2 Attr2 Clip1                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getOrganizeByLayer(self, **kwargs):
        """
        If true then when a node with animation layer is displayed, attributes will be displayed according to the layer(s) it belongs to. eg:  Layer1 Attr1 Attr2 Layer2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Layer1 Layer2 Attr2 Layer1                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getParentObject(self, **kwargs):
        """
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getPinPlug(self, **kwargs):
        """
        Pins the named plug, so it always appears in the outliner, irrespective of the incoming selection connection. In query mode, returns a list of the pinned plugs.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getRenderFilterActive(self, **kwargs):
        """
        This is a query only flag which returns true if the render setup filter is Active, i.e one of the four render filters (Inside Selected, Outside Selected, Inside All Layers, Outside All Layers) is applied on the outliner currently, false otherwise.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getRenderFilterIndex(self, **kwargs):
        """
        Sets the Render Setup Filter to the index passed. This only works if the filter is visible in outliner and its selection is not locked. Valid indices are: 0 - Scene2 - Inside Selected3 - Outside Selected4 - Inside All Layers5 - Outside All LayersDefault: Scene 0 In query mode returns current index of the filter.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getRenderFilterVisible(self, **kwargs):
        """
        Show/Hide the Render Setup Filter in outliner. In query mode returns whether the Render Setup Filter is visible or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getSelectCommand(self, **kwargs):
        """
        A command to be executed when an item is selected.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getSetFilter(self, **kwargs):
        """
        Specifies the name of a filter which is used to filter which (if any) sets to display.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getSetsIgnoreFilters(self, **kwargs):
        """
        This flag specifies whether or not the filter should be ignored for expanding sets to show set members (default is true).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAnimCurvesOnly(self, **kwargs):
        """
        This flag modifies the showConnected flag.  If showConnected is set to true then this flag will cause display of only those attributes that are connected to an animCurve. If showConnected is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAnimLayerWeight(self, **kwargs):
        """
        If true then when a node with animation layer is displayed, the weight of the layer will be displayed if it is keyed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAssets(self, **kwargs):
        """
        This flags specifies whether assets should be shown in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAssignedMaterials(self, **kwargs):
        """
        Specifies whether to show assigned materials under shapes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAttrValues(self, **kwargs):
        """
        This flag specifies whether attribute values or attribute names should be displayed. Note: currently only string attributes can have their values displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowAttributes(self, **kwargs):
        """
        Specifies whether to show attributes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowCompounds(self, **kwargs):
        """
        This flag specifies whether or not compound attributes should be displayed, or just the leaf attributes. Note: if showConnected is true, and the compound attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowConnected(self, **kwargs):
        """
        This flag modifies the showAttributes flag.  If showAttributes is set to true then this flag will cause display of only those attributes that are connected in the dependency graph. If showAttributes is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowContainedOnly(self, **kwargs):
        """
        This flags specifies whether nodes belonging to containers should be show under the container node only. Otherwise, it will show up under the world as well.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowContainerContents(self, **kwargs):
        """
        This flags specifies whether the contents of the container should be shown under the container node in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowDagOnly(self, **kwargs):
        """
        This flag specifies whether all dependency graph objects will be displayed, or just DAG objects.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowLeafs(self, **kwargs):
        """
        This flag specifies whether or not leaf attributes should be displayed, or just the compound attributes. Note: if showConnected is true, and the leaf attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowMuteInfo(self, **kwargs):
        """
        This flag specifies whether mute information will be displayed                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowNamespace(self, **kwargs):
        """
        This flag specifies whether all objects will have their namespace displayed, if namespace different than root.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowNumericAttrsOnly(self, **kwargs):
        """
        This flag specifies whether or not all attributes should be displayed, or just numeric attributes. Note: if showConnected is true, and the attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowParentContainers(self, **kwargs):
        """
        This flags specifies whether nodes belonging to containers/assets should show their containers/assets as well in its outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowPinIcons(self, **kwargs):
        """
        Sets whether pin icons are shown for unpinned plugs.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowPublishedAsConnected(self, **kwargs):
        """
        This flags enables attributes that are published to be displayed in italics. Otherwise, only attributes connected as a destination are shown in italics.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowReferenceMembers(self, **kwargs):
        """
        Specifies whether to show reference node members under the reference node in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowReferenceNodes(self, **kwargs):
        """
        Specifies whether to show reference nodes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowSetMembers(self, **kwargs):
        """
        If true then when a set is expanded, the set members will be displayed. If false, then only other sets will be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowShapes(self, **kwargs):
        """
        Specifies whether to show shapes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowTextureNodesOnly(self, **kwargs):
        """
        This flag modifies the showConnected flag. If showConnected is set to true then this flag will cause display of only those attributes that are connected to a texture node. If showConnected is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowTimeEditor(self, **kwargs):
        """
        If true, all nodes related to the Time Editor will be shown as a hierarchy.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowUVAttrsOnly(self, **kwargs):
        """
        This flag specifies whether or not all attributes should be displayed, or just uv attributes. Note: currently the only attribute which will be displayed is Shape.uvSet.uvSetName.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowUnitlessCurves(self, **kwargs):
        """
        This flag (in combination with -expandConnections) specifies whether or not connection expansion should show unitless animCurves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getShowUpstreamCurves(self, **kwargs):
        """
        Specifies exactly which attributes are displayed when showAttributes and expandConnections are both true. If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getSortOrder(self, **kwargs):
        """
        Specify how objects are to be sorted.  Current recognised values are nonefor no sorting and dagNameto sort DAG objects by name. Notes: a) non-DAG objects are always sorted by nodeType and name. b) when sortOrder is set to dagName, objects cannot be reordered using drag-and-drop, they can however be reparented.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def getTransmitFilters(self, **kwargs):
        """
        This flag specifies how the selectionConnection is populated when attribute filters are enabled.  If this flag is set to true, then all the attributes that pass the filter will be placed on the selectionConnection.  By default this flag is false.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def refresh(self, val='True', **kwargs):
        """
        Causes the outliner to refresh itself.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def removeFromCurrentSet(self, val='True', **kwargs):
        """
        Removes selected members of a set from their current set. Current set is the set to which item at the given row belongs to. If no selected items, the item at the given row is removed from its current set.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def renameItem(self, val='True', **kwargs):
        """
        Renames the item at the given row index in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def renameSelectedItem(self, val='True', **kwargs):
        """
        Rename the first selected item in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def selectionOrder(self, val='True', **kwargs):
        """
        Specify how objects are sorted in selection list. Current recognised values are chronologicalfor sorting in selection order and displayto sort objects in the same order that the outliner does.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAnimLayerFilterOptions(self, val='True', **kwargs):
        """
        Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be allAffecting(no filter), active(only the active layers on the object will be displayed) and animLayerEditor(the settings will be taken from the animation layer editor).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAttrAlphaOrder(self, val='True', **kwargs):
        """
        Specify how attributes are to be sorted. Current recognised values are defaultfor no sorting and ascendto sort attributes from 'a' to ''z' and descendto sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAttrFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be placed on this editor. This filters the attributes displayed in the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAutoExpand(self, val='True', **kwargs):
        """
        This flag specifies whether or not objects that are loaded in should have their attributes automatically expanded.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAutoExpandLayers(self, val='True', **kwargs):
        """
        If true then when a node with animation layer is displayed, all the animation layers will show up in expanded form.                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setAutoSelectNewObjects(self, val='True', **kwargs):
        """
        This flag specifies whether or not new objects added to the outliner should be automatically selected.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setContainersIgnoreFilters(self, val='True', **kwargs):
        """
        This flag specifices whether or not filters should be ignored when displaying container contents.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setDisplayMode(self, val='True', **kwargs):
        """
        Affects how the outliner displays when a filter is applied. List mode is a non-indented flat list. DAG mode indents to represent the hierarchical structure of the model.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setDoNotSelectNewObjects(self, val='True', **kwargs):
        """
        If true this flag specifies that new objects added to the outliner will not be selected, even if they are active.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setDropIsParent(self, val='True', **kwargs):
        """
        This flag specifies the mode for drag and drop. If the flag is true, dropping items will do a reparent. If it is false, dropping will reorder items. By default, the flag is true (parent).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setEditAttrName(self, val='True', **kwargs):
        """
        This flag specifies whether or not attribute names can be edited. By default double-clicking on an attribute will open the expression editor for that attribute.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setExpandConnections(self, val='True', **kwargs):
        """
        This flag specifies whether or not attributes should be expanded to show their input connections. Note: currently the expansion will only show animCurves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setExpandObjects(self, val='True', **kwargs):
        """
        This flag specifies whether or not objects that are loaded in should be automatically expanded.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setHighlightActive(self, val='True', **kwargs):
        """
        This flag specifies whether or not the outliner should highlight objects that are active. Note: if the outliner is driving the contents of another editor, setting highlightActive to true may produce unexpected behavior.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setHighlightSecondary(self, val='True', **kwargs):
        """
        This flag specifies whether or not the outliner should highlight objects that are contained in the highlightConnection.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setIgnoreDagHierarchy(self, val='True', **kwargs):
        """
        This flag specifies whether or not DAG objects are displayed in their DAG hierarchy. Warning: using this flag without some other form of sensible filtering will lead to a very confusing outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setIgnoreHiddenAttribute(self, val='True', **kwargs):
        """
        Sets whether or not the outliner ignores the 'hidden in outliner' flag on nodes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setIgnoreOutlinerColor(self, val='True', **kwargs):
        """
        Sets whether or not the outliner ignores the 'use outliner color' flag on nodes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setLongNames(self, val='True', **kwargs):
        """
        Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setMapMotionTrails(self, val='True', **kwargs):
        """
        Sets whether or not we replace the motion trail in the outliner with the object it is trailing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setMasterOutliner(self, val='True', **kwargs):
        """
        This flag is the name of an outliner that this outliner will share the objects and state from. When an outliner is shared, all of its state information comes from, and is applied to, the master outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setNiceNames(self, val='True', **kwargs):
        """
        Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setOrganizeByClip(self, val='True', **kwargs):
        """
        If true then when a node with Time Editor clips is displayed, attributes will be displayed according to the clip(s) it belongs to. eg:  Clip1 Attr1 Attr2 Clip2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Clip1 Clip2 Attr2 Clip1                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setOrganizeByLayer(self, val='True', **kwargs):
        """
        If true then when a node with animation layer is displayed, attributes will be displayed according to the layer(s) it belongs to. eg:  Layer1 Attr1 Attr2 Layer2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Layer1 Layer2 Attr2 Layer1                   
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setPinPlug(self, val='True', **kwargs):
        """
        Pins the named plug, so it always appears in the outliner, irrespective of the incoming selection connection. In query mode, returns a list of the pinned plugs.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setRenderFilterIndex(self, val='True', **kwargs):
        """
        Sets the Render Setup Filter to the index passed. This only works if the filter is visible in outliner and its selection is not locked. Valid indices are: 0 - Scene2 - Inside Selected3 - Outside Selected4 - Inside All Layers5 - Outside All LayersDefault: Scene 0 In query mode returns current index of the filter.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setRenderFilterVisible(self, val='True', **kwargs):
        """
        Show/Hide the Render Setup Filter in outliner. In query mode returns whether the Render Setup Filter is visible or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setSelectCommand(self, val='True', **kwargs):
        """
        A command to be executed when an item is selected.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setSetFilter(self, val='True', **kwargs):
        """
        Specifies the name of a filter which is used to filter which (if any) sets to display.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setSetsIgnoreFilters(self, val='True', **kwargs):
        """
        This flag specifies whether or not the filter should be ignored for expanding sets to show set members (default is true).                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAnimCurvesOnly(self, val='True', **kwargs):
        """
        This flag modifies the showConnected flag.  If showConnected is set to true then this flag will cause display of only those attributes that are connected to an animCurve. If showConnected is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAnimLayerWeight(self, val='True', **kwargs):
        """
        If true then when a node with animation layer is displayed, the weight of the layer will be displayed if it is keyed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAssets(self, val='True', **kwargs):
        """
        This flags specifies whether assets should be shown in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAssignedMaterials(self, val='True', **kwargs):
        """
        Specifies whether to show assigned materials under shapes.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAttrValues(self, val='True', **kwargs):
        """
        This flag specifies whether attribute values or attribute names should be displayed. Note: currently only string attributes can have their values displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowAttributes(self, val='True', **kwargs):
        """
        Specifies whether to show attributes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowCompounds(self, val='True', **kwargs):
        """
        This flag specifies whether or not compound attributes should be displayed, or just the leaf attributes. Note: if showConnected is true, and the compound attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowConnected(self, val='True', **kwargs):
        """
        This flag modifies the showAttributes flag.  If showAttributes is set to true then this flag will cause display of only those attributes that are connected in the dependency graph. If showAttributes is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowContainedOnly(self, val='True', **kwargs):
        """
        This flags specifies whether nodes belonging to containers should be show under the container node only. Otherwise, it will show up under the world as well.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowContainerContents(self, val='True', **kwargs):
        """
        This flags specifies whether the contents of the container should be shown under the container node in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowDagOnly(self, val='True', **kwargs):
        """
        This flag specifies whether all dependency graph objects will be displayed, or just DAG objects.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowLeafs(self, val='True', **kwargs):
        """
        This flag specifies whether or not leaf attributes should be displayed, or just the compound attributes. Note: if showConnected is true, and the leaf attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowMuteInfo(self, val='True', **kwargs):
        """
        This flag specifies whether mute information will be displayed                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowNamespace(self, val='True', **kwargs):
        """
        This flag specifies whether all objects will have their namespace displayed, if namespace different than root.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowNumericAttrsOnly(self, val='True', **kwargs):
        """
        This flag specifies whether or not all attributes should be displayed, or just numeric attributes. Note: if showConnected is true, and the attribute is connected, it will still be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowParentContainers(self, val='True', **kwargs):
        """
        This flags specifies whether nodes belonging to containers/assets should show their containers/assets as well in its outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowPinIcons(self, val='True', **kwargs):
        """
        Sets whether pin icons are shown for unpinned plugs.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowPublishedAsConnected(self, val='True', **kwargs):
        """
        This flags enables attributes that are published to be displayed in italics. Otherwise, only attributes connected as a destination are shown in italics.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowReferenceMembers(self, val='True', **kwargs):
        """
        Specifies whether to show reference node members under the reference node in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowReferenceNodes(self, val='True', **kwargs):
        """
        Specifies whether to show reference nodes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowSetMembers(self, val='True', **kwargs):
        """
        If true then when a set is expanded, the set members will be displayed. If false, then only other sets will be displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowShapes(self, val='True', **kwargs):
        """
        Specifies whether to show shapes or not.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowTextureNodesOnly(self, val='True', **kwargs):
        """
        This flag modifies the showConnected flag. If showConnected is set to true then this flag will cause display of only those attributes that are connected to a texture node. If showConnected is set to false then this flag does nothing.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowTimeEditor(self, val='True', **kwargs):
        """
        If true, all nodes related to the Time Editor will be shown as a hierarchy.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowUVAttrsOnly(self, val='True', **kwargs):
        """
        This flag specifies whether or not all attributes should be displayed, or just uv attributes. Note: currently the only attribute which will be displayed is Shape.uvSet.uvSetName.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowUnitlessCurves(self, val='True', **kwargs):
        """
        This flag (in combination with -expandConnections) specifies whether or not connection expansion should show unitless animCurves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setShowUpstreamCurves(self, val='True', **kwargs):
        """
        Specifies exactly which attributes are displayed when showAttributes and expandConnections are both true. If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setSortOrder(self, val='True', **kwargs):
        """
        Specify how objects are to be sorted.  Current recognised values are nonefor no sorting and dagNameto sort DAG objects by name. Notes: a) non-DAG objects are always sorted by nodeType and name. b) when sortOrder is set to dagName, objects cannot be reordered using drag-and-drop, they can however be reparented.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def setTransmitFilters(self, val='True', **kwargs):
        """
        This flag specifies how the selectionConnection is populated when attribute filters are enabled.  If this flag is set to true, then all the attributes that pass the filter will be placed on the selectionConnection.  By default this flag is false.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def showSelected(self, val='True', **kwargs):
        """
        If true then the selected items are expanded in the outliner.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def unpinPlug(self, val='True', **kwargs):
        """
        Unpins the named plug.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates an outliner editor which can be used to display a list of
        objects.WARNING: some flag combinations may not behave as you expect.  The
        command is really intended for internal use for creating the outliner used by
        the various editors.
        
        Flags:
        - allowMultiSelection : ams      (bool)          [create,edit]
            If true then multiple selection will be allowed in the outliner.
        
        - alwaysToggleSelect : ats       (bool)          [create,edit]
            If true, then clicking on an item in the outliner will select or deselect it
            without affecting the selection of other items (unless allowMultiSelection is
            false). If false, clicking on an item in the outliner will replace the current
            selection with the selected item.
        
        - animLayerFilterOptions : alf   (unicode)       [create,query,edit]
            Specifies whether a filter is to be applied when displaying animation layers. If
            so, the options can be allAffecting(no filter), active(only the active layers on
            the object will be displayed) and animLayerEditor(the settings will be taken
            from the animation layer editor).
        
        - attrAlphaOrder : aao           (unicode)       [create,query,edit]
            Specify how attributes are to be sorted. Current recognised values are
            defaultfor no sorting and ascendto sort attributes from 'a' to ''z' and
            descendto sort from 'z' to 'a'. Notes: a) this only applies to top level
            attributes.
        
        - attrFilter : af                (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be placed on this editor. This
            filters the attributes displayed in the editor.
        
        - autoExpand : xpd               (bool)          [create,query,edit]
            This flag specifies whether or not objects that are loaded in should have their
            attributes automatically expanded.
        
        - autoExpandLayers : ael         (bool)          [create,query,edit]
            If true then when a node with animation layer is displayed, all the animation
            layers will show up in expanded form.
        
        - autoSelectNewObjects : autoSelectNewObjects (bool)          [create,query,edit]
            This flag specifies whether or not new objects added to the outliner should be
            automatically selected.
        
        - containersIgnoreFilters : cif  (bool)          [create,query,edit]
            This flag specifices whether or not filters should be ignored when displaying
            container contents.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - directSelect : ds              (bool)          [create,edit]
            If true then clicking on an item in the outliner will add or remove just that
            item from the selection connection. If false then clicking on an item in the
            outliner causes the selection connection to be reloaded with the currently
            selected items in the outliner.
        
        - displayMode : dm               (unicode)       [create,query,edit]
            Affects how the outliner displays when a filter is applied. List mode is a non-
            indented flat list. DAG mode indents to represent the hierarchical structure of
            the model.
        
        - doNotSelectNewObjects : dns    (bool)          [create,query,edit]
            If true this flag specifies that new objects added to the outliner will not be
            selected, even if they are active.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - dropIsParent : dip             (bool)          [create,query,edit]
            This flag specifies the mode for drag and drop. If the flag is true, dropping
            items will do a reparent. If it is false, dropping will reorder items. By
            default, the flag is true (parent).
        
        - editAttrName : ean             (bool)          [create,query,edit]
            This flag specifies whether or not attribute names can be edited. By default
            double-clicking on an attribute will open the expression editor for that
            attribute.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - expandAllItems : eai           (bool)          [create,edit]
            Expand or collapse all items in the outliner.
        
        - expandAllSelectedItems : eas   (bool)          [create,edit]
            Expand or collapse all selected items in the outliner.
        
        - expandAttribute : att          (bool)          [edit]
            Force the outliner to fill the selection list with only attributes.
        
        - expandConnections : xc         (bool)          [create,query,edit]
            This flag specifies whether or not attributes should be expanded to show their
            input connections. Note: currently the expansion will only show animCurves.
        
        - expandObjects : eo             (bool)          [create,query,edit]
            This flag specifies whether or not objects that are loaded in should be
            automatically expanded.
        
        - feedbackItemName : fbn         (bool)          [query]
            Returns the outliner item name at the current mouse position, if any.
        
        - feedbackRowNumber : fbr        (bool)          [query]
            Returns the outliner row number at the current mouse position, if any.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - getCurrentSetOfItem : gcs      (int)           [query]
            Returns the current set of item at the given row. As an item can belong to
            number of sets, current set is the set to which the item belongs to currently.
        
        - highlightActive : ha           (bool)          [create,query,edit]
            This flag specifies whether or not the outliner should highlight objects that
            are active. Note: if the outliner is driving the contents of another editor,
            setting highlightActive to true may produce unexpected behavior.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - highlightSecondary : hs        (bool)          [create,query,edit]
            This flag specifies whether or not the outliner should highlight objects that
            are contained in the highlightConnection.
        
        - ignoreDagHierarchy : hir       (bool)          [create,query,edit]
            This flag specifies whether or not DAG objects are displayed in their DAG
            hierarchy. Warning: using this flag without some other form of sensible
            filtering will lead to a very confusing outliner.
        
        - ignoreHiddenAttribute : iha    (bool)          [create,query,edit]
            Sets whether or not the outliner ignores the 'hidden in outliner' flag on nodes.
        
        - ignoreOutlinerColor : ioc      (bool)          [create,query,edit]
            Sets whether or not the outliner ignores the 'use outliner color' flag on nodes.
        
        - isChildSelected : ics          (PyNode)        [query]
            This flag allows you to query if one or more of the children of the specified
            item is selected in the outliner. The item should be specified using a unique
            DAG path. Note that if the specified item appears multiple times in the
            outliner, the result will be true if one or more children of any occurrence of
            the specified item in the outliner is/are selected.
        
        - isSet : isSet                  (int)           [query]
            Returns true if the item present at the given row is a set.
        
        - isSetMember : ism              (int)           [query]
            Returns true if the item present at the given row is a set member.
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - longNames : ln                 (bool)          [query,edit]
            Controls whether long or short attribute names will be used in the interface.
            Note that this flag is ignored if the -niceNames flag is set.  Default is short
            names. Queried, returns a boolean.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - mapMotionTrails : mmt          (bool)          [create,query,edit]
            Sets whether or not we replace the motion trail in the outliner with the object
            it is trailing.
        
        - masterOutliner : mst           (unicode)       [create,query,edit]
            This flag is the name of an outliner that this outliner will share the objects
            and state from. When an outliner is shared, all of its state information comes
            from, and is applied to, the master outliner.
        
        - niceNames : nn                 (bool)          [query,edit]
            Controls whether the attribute names will be displayed in a more user-friendly,
            readable way.  When this is on, the longNames flag is ignored.  When this is
            off, attribute names will be displayed either long or short, according to the
            longNames flag. Default is on. Queried, returns a boolean.
        
        - object : obj                   (PyNode)        [query]
            This flags is used together with the parentObjectflag to get the name of the
            parent object for the specified object.
        
        - organizeByClip : obc           (bool)          [create,query,edit]
            If true then when a node with Time Editor clips is displayed, attributes will be
            displayed according to the clip(s) it belongs to. eg:  Clip1 Attr1 Attr2 Clip2
            Attr1  If it is false then the outliner will be organized primarily by
            attributes. eg:  Attr1 Clip1 Clip2 Attr2 Clip1
        
        - organizeByLayer : obl          (bool)          [create,query,edit]
            If true then when a node with animation layer is displayed, attributes will be
            displayed according to the layer(s) it belongs to. eg:  Layer1 Attr1 Attr2
            Layer2 Attr1  If it is false then the outliner will be organized primarily by
            attributes. eg:  Attr1 Layer1 Layer2 Attr2 Layer1
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - parentObject : po              (bool)          [query]
        
        - pinPlug : pin                  (PyNode)        [create,query,edit]
            Pins the named plug, so it always appears in the outliner, irrespective of the
            incoming selection connection. In query mode, returns a list of the pinned
            plugs.
        
        - refresh : rfs                  (bool)          [edit]
            Causes the outliner to refresh itself.
        
        - removeFromCurrentSet : rcs     (int)           [edit]
            Removes selected members of a set from their current set. Current set is the set
            to which item at the given row belongs to. If no selected items, the item at the
            given row is removed from its current set.
        
        - renameItem : rni               (int)           [edit]
            Renames the item at the given row index in the outliner.
        
        - renameSelectedItem : rsi       (bool)          [edit]
            Rename the first selected item in the outliner.
        
        - renderFilterActive : rfa       (bool)          [query]
            This is a query only flag which returns true if the render setup filter is
            Active, i.e one of the four render filters (Inside Selected, Outside Selected,
            Inside All Layers, Outside All Layers) is applied on the outliner currently,
            false otherwise.
        
        - renderFilterIndex : rfi        (int)           [create,query,edit]
            Sets the Render Setup Filter to the index passed. This only works if the filter
            is visible in outliner and its selection is not locked. Valid indices are: 0 -
            Scene2 - Inside Selected3 - Outside Selected4 - Inside All Layers5 - Outside All
            LayersDefault: Scene 0 In query mode returns current index of the filter.
        
        - renderFilterVisible : rfv      (bool)          [create,query,edit]
            Show/Hide the Render Setup Filter in outliner. In query mode returns whether the
            Render Setup Filter is visible or not.
        
        - selectCommand : sec            (script)        [create,query,edit]
            A command to be executed when an item is selected.
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - selectionOrder : sod           (unicode)       [edit]
            Specify how objects are sorted in selection list. Current recognised values are
            chronologicalfor sorting in selection order and displayto sort objects in the
            same order that the outliner does.
        
        - setFilter : sf                 (unicode)       [create,query,edit]
            Specifies the name of a filter which is used to filter which (if any) sets to
            display.
        
        - setsIgnoreFilters : sif        (bool)          [create,query,edit]
            This flag specifies whether or not the filter should be ignored for expanding
            sets to show set members (default is true).
        
        - showAnimCurvesOnly : aco       (bool)          [create,query,edit]
            This flag modifies the showConnected flag.  If showConnected is set to true then
            this flag will cause display of only those attributes that are connected to an
            animCurve. If showConnected is set to false then this flag does nothing.
        
        - showAnimLayerWeight : saw      (bool)          [create,query,edit]
            If true then when a node with animation layer is displayed, the weight of the
            layer will be displayed if it is keyed.
        
        - showAssets : a                 (bool)          [create,query,edit]
            This flags specifies whether assets should be shown in the outliner.
        
        - showAssignedMaterials : sam    (bool)          [create,query,edit]
            Specifies whether to show assigned materials under shapes.
        
        - showAttrValues : av            (bool)          [create,query,edit]
            This flag specifies whether attribute values or attribute names should be
            displayed. Note: currently only string attributes can have their values
            displayed.
        
        - showAttributes : atr           (bool)          [create,query,edit]
            Specifies whether to show attributes or not.
        
        - showCompounds : cmp            (bool)          [create,query,edit]
            This flag specifies whether or not compound attributes should be displayed, or
            just the leaf attributes. Note: if showConnected is true, and the compound
            attribute is connected, it will still be displayed.
        
        - showConnected : con            (bool)          [create,query,edit]
            This flag modifies the showAttributes flag.  If showAttributes is set to true
            then this flag will cause display of only those attributes that are connected in
            the dependency graph. If showAttributes is set to false then this flag does
            nothing.
        
        - showContainedOnly : sco        (bool)          [create,query,edit]
            This flags specifies whether nodes belonging to containers should be show under
            the container node only. Otherwise, it will show up under the world as well.
        
        - showContainerContents : scc    (bool)          [create,query,edit]
            This flags specifies whether the contents of the container should be shown under
            the container node in the outliner.
        
        - showDagOnly : dag              (bool)          [create,query,edit]
            This flag specifies whether all dependency graph objects will be displayed, or
            just DAG objects.
        
        - showLeafs : laf                (bool)          [create,query,edit]
            This flag specifies whether or not leaf attributes should be displayed, or just
            the compound attributes. Note: if showConnected is true, and the leaf attribute
            is connected, it will still be displayed.
        
        - showMuteInfo : smi             (bool)          [create,query,edit]
            This flag specifies whether mute information will be displayed
        
        - showNamespace : sn             (bool)          [create,query,edit]
            This flag specifies whether all objects will have their namespace displayed, if
            namespace different than root.
        
        - showNumericAttrsOnly : num     (bool)          [create,query,edit]
            This flag specifies whether or not all attributes should be displayed, or just
            numeric attributes. Note: if showConnected is true, and the attribute is
            connected, it will still be displayed.
        
        - showParentContainers : spa     (bool)          [create,query,edit]
            This flags specifies whether nodes belonging to containers/assets should show
            their containers/assets as well in its outliner.
        
        - showPinIcons : spi             (bool)          [create,query,edit]
            Sets whether pin icons are shown for unpinned plugs.
        
        - showPublishedAsConnected : spc (bool)          [create,query,edit]
            This flags enables attributes that are published to be displayed in italics.
            Otherwise, only attributes connected as a destination are shown in italics.
        
        - showReferenceMembers : rm      (bool)          [create,query,edit]
            Specifies whether to show reference node members under the reference node in the
            outliner.
        
        - showReferenceNodes : rn        (bool)          [create,query,edit]
            Specifies whether to show reference nodes or not.
        
        - showSelected : sc              (bool)          [create,edit]
            If true then the selected items are expanded in the outliner.
        
        - showSetMembers : ssm           (bool)          [create,query,edit]
            If true then when a set is expanded, the set members will be displayed. If
            false, then only other sets will be displayed.
        
        - showShapes : shp               (bool)          [create,query,edit]
            Specifies whether to show shapes or not.
        
        - showTextureNodesOnly : tno     (bool)          [create,query,edit]
            This flag modifies the showConnected flag. If showConnected is set to true then
            this flag will cause display of only those attributes that are connected to a
            texture node. If showConnected is set to false then this flag does nothing.
        
        - showTimeEditor : ste           (bool)          [create,query,edit]
            If true, all nodes related to the Time Editor will be shown as a hierarchy.
        
        - showUVAttrsOnly : uv           (bool)          [create,query,edit]
            This flag specifies whether or not all attributes should be displayed, or just
            uv attributes. Note: currently the only attribute which will be displayed is
            Shape.uvSet.uvSetName.
        
        - showUnitlessCurves : su        (bool)          [create,query,edit]
            This flag (in combination with -expandConnections) specifies whether or not
            connection expansion should show unitless animCurves.
        
        - showUpstreamCurves : suc       (bool)          [create,query,edit]
            Specifies exactly which attributes are displayed when showAttributes and
            expandConnections are both true. If true, the dependency graph is searched
            upstream for all curves that drive the selected plugs (showing multiple curves
            for example in a typical driven key setup, where first the driven key curve is
            encountered, followed by the actual animation curve that drives the source
            object). If false, only the first curves encountered will be shown. Note that,
            even if false, multiple curves can be shown if e.g. a blendWeighted node is
            being used to combine multiple curves.
        
        - sortCommand : soc              (callable)      []
        
        - sortOrder : so                 (unicode)       [create,query,edit]
            Specify how objects are to be sorted.  Current recognised values are nonefor no
            sorting and dagNameto sort DAG objects by name. Notes: a) non-DAG objects are
            always sorted by nodeType and name. b) when sortOrder is set to dagName, objects
            cannot be reordered using drag-and-drop, they can however be reparented.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - transmitFilters : tf           (bool)          [create,query,edit]
            This flag specifies how the selectionConnection is populated when attribute
            filters are enabled.  If this flag is set to true, then all the attributes that
            pass the filter will be placed on the selectionConnection.  By default this flag
            is false.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - unpinPlug : unp                (PyNode)        [create,edit]
            Unpins the named plug.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.outlinerEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RadioButton(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the radio button's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the radio button from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getAlign(self, **kwargs):
        """
        This flag is obsolete and should no longer be used. The radio button label will always be left-aligned.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getData(self, **kwargs):
        """
        Internal data associated with the radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the radio button.  By default, this flag is set to true and the radio button value may be changed by clicking on it.  If false then the radio button is 'read only' and can not be clicked on. The value of the radio button can always be changed with the -sl/selectflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getRecomputeSize(self, **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Select the radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def offCommand(self, val='True', **kwargs):
        """
        Command executed when the radio button is turned off.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def onCommand(self, val='True', **kwargs):
        """
        Command executed when the radio button is turned on.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        This flag is obsolete and should no longer be used. The radio button label will always be left-aligned.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setData(self, val='True', **kwargs):
        """
        Internal data associated with the radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the radio button.  By default, this flag is set to true and the radio button value may be changed by clicking on it.  If false then the radio button is 'read only' and can not be clicked on. The value of the radio button can always be changed with the -sl/selectflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setRecomputeSize(self, val='True', **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Select the radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a radio button that is added to the most recently created
        radio collection if the -cl/collectionflag is not used.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            This flag is obsolete and should no longer be used. The radio button label will
            always be left-aligned.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the radio button's state is changed. Note that this flag
            should not be used in conjunction with onCommand and offCommand. That is, one
            should either use changeCommand and test the state of the radio button from
            inside the callback, or use onCommand and offCommand as separate callbacks.
        
        - collection : cl                (unicode)       [create]
            To explicitly add a radio button to a collection of radio buttons specify the
            name of the radio collection.
        
        - data : da                      (int)           [create,query,edit]
            Internal data associated with the radio button.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the radio button.  By default, this flag is set to true and
            the radio button value may be changed by clicking on it.  If false then the
            radio button is 'read only' and can not be clicked on. The value of the radio
            button can always be changed with the -sl/selectflag regardless of the state of
            the -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The label text.  The default label is the name of the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,edit]
            Command executed when the radio button is turned off.
        
        - onCommand : onc                (script)        [create,edit]
            Command executed when the radio button is turned on.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - recomputeSize : rs             (bool)          [create,query,edit]
            If true then the control will recompute it's size to just fit the size of the
            label.  If false then the control size will remain fixed as you change the size
            of the label.  The default value of this flag is true.
        
        - select : sl                    (bool)          [create,query,edit]
            Select the radio button.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.radioButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DynRelEditor(PyUI):
    __melui__ : str


class RenderWindowEditor(PyUI):
    def colorManage(self, val='True', **kwargs):
        """
        When used with the writeImage flag, causes the written image to be color-managed using the settings from the view color manager attached to the view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getAutoResize(self, **kwargs):
        """
        Lets the render view editor automatically resize the viewport or not.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getBlendMode(self, **kwargs):
        """
        Sets the blend mode for the render view. New image sent to the render view will be blended with the previous image in the render view, and the composited image will appear.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCaption(self, **kwargs):
        """
        Sets the caption which appears at the bottom of the render view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memory
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getClear(self, **kwargs):
        """
        Clear the image with the given color at the given resolution. Argumnets are respecively: width height red green blue.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCmEnabled(self, **kwargs):
        """
        Turn on or off applying color management in the View.  If set, the color management configuration set in the current view is used.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCompDisplay(self, **kwargs):
        """
        0 : disable compositing.1 : displays the composited image immediately. For example, when foreground layer tile is sent to the render view window, the composited tile is displayed in the render view window, and the original foreground layer tile is not displayed.2 : display the un-composited image, and keep the composited image for the future command. For example, when foreground layer tile is sent to the render view window, the original foreground layer tile is not displayed, and the composited tile is stored in a buffer.3 : show the current composited image. If there is a composited image in the buffer, display it.
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCompImageFile(self, **kwargs):
        """
        Open the given image file and blend with the buffer as if the image was just rendered.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCurrentCamera(self, **kwargs):
        """
        Get or set the current camera. (used when redoing last render)                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getCurrentCameraRig(self, **kwargs):
        """
        Get or set the current camera rig name. If a camera rig is specified, it will be used when redoing the last render as opposed to the currentCamera value, as the currentCamera value will hold the child camera last used for rendering the camera rig.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDisplayImage(self, **kwargs):
        """
        Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDisplayImageViewCount(self, **kwargs):
        """
        Query the number of views stored for a given image in the Editor Image Stack. This is not the same as querying using viewImageCountwhich returns the number of views for the current rendered image.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDisplayStyle(self, **kwargs):
        """
        Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the image
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDoubleBuffer(self, **kwargs):
        """
        Set the display in double buffer mode                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getDrawAxis(self, **kwargs):
        """
        Set or query whether the axis will be drawn.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getEditorName(self, **kwargs):
        """
        Returns the name of the editor, or an empty string if the editor has not been created yet.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getExposure(self, **kwargs):
        """
        The exposure value used by the color management of the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getFrameImage(self, **kwargs):
        """
        Frames the image inside the window.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getFrameRegion(self, **kwargs):
        """
        Frames the region inside the window.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getGamma(self, **kwargs):
        """
        The gamma value used by the color management of the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getMarquee(self, **kwargs):
        """
        The arguments define the four corners of a rectangle: top left bottom right. The rectangle defines a marquee for the render computation.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getNbImages(self, **kwargs):
        """
        returns the number of images                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getPcaption(self, **kwargs):
        """
        Get or set the permanent caption which appears under the image that is currently showing in the render editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getRealSize(self, **kwargs):
        """
        Display the image with a one to one pixel match.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getResetRegion(self, **kwargs):
        """
        Forces a reset of any marquee/region.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getScaleBlue(self, **kwargs):
        """
        Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getScaleGreen(self, **kwargs):
        """
        Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getScaleRed(self, **kwargs):
        """
        Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getShowRegion(self, **kwargs):
        """
        Shows the current region at the given resolution. The two parameters define the width and height.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getSingleBuffer(self, **kwargs):
        """
        Set the display in single buffer mode                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getSnapshot(self, **kwargs):
        """
        Makes a copy of the camera of the model editor at the given size. First argument is the editor name, second is the width, third is the height.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getSnapshotMode(self, **kwargs):
        """
        Get or set the window's snapshot mode.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getStereo(self, **kwargs):
        """
        Puts the editor into stereo image mode.  The effective resolution of the output image is twice the size of the horizontal size. The orientation of the images can be set using the stereoOrientation flag.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getStereoImageOrientation(self, **kwargs):
        """
        Specifies the orientation of stereo camera renders.  The first argument specifies the orientation value for the firstleft image and the second argument specifies the orientation value for the right image. The orientation values are 'normal', the image appears as seen throught he camera, or 'mirrored', the image is mirrored horizontally.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getStereoMode(self, **kwargs):
        """
        Specifies how the image is displayed in the view.  By default the stereo is rendered with a side by side image.  The rendered image is a single image that is twice the size of a normal image, 'both'. Users can also choose to display as 'redcyan', 'redcyanlum', 'leftonly', 'rightonly', or 'stereo'.  both - displays both the left and right redcyan - displays the images as a red/cyan pair. redcyanlum - displays the luminance of the images as a red/cyan pair. leftonly - displays the left side only rightonly - displays the right side only stereo - mode that supports Crystal Eyes(tm) or Zscreen (tm) renders                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getToggle(self, **kwargs):
        """
        Turns the ground plane display on/off.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getViewImageCount(self, **kwargs):
        """
        The render editor has the capability to render multiple cameras within a single view. This is different from image binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-side. The viewImageCount flag tells the editor that it should prepare its internal image storage mechanism for a given number of views.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def getViewTransformName(self, **kwargs):
        """
        Sets/gets the view transform to be applied if color management is enabled in the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def loadImage(self, val='True', **kwargs):
        """
        load an image from disk and set it as the current Editor Image                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def nextViewImage(self, val='True', **kwargs):
        """
        The render editor has the capability to render multiple cameras within a single view. This is different from image binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-side. The nextViewImage flag tells the editor that it should prepare its internal image storage mechanism to store to the next view location.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def outputColorManage(self, val='True', **kwargs):
        """
        When used with the writeImage flag, causes the written image to be color-managed using the outpute color space in the color preferences attached to the view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def refresh(self, val='True', **kwargs):
        """
        requests a refresh of the current Editor Image.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def removeAllImages(self, val='True', **kwargs):
        """
        remove all the Editor Images from the Editor Image Stack                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def removeImage(self, val='True', **kwargs):
        """
        remove the current Editor Image from the Editor Image Stack                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def resetViewImage(self, val='True', **kwargs):
        """
        The render editor has the capability to render multiple cameras within a single view. This is different from image binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-side. The resetViewImage flag tells the editor that it should reset its internal image storage mechanism to the first image. This would happen at the very start of a render view render.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def saveImage(self, val='True', **kwargs):
        """
        save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current Editor Image to a previously saved image use the di/displayImageflag.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setAutoResize(self, val='True', **kwargs):
        """
        Lets the render view editor automatically resize the viewport or not.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setBlendMode(self, val='True', **kwargs):
        """
        Sets the blend mode for the render view. New image sent to the render view will be blended with the previous image in the render view, and the composited image will appear.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCaption(self, val='True', **kwargs):
        """
        Sets the caption which appears at the bottom of the render view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memory
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setClear(self, val='True', **kwargs):
        """
        Clear the image with the given color at the given resolution. Argumnets are respecively: width height red green blue.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCmEnabled(self, val='True', **kwargs):
        """
        Turn on or off applying color management in the View.  If set, the color management configuration set in the current view is used.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCompDisplay(self, val='True', **kwargs):
        """
        0 : disable compositing.1 : displays the composited image immediately. For example, when foreground layer tile is sent to the render view window, the composited tile is displayed in the render view window, and the original foreground layer tile is not displayed.2 : display the un-composited image, and keep the composited image for the future command. For example, when foreground layer tile is sent to the render view window, the original foreground layer tile is not displayed, and the composited tile is stored in a buffer.3 : show the current composited image. If there is a composited image in the buffer, display it.
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCompImageFile(self, val='True', **kwargs):
        """
        Open the given image file and blend with the buffer as if the image was just rendered.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCurrentCamera(self, val='True', **kwargs):
        """
        Get or set the current camera. (used when redoing last render)                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setCurrentCameraRig(self, val='True', **kwargs):
        """
        Get or set the current camera rig name. If a camera rig is specified, it will be used when redoing the last render as opposed to the currentCamera value, as the currentCamera value will hold the child camera last used for rendering the camera rig.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setDisplayImage(self, val='True', **kwargs):
        """
        Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setDisplayStyle(self, val='True', **kwargs):
        """
        Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the image
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setDoubleBuffer(self, val='True', **kwargs):
        """
        Set the display in double buffer mode                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setDrawAxis(self, val='True', **kwargs):
        """
        Set or query whether the axis will be drawn.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setExposure(self, val='True', **kwargs):
        """
        The exposure value used by the color management of the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setFrameImage(self, val='True', **kwargs):
        """
        Frames the image inside the window.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setFrameRegion(self, val='True', **kwargs):
        """
        Frames the region inside the window.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setGamma(self, val='True', **kwargs):
        """
        The gamma value used by the color management of the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setMarquee(self, val='True', **kwargs):
        """
        The arguments define the four corners of a rectangle: top left bottom right. The rectangle defines a marquee for the render computation.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setPcaption(self, val='True', **kwargs):
        """
        Get or set the permanent caption which appears under the image that is currently showing in the render editor.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setRealSize(self, val='True', **kwargs):
        """
        Display the image with a one to one pixel match.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setResetRegion(self, val='True', **kwargs):
        """
        Forces a reset of any marquee/region.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setScaleBlue(self, val='True', **kwargs):
        """
        Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setScaleGreen(self, val='True', **kwargs):
        """
        Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setScaleRed(self, val='True', **kwargs):
        """
        Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setShowRegion(self, val='True', **kwargs):
        """
        Shows the current region at the given resolution. The two parameters define the width and height.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setSingleBuffer(self, val='True', **kwargs):
        """
        Set the display in single buffer mode                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setSnapshot(self, val='True', **kwargs):
        """
        Makes a copy of the camera of the model editor at the given size. First argument is the editor name, second is the width, third is the height.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setSnapshotMode(self, val='True', **kwargs):
        """
        Get or set the window's snapshot mode.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setStereo(self, val='True', **kwargs):
        """
        Puts the editor into stereo image mode.  The effective resolution of the output image is twice the size of the horizontal size. The orientation of the images can be set using the stereoOrientation flag.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setStereoImageOrientation(self, val='True', **kwargs):
        """
        Specifies the orientation of stereo camera renders.  The first argument specifies the orientation value for the firstleft image and the second argument specifies the orientation value for the right image. The orientation values are 'normal', the image appears as seen throught he camera, or 'mirrored', the image is mirrored horizontally.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setStereoMode(self, val='True', **kwargs):
        """
        Specifies how the image is displayed in the view.  By default the stereo is rendered with a side by side image.  The rendered image is a single image that is twice the size of a normal image, 'both'. Users can also choose to display as 'redcyan', 'redcyanlum', 'leftonly', 'rightonly', or 'stereo'.  both - displays both the left and right redcyan - displays the images as a red/cyan pair. redcyanlum - displays the luminance of the images as a red/cyan pair. leftonly - displays the left side only rightonly - displays the right side only stereo - mode that supports Crystal Eyes(tm) or Zscreen (tm) renders                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setToggle(self, val='True', **kwargs):
        """
        Turns the ground plane display on/off.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setViewImageCount(self, val='True', **kwargs):
        """
        The render editor has the capability to render multiple cameras within a single view. This is different from image binning where an image is saved. Multiple image views are useful for comparing two different camera renders side-by-side. The viewImageCount flag tells the editor that it should prepare its internal image storage mechanism for a given number of views.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def setViewTransformName(self, val='True', **kwargs):
        """
        Sets/gets the view transform to be applied if color management is enabled in the current view.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    def writeImage(self, val='True', **kwargs):
        """
        write the current Editor Image to disk                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a editor window that can receive the result of the rendering process
        
        Flags:
        - autoResize : ar                (bool)          [create,query,edit]
            Lets the render view editor automatically resize the viewport or not.
        
        - blendMode : blm                (int)           [create,query,edit]
            Sets the blend mode for the render view. New image sent to the render view will
            be blended with the previous image in the render view, and the composited image
            will appear.
        
        - caption : cap                  (unicode)       [create,query,edit]
            Sets the caption which appears at the bottom of the render view.
        
        - changeCommand : cc             (unicode, unicode, unicode, unicode) [create,query,edit]
            Parameters: First string: commandSecond string: editorNameThird string:
            editorCmdFourth string: updateFuncCall the command when something changes in the
            editor The command should have this prototype :  command(string $editor, string
            $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0:
            no particular reason1: scale color2: buffer (single/double)3: axis 4: image
            displayed5: image saved in memory
        
        - clear : cl                     (int, int, float, float, float) [create,query,edit]
            Clear the image with the given color at the given resolution. Argumnets are
            respecively: width height red green blue.
        
        - cmEnabled : cme                (bool)          [query,edit]
            Turn on or off applying color management in the View.  If set, the color
            management configuration set in the current view is used.
        
        - colorManage : com              (bool)          [edit]
            When used with the writeImage flag, causes the written image to be color-managed
            using the settings from the view color manager attached to the view.
        
        - compDisplay : cd               (int)           [create,query,edit]
            0 : disable compositing.1 : displays the composited image immediately. For
            example, when foreground layer tile is sent to the render view window, the
            composited tile is displayed in the render view window, and the original
            foreground layer tile is not displayed.2 : display the un-composited image, and
            keep the composited image for the future command. For example, when foreground
            layer tile is sent to the render view window, the original foreground layer tile
            is not displayed, and the composited tile is stored in a buffer.3 : show the
            current composited image. If there is a composited image in the buffer, display
            it.
        
        - compImageFile : cif            (unicode)       [create,query,edit]
            Open the given image file and blend with the buffer as if the image was just
            rendered.
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - currentCamera : crc            (unicode)       [create,query,edit]
            Get or set the current camera. (used when redoing last render)
        
        - currentCameraRig : crg         (unicode)       [create,query,edit]
            Get or set the current camera rig name. If a camera rig is specified, it will be
            used when redoing the last render as opposed to the currentCamera value, as the
            currentCamera value will hold the child camera last used for rendering the
            camera rig.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - displayImage : di              (int)           [query,edit]
            Set a particular image in the Editor Image Stack as the current Editor Image.
            Images are added to the Editor Image Stack using the si/saveImageflag.
        
        - displayImageViewCount : dvc    (int)           [query]
            Query the number of views stored for a given image in the Editor Image Stack.
            This is not the same as querying using viewImageCountwhich returns the number of
            views for the current rendered image.
        
        - displayStyle : dst             (unicode)       [create,query,edit]
            Set the mode to display the image. Valid values are: colorto display the basic
            RGB imagemaskto display the mask channellumto display the luminance of the image
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - doubleBuffer : dbf             (bool)          [create,query,edit]
            Set the display in double buffer mode
        
        - drawAxis : da                  (bool)          [create,query,edit]
            Set or query whether the axis will be drawn.
        
        - editorName : en                (bool)          [query]
            Returns the name of the editor, or an empty string if the editor has not been
            created yet.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - exposure : exp                 (float)         [query,edit]
            The exposure value used by the color management of the current view.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - frameImage : fi                (bool)          [create,query,edit]
            Frames the image inside the window.
        
        - frameRegion : fr               (bool)          [create,query,edit]
            Frames the region inside the window.
        
        - gamma : ga                     (float)         [query,edit]
            The gamma value used by the color management of the current view.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - loadImage : li                 (unicode)       [edit]
            load an image from disk and set it as the current Editor Image
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - marquee : mq                   (float, float, float, float) [create,query,edit]
            The arguments define the four corners of a rectangle: top left bottom right. The
            rectangle defines a marquee for the render computation.
        
        - nbImages : nim                 (bool)          [query]
            returns the number of images
        
        - nextViewImage : nvi            (bool)          [create,edit]
            The render editor has the capability to render multiple cameras within a single
            view. This is different from image binning where an image is saved. Multiple
            image views are useful for comparing two different camera renders side-by-side.
            The nextViewImage flag tells the editor that it should prepare its internal
            image storage mechanism to store to the next view location.
        
        - outputColorManage : ocm        (bool)          [edit]
            When used with the writeImage flag, causes the written image to be color-managed
            using the outpute color space in the color preferences attached to the view.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - pcaption : pca                 (unicode)       [create,query,edit]
            Get or set the permanent caption which appears under the image that is currently
            showing in the render editor.
        
        - realSize : rs                  (bool)          [create,query,edit]
            Display the image with a one to one pixel match.
        
        - refresh : ref                  (bool)          [edit]
            requests a refresh of the current Editor Image.
        
        - removeAllImages : ra           (bool)          [edit]
            remove all the Editor Images from the Editor Image Stack
        
        - removeImage : ri               (bool)          [edit]
            remove the current Editor Image from the Editor Image Stack
        
        - resetRegion : rr               (bool)          [create,query,edit]
            Forces a reset of any marquee/region.
        
        - resetViewImage : rvi           (bool)          [create,edit]
            The render editor has the capability to render multiple cameras within a single
            view. This is different from image binning where an image is saved. Multiple
            image views are useful for comparing two different camera renders side-by-side.
            The resetViewImage flag tells the editor that it should reset its internal image
            storage mechanism to the first image. This would happen at the very start of a
            render view render.
        
        - saveImage : si                 (bool)          [edit]
            save the current Editor Image to memory. Saved Editor Images are stored in an
            Editor Image Stack. The most recently saved image is stored in position 0, the
            second most recently saved image in position 1, and so on... To set the current
            Editor Image to a previously saved image use the di/displayImageflag.
        
        - scaleBlue : sb                 (float)         [create,query,edit]
            Define the scaling factor for the blue component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - scaleGreen : sg                (float)         [create,query,edit]
            Define the scaling factor for the green component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - scaleRed : sr                  (float)         [create,query,edit]
            Define the scaling factor for the red component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - showRegion : srg               (int, int)      [create,query,edit]
            Shows the current region at the given resolution. The two parameters define the
            width and height.
        
        - singleBuffer : sbf             (bool)          [create,query,edit]
            Set the display in single buffer mode
        
        - snapshot : snp                 (unicode, int, int) [create,query,edit]
            Makes a copy of the camera of the model editor at the given size. First argument
            is the editor name, second is the width, third is the height.
        
        - snapshotMode : snm             (bool)          [create,query,edit]
            Get or set the window's snapshot mode.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - stereo : s                     (int)           [create,query,edit]
            Puts the editor into stereo image mode.  The effective resolution of the output
            image is twice the size of the horizontal size. The orientation of the images
            can be set using the stereoOrientation flag.
        
        - stereoImageOrientation : sio   (unicode, unicode) [create,query,edit]
            Specifies the orientation of stereo camera renders.  The first argument
            specifies the orientation value for the firstleft image and the second argument
            specifies the orientation value for the right image. The orientation values are
            'normal', the image appears as seen throught he camera, or 'mirrored', the image
            is mirrored horizontally.
        
        - stereoMode : sm                (unicode)       [create,query,edit]
            Specifies how the image is displayed in the view.  By default the stereo is
            rendered with a side by side image.  The rendered image is a single image that
            is twice the size of a normal image, 'both'. Users can also choose to display as
            'redcyan', 'redcyanlum', 'leftonly', 'rightonly', or 'stereo'.  both - displays
            both the left and right redcyan - displays the images as a red/cyan pair.
            redcyanlum - displays the luminance of the images as a red/cyan pair. leftonly -
            displays the left side only rightonly - displays the right side only stereo -
            mode that supports Crystal Eyes(tm) or Zscreen (tm) renders
        
        - toggle : tgl                   (bool)          [create,query,edit]
            Turns the ground plane display on/off.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - viewImageCount : vic           (int)           [create,query,edit]
            The render editor has the capability to render multiple cameras within a single
            view. This is different from image binning where an image is saved. Multiple
            image views are useful for comparing two different camera renders side-by-side.
            The viewImageCount flag tells the editor that it should prepare its internal
            image storage mechanism for a given number of views.
        
        - viewTransformName : vtn        (unicode)       [query,edit]
            Sets/gets the view transform to be applied if color management is enabled in the
            current view.
        
        - writeImage : wi                (unicode)       [edit]
            write the current Editor Image to disk                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.renderWindowEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DynPaintEditor(PyUI):
    def canvasUndo(self, val='True', **kwargs):
        """
        Does a fast undo in Canvas mode. This is a special undo because we are not using any history when we paint in Canvas mode so we provide a single level undo for the Canvas.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def clear(self, val='True', **kwargs):
        """
        Clears the buffer (if in Canvas mode) to the floating point values (R,G,B).                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getActiveOnly(self, **kwargs):
        """
        For Scene mode, this determines if only the active strokes will be refreshed.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getAutoSave(self, **kwargs):
        """
        For Canvas mode, this determines if the buffer will be saved to a disk file after every stroke. Good for painting textures and viewing the results in shaded display in the model view.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getCamera(self, **kwargs):
        """
        Sets the name of the camera which the Paint Effects panel looks through.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getCanvasMode(self, **kwargs):
        """
        Sets the Paint Effects panel into Canvas mode if true.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memory
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getControl(self, **kwargs):
        """
        Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return NONEif no control is present.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getCurrentCanvasSize(self, **kwargs):
        """
        In Query mode, this returns the (X,Y) resolution of the current canvas.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayAppearance(self, **kwargs):
        """
        Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayFog(self, **kwargs):
        """
        For Scene mode, this determines if fog will be displayed in the Paint Effects panel when refreshing the scene. If fog is on, but this is off, fog will only be drawn on the strokes, not the rest of the scene.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayImage(self, **kwargs):
        """
        Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayLights(self, **kwargs):
        """
        Sets the lighting for shaded mode.  Possible values are selected, active, all, default.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayStyle(self, **kwargs):
        """
        Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the image
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDisplayTextures(self, **kwargs):
        """
        Turns on or off display of textures in shaded mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDoubleBuffer(self, **kwargs):
        """
        Set the display in double buffer mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDrawAxis(self, **kwargs):
        """
        Set or query whether the axis will be drawn.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getDrawContext(self, **kwargs):
        """
        Returns the name of the context.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getFileName(self, **kwargs):
        """
        This sets the file to which the canvas will be saved.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getFilter(self, **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getForceMainConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getHighlightConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getMainListConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getNbImages(self, **kwargs):
        """
        returns the number of images                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getNewImage(self, **kwargs):
        """
        Starts a new image in edit mode, setting the resolution to the integer values (X,Y) and clearing the buffer to the floating point values (R,G,B). In Query mode, this returns the (X,Y) resolution of the current Image.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getPanel(self, **kwargs):
        """
        Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getRefreshMode(self, **kwargs):
        """
        Sets the refresh mode to the specified value. 0 - Do not draw strokes on refresh, 1 - Redraw strokes in wireframe mode, 2 - Redraw strokes in final rendered mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getSaveAlpha(self, **kwargs):
        """
        For Canvas mode, this determines if the alpha will be saved when storing the canvas to a disk file.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getSaveBumpmap(self, **kwargs):
        """
        Saves the current buffer as a bump map to the specified file.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getScaleBlue(self, **kwargs):
        """
        Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getScaleGreen(self, **kwargs):
        """
        Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getScaleRed(self, **kwargs):
        """
        Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getSelectionConnection(self, **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getSingleBuffer(self, **kwargs):
        """
        Set the display in single buffer mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getStateString(self, **kwargs):
        """
        Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getWrap(self, **kwargs):
        """
        For Canvas mode, should the buffer wrap in U, and V (respectively) when painting.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def getZoom(self, **kwargs):
        """
        Zooms the Canvas image by the specified value.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def iconGrab(self, val='True', **kwargs):
        """
        This puts the Paint Effects panel into Grab Icon mode where the user is expected to drag out a section of the screen to be made into an icon.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def loadImage(self, val='True', **kwargs):
        """
        load an image from disk and set it as the current Editor Image                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def lockMainConnection(self, val='True', **kwargs):
        """
        Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def paintAll(self, val='True', **kwargs):
        """
        Redraws the buffer in current refresh mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def redrawLast(self, val='True', **kwargs):
        """
        Redraws the last stroke again. Useful when it's brush has just changed. This feature does a fast undo and redraws the stroke again.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def refresh(self, val='True', **kwargs):
        """
        requests a refresh of the current Editor Image.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def removeAllImages(self, val='True', **kwargs):
        """
        remove all the Editor Images from the Editor Image Stack                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def removeImage(self, val='True', **kwargs):
        """
        remove the current Editor Image from the Editor Image Stack                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def rollImage(self, val='True', **kwargs):
        """
        In Canvas mode, this rolls the image by the floating point values (X,Y). X and Y are between 0 (no roll) and 1 (full roll). A value of .5 rolls the image 50% (ie. the border moves to the center of the screen.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def saveImage(self, val='True', **kwargs):
        """
        save the current Editor Image to memory. Saved Editor Images are stored in an Editor Image Stack. The most recently saved image is stored in position 0, the second most recently saved image in position 1, and so on... To set the current Editor Image to a previously saved image use the di/displayImageflag.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setActiveOnly(self, val='True', **kwargs):
        """
        For Scene mode, this determines if only the active strokes will be refreshed.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setAutoSave(self, val='True', **kwargs):
        """
        For Canvas mode, this determines if the buffer will be saved to a disk file after every stroke. Good for painting textures and viewing the results in shaded display in the model view.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setCamera(self, val='True', **kwargs):
        """
        Sets the name of the camera which the Paint Effects panel looks through.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setCanvasMode(self, val='True', **kwargs):
        """
        Sets the Paint Effects panel into Canvas mode if true.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Parameters: First string: commandSecond string: editorNameThird string: editorCmdFourth string: updateFuncCall the command when something changes in the editor The command should have this prototype :  command(string $editor, string $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0: no particular reason1: scale color2: buffer (single/double)3: axis 4: image displayed5: image saved in memory
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayAppearance(self, val='True', **kwargs):
        """
        Sets the display appearance of the model panel.  Possible values are wireframe, points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the -interactive and -default flags.  Note that only wireframe, points, and boundingBoxare valid for the interactive mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayFog(self, val='True', **kwargs):
        """
        For Scene mode, this determines if fog will be displayed in the Paint Effects panel when refreshing the scene. If fog is on, but this is off, fog will only be drawn on the strokes, not the rest of the scene.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayImage(self, val='True', **kwargs):
        """
        Set a particular image in the Editor Image Stack as the current Editor Image. Images are added to the Editor Image Stack using the si/saveImageflag.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayLights(self, val='True', **kwargs):
        """
        Sets the lighting for shaded mode.  Possible values are selected, active, all, default.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayStyle(self, val='True', **kwargs):
        """
        Set the mode to display the image. Valid values are: colorto display the basic RGB imagemaskto display the mask channellumto display the luminance of the image
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDisplayTextures(self, val='True', **kwargs):
        """
        Turns on or off display of textures in shaded mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the editor.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDoubleBuffer(self, val='True', **kwargs):
        """
        Set the display in double buffer mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setDrawAxis(self, val='True', **kwargs):
        """
        Set or query whether the axis will be drawn.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setFileName(self, val='True', **kwargs):
        """
        This sets the file to which the canvas will be saved.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setFilter(self, val='True', **kwargs):
        """
        Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setForceMainConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setHighlightConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setMainListConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setNewImage(self, val='True', **kwargs):
        """
        Starts a new image in edit mode, setting the resolution to the integer values (X,Y) and clearing the buffer to the floating point values (R,G,B). In Query mode, this returns the (X,Y) resolution of the current Image.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setParent(self, val='True', **kwargs):
        """
        Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setRefreshMode(self, val='True', **kwargs):
        """
        Sets the refresh mode to the specified value. 0 - Do not draw strokes on refresh, 1 - Redraw strokes in wireframe mode, 2 - Redraw strokes in final rendered mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setSaveAlpha(self, val='True', **kwargs):
        """
        For Canvas mode, this determines if the alpha will be saved when storing the canvas to a disk file.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setSaveBumpmap(self, val='True', **kwargs):
        """
        Saves the current buffer as a bump map to the specified file.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setScaleBlue(self, val='True', **kwargs):
        """
        Define the scaling factor for the blue component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setScaleGreen(self, val='True', **kwargs):
        """
        Define the scaling factor for the green component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setScaleRed(self, val='True', **kwargs):
        """
        Define the scaling factor for the red component in the View. The default value is 1 and can be between -1000 to +1000                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setSelectionConnection(self, val='True', **kwargs):
        """
        Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setSingleBuffer(self, val='True', **kwargs):
        """
        Set the display in single buffer mode                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setWrap(self, val='True', **kwargs):
        """
        For Canvas mode, should the buffer wrap in U, and V (respectively) when painting.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def setZoom(self, val='True', **kwargs):
        """
        Zooms the Canvas image by the specified value.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def snapShot(self, val='True', **kwargs):
        """
        Takes a snapshot of the current camera view.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def tileSize(self, val='True', **kwargs):
        """
        Sets the size of the tile for the hardware texture redraw of the display buffer.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the editor should be removed from its layout. This cannot be used in query mode.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def undoCache(self, val='True', **kwargs):
        """
        By default the last image is cached for undo. If this is set false, then undoing will be disabled in canvas mode and undo in scene mode will force a full refresh. Less memory will be used if this is set false before the first clear or refresh of the current scene.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def unlockMainConnection(self, val='True', **kwargs):
        """
        Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def updateMainConnection(self, val='True', **kwargs):
        """
        Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    def writeImage(self, val='True', **kwargs):
        """
        write the current Editor Image to disk                  
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a editor window that can be painted into
        
        Flags:
        - activeOnly : ao                (bool)          [query,edit]
            For Scene mode, this determines if only the active strokes will be refreshed.
        
        - autoSave : autoSave            (bool)          [query,edit]
            For Canvas mode, this determines if the buffer will be saved to a disk file
            after every stroke. Good for painting textures and viewing the results in shaded
            display in the model view.
        
        - camera : cam                   (unicode)       [query,edit]
            Sets the name of the camera which the Paint Effects panel looks through.
        
        - canvasMode : cm                (bool)          [query,edit]
            Sets the Paint Effects panel into Canvas mode if true.
        
        - canvasUndo : cu                (bool)          [edit]
            Does a fast undo in Canvas mode. This is a special undo because we are not using
            any history when we paint in Canvas mode so we provide a single level undo for
            the Canvas.
        
        - changeCommand : cc             (unicode, unicode, unicode, unicode) [create,query,edit]
            Parameters: First string: commandSecond string: editorNameThird string:
            editorCmdFourth string: updateFuncCall the command when something changes in the
            editor The command should have this prototype :  command(string $editor, string
            $editorCmd, string $updateFunc, int $reason)  The possible reasons could be : 0:
            no particular reason1: scale color2: buffer (single/double)3: axis 4: image
            displayed5: image saved in memory
        
        - clear : cl                     (float, float, float) [edit]
            Clears the buffer (if in Canvas mode) to the floating point values (R,G,B).
        
        - control : ctl                  (bool)          [query]
            Query only. Returns the top level control for this editor. Usually used for
            getting a parent to attach popup menus. Caution: It is possible for an editor to
            exist without a control. The query will return NONEif no control is present.
        
        - currentCanvasSize : ccs        (bool)          [query]
            In Query mode, this returns the (X,Y) resolution of the current canvas.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - displayAppearance : dsa        (unicode)       [query,edit]
            Sets the display appearance of the model panel.  Possible values are wireframe,
            points, boundingBox, smoothShaded, flatShaded.  This flag may be used with the
            -interactive and -default flags.  Note that only wireframe, points, and
            boundingBoxare valid for the interactive mode.
        
        - displayFog : dfg               (bool)          [query,edit]
            For Scene mode, this determines if fog will be displayed in the Paint Effects
            panel when refreshing the scene. If fog is on, but this is off, fog will only be
            drawn on the strokes, not the rest of the scene.
        
        - displayImage : di              (int)           [query,edit]
            Set a particular image in the Editor Image Stack as the current Editor Image.
            Images are added to the Editor Image Stack using the si/saveImageflag.
        
        - displayLights : dsl            (unicode)       [query,edit]
            Sets the lighting for shaded mode.  Possible values are selected, active, all,
            default.
        
        - displayStyle : dst             (unicode)       [create,query,edit]
            Set the mode to display the image. Valid values are: colorto display the basic
            RGB imagemaskto display the mask channellumto display the luminance of the image
        
        - displayTextures : dtx          (bool)          [query,edit]
            Turns on or off display of textures in shaded mode
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the editor.
        
        - doubleBuffer : dbf             (bool)          [create,query,edit]
            Set the display in double buffer mode
        
        - drawAxis : da                  (bool)          [create,query,edit]
            Set or query whether the axis will be drawn.
        
        - drawContext : drc              (bool)          [query]
            Returns the name of the context.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fastUpdate : fu                (int)           []
            Obsolete - do not use
        
        - fileName : fil                 (unicode)       [query,edit]
            This sets the file to which the canvas will be saved.
        
        - filter : f                     (unicode)       [create,query,edit]
            Specifies the name of an itemFilter object to be used with this editor. This
            filters the information coming onto the main list of the editor.
        
        - forceMainConnection : fmc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object. This is a variant of the -mainListConnection flag in
            that it will force a change even when the connection is locked. This flag is
            used to reduce the overhead when using the -unlockMainConnection ,
            -mainListConnection, -lockMainConnection flags in immediate succession.
        
        - highlightConnection : hlc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its highlight list. Not all editors have a highlight list. For
            those that do, it is a secondary selection list.
        
        - iconGrab : ig                  (bool)          [edit]
            This puts the Paint Effects panel into Grab Icon mode where the user is expected
            to drag out a section of the screen to be made into an icon.
        
        - loadImage : li                 (unicode)       [edit]
            load an image from disk and set it as the current Editor Image
        
        - lockMainConnection : lck       (bool)          [create,edit]
            Locks the current list of objects within the mainConnection, so that only those
            objects are displayed within the editor. Further changes to the original
            mainConnection are ignored.
        
        - mainListConnection : mlc       (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will use as
            its source of content. The editor will only display items contained in the
            selectionConnection object.
        
        - menu : mn                      (unicode)       [create]
            Sets the name of the script used to build a menu in the editor. The script takes
            the editor name as an argument.
        
        - nbImages : nim                 (bool)          [query]
            returns the number of images
        
        - newImage : ni                  (int, int, float, float, float) [query,edit]
            Starts a new image in edit mode, setting the resolution to the integer values
            (X,Y) and clearing the buffer to the floating point values (R,G,B). In Query
            mode, this returns the (X,Y) resolution of the current Image.
        
        - paintAll : pa                  (float)         [edit]
            Redraws the buffer in current refresh mode.
        
        - panel : pnl                    (unicode)       [create,query]
            Specifies the panel for this editor. By default if an editor is created in the
            create callback of a scripted panel it will belong to that panel. If an editor
            does not belong to a panel it will be deleted when the window that it is in is
            deleted.
        
        - parent : p                     (unicode)       [create,query,edit]
            Specifies the parent layout for this editor. This flag will only have an effect
            if the editor is currently un-parented.
        
        - redrawLast : rl                (bool)          [edit]
            Redraws the last stroke again. Useful when it's brush has just changed. This
            feature does a fast undo and redraws the stroke again.
        
        - refresh : ref                  (bool)          [edit]
            requests a refresh of the current Editor Image.
        
        - refreshMode : rmd              (int)           [query,edit]
            Sets the refresh mode to the specified value. 0 - Do not draw strokes on
            refresh, 1 - Redraw strokes in wireframe mode, 2 - Redraw strokes in final
            rendered mode.
        
        - removeAllImages : ra           (bool)          [edit]
            remove all the Editor Images from the Editor Image Stack
        
        - removeImage : ri               (bool)          [edit]
            remove the current Editor Image from the Editor Image Stack
        
        - rollImage : rig                (float, float)  [edit]
            In Canvas mode, this rolls the image by the floating point values (X,Y). X and Y
            are between 0 (no roll) and 1 (full roll). A value of .5 rolls the image 50%
            (ie. the border moves to the center of the screen.
        
        - saveAlpha : sa                 (bool)          [query,edit]
            For Canvas mode, this determines if the alpha will be saved when storing the
            canvas to a disk file.
        
        - saveBumpmap : sbm              (unicode)       [query,edit]
            Saves the current buffer as a bump map to the specified file.
        
        - saveImage : si                 (bool)          [edit]
            save the current Editor Image to memory. Saved Editor Images are stored in an
            Editor Image Stack. The most recently saved image is stored in position 0, the
            second most recently saved image in position 1, and so on... To set the current
            Editor Image to a previously saved image use the di/displayImageflag.
        
        - scaleBlue : sb                 (float)         [create,query,edit]
            Define the scaling factor for the blue component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - scaleGreen : sg                (float)         [create,query,edit]
            Define the scaling factor for the green component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - scaleRed : sr                  (float)         [create,query,edit]
            Define the scaling factor for the red component in the View. The default value
            is 1 and can be between -1000 to +1000
        
        - selectionConnection : slc      (unicode)       [create,query,edit]
            Specifies the name of a selectionConnection object that the editor will
            synchronize with its own selection list. As the user selects things in this
            editor, they will be selected in the selectionConnection object. If the object
            undergoes changes, the editor updates to show the changes.
        
        - singleBuffer : sbf             (bool)          [create,query,edit]
            Set the display in single buffer mode
        
        - snapShot : snp                 (bool)          [edit]
            Takes a snapshot of the current camera view.
        
        - stateString : sts              (bool)          [query]
            Query only flag. Returns the MEL command that will create an editor to match the
            current editor state. The returned command string uses the string variable
            $editorName in place of a specific name.
        
        - swap : swp                     (int)           []
            Obsolete - do not use
        
        - tileSize : ts                  (int)           [edit]
            Sets the size of the tile for the hardware texture redraw of the display buffer.
        
        - unParent : up                  (bool)          [create,edit]
            Specifies that the editor should be removed from its layout. This cannot be used
            in query mode.
        
        - undoCache : uc                 (bool)          [edit]
            By default the last image is cached for undo. If this is set false, then undoing
            will be disabled in canvas mode and undo in scene mode will force a full
            refresh. Less memory will be used if this is set false before the first clear or
            refresh of the current scene.
        
        - unlockMainConnection : ulk     (bool)          [create,edit]
            Unlocks the mainConnection, effectively restoring the original mainConnection
            (if it is still available), and dynamic updates.
        
        - updateMainConnection : upd     (bool)          [create,edit]
            Causes a locked mainConnection to be updated from the orginal mainConnection,
            but preserves the lock state.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - wrap : wr                      (bool, bool)    [query,edit]
            For Canvas mode, should the buffer wrap in U, and V (respectively) when
            painting.
        
        - writeImage : wi                (unicode)       [edit]
            write the current Editor Image to disk
        
        - zoom : zm                      (float)         [query,edit]
            Zooms the Canvas image by the specified value.                  Flag can have
            multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.dynPaintEditor`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttributeMenu(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Action to generate popup connection menus for Hypershade. This command is used
        internally by the Hypershade panel.
        
        Flags:
        - beginMenu : beg                (bool)          [create]
            If true the menu will be used to start a connection edit so it will list all
            available attributes for either inputs or outputs.  If false the menu will be
            used to complete a connection so it will list only the attributes compatible
            with the attribute at the other end of the connection.  A plug must be supplied
            in this case.
        
        - editor : edt                   (unicode)       [create]
            Name of the Hypergraph, Hypershade or Visor editor for which this menu is being
            built.  This argument is no longer mandatory. If it is omitted, the inputs flag
            and the node must be used to specify the search targets. This allows
            attributeMenu to be used in the absence of a hypershade editor.
        
        - finishMenu : fsh               (bool)          [create]
            finishes the menu
        
        - inputs : inp                   (bool)          [create]
            If true only attributes which can be used as inputs will be listed.  If false
            only attributes which can be used as outputs will be listed
        
        - plug : p                       (PyNode)        [create]
            If inputs is false then we are completing a connection and the name of the plug
            at the other end of the connection must be supplied.
        
        - regPulldownMenuCommand : rpm   (unicode)       [create]
            This flag will register a callback that allows the user to define their own
            popup menu for a specific node type for use in the Hypershade and Hypergraph
            editor. The command signature should look like this: global proc int
            proc_name(string $editorName, string $nodeName, string $plug, string $mode,
            string $menuType) The method should return 0 if it does not recognize the node
            type and the default attributeMenu popup menu will be displayed. If the callback
            returns one then the menu is considered built and no other menuItems will be
            added to the popup. The return value from this flag will be the ID to use for
            the -unregPulldownMenuCommand flag.
        
        - unregPulldownMenuCommand : upm (int)           [create]
            This flag will unregister a callback procedure that was registered with the
            -regPulldownMenuCommand flag. The argument should be the integer identifier
            returned from the -regPulldownMenuCommand flag.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attributeMenu`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class SymbolCheckBox(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getDisableOffImage(self, **kwargs):
        """
        Image displayed when the check box is off and disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getDisableOnImage(self, **kwargs):
        """
        Image displayed when the check box is on and disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image of the check box.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getInnerMargin(self, **kwargs):
        """
        This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having a 2 pixel inner margin. This flag is for backward compatibility on Linux only, and will be removed in future releases.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2017, 2018). Currently only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given as 2018).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getOffImage(self, **kwargs):
        """
        Image displayed when the check box is off.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getOnImage(self, **kwargs):
        """
        Image displayed when the check box is on.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the check box.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2017, 2018). Currently only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given as 2018).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def offCommand(self, val='True', **kwargs):
        """
        Command executed when the symbol check box is turned off.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def onCommand(self, val='True', **kwargs):
        """
        Command executed when the symbol check box is turned on.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setDisableOffImage(self, val='True', **kwargs):
        """
        Image displayed when the check box is off and disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setDisableOnImage(self, val='True', **kwargs):
        """
        Image displayed when the check box is on and disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image of the check box.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setInnerMargin(self, val='True', **kwargs):
        """
        This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having a 2 pixel inner margin. This flag is for backward compatibility on Linux only, and will be removed in future releases.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2017, 2018). Currently only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given as 2018).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setOffImage(self, val='True', **kwargs):
        """
        Image displayed when the check box is off.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setOnImage(self, val='True', **kwargs):
        """
        Image displayed when the check box is on.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the check box.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2017, 2018). Currently only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given as 2018).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a symbol check box.  A symbol check box is a simple control
        containing a pixmap and a state of either on or off. Commands can be attached to
        any or all of the following events:  when the symbol check box is turned on,
        turned off, or simply when it's state is changed.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the check box's state is changed. Note that this flag
            should not be used in conjunction with onCommand and offCommand. That is, one
            should either use changeCommand and test the state of the check box from inside
            the callback, or use onCommand and offCommand as separate callbacks.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disableOffImage : dfi          (unicode)       [create,query,edit]
            Image displayed when the check box is off and disabled.
        
        - disableOnImage : dni           (unicode)       [create,query,edit]
            Image displayed when the check box is on and disabled.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            Image of the check box.
        
        - innerMargin : im               (bool)          [create,query,edit]
            This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having
            a 2 pixel inner margin. This flag is for backward compatibility on Linux only,
            and will be removed in future releases.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2017, 2018). Currently only accepts major version numbers (e.g.
            2017 Ext 1, or 2017.5 should be given as 2018).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,edit]
            Command executed when the symbol check box is turned off.
        
        - offImage : ofi                 (unicode)       [create,query,edit]
            Image displayed when the check box is off.
        
        - onCommand : onc                (script)        [create,edit]
            Command executed when the symbol check box is turned on.
        
        - onImage : oni                  (unicode)       [create,query,edit]
            Image displayed when the check box is on.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (bool)          [create,query,edit]
            Value of the check box.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2017, 2018). Currently
            only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given
            as 2018).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.symbolCheckBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IconTextStaticLabel(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates an iconTextStaticLabel.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextStaticLabel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AnimDisplay(PyUI):
    def getModelUpdate(self, **kwargs):
        """
        Controls how changes to animCurves are propagated through the dependency graph. Valid modes are none, interactiveor delayed. If modelUpdate is nonethen changing an animCurve will not cause the model to be updated (change currentTime in order to update the model).  If modelUpdate is interactive(which is the default setting), then as interactive changes are being made to the animCurve, the model will be updated.  If modelUpdate is delayed, then the model is updated once the final change to an animCurve has been made.  With modelUpdate set to either interactiveor delayed, changes to animCurves made via commands will also cause the model to be updated.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def getRefAnimCurvesEditable(self, **kwargs):
        """
        Specify if animation curves from referenced files are editable.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def getTimeCode(self, **kwargs):
        """
        Controls how time value are display. Valid values are frame, timecode, fulltimecode. If the value is framemaya will display time in frame everywhere. If the value is timecodemaya will display time in timecode in time slider, graph editor and dope sheet. If the value is fulltimecodemaya will display time in timecode everywhere.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def getTimeCodeOffset(self, **kwargs):
        """
        This flag has now been deprecated.  It still exists to not break legacy scripts, but it will now do nothing.  See the new timeCode command to set and query timeCodes.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def setModelUpdate(self, val='True', **kwargs):
        """
        Controls how changes to animCurves are propagated through the dependency graph. Valid modes are none, interactiveor delayed. If modelUpdate is nonethen changing an animCurve will not cause the model to be updated (change currentTime in order to update the model).  If modelUpdate is interactive(which is the default setting), then as interactive changes are being made to the animCurve, the model will be updated.  If modelUpdate is delayed, then the model is updated once the final change to an animCurve has been made.  With modelUpdate set to either interactiveor delayed, changes to animCurves made via commands will also cause the model to be updated.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def setRefAnimCurvesEditable(self, val='True', **kwargs):
        """
        Specify if animation curves from referenced files are editable.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def setTimeCode(self, val='True', **kwargs):
        """
        Controls how time value are display. Valid values are frame, timecode, fulltimecode. If the value is framemaya will display time in frame everywhere. If the value is timecodemaya will display time in timecode in time slider, graph editor and dope sheet. If the value is fulltimecodemaya will display time in timecode everywhere.                  
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    def setTimeCodeOffset(self, val='True', **kwargs):
        """
        This flag has now been deprecated.  It still exists to not break legacy scripts, but it will now do nothing.  See the new timeCode command to set and query timeCodes.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command changes certain display options used by animation windows. In query
        mode, return type is based on queried flag.
        
        Flags:
        - modelUpdate : upd              (unicode)       [create,query,edit]
            Controls how changes to animCurves are propagated through the dependency graph.
            Valid modes are none, interactiveor delayed. If modelUpdate is nonethen changing
            an animCurve will not cause the model to be updated (change currentTime in order
            to update the model).  If modelUpdate is interactive(which is the default
            setting), then as interactive changes are being made to the animCurve, the model
            will be updated.  If modelUpdate is delayed, then the model is updated once the
            final change to an animCurve has been made.  With modelUpdate set to either
            interactiveor delayed, changes to animCurves made via commands will also cause
            the model to be updated.
        
        - refAnimCurvesEditable : rae    (bool)          [create,query,edit]
            Specify if animation curves from referenced files are editable.
        
        - timeCode : tc                  (unicode)       [create,query,edit]
            Controls how time value are display. Valid values are frame, timecode,
            fulltimecode. If the value is framemaya will display time in frame everywhere.
            If the value is timecodemaya will display time in timecode in time slider, graph
            editor and dope sheet. If the value is fulltimecodemaya will display time in
            timecode everywhere.
        
        - timeCodeOffset : tco           (unicode)       [create,query,edit]
            This flag has now been deprecated.  It still exists to not break legacy scripts,
            but it will now do nothing.  See the new timeCode command to set and query
            timeCodes.                  Flag can have multiple arguments, passed either as a
            tuple or a list.
        
        
        Derived from mel command `maya.cmds.animDisplay`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class PalettePort(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        This command string will be executed when a color in the palette is changed.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def colorEdited(self, val='True', **kwargs):
        """
        This command string will be executed when a color in the palette is edited.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getActualTotal(self, **kwargs):
        """
        Set the actual number of palette entries. This number must be greater than zero, but not be greater than maximum number of palette entries defined by the dimensionsflag.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getColorEditable(self, **kwargs):
        """
        If true then the user can modify the current index's color.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getDimensions(self, **kwargs):
        """
        Set the dimensions of the array.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getEditable(self, **kwargs):
        """
        If true then the user can change the current color.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Set a color for a given cell, using HSV format. On query return the color of the current cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Set a color for a given cell, using RGB format. On query return the color of the current cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getSetCurCell(self, **kwargs):
        """
        Set the current cell in the array to the given index. Returns the current cell when queried.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getTransparent(self, **kwargs):
        """
        Set a given cell to be the transparent color.  A cell value of -1 indicates that no cell is transparent.  On query returns the current transparent cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def redraw(self, val='True', **kwargs):
        """
        Forces a redraw of the array                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setColorEditable(self, val='True', **kwargs):
        """
        If true then the user can modify the current index's color.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        If true then the user can change the current color.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setHsvValue(self, val='True', **kwargs):
        """
        Set a color for a given cell, using HSV format. On query return the color of the current cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setRgbValue(self, val='True', **kwargs):
        """
        Set a color for a given cell, using RGB format. On query return the color of the current cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setSetCurCell(self, val='True', **kwargs):
        """
        Set the current cell in the array to the given index. Returns the current cell when queried.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setTransparent(self, val='True', **kwargs):
        """
        Set a given cell to be the transparent color.  A cell value of -1 indicates that no cell is transparent.  On query returns the current transparent cell.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates an array of color cells. It could be used to to store an
        retrieve some colors you want to manage during your working session.
        
        Flags:
        - actualTotal : at               (int)           [create,query]
            Set the actual number of palette entries. This number must be greater than zero,
            but not be greater than maximum number of palette entries defined by the
            dimensionsflag.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            This command string will be executed when a color in the palette is changed.
        
        - colorEditable : ced            (bool)          [create,query,edit]
            If true then the user can modify the current index's color.
        
        - colorEdited : ce               (script)        [create,edit]
            This command string will be executed when a color in the palette is edited.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - dimensions : dim               (int, int)      [create,query]
            Set the dimensions of the array.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            If true then the user can change the current color.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hsvValue : hsv                 (int, int, float, float, float) [create,query,edit]
            Set a color for a given cell, using HSV format. On query return the color of the
            current cell.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - redraw : r                     (bool)          [create,edit]
            Forces a redraw of the array
        
        - rgbValue : rgb                 (int, float, float, float) [create,query,edit]
            Set a color for a given cell, using RGB format. On query return the color of the
            current cell.
        
        - setCurCell : scc               (int)           [create,query,edit]
            Set the current cell in the array to the given index. Returns the current cell
            when queried.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - topDown : td                   (bool)          [create]
            If this flag is true, it indicates that first entry should appear in top left as
            opposed to the bottom left.
        
        - transparent : t                (int)           [create,query,edit]
            Set a given cell to be the transparent color.  A cell value of -1 indicates that
            no cell is transparent.  On query returns the current transparent cell.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.palettePort`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RadioMenuItemCollection(PyUI):
    def getGl(self, **kwargs):
        """
        Set the collection to have no parent menu.  Global collections must be explicitly deleted.                  
        
        
        Derived from mel command `maya.cmds.radioMenuItemCollection`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a radioMenuItemCollection.  Attach radio menu items to
        radio menu item collection objects to get radio button behaviour.  Radio menu
        item collections will be parented to the current menu if no parent is specified
        with the -p/parentflag. As children of the menu they will be deleted when the
        menu is deleted. Collections may also span more than one menu if the
        -g/globalflag is used. In this case the collection has no parent menu and must
        be explicitly deleted with the deleteUIcommand when it is no longer wanted.
        
        Flags:
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - gl : gl                        (bool)          [create,query]
            Set the collection to have no parent menu.  Global collections must be
            explicitly deleted.
        
        - parent : p                     (unicode)       [create]
            The parent of the collection.  The collection will be deleted along with the
            parent.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.radioMenuItemCollection`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IconTextButton(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getCommand(self, **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getCommandRepeatable(self, **kwargs):
        """
        Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut to repeat the last executed command.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getDoubleClickCommand(self, **kwargs):
        """
        Command executed when the control is double clicked.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getFlat(self, **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getHighlightImage(self, **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getSelectionImage(self, **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getSourceType(self, **kwargs):
        """
        Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def handleNodeDropCallback(self, val='True', **kwargs):
        """
        Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def labelEditingCallback(self, val='True', **kwargs):
        """
        Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new label string will be passed to the callback.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def scaleIcon(self, val='True', **kwargs):
        """
        For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the flag is specified, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setCommand(self, val='True', **kwargs):
        """
        Command executed when the control is pressed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setCommandRepeatable(self, val='True', **kwargs):
        """
        Set if the MEL command specified in the command flag should be repeatable or not.  The gkey, by default, is the shortcut to repeat the last executed command.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setDoubleClickCommand(self, val='True', **kwargs):
        """
        Command executed when the control is double clicked.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setFlat(self, val='True', **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setHighlightImage(self, val='True', **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setSelectionImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setSourceType(self, val='True', **kwargs):
        """
        Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled by default), and python.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates an iconTextButton that can be
        displayed with different icons, with or without accompanying text label. When an
        argument is passed, it is used to give a name to the iconTextButton.
        
        Flags:
        - actionIsSubstitute : ais       (bool)          []
        
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - command : c                    (script)        [create,query,edit]
            Command executed when the control is pressed.
        
        - commandRepeatable : rpt        (bool)          [create,query,edit]
            Set if the MEL command specified in the command flag should be repeatable or
            not.  The gkey, by default, is the shortcut to repeat the last executed command.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,query,edit]
            Command executed when the control is double clicked.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flat : fla                     (bool)          [create,query,edit]
            Sets whether the control will be a flat button (0 false, 1 true).
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - handleNodeDropCallback : hnd   (script)        [create,edit]
            Specify a script callback which is called when a node is dropped on the control.
            The name of the node being dropped will be passed to the function  (python
            callable) or appended to the end (script) to form the command to be executed.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - highlightImage : hi            (unicode)       [create,query,edit]
            Highlight image displayed while the cursor is over the control. Image size must
            be the same as the image specified with the -i/imageflag. This is a Windows only
            flag.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelEditingCallback : lec     (script)        [create,edit]
            Specify a callback which is called after the user double clicks the label of the
            control to give it a new label. The new label string will be passed to the
            callback.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - scaleIcon : sic                (bool)          [create,edit]
            For textOnlyand iconOnlystyle, this flag has no effect. For other styles, if the
            flag is specified, the icon will be scaled to the size of the control.
        
        - selectionImage : si            (unicode)       [create,query,edit]
            Image displayed while the control is selected. Image size must be the same as
            the image specified with the -i/imageflag. This is a Windows only flag.
        
        - sourceType : stp               (unicode)       [create,query,edit]
            Sets the language type for the command script. Can only be used in conjunction
            with the c/command or dcc/doubleClickCommand flags. Valid values are mel(enabled
            by default), and python.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextButton`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ToolCollection(PyUI):
    def getCollectionItemArray(self, **kwargs):
        """
        Returns a string list giving the long names of all the items in this collection.                  
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    def getGl(self, **kwargs):
        """
        Set the collection to have no parent layout.  This flag must be specified when the collection is created and can not be queried or edited.  Consequently, global collections must be explicitly deleted.                  
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    def getNumberOfCollectionItems(self, **kwargs):
        """
        Returns the number of items that are in this collection.                  
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Select the specified collection item.  If queried will return the name of the currently selected collection item.                  
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a tool button collection. Collections are parented to the
        current default layout if no parent is specified with the -p/parent flag.  As
        children of the layout they will be deleted when the layout is deleted.
        Collections may also span more than one window if the -gl/global flag is used.
        In this case the collection has no parent and must be explicitly deleted with
        the 'deleteUI' command when it is no longer wanted.
        
        Flags:
        - collectionItemArray : cia      (bool)          [query]
            Returns a string list giving the long names of all the items in this collection.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - gl : gl                        (bool)          [create,query]
            Set the collection to have no parent layout.  This flag must be specified when
            the collection is created and can not be queried or edited.  Consequently,
            global collections must be explicitly deleted.
        
        - numberOfCollectionItems : nci  (bool)          [query]
            Returns the number of items that are in this collection.
        
        - parent : p                     (unicode)       [create]
            Specify the parent to associate the collection with.  The collection will be
            deleted along with the parent.  This flag must be specified when the collection
            is created and can not be edited.
        
        - select : sl                    (unicode)       [create,query,edit]
            Select the specified collection item.  If queried will return the name of the
            currently selected collection item.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.toolCollection`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ScriptTable(PyUI):
    def afterCellChangedCmd(self, val='True', **kwargs):
        """
        Sets the script to call after the value of a cell has been changed. The procedure is called with 2 integer arguments specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into that cell. The procedure does not need to return any value. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form: global proc procedureName(int $row, int $column, string $value) 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def cellBackgroundColorCommand(self, val='True', **kwargs):
        """
        Sets the script to call when it requires the background color of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return an array of ints which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form: global proc int[] procedureName(int $row, int $column) { return {255,0,0}; // return Red as cell background color } 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def cellChangedCmd(self, val='True', **kwargs):
        """
        Sets the script to call when somebody has changed the value of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into that cell. The procedure should return an integer value which indicates whether that value should be accepted (return 1 if yes, and 0 if no). The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form: global proc int procedureName(int $row, int $column, string $value) 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def cellForegroundColorCommand(self, val='True', **kwargs):
        """
        Sets the script to call when it requires the foreground color of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return an array of ints which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form: global proc int[] procedureName(int $row, int $column) { return {0,0,0}; // return Black as Text color } 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def clearRow(self, val='True', **kwargs):
        """
        Clear the contents for all the cells on the specified row. Any procedure specified by the -gcc flag will be called to populate the cleared cells The row number is 1-based (i.e. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def clearTable(self, val='True', **kwargs):
        """
        Clears the contents of all the cells in the table. Any procedure specified by the -gcc flag will be called to populate the cleared cells                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def columnFilter(self, val='True', **kwargs):
        """
        Filter the specified column with the string value provided. Set filter to columns 0 will apply the filter to all columns. The filter is case insensitive and support wildcards. Wildcard Matching: Wildcard matching is much simpler than full regexps and has only four features: c    Any character represents itself apart from those mentioned below. Thus c matches the character c. ?     Matches any single character. It is the same as . in full regexps. \*   Matches zero or more of any characters. It is the same as .\* in full regexps. [...]    Sets of characters can be represented in square brackets, similar to full regexps. Within the character class, backslash has no special meaning. (i.e. you can search for MyValuewith y\*uor ??Val??or [MyThe]Valueor any letters in MyValueThe column number is 1-based (i.e. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Set the width of the specified column The column number is 1-based (ie. the first column is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def deleteRow(self, val='True', **kwargs):
        """
        Delete the specified row The row number is 1-based (i.e. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getCellCmd(self, val='True', **kwargs):
        """
        Sets the script to call when it requires the contents of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return a string which is the value for the cell. The row and column numbers passed in are 1-based (ie. (1,1) is the upper left cell). The procedure should be of the form: global proc string procedureName(int $row, int $column) 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getCellIndex(self, **kwargs):
        """
        used with cellValue , to give the index of row and column This flag and its argument must be passed to the command before the -q flag (see examples).       
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getCellValue(self, **kwargs):
        """
        query and set the cell value on the table by the index of row and column referred in flag -cellIndex.In edit mode, if flag -multiEditEnabled is True and any cell is selected, the flag -cellIndex is not used and the selected cells will be changed.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getColumns(self, **kwargs):
        """
        Set the number of columns in the table                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the table. By default, this flag is set to true, and the table can be edited. If false, then the table is 'read only' and cannot be typed into.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getExcludingHeaders(self, **kwargs):
        """
        when querying the count for the rows or the columns , the number returned will not include the headers                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getMultiEditEnabled(self, **kwargs):
        """
        True: scriptTable support multi-editing function                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getRowHeight(self, **kwargs):
        """
        Sets the height for each row in the scriptTable                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getRows(self, **kwargs):
        """
        Set the number of rows in the table                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectedCells(self, **kwargs):
        """
        Select the cells or return  the cells currently selected. This returns a list of indices, the first of each pair is the row, the second is the column, repeated for each cell selected The returned cell numbers are 1-based (ie. the first row is 1 not 0, the first column is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectedColumns(self, **kwargs):
        """
        select the columns or return the columns currently selected. This returns a list of indices of each column completely selected The returned column numbers are 1-based                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectedRow(self, **kwargs):
        """
        The current row selected. The returned row number is 1-based (ie. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectedRows(self, **kwargs):
        """
        In edit mode, select the rows given as argument. In query mode, return a list of indices of completely selected rows. The row numbers are 1-based                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectionBehavior(self, **kwargs):
        """
        Set the selection behavior, valid values are from 0 to 2 (inclusive) 0 - Selecting single items. 1 - Selecting only rows. 2 - Selecting only columns.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSelectionMode(self, **kwargs):
        """
        Set the selection Mode, valid values are from 0 to 4 (inclusive)0 - Items cannot be selected.1 - When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it.2 - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.3 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.4 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getSortEnabled(self, **kwargs):
        """
        enable scriptTable sorted by column default value is false and the whole row will be sorted                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getUnderPointerColumn(self, **kwargs):
        """
        The column under the pointer. The returned column number is 1-based (i.e. the first column is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getUnderPointerRow(self, **kwargs):
        """
        The row under the pointer. The returned row number is 1-based (i.e. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getUseDoubleClickEdit(self, **kwargs):
        """
        this controls the cell edit modeFalse: Click in the cell to select (in Row selection, the last cell of the row is edited, in Column selection, the last cell of the column is edited)(default) True:  Clicked in cell is edited when double-clicked only                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def insertRow(self, val='True', **kwargs):
        """
        Insert an empty row before the specified row. Any procedure specified by the -gcc flag will be called to populate the new new cells. The row number is 1-based (i.e. the first row is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def label(self, val='True', **kwargs):
        """
        Set the label of the specified column. The column number is 1-based (ie. the first column is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def rowsRemovedCmd(self, val='True', **kwargs):
        """
        Sets the script to call after rows are removed by pressing 'delete' or 'backspace' key. The procedure is called with one argument specifying that selected rows have been removed. The rows passed in are 1-based. The procedure should be of the form: global proc procedureName(int $rows[]) 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def rowsToBeRemovedCmd(self, val='True', **kwargs):
        """
        Sets the script to call when 'delete' or 'backspace' key is pressed. The procedure is called with one argument specifying the selected rows to be removed. The procedure should return an integer value which indicates whether the selected rows should be removed (return 1 if yes, and 0 if no). The rows passed in are 1-based. The procedure should be of the form: global proc int procedureName(int $rows[]) 
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def selectionChangedCmd(self, val='True', **kwargs):
        """
        Sets the script to call when a complete selection operation triggered by the user has occurred successfully. The script does not pass any parameters and does not need to return any value (i.e. It is simply a notification mechanism).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setCellIndex(self, val='True', **kwargs):
        """
        used with cellValue , to give the index of row and column This flag and its argument must be passed to the command before the -q flag (see examples).       
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setCellValue(self, val='True', **kwargs):
        """
        query and set the cell value on the table by the index of row and column referred in flag -cellIndex.In edit mode, if flag -multiEditEnabled is True and any cell is selected, the flag -cellIndex is not used and the selected cells will be changed.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setColumns(self, val='True', **kwargs):
        """
        Set the number of columns in the table                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the table. By default, this flag is set to true, and the table can be edited. If false, then the table is 'read only' and cannot be typed into.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setMultiEditEnabled(self, val='True', **kwargs):
        """
        True: scriptTable support multi-editing function                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setRowHeight(self, val='True', **kwargs):
        """
        Sets the height for each row in the scriptTable                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setRows(self, val='True', **kwargs):
        """
        Set the number of rows in the table                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSelectedCells(self, val='True', **kwargs):
        """
        Select the cells or return  the cells currently selected. This returns a list of indices, the first of each pair is the row, the second is the column, repeated for each cell selected The returned cell numbers are 1-based (ie. the first row is 1 not 0, the first column is 1 not 0).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSelectedColumns(self, val='True', **kwargs):
        """
        select the columns or return the columns currently selected. This returns a list of indices of each column completely selected The returned column numbers are 1-based                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSelectedRows(self, val='True', **kwargs):
        """
        In edit mode, select the rows given as argument. In query mode, return a list of indices of completely selected rows. The row numbers are 1-based                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSelectionBehavior(self, val='True', **kwargs):
        """
        Set the selection behavior, valid values are from 0 to 2 (inclusive) 0 - Selecting single items. 1 - Selecting only rows. 2 - Selecting only columns.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSelectionMode(self, val='True', **kwargs):
        """
        Set the selection Mode, valid values are from 0 to 4 (inclusive)0 - Items cannot be selected.1 - When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it.2 - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.3 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.4 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setSortEnabled(self, val='True', **kwargs):
        """
        enable scriptTable sorted by column default value is false and the whole row will be sorted                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setUseDoubleClickEdit(self, val='True', **kwargs):
        """
        this controls the cell edit modeFalse: Click in the cell to select (in Row selection, the last cell of the row is edited, in Column selection, the last cell of the column is edited)(default) True:  Clicked in cell is edited when double-clicked only                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries the script table control.
        
        Flags:
        - afterCellChangedCmd : acc      (script)        [create,edit]
            Sets the script to call after the value of a cell has been changed. The
            procedure is called with 2 integer arguments specifying the row and column for
            which the value was changed. The 3rd argument is the string which was entered
            into that cell. The procedure does not need to return any value. The row and
            column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The
            procedure should be of the form: global proc procedureName(int $row, int
            $column, string $value)
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - cellBackgroundColorCommand : cbc (script)        [create,edit]
            Sets the script to call when it requires the background color of a cell. The
            procedure is called with 2 integer arguments specifying the row and column for
            which the value is required. The procedure should return an array of ints which
            is the RGB color value for the cell. The row and column numbers passed in are
            1-based (i.e. (1,1) is the upper left cell). The procedure should be of the
            form: global proc int[] procedureName(int $row, int $column) { return {255,0,0};
            // return Red as cell background color }
        
        - cellChangedCmd : ccc           (script)        [create,edit]
            Sets the script to call when somebody has changed the value of a cell. The
            procedure is called with 2 integer arguments specifying the row and column for
            which the value was changed. The 3rd argument is the string which was entered
            into that cell. The procedure should return an integer value which indicates
            whether that value should be accepted (return 1 if yes, and 0 if no). The row
            and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell).
            The procedure should be of the form: global proc int procedureName(int $row, int
            $column, string $value)
        
        - cellForegroundColorCommand : cfc (script)        [create,edit]
            Sets the script to call when it requires the foreground color of a cell. The
            procedure is called with 2 integer arguments specifying the row and column for
            which the value is required. The procedure should return an array of ints which
            is the RGB color value for the cell. The row and column numbers passed in are
            1-based (i.e. (1,1) is the upper left cell). The procedure should be of the
            form: global proc int[] procedureName(int $row, int $column) { return {0,0,0};
            // return Black as Text color }
        
        - cellIndex : ci                 (int, int)      [query,edit]
            used with cellValue , to give the index of row and column This flag and its
            argument must be passed to the command before the -q flag (see examples).
        
        - cellValue : cv                 (unicode)       [query,edit]
            query and set the cell value on the table by the index of row and column
            referred in flag -cellIndex.In edit mode, if flag -multiEditEnabled is True and
            any cell is selected, the flag -cellIndex is not used and the selected cells
            will be changed.
        
        - clearRow : cr                  (int)           [edit]
            Clear the contents for all the cells on the specified row. Any procedure
            specified by the -gcc flag will be called to populate the cleared cells The row
            number is 1-based (i.e. the first row is 1 not 0).
        
        - clearTable : ct                (bool)          [edit]
            Clears the contents of all the cells in the table. Any procedure specified by
            the -gcc flag will be called to populate the cleared cells
        
        - columnFilter : cf              (int, unicode)  [create,edit]
            Filter the specified column with the string value provided. Set filter to
            columns 0 will apply the filter to all columns. The filter is case insensitive
            and support wildcards. Wildcard Matching: Wildcard matching is much simpler than
            full regexps and has only four features: c    Any character represents itself
            apart from those mentioned below. Thus c matches the character c. ?     Matches
            any single character. It is the same as . in full regexps. \*   Matches zero or
            more of any characters. It is the same as .\* in full regexps. [...]    Sets of
            characters can be represented in square brackets, similar to full regexps.
            Within the character class, backslash has no special meaning. (i.e. you can
            search for MyValuewith y\*uor ??Val??or [MyThe]Valueor any letters in MyValueThe
            column number is 1-based (i.e. the first row is 1 not 0).
        
        - columnWidth : cw               (int, int)      [create,edit]
            Set the width of the specified column The column number is 1-based (ie. the
            first column is 1 not 0).
        
        - columns : c                    (int)           [create,query,edit]
            Set the number of columns in the table
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteRow : dr                 (int)           [edit]
            Delete the specified row The row number is 1-based (i.e. the first row is 1 not
            0).
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the table. By default, this flag is set to true, and the table
            can be edited. If false, then the table is 'read only' and cannot be typed into.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - excludingHeaders : eh          (bool)          [query]
            when querying the count for the rows or the columns , the number returned will
            not include the headers
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - getCellCmd : gcc               (script)        [create,edit]
            Sets the script to call when it requires the contents of a cell. The procedure
            is called with 2 integer arguments specifying the row and column for which the
            value is required. The procedure should return a string which is the value for
            the cell. The row and column numbers passed in are 1-based (ie. (1,1) is the
            upper left cell). The procedure should be of the form: global proc string
            procedureName(int $row, int $column)
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - insertRow : ir                 (int)           [edit]
            Insert an empty row before the specified row. Any procedure specified by the
            -gcc flag will be called to populate the new new cells. The row number is
            1-based (i.e. the first row is 1 not 0).
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (int, unicode)  [create,edit]
            Set the label of the specified column. The column number is 1-based (ie. the
            first column is 1 not 0).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - multiEditEnabled : mee         (bool)          [create,query,edit]
            True: scriptTable support multi-editing function
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowHeight : rh                 (int)           [create,query,edit]
            Sets the height for each row in the scriptTable
        
        - rows : r                       (int)           [create,query,edit]
            Set the number of rows in the table
        
        - rowsRemovedCmd : rrc           (script)        [create,edit]
            Sets the script to call after rows are removed by pressing 'delete' or
            'backspace' key. The procedure is called with one argument specifying that
            selected rows have been removed. The rows passed in are 1-based. The procedure
            should be of the form: global proc procedureName(int $rows[])
        
        - rowsToBeRemovedCmd : rtc       (script)        [create,edit]
            Sets the script to call when 'delete' or 'backspace' key is pressed. The
            procedure is called with one argument specifying the selected rows to be
            removed. The procedure should return an integer value which indicates whether
            the selected rows should be removed (return 1 if yes, and 0 if no). The rows
            passed in are 1-based. The procedure should be of the form: global proc int
            procedureName(int $rows[])
        
        - selectedCells : sc             (int)           [query,edit]
            Select the cells or return  the cells currently selected. This returns a list of
            indices, the first of each pair is the row, the second is the column, repeated
            for each cell selected The returned cell numbers are 1-based (ie. the first row
            is 1 not 0, the first column is 1 not 0).
        
        - selectedColumns : scs          (int)           [query,edit]
            select the columns or return the columns currently selected. This returns a list
            of indices of each column completely selected The returned column numbers are
            1-based
        
        - selectedRow : sr               (bool)          [query]
            The current row selected. The returned row number is 1-based (ie. the first row
            is 1 not 0).
        
        - selectedRows : srs             (int)           [query,edit]
            In edit mode, select the rows given as argument. In query mode, return a list of
            indices of completely selected rows. The row numbers are 1-based
        
        - selectionBehavior : sb         (int)           [create,query,edit]
            Set the selection behavior, valid values are from 0 to 2 (inclusive) 0 -
            Selecting single items. 1 - Selecting only rows. 2 - Selecting only columns.
        
        - selectionChangedCmd : scc      (script)        [create,edit]
            Sets the script to call when a complete selection operation triggered by the
            user has occurred successfully. The script does not pass any parameters and does
            not need to return any value (i.e. It is simply a notification mechanism).
        
        - selectionMode : sm             (int)           [create,query,edit]
            Set the selection Mode, valid values are from 0 to 4 (inclusive)0 - Items cannot
            be selected.1 - When the user selects an item, any already-selected item becomes
            unselected, and the user cannot unselect the selected item by clicking on it.2 -
            When the user selects an item in the usual way, the selection status of that
            item is toggled and the other items are left alone. Multiple items can be
            toggled by dragging the mouse over them.3 - When the user selects an item in the
            usual way, the selection is cleared and the new item selected. However, if the
            user presses the Ctrl key when clicking on an item, the clicked item gets
            toggled and all other items are left untouched. If the user presses the Shift
            key while clicking on an item, all items between the current item and the
            clicked item are selected or unselected, depending on the state of the clicked
            item. Multiple items can be selected by dragging the mouse over them.4 - When
            the user selects an item in the usual way, the selection is cleared and the new
            item selected. However, if the user presses the Shift key while clicking on an
            item, all items between the current item and the clicked item are selected or
            unselected, depending on the state of the clicked item.
        
        - sortEnabled : se               (bool)          [create,query,edit]
            enable scriptTable sorted by column default value is false and the whole row
            will be sorted
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - underPointerColumn : upc       (bool)          [query]
            The column under the pointer. The returned column number is 1-based (i.e. the
            first column is 1 not 0).
        
        - underPointerRow : upr          (bool)          [query]
            The row under the pointer. The returned row number is 1-based (i.e. the first
            row is 1 not 0).
        
        - useDoubleClickEdit : udc       (bool)          [create,query,edit]
            this controls the cell edit modeFalse: Click in the cell to select (in Row
            selection, the last cell of the row is edited, in Column selection, the last
            cell of the column is edited)(default) True:  Clicked in cell is edited when
            double-clicked only
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.scriptTable`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IconTextCheckBox(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getDisabledImage(self, **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getFlat(self, **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getFlipX(self, **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getFlipY(self, **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getHighlightImage(self, **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getImage(self, **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getImage1(self, **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getImage2(self, **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getImage3(self, **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getImageOverlayLabel(self, **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getLabelOffset(self, **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getOffCommand(self, **kwargs):
        """
        Command executed when the control is turned off.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getOnCommand(self, **kwargs):
        """
        Command executed when the control is turned on.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getOverlayLabelBackColor(self, **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getOverlayLabelColor(self, **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getRotation(self, **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getSelectionHighlightImage(self, **kwargs):
        """
        Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getSelectionImage(self, **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getStyle(self, **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getUseAlpha(self, **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getValue(self, **kwargs):
        """
        Sets or returns the state of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center. By default, the label is aligned center. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setDisabledImage(self, val='True', **kwargs):
        """
        Image used when the button is disabled. Image size must be the same as the image specified with the i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setFlat(self, val='True', **kwargs):
        """
        Sets whether the control will be a flat button (0 false, 1 true).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setFlipX(self, val='True', **kwargs):
        """
        Is the image flipped horizontally?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setFlipY(self, val='True', **kwargs):
        """
        Is the image flipped vertically?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setHighlightImage(self, val='True', **kwargs):
        """
        Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        If you are not providing images with different sizes then you may use this flag for the control's image. If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setImage1(self, val='True', **kwargs):
        """
        First of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setImage2(self, val='True', **kwargs):
        """
        Second of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setImage3(self, val='True', **kwargs):
        """
        Third of three possible icons. The icon that best fits the current size of the control will be displayed.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setImageOverlayLabel(self, val='True', **kwargs):
        """
        A short string, up to 6 characters, representing a label that will be displayed on top of the image.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The text that appears in the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setLabelOffset(self, val='True', **kwargs):
        """
        The label offset. Default is 0. Currently only available when -st/style is set to iconAndTextCentered.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        The number of pixels above and below the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        The number of pixels on either side of the control content. The default value is 1 pixel.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setOffCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned off.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setOnCommand(self, val='True', **kwargs):
        """
        Command executed when the control is turned on.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setOverlayLabelBackColor(self, val='True', **kwargs):
        """
        The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setOverlayLabelColor(self, val='True', **kwargs):
        """
        The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setRotation(self, val='True', **kwargs):
        """
        The rotation value of the image in radians.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setSelectionHighlightImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setSelectionImage(self, val='True', **kwargs):
        """
        Image displayed while the control is selected. Image size must be the same as the image specified with the -i/imageflag. This is a Windows only flag.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        The draw style of the control.  Valid styles are iconOnly, textOnly, iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note: iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set, the icon will be scaled to the size of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setUseAlpha(self, val='True', **kwargs):
        """
        Is the image using alpha channel?                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Sets or returns the state of the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This control supports up to 3 icon images and 4 different display styles.  The
        icon image displayed is the one that best fits the current size of the control
        given its current style. This command creates an iconTextCheckBox.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center. By default,
            the label is aligned center. Currently only available when -st/style is set to
            iconAndTextCentered.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,query,edit]
            Command executed when the control's state is changed. Note that this flag should
            not be used in conjunction with onCommand and offCommand. That is, one should
            either use changeCommand and test the state of the control from inside the
            callback, or use onCommand and offCommand as separate callbacks.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - disabledImage : di             (unicode)       [create,query,edit]
            Image used when the button is disabled. Image size must be the same as the image
            specified with the i/imageflag. This is a Windows only flag.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - flat : fla                     (bool)          [create,query,edit]
            Sets whether the control will be a flat button (0 false, 1 true).
        
        - flipX : fx                     (bool)          [create,query,edit]
            Is the image flipped horizontally?
        
        - flipY : fy                     (bool)          [create,query,edit]
            Is the image flipped vertically?
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - highlightImage : hi            (unicode)       [create,query,edit]
            Highlight image displayed while the cursor is over the control. Image size must
            be the same as the image specified with the -i/imageflag. This is a Windows only
            flag.
        
        - image : i                      (unicode)       [create,query,edit]
            If you are not providing images with different sizes then you may use this flag
            for the control's image. If the iconOnlystyle is set, the icon will be scaled to
            the size of the control.
        
        - image1 : i1                    (unicode)       [create,query,edit]
            First of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image2 : i2                    (unicode)       [create,query,edit]
            Second of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - image3 : i3                    (unicode)       [create,query,edit]
            Third of three possible icons. The icon that best fits the current size of the
            control will be displayed.
        
        - imageOverlayLabel : iol        (unicode)       [create,query,edit]
            A short string, up to 6 characters, representing a label that will be displayed
            on top of the image.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The text that appears in the control.
        
        - labelOffset : lo               (int)           [create,query,edit]
            The label offset. Default is 0. Currently only available when -st/style is set
            to iconAndTextCentered.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2013, 2014). Currently only accepts major version numbers (e.g.
            2013 Ext 1, or 2013.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            The number of pixels above and below the control content. The default value is 1
            pixel.
        
        - marginWidth : mw               (int)           [create,query,edit]
            The number of pixels on either side of the control content. The default value is
            1 pixel.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,query,edit]
            Command executed when the control is turned off.
        
        - onCommand : onc                (script)        [create,query,edit]
            Command executed when the control is turned on.
        
        - overlayLabelBackColor : olb    (float, float, float, float) [create,query,edit]
            The RGBA color of the shadow behind the label defined by imageOverlayLabel.
            Default is 50% transparent black: 0 0 0 .5
        
        - overlayLabelColor : olc        (float, float, float) [create,query,edit]
            The RGB color of the label defined by imageOverlayLabel. Default is a light
            grey: .8 .8 .8
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rotation : rot                 (float)         [create,query,edit]
            The rotation value of the image in radians.
        
        - selectionHighlightImage : shi  (unicode)       [create,query,edit]
            Image displayed while the control is selected and the cursor is over the
            control. Image size must be the same as the image specified with the
            -i/imageflag. This is a Windows only flag.
        
        - selectionImage : si            (unicode)       [create,query,edit]
            Image displayed while the control is selected. Image size must be the same as
            the image specified with the -i/imageflag. This is a Windows only flag.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            The draw style of the control.  Valid styles are iconOnly, textOnly,
            iconAndTextHorizontal, iconAndTextVertical, and iconAndTextCentered. (Note:
            iconAndTextCenteredis only available on Windows). If the iconOnlystyle is set,
            the icon will be scaled to the size of the control.
        
        - useAlpha : ua                  (bool)          [create,query,edit]
            Is the image using alpha channel?
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (bool)          [create,query,edit]
            Sets or returns the state of the control.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this control feature was introduced. The argument
            should be given as a string of the version number (e.g. 2013, 2014). Currently
            only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given
            as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.iconTextCheckBox`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CmdScrollFieldReporter(PyUI):
    def clear(self, val='True', **kwargs):
        """
        Clears the field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def copySelection(self, val='True', **kwargs):
        """
        Copies the current selection from this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def cutSelection(self, val='True', **kwargs):
        """
        Cuts the current selection from this field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getEchoAllCommands(self, **kwargs):
        """
        Echo all commands.    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getFilterSourceType(self, **kwargs):
        """
        Filters the specified source type from showing in this command reporter. Currently supports either mel, python, or (default). Setting the filter to the empty string () will remove all filtering and show both meland pythonresults.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getHasFocus(self, **kwargs):
        """
        Whether this control is currently in focus.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getLineNumbers(self, **kwargs):
        """
        Show line numbers (in Error/Warning messages).    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getStackTrace(self, **kwargs):
        """
        Show stack trace.    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getSuppressErrors(self, **kwargs):
        """
        Suppress errors.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getSuppressInfo(self, **kwargs):
        """
        Suppress info.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getSuppressResults(self, **kwargs):
        """
        Suppress results.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getSuppressStackTrace(self, **kwargs):
        """
        Suppress stack trace.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getSuppressWarnings(self, **kwargs):
        """
        Suppress warnings.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getText(self, **kwargs):
        """
        Replaces the field text with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getTextLength(self, **kwargs):
        """
        The number of characters in this text field.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def pasteSelection(self, val='True', **kwargs):
        """
        Pastes text into this field at the current caret position.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def receiveFocusCommand(self, val='True', **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def saveSelection(self, val='True', **kwargs):
        """
        Prompts to save the current selection to a file. The default filename prompt will be prepended with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def saveSelectionToShelf(self, val='True', **kwargs):
        """
        Prompts to save the current selection to an item in the shelf.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def select(self, val='True', **kwargs):
        """
        Selects text within a specified range.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def selectAll(self, val='True', **kwargs):
        """
        Selects all text.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setEchoAllCommands(self, val='True', **kwargs):
        """
        Echo all commands.    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setFilterSourceType(self, val='True', **kwargs):
        """
        Filters the specified source type from showing in this command reporter. Currently supports either mel, python, or (default). Setting the filter to the empty string () will remove all filtering and show both meland pythonresults.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setLineNumbers(self, val='True', **kwargs):
        """
        Show line numbers (in Error/Warning messages).    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setStackTrace(self, val='True', **kwargs):
        """
        Show stack trace.    (Global parameter, affects all command reporters)                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setSuppressErrors(self, val='True', **kwargs):
        """
        Suppress errors.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setSuppressInfo(self, val='True', **kwargs):
        """
        Suppress info.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setSuppressResults(self, val='True', **kwargs):
        """
        Suppress results.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setSuppressStackTrace(self, val='True', **kwargs):
        """
        Suppress stack trace.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setSuppressWarnings(self, val='True', **kwargs):
        """
        Suppress warnings.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        Replaces the field text with the given string.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        A script editor reporter control used to receive and display the history of
        processed commmands.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - clear : clr                    (bool)          [create,edit]
            Clears the field.
        
        - copySelection : cp             (bool)          [create,edit]
            Copies the current selection from this field.
        
        - cutSelection : ct              (bool)          [create,edit]
            Cuts the current selection from this field.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - echoAllCommands : eac          (bool)          [create,query,edit]
            Echo all commands.    (Global parameter, affects all command reporters)
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - filterSourceType : fst         (unicode)       [create,query,edit]
            Filters the specified source type from showing in this command reporter.
            Currently supports either mel, python, or (default). Setting the filter to the
            empty string () will remove all filtering and show both meland pythonresults.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - hasFocus : hf                  (bool)          [query]
            Whether this control is currently in focus.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - lineNumbers : ln               (bool)          [create,query,edit]
            Show line numbers (in Error/Warning messages).    (Global parameter, affects all
            command reporters)
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - pasteSelection : pst           (bool)          [create,edit]
            Pastes text into this field at the current caret position.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (script)        [create,edit]
            Command executed when the field receives focus.
        
        - saveSelection : sv             (unicode)       [create,edit]
            Prompts to save the current selection to a file. The default filename prompt
            will be prepended with the given string.
        
        - saveSelectionToShelf : svs     (bool)          [create,edit]
            Prompts to save the current selection to an item in the shelf.
        
        - select : sl                    (int, int)      [create,edit]
            Selects text within a specified range.
        
        - selectAll : sla                (bool)          [create,edit]
            Selects all text.
        
        - stackTrace : st                (bool)          [create,query,edit]
            Show stack trace.    (Global parameter, affects all command reporters)
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - suppressErrors : se            (bool)          [create,query,edit]
            Suppress errors.
        
        - suppressInfo : si              (bool)          [create,query,edit]
            Suppress info.
        
        - suppressResults : sr           (bool)          [create,query,edit]
            Suppress results.
        
        - suppressStackTrace : sst       (bool)          [create,query,edit]
            Suppress stack trace.
        
        - suppressWarnings : sw          (bool)          [create,query,edit]
            Suppress warnings.
        
        - text : t                       (unicode)       [create,query,edit]
            Replaces the field text with the given string.
        
        - textLength : tl                (bool)          [query]
            The number of characters in this text field.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.cmdScrollFieldReporter`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Text(PyUI):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def dropRectCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the callback is of the form: global proc int[] callbackName(string $dropControl, int $x, int $y) The return value is an array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn, followed by the width and height. This functionality is currently only implemented in MEL.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getAlign(self, **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getHyperlink(self, **kwargs):
        """
        Sets the label text to be a hyperlink if the argument is true.  The label text must be a proper HTML link. In MEL, double quotes in the link will most likely have to be protected from the MEL interpreter by preceding them with a backslash.  Clicking on the link will open it in an external Web browser.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getRecomputeSize(self, **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def getWordWrap(self, **kwargs):
        """
        If true then label text is wrapped where necessary at word-breaks. If false, it is not wrapped at all. The default value of this flag is false.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setAlign(self, val='True', **kwargs):
        """
        The label alignment.  Alignment values are left, right, and center.  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned center.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setHyperlink(self, val='True', **kwargs):
        """
        Sets the label text to be a hyperlink if the argument is true.  The label text must be a proper HTML link. In MEL, double quotes in the link will most likely have to be protected from the MEL interpreter by preceding them with a backslash.  Clicking on the link will open it in an external Web browser.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The label text.  The default label is the name of the control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setRecomputeSize(self, val='True', **kwargs):
        """
        If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a simple text label control.
        
        Flags:
        - align : al                     (unicode)       [create,query,edit]
            The label alignment.  Alignment values are left, right, and center.  Note that
            the alignment will only be noticable if the control is wider than the label
            length. By default, the label is aligned center.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - dropRectCallback : drc         (script)        [edit]
            Adds a callback that is called when a drag and drop operation is hovering above
            the drop site.  It returns the shape of the rectangle to be drawn to highlight
            the entry, if the control can receive the dropped data. The MEL version of the
            callback is of the form: global proc int[] callbackName(string $dropControl, int
            $x, int $y) The return value is an array of size 4, with the parameters, in
            order, being the left and top coordinates of the rectangle to be drawn, followed
            by the width and height. This functionality is currently only implemented in
            MEL.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the text.  Valid values are boldLabelFont, smallBoldLabelFont,
            tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont,
            smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hyperlink : hl                 (bool)          [create,query,edit]
            Sets the label text to be a hyperlink if the argument is true.  The label text
            must be a proper HTML link. In MEL, double quotes in the link will most likely
            have to be protected from the MEL interpreter by preceding them with a
            backslash.  Clicking on the link will open it in an external Web browser.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            The label text.  The default label is the name of the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - recomputeSize : rs             (bool)          [create,query,edit]
            If true then the control will recompute it's size to just fit the size of the
            label.  If false then the control size will remain fixed as you change the size
            of the label.  The default value of this flag is true.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.
        
        - wordWrap : ww                  (bool)          [create,query]
            If true then label text is wrapped where necessary at word-breaks. If false, it
            is not wrapped at all. The default value of this flag is false.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.text`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IntField(PyUI):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/valueflag.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the invisible slider.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def enterCommand(self, val='True', **kwargs):
        """
        Command executed when the keypad 'Enter' key is pressed.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The value of the field can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Upper limit of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Lower limit of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getStep(self, **kwargs):
        """
        Increment for the invisible slider.  The field value will change by this amount when the invisible slider is dragged.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def receiveFocusCommand(self, val='True', **kwargs):
        """
        Command executed when the field receives focus.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The value of the field can always be changed with the -v/valueflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Upper limit of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Lower limit of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Increment for the invisible slider.  The field value will change by this amount when the invisible slider is dragged.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the field.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a field control that accepts only integer values and is bound by a
        minimum and maximum value.  An invisible slider is attached to the field and
        accessed by holding down the Ctrl modifier key while pressing one of the mouse
        buttons.  Dragging the invisible slider to the right with the middle mouse
        button increases the field value by the amount specified with the -s/stepflag,
        while dragging to the left decreases the value by the same amount.  The left and
        right mouse buttons apply a factor of 0.1 and 10 to the step value.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/valueflag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the invisible slider.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it. If false then the field is 'read only'
            and can not be typed into. The value of the field can always be changed with the
            -v/valueflag regardless of the state of the -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enterCommand : ec              (script)        [create,edit]
            Command executed when the keypad 'Enter' key is pressed.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            Upper limit of the field.
        
        - minValue : min                 (int)           [create,query,edit]
            Lower limit of the field.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - receiveFocusCommand : rfc      (script)        [create,edit]
            Command executed when the field receives focus.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (int)           [create,query,edit]
            Increment for the invisible slider.  The field value will change by this amount
            when the invisible slider is dragged.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int)           [create,query,edit]
            Value of the field.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.intField`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ConfirmDialog(PyUI):
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        The confirmDialog command creates a modal dialog with a message to the user and
        a variable number of buttons to dismiss the dialog.  The dialog is dismissed
        when the user presses any button or chooses the close item from the window menu.
        In the case where a button is pressed then the name of the button selected is
        returned.  If the dialog is dismissed via the close item then the string
        returned is specified by the dismissStringflag. The default behaviour when no
        arguments are specified is to create an empty single button dialog.
        
        Flags:
        - annotation : ann               (unicode)       [create]
            set the annotation for the buttons
        
        - backgroundColor : bgc          (float, float, float) [create]
            The background color of the dialog. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
            (Windows only flag)
        
        - button : b                     (unicode)       [create]
            Create a button with the given string as it's text.
        
        - cancelButton : cb              (unicode)       [create]
            The cancel button is activated by pressing the escape key. Note that this flag
            does not create a button, it simply indicates which button created via the
            buttonflag shall respond to the escape key.
        
        - defaultButton : db             (unicode)       [create]
            The default button is activated by pressing the enter key. Note that this flag
            does not create a button, it simply indicates which button created via the
            buttonflag shall respond to the enter key.
        
        - dismissString : ds             (unicode)       [create]
            The string returned when the user selects the 'Close' item from the Window
            Manager menu.  If this flag is not set then the string dismissis returned.
        
        - icon : icn                     (unicode)       [create]
            The user can specify one of the four standard icons -- question, information,
            warningand critical.  The question icon indicates that the messsage is asking a
            question.  The information icon indicates that the message is nothing out of the
            ordinary.  The warning icon indicates that the message is a warning, but can be
            dealt with.  The critical icon indicates that the message represents a critical
            problem. When no icon flag is present, we assume the user does not want to
            include any icon in the confirm dialog.
        
        - message : m                    (unicode)       [create]
            The message text appearing in the dialog.
        
        - messageAlign : ma              (unicode)       [create]
            Align the message left, center, or right.
        
        - parent : p                     (unicode)       [create]
            Specify the parent window for the dialog.  The dialog will be centered on this
            window and raise and lower with it's parent. By default, the dialog is not
            parented to a particular window and is simply centered on the screen.
        
        - title : t                      (unicode)       [create]
            The dialog title.                  Flag can have multiple arguments, passed
            either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.confirmDialog`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatSlider2(PyUI):
    def changeCommand1(self, val='True', **kwargs):
        """
        Command to be associated with handle 1 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 1 were to move to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def changeCommand2(self, val='True', **kwargs):
        """
        Command to be associated with handle 2 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be setAttr nurbsSphere1.txand if handle 2 were to move to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getMaximum(self, **kwargs):
        """
        Maximum limit of the slider. The default value is 10.0. The maximum value occurs at the top(right) end of the slider unless -polarity was specified. Note: you cannot set the maximum value greater than or equal to the current minimum.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getMinimum(self, **kwargs):
        """
        Minimum limit of the slider. The default value is 0.0. The minimum value occurs at the bottom end of the slider unless -polarity was specified. Note: you cannot set the minimum value greater than or equal to the current maximum.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getPolarity(self, **kwargs):
        """
        Specifies the polarity of the slider. If 0 (the default), the minimum value (specified by the -minimum flag) occurs at the bottom end of the slider and maximum at the top(right), with values increasing as the slider handles are moved towards the upper end of the slider. If the polarity is specified as 1, the reverse behaviour occurs, with the maximum occurring at the bottom end, the mimimum occuring at the top(right) end and values decreasing as the handles are moved towards the upper end.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getValue1(self, **kwargs):
        """
        Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getValue2(self, **kwargs):
        """
        Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def positionControl1(self, val='True', **kwargs):
        """
        Set the name of the control (if any) which is associated with handle 1 of this slider. The control must be a floatField. The control always displays the value of the handle, and is updated as the handle moves.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def positionControl2(self, val='True', **kwargs):
        """
        Set the name of the control (if any) which is associated with handle 2 of this slider. The control must be a floatField. The control always displays the value of the handle, and is updated as the handle moves.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setMaximum(self, val='True', **kwargs):
        """
        Maximum limit of the slider. The default value is 10.0. The maximum value occurs at the top(right) end of the slider unless -polarity was specified. Note: you cannot set the maximum value greater than or equal to the current minimum.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setMinimum(self, val='True', **kwargs):
        """
        Minimum limit of the slider. The default value is 0.0. The minimum value occurs at the bottom end of the slider unless -polarity was specified. Note: you cannot set the minimum value greater than or equal to the current maximum.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setPolarity(self, val='True', **kwargs):
        """
        Specifies the polarity of the slider. If 0 (the default), the minimum value (specified by the -minimum flag) occurs at the bottom end of the slider and maximum at the top(right), with values increasing as the slider handles are moved towards the upper end of the slider. If the polarity is specified as 1, the reverse behaviour occurs, with the maximum occurring at the bottom end, the mimimum occuring at the top(right) end and values decreasing as the handles are moved towards the upper end.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setValue1(self, val='True', **kwargs):
        """
        Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setValue2(self, val='True', **kwargs):
        """
        Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    def values(self, val='True', **kwargs):
        """
        Sets the value for handles 1 and 2 simulteneously. The first argument is applied to handle 1 and must be less than or equal to the second (handle 2) argument or an error will be issued.                  
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a float slider containing two handles. The two handles are
        arranged such that they cannot pass one another, thus handle 1 will always have
        a value less than or or equal to handle 2 when you adjust the values. Each
        handle may have a MEL command associated with it which is issued when the handle
        moves and thus can be used to update the values of plugs such as via a setAttr
        command. Each handle can also be associated with a float textfield to display
        the current value of the handle. Note: the floatSlider2 widget currently only
        supports vertical (columnLayout) orientation.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand1 : cc1           (unicode)       [create,edit]
            Command to be associated with handle 1 and issued whenever the value of the
            handle is changed (except when values are changed via the -hv/handleValue flag).
            An example command might be setAttr nurbsSphere1.txand if handle 1 were to move
            to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.
        
        - changeCommand2 : cc2           (unicode)       [create,edit]
            Command to be associated with handle 2 and issued whenever the value of the
            handle is changed (except when values are changed via the -hv/handleValue flag).
            An example command might be setAttr nurbsSphere1.txand if handle 2 were to move
            to value 0.23 the slider would issue the command setAttr nurbsSphere1.tx 0.23;.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maximum : max                  (float)         [create,query,edit]
            Maximum limit of the slider. The default value is 10.0. The maximum value occurs
            at the top(right) end of the slider unless -polarity was specified. Note: you
            cannot set the maximum value greater than or equal to the current minimum.
        
        - minimum : min                  (float)         [create,query,edit]
            Minimum limit of the slider. The default value is 0.0. The minimum value occurs
            at the bottom end of the slider unless -polarity was specified. Note: you cannot
            set the minimum value greater than or equal to the current maximum.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - polarity : pol                 (int)           [create,query,edit]
            Specifies the polarity of the slider. If 0 (the default), the minimum value
            (specified by the -minimum flag) occurs at the bottom end of the slider and
            maximum at the top(right), with values increasing as the slider handles are
            moved towards the upper end of the slider. If the polarity is specified as 1,
            the reverse behaviour occurs, with the maximum occurring at the bottom end, the
            mimimum occuring at the top(right) end and values decreasing as the handles are
            moved towards the upper end.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - positionControl1 : pc1         (unicode)       [create,edit]
            Set the name of the control (if any) which is associated with handle 1 of this
            slider. The control must be a floatField. The control always displays the value
            of the handle, and is updated as the handle moves.
        
        - positionControl2 : pc2         (unicode)       [create,edit]
            Set the name of the control (if any) which is associated with handle 2 of this
            slider. The control must be a floatField. The control always displays the value
            of the handle, and is updated as the handle moves.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value1 : v1                    (float)         [create,query,edit]
            Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error
            will occur if the value specified is too large. If you wish to set both handles
            simultaneously, use the -values flag.
        
        - value2 : v2                    (float)         [create,query,edit]
            Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error
            will occur if the value specified is too large. If you wish to set both handles
            simultaneously, use the -values flag.
        
        - values : vs                    (float, float)  [create,edit]
            Sets the value for handles 1 and 2 simulteneously. The first argument is applied
            to handle 1 and must be less than or equal to the second (handle 2) argument or
            an error will be issued.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatSlider2`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class BlendShapePanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getBlendShapeEditor(self, **kwargs):
        """
        Query only flag that returns the name of an editor to be associated with the panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a panel that derives from the base panel class that houses
        a blendShapeEditor.
        
        Flags:
        - blendShapeEditor : be          (bool)          [query]
            Query only flag that returns the name of an editor to be associated with the
            panel.
        
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.blendShapePanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Window(PyUIContainer):
    """
    pymel window class
    """
    
    
    
    def __exit__(self, type, value, traceback): ...
    def asQtObject(mayaName):
        """
        Given the name of a May UI control, return the corresponding QWidget.
        If the object does not exist, returns None
        
        .. note:: Requires PySide
        """
        ...
    def backgroundColor(self, val='True', **kwargs):
        """
        The background color of the window. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def children(self): ...
    def closeCommand(self, val='True', **kwargs):
        """
        Script executed after the window is closed.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def delete(self): ...
    def getChildren(self): ...
    def getDocTag(self, **kwargs):
        """
        Attach a tag to the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getDockingLayout(self, **kwargs):
        """
        When queried this flag will return a string holding the docking layout information. This string can be set when creating or editing a docking station to restore the previous docking layout. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore layouts across sessions of Maya.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getFrontWindow(self, **kwargs):
        """
        Return the name of the front window.  Note: you must supply the name of any window (the window does not need to exist). Returns unknownif the front window cannot be determined.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getHeight(self, **kwargs):
        """
        Height of the window excluding any window frame in pixels.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getIconName(self, **kwargs):
        """
        The window's icon title.  By default it is the same as the window's title.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getIconify(self, **kwargs):
        """
        Icon state of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getLeftEdge(self, **kwargs):
        """
        Position of the left edge of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMainMenuBar(self, **kwargs):
        """
        If this flag is used then the main menu bar will be enabled.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMainWindow(self, **kwargs):
        """
        Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first created window becomes the main window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMaximizeButton(self, **kwargs):
        """
        Turns the window's maximize button on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMenuArray(self, **kwargs):
        """
        Return a string array containing the names of the menus in the window's menu bar.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMenuBar(self, **kwargs):
        """
        Adds an empty menu bar to the window. The Qt name of the object will be m_menubar_nameOfTheWindow.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMenuBarCornerWidget(self, **kwargs):
        """
        This flag specifies a widget to add to a corner of the parent window. The first argument corresponds to the widget name and the second to the position of the widget. Possible values for widget position are topLeft, topRight, bottomLeft, bottomRight. In query mode this flag returns all the corner widget names in the following order: topLeft, topRight, bottomLeft, bottomRight. Add the -mbr/-menuBarResizeflag to the changeCommandof widget passed (first argument) so that it will always have an appropriate size.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Visibility of the menu bar (if there is one).                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getMinimizeButton(self, **kwargs):
        """
        Turns the window's minimize button on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getNumberOfMenus(self, **kwargs):
        """
        Return the number of menus attached to the window's menu bar.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getParent(self): ...
    def getResizeToFitChildren(self, **kwargs):
        """
        The window will always grow/shrink to just fit the controls it contains.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getSizeable(self, **kwargs):
        """
        Whether or not the window may be interactively resized.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getState(self, **kwargs):
        """
        When queried this flag will return a string holding the window state information. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore window state across sessions of Maya.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getTitle(self, **kwargs):
        """
        The window's title.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getTitleBar(self, **kwargs):
        """
        Turns the window's title bar on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getTitleBarMenu(self, **kwargs):
        """
        Controls whether the title bar menu exists in the window title bar. Only valid if -tb/titleBaris true. This Windows only flag is true by default.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getToolbox(self, **kwargs):
        """
        Makes this a toolbox style window.  A Windows only flag that makes the title bar smaller and uses a slightly different display style.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getTopEdge(self, **kwargs):
        """
        Position of the top edge of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getTopLeftCorner(self, **kwargs):
        """
        Position of the window's top left corner.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The window's visibility.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getWidth(self, **kwargs):
        """
        Width of the window excluding any window frame in pixels.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def getWidthHeight(self, **kwargs):
        """
        Window's width and height excluding any window frame in pixels.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def layout(self): ...
    def menuBarResize(self, val='True', **kwargs):
        """
        This flag should be used with the -mcw/-menuBarCornerWidgetflag. This is used to resize the menu bar so that the corner widgets are updated.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def menuIndex(self, val='True', **kwargs):
        """
        Sets the index of a specified menu.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def minimizeCommand(self, val='True', **kwargs):
        """
        Script executed after the window is minimized (iconified).                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def parent(self): ...
    def restoreCommand(self, val='True', **kwargs):
        """
        Script executed after the window is restored from it's minimized (iconified) state.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attach a tag to the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setDockingLayout(self, val='True', **kwargs):
        """
        When queried this flag will return a string holding the docking layout information. This string can be set when creating or editing a docking station to restore the previous docking layout. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore layouts across sessions of Maya.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        Height of the window excluding any window frame in pixels.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setIconName(self, val='True', **kwargs):
        """
        The window's icon title.  By default it is the same as the window's title.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setIconify(self, val='True', **kwargs):
        """
        Icon state of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setLeftEdge(self, val='True', **kwargs):
        """
        Position of the left edge of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMainMenuBar(self, val='True', **kwargs):
        """
        If this flag is used then the main menu bar will be enabled.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMainWindow(self, val='True', **kwargs):
        """
        Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first created window becomes the main window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMaximizeButton(self, val='True', **kwargs):
        """
        Turns the window's maximize button on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMenuBarCornerWidget(self, val='True', **kwargs):
        """
        This flag specifies a widget to add to a corner of the parent window. The first argument corresponds to the widget name and the second to the position of the widget. Possible values for widget position are topLeft, topRight, bottomLeft, bottomRight. In query mode this flag returns all the corner widget names in the following order: topLeft, topRight, bottomLeft, bottomRight. Add the -mbr/-menuBarResizeflag to the changeCommandof widget passed (first argument) so that it will always have an appropriate size.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Visibility of the menu bar (if there is one).                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setMinimizeButton(self, val='True', **kwargs):
        """
        Turns the window's minimize button on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setResizeToFitChildren(self, val='True', **kwargs):
        """
        The window will always grow/shrink to just fit the controls it contains.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setSizeable(self, val='True', **kwargs):
        """
        Whether or not the window may be interactively resized.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setState(self, val='True', **kwargs):
        """
        When queried this flag will return a string holding the window state information. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore window state across sessions of Maya.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setTitle(self, val='True', **kwargs):
        """
        The window's title.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setTitleBar(self, val='True', **kwargs):
        """
        Turns the window's title bar on or off.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setTitleBarMenu(self, val='True', **kwargs):
        """
        Controls whether the title bar menu exists in the window title bar. Only valid if -tb/titleBaris true. This Windows only flag is true by default.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setToolbox(self, val='True', **kwargs):
        """
        Makes this a toolbox style window.  A Windows only flag that makes the title bar smaller and uses a slightly different display style.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setTopEdge(self, val='True', **kwargs):
        """
        Position of the top edge of the window.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setTopLeftCorner(self, val='True', **kwargs):
        """
        Position of the window's top left corner.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The window's visibility.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        Width of the window excluding any window frame in pixels.                  
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def setWidthHeight(self, val='True', **kwargs):
        """
        Window's width and height excluding any window frame in pixels.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    def show(self): ...
    def window(self): ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a new window but leaves it invisible. It is most efficient
        to add the window's elements and then make it visible with the showWindow
        command. The window can have an optional menu bar. Also, the title bar and
        minimize/maximize buttons can be turned on or off. If the title bar is off, then
        you cannot have minimize or maximize buttons. Note: The window will require a
        control layout of some kind to arrange the controls (buttons, sliders, fields,
        etc.).  Examples of control layouts are columnLayout, formLayout, rowLayout,
        etc. Note: This command will clear the uiTemplate stack.  Templates for a window
        need to be set after the window cmd.
        
        Flags:
        - backgroundColor : bgc          (float, float, float) [create,edit]
            The background color of the window. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - closeCommand : cc              (script)        [create,edit]
            Script executed after the window is closed.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attach a tag to the window.
        
        - dockCorner : dc                (unicode, unicode) [create]
            Specifies which docking areas occupied the four different corners of the window.
            By default docking windows on the bottom or top will span the whole window. Use
            multiple instances of this flag to allow the left and right docking areas to
            occupy the corners. This method has two arguments: docking corner and docking
            area. Possible values for docking corner are topLeft, topRight, bottomLeft, and
            bottomRight. Possible values for docking area are left, right, top, and bottom.
        
        - dockStation : ds               (bool)          [create]
            When set this flag specifies that this window can contain other docked sub-
            windows.
        
        - dockingLayout : dl             (unicode)       [create,query,edit]
            When queried this flag will return a string holding the docking layout
            information. This string can be set when creating or editing a docking station
            to restore the previous docking layout. This string is a hexadecimal
            representation of a binary string and is not meant to be humanly readable, but
            can be saved and loaded using the optionVar command to restore layouts across
            sessions of Maya.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - frontWindow : fw               (bool)          [query]
            Return the name of the front window.  Note: you must supply the name of any
            window (the window does not need to exist). Returns unknownif the front window
            cannot be determined.
        
        - height : h                     (int)           [create,query,edit]
            Height of the window excluding any window frame in pixels.
        
        - iconName : iconName            (unicode)       [create,query,edit]
            The window's icon title.  By default it is the same as the window's title.
        
        - iconify : i                    (bool)          [create,query,edit]
            Icon state of the window.
        
        - interactivePlacement : ip      (bool)          [create]
            Deprecated flag. Recognized but not implemented. This flag will be removed in a
            future version of Maya.
        
        - leftEdge : le                  (int)           [create,query,edit]
            Position of the left edge of the window.
        
        - mainMenuBar : mm               (bool)          [create,query,edit]
            If this flag is used then the main menu bar will be enabled.
        
        - mainWindow : mw                (bool)          [create,query,edit]
            Main window for the application.  The main window has an 'Exit' item in the
            Window Manager menu.  By default, the first created window becomes the main
            window.
        
        - maximizeButton : mxb           (bool)          [create,query,edit]
            Turns the window's maximize button on or off.
        
        - menuArray : ma                 (bool)          [query]
            Return a string array containing the names of the menus in the window's menu
            bar.
        
        - menuBar : mb                   (bool)          [create,query]
            Adds an empty menu bar to the window. The Qt name of the object will be
            m_menubar_nameOfTheWindow.
        
        - menuBarCornerWidget : mcw      (unicode, unicode) [query,edit]
            This flag specifies a widget to add to a corner of the parent window. The first
            argument corresponds to the widget name and the second to the position of the
            widget. Possible values for widget position are topLeft, topRight, bottomLeft,
            bottomRight. In query mode this flag returns all the corner widget names in the
            following order: topLeft, topRight, bottomLeft, bottomRight. Add the
            -mbr/-menuBarResizeflag to the changeCommandof widget passed (first argument) so
            that it will always have an appropriate size.
        
        - menuBarResize : mbr            (bool)          [edit]
            This flag should be used with the -mcw/-menuBarCornerWidgetflag. This is used to
            resize the menu bar so that the corner widgets are updated.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Visibility of the menu bar (if there is one).
        
        - menuIndex : mi                 (unicode, int)  [edit]
            Sets the index of a specified menu.
        
        - minimizeButton : mnb           (bool)          [create,query,edit]
            Turns the window's minimize button on or off.
        
        - minimizeCommand : mnc          (script)        [create,edit]
            Script executed after the window is minimized (iconified).
        
        - nestedDockingEnabled : nde     (bool)          [create]
            Controls whether nested docking is enabled or not.  Nested docking allows for
            docking windows next to other docked windows for more possible arrangement
            styles.
        
        - numberOfMenus : nm             (bool)          [query]
            Return the number of menus attached to the window's menu bar.
        
        - parent : p                     (unicode)       [create]
            Specifies a parent window or layout which the created window is always on top
            of. Note: If the parent is a window the created window is not modal, so events
            are still propagated to the parent window.
        
        - resizeToFitChildren : rtf      (bool)          [create,query,edit]
            The window will always grow/shrink to just fit the controls it contains.
        
        - restoreCommand : rc            (script)        [create,edit]
            Script executed after the window is restored from it's minimized (iconified)
            state.
        
        - retain : ret                   (bool)          [create]
            Retains the window after it has been closed.  The default is to delete the
            window when it is closed.
        
        - sizeable : s                   (bool)          [create,query,edit]
            Whether or not the window may be interactively resized.
        
        - state : st                     (unicode)       [create,query,edit]
            When queried this flag will return a string holding the window state
            information. This string is a hexadecimal representation of a binary string and
            is not meant to be humanly readable, but can be saved and loaded using the
            optionVar command to restore window state across sessions of Maya.
        
        - title : t                      (unicode)       [create,query,edit]
            The window's title.
        
        - titleBar : tb                  (bool)          [create,query,edit]
            Turns the window's title bar on or off.
        
        - titleBarMenu : tbm             (bool)          [create,query,edit]
            Controls whether the title bar menu exists in the window title bar. Only valid
            if -tb/titleBaris true. This Windows only flag is true by default.
        
        - toolbox : tlb                  (bool)          [create,query,edit]
            Makes this a toolbox style window.  A Windows only flag that makes the title bar
            smaller and uses a slightly different display style.
        
        - topEdge : te                   (int)           [create,query,edit]
            Position of the top edge of the window.
        
        - topLeftCorner : tlc            (int, int)      [create,query,edit]
            Position of the window's top left corner.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The window's visibility.
        
        - width : w                      (int)           [create,query,edit]
            Width of the window excluding any window frame in pixels.
        
        - widthHeight : wh               (int, int)      [create,query,edit]
            Window's width and height excluding any window frame in pixels.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.window`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class HardwareRenderPanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getCamera(self, **kwargs):
        """
        Query or edit the camera in a gl render panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getGlRenderEditor(self, **kwargs):
        """
        Query only. This flag returns the name of the gl render editor contained in the panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setCamera(self, val='True', **kwargs):
        """
        Query or edit the camera in a gl render panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates, edit and queries hardware render panels which contain only
        a hardware render editor.
        
        Flags:
        - camera : cam                   (unicode)       [query,edit]
            Query or edit the camera in a gl render panel.
        
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - glRenderEditor : gre           (bool)          [query]
            Query only. This flag returns the name of the gl render editor contained in the
            panel.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.hardwareRenderPanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DynRelEdPanel(Panel):
    __melui__ : str


class SubMenuItem(Menu):
    def asQtObject(mayaName):
        """
        Given the name of a Maya UI menuItem, return the corresponding QAction.
        If the object does not exist, returns None
        
        This only works for menu items. for Menus, use toQtControl or toQtObject
        
        .. note:: Requires PySide
        """
        ...
    def getBoldFont(self): ...
    def getItalicized(self): ...


class HyperPanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getHyperEditor(self, **kwargs):
        """
        This flag returns the name of the hypergraph editor contained by the panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates, edit and queries hypergraph panels which contain only a
        hypergraph editor.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - hyperEditor : he               (bool)          [query]
            This flag returns the name of the hypergraph editor contained by the panel.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.hyperPanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class Layout(PyUIContainer):
    def asQtObject(mayaName):
        """
        Given the name of a May UI control, return the corresponding QWidget.
        If the object does not exist, returns None
        
        .. note:: Requires PySide
        """
        ...
    def children(self):
        """
        Returns
        -------
        List[PyUI]
        """
        ...
    def clear(self): ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getChildren(self):
        """
        Returns
        -------
        List[PyUI]
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command allows you to edit or query the properties of any layout. The
        argument is the name of the layout.           In query mode, return type is
        based on queried flag.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.layout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ModelPanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getBarLayout(self, **kwargs):
        """
        This flag returns the name of the layout which is the parent of the panels icon bar.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getCamera(self, **kwargs):
        """
        Query or edit the camera in a modelPanel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getModelEditor(self, **kwargs):
        """
        This flag returns the name of the model editor contained by the panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setCamera(self, val='True', **kwargs):
        """
        Query or edit the camera in a modelPanel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a panel consisting of a model editor. See the
        modelEditorcommand documentation for more information.
        
        Flags:
        - addTab : at                    (unicode)       []
        
        - barLayout : bl                 (bool)          [query]
            This flag returns the name of the layout which is the parent of the panels icon
            bar.
        
        - camera : cam                   (unicode)       [query,edit]
            Query or edit the camera in a modelPanel.
        
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - modelEditor : me               (bool)          [query]
            This flag returns the name of the model editor contained by the panel.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - removeTab : rt                 (unicode)       []
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - selectTab : st                 (unicode)       []
        
        - tabCommand : tc                (unicode, unicode) []
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.modelPanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class OutlinerPanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getOutlinerEditor(self, **kwargs):
        """
        This flag returns the name of the outliner editor contained by the panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates, edit and queries outliner panels which contain only an
        outliner editor.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - outlinerEditor : oe            (bool)          [query]
            This flag returns the name of the outliner editor contained by the panel.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.outlinerPanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ScriptedPanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def getType(self, **kwargs):
        """
        This flag specifies the type of scripted panel to create.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command will create an instance of the specified scriptedPanelType. A panel
        is a collection of UI objects (buttons, fields, graphical views) that are
        grouped together. A panel can be moved around as a group within the application
        interface, and torn off to exist in its own window. The panel takes care of
        maintaining the state of its UI when it is relocated, or recreated. A scripted
        panel is a panel that is defined in MEL, with all of the required callbacks
        available as MEL proc's.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - type : typ                     (unicode)       [create,query]
            This flag specifies the type of scripted panel to create.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.scriptedPanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class MainProgressBar(ProgressBar):
    """
    Context manager for main progress bar
    
    If an exception occur after beginProgress() but before endProgress() maya
    gui becomes unresponsive. Use this class to escape this behavior.
    
    Here's an example::
    
        with MainProgressBar(0,20,True) as bar:
            bar.setStatus('Calculating...')
            for i in range(0,20):
                bar.setProgress(i)
                if bar.getIsCancelled():
                    break
    """
    
    
    
    def __enter__(self): ...
    def __exit__(self, *args): ...
    @staticmethod
    def __new__(cls, minValue='0', maxValue='100', interruptable='True'):
        """
        Parameters
        ----------
        minValue : int
            Minimum or startingvalue of progress indicatior. If the progress
            value is less than the minValue, the progress value will be set
            to the minimum.  Default value is 0
        maxValue : int
            The maximum or endingvalue of the progress indicator. If the
            progress value is greater than the maxValue, the progress value
            will be set to the maximum. Default value is 100.
        interruptable : bool
            Set to True if the isCancelled flag should respond to attempts to
            cancel the operation. Setting this to true will put make the help
            line display message to the user indicating that they can cancel
            the operation.
        """
        ...


class PopupMenu(Menu):
    def deleteAllItems(self, val='True', **kwargs):
        """
        Delete all the items in this menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getAllowOptionBoxes(self, **kwargs):
        """
        Indicate whether the menu will be able to support option box menu items.  An error results if an option box item is added to a menu that doesn't allow them.  This flag may be queried and must be specified when the popup menu is created.  The default value is false.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getAltModifier(self, **kwargs):
        """
        Specify this flag if the Alt modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getButton(self, **kwargs):
        """
        Indicate which button posts the popup menu.  Valid values range from 1 to 3 where 1 is the left most button on the mouse.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getCtrlModifier(self, **kwargs):
        """
        Specify this flag if the Cntl modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getMarkingMenu(self, **kwargs):
        """
        Set the marking menu state of this popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getNumberOfItems(self, **kwargs):
        """
        Return number of items in the menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getPostMenuCommandOnce(self, **kwargs):
        """
        Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the popup menu is shown.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def getShiftModifier(self, **kwargs):
        """
        Specify this flag if the Shift modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def postMenuCommand(self, val='True', **kwargs):
        """
        Specify a script to be executed when the popup menu is about to be shown.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setAltModifier(self, val='True', **kwargs):
        """
        Specify this flag if the Alt modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setButton(self, val='True', **kwargs):
        """
        Indicate which button posts the popup menu.  Valid values range from 1 to 3 where 1 is the left most button on the mouse.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setCtrlModifier(self, val='True', **kwargs):
        """
        Specify this flag if the Cntl modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setMarkingMenu(self, val='True', **kwargs):
        """
        Set the marking menu state of this popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setPostMenuCommandOnce(self, val='True', **kwargs):
        """
        Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is false, ie. the -pmc/postMenuCommandis invoked every time the popup menu is shown.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    def setShiftModifier(self, val='True', **kwargs):
        """
        Specify this flag if the Shift modifier must be pressed when posting the popup menu.                  
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a popup menu and attaches it to the current control if no
        parent is specified.  The popup menu is posted with the right mouse button by
        default. Popup menus can be added to any kind of control, however, on some
        widgets, only the standard menu button (3rd mouse button) can be used to trigger
        popup menus. This is to meet generally accepted UI guidelines that assign the
        3rd mouse button and only this one to popup menus, and also to prevent
        unexpected behavior of controls like text fields, that expect 1st and 2nd button
        to be reserved for contextual operations like text or item selection...
        
        Flags:
        - allowOptionBoxes : aob         (bool)          [create,query]
            Indicate whether the menu will be able to support option box menu items.  An
            error results if an option box item is added to a menu that doesn't allow them.
            This flag may be queried and must be specified when the popup menu is created.
            The default value is false.
        
        - altModifier : alt              (bool)          [create,query,edit]
            Specify this flag if the Alt modifier must be pressed when posting the popup
            menu.
        
        - button : b                     (int)           [create,query,edit]
            Indicate which button posts the popup menu.  Valid values range from 1 to 3
            where 1 is the left most button on the mouse.
        
        - ctrlModifier : ctl             (bool)          [create,query,edit]
            Specify this flag if the Cntl modifier must be pressed when posting the popup
            menu.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteAllItems : dai           (bool)          [edit]
            Delete all the items in this menu.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - itemArray : ia                 (bool)          [query]
            Return string array of the menu item names.
        
        - markingMenu : mm               (bool)          [create,query,edit]
            Set the marking menu state of this popup menu.
        
        - numberOfItems : ni             (bool)          [query]
            Return number of items in the menu.
        
        - parent : p                     (unicode)       [create]
            Specify the control that the popup menu will appear in.
        
        - postMenuCommand : pmc          (script)        [create,edit]
            Specify a script to be executed when the popup menu is about to be shown.
        
        - postMenuCommandOnce : pmo      (bool)          [create,query,edit]
            Indicate the -pmc/postMenuCommandshould only be invoked once.  Default value is
            false, ie. the -pmc/postMenuCommandis invoked every time the popup menu is
            shown.
        
        - shiftModifier : sh             (bool)          [create,query,edit]
            Specify this flag if the Shift modifier must be pressed when posting the popup
            menu.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.popupMenu`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class DevicePanel(Panel):
    def copy(self, val='True', **kwargs):
        """
        Makes this panel a copy of the specified panel.  Both panels must be of the same type.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def createString(self, val='True', **kwargs):
        """
        Command string used to create a panel                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def editString(self, val='True', **kwargs):
        """
        Command string used to edit a panel                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getControl(self, **kwargs):
        """
        Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return if no control is present.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getIsUnique(self, **kwargs):
        """
        Returns true if only one instance of this panel type is allowed.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getMenuBarRepeatLast(self, **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getNeedsInit(self, **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getPopupMenuProcedure(self, **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def getTearOff(self, **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def init(self, val='True', **kwargs):
        """
        Initializes the panel's default state.  This is usually done automatically on file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def replacePanel(self, val='True', **kwargs):
        """
        Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Attaches a tag to the Maya panel.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Specifies the user readable label for the panel.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setMenuBarRepeatLast(self, val='True', **kwargs):
        """
        Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Controls whether the menu bar for the panel is displayed.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setNeedsInit(self, val='True', **kwargs):
        """
        (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setPopupMenuProcedure(self, val='True', **kwargs):
        """
        Specifies the procedure called for building the panel's popup menu(s). The default value is buildPanelPopupMenu.  The procedure should take one string argument which is the panel's name.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def setTearOff(self, val='True', **kwargs):
        """
        Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def tearOffRestore(self, val='True', **kwargs):
        """
        Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOffflag which should only be used to tear off the panel.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    def unParent(self, val='True', **kwargs):
        """
        Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.                  
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command is now obsolete. It is included only for the purpose of file
        compatibility. It creates a blank panel.
        
        Flags:
        - control : ctl                  (bool)          [query]
            Returns the top level control for this panel. Usually used for getting a parent
            to attach popup menus. CAUTION: panels may not have controls at times.  This
            flag can return if no control is present.
        
        - copy : cp                      (unicode)       [edit]
            Makes this panel a copy of the specified panel.  Both panels must be of the same
            type.
        
        - createString : cs              (bool)          [edit]
            Command string used to create a panel
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Attaches a tag to the Maya panel.
        
        - editString : es                (bool)          [edit]
            Command string used to edit a panel
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - init : init                    (bool)          [create,edit]
            Initializes the panel's default state.  This is usually done automatically on
            file -new and file -open.
        
        - isUnique : iu                  (bool)          [query]
            Returns true if only one instance of this panel type is allowed.
        
        - label : l                      (unicode)       [query,edit]
            Specifies the user readable label for the panel.
        
        - menuBarRepeatLast : mrl        (bool)          [create,query,edit]
            Controls whether clicking on the menu header with the middle mouse button would
            repeat the last selected menu item.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Controls whether the menu bar for the panel is displayed.
        
        - needsInit : ni                 (bool)          [query,edit]
            (Internal) On Edit will mark the panel as requiring initialization. Query will
            return whether the panel is marked for initialization.  Used during file -new
            and file -open.
        
        - parent : p                     (unicode)       [create]
            Specifies the parent layout for this panel.
        
        - popupMenuProcedure : pmp       (script)        [query,edit]
            Specifies the procedure called for building the panel's popup menu(s). The
            default value is buildPanelPopupMenu.  The procedure should take one string
            argument which is the panel's name.
        
        - replacePanel : rp              (unicode)       [edit]
            Will replace the specified panel with this panel.  If the target panel is within
            the same layout it will perform a swap.
        
        - tearOff : to                   (bool)          [query,edit]
            Will tear off this panel into a separate window with a paneLayout as the parent
            of the panel. When queried this flag will return if the panel has been torn off
            into its own window.
        
        - tearOffCopy : toc              (unicode)       [create]
            Will create this panel as a torn of copy of the specified source panel.
        
        - tearOffRestore : tor           (bool)          [create,edit]
            Restores panel if it is torn off and focus is given to it. If docked, becomes
            the active panel in the docked window. This should be the default flag that is
            added to all panels instead of -to/-tearOffflag which should only be used to
            tear off the panel.
        
        - unParent : up                  (bool)          [edit]
            Specifies that the panel should be removed from its layout. This (obviously)
            cannot be used with query.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.devicePanel`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RowColumnLayout(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Alignment for text and pixmaps in the specified column.  Values are: left, rightand center.  Only valid for column format, ie. number of columns specified with -nc/numberOfColumnsflag.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        The attachments and offsets for the children in the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are left, rightand both.  The third argument must be greater than 0 and specifies the offset.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def columnOffset(self, val='True', **kwargs):
        """
        The attachment offset for the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are left, rightand both.  The third argument must be greater than 0 and specifies the offset.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def columnSpacing(self, val='True', **kwargs):
        """
        The space between columns in pixels.  In column format this flag specifies that the space be to the left of the given column.  In row format it specifies the space between all columns, however a valid column index is still required.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the spacing.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Width of a column. This flag is valid only in column format.  The column width must be greater than 0.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the column width.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getNumberOfColumns(self, **kwargs):
        """
        Number of columns. This flag is mutually exclusive to the -nr/numRowsflag.  Either one or the other can be specified.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getNumberOfRows(self, **kwargs):
        """
        Number of rows. This flag is mutually exclusive to the -nc/numColumnsflag. Either one or the other can be specified.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def rowAlign(self, val='True', **kwargs):
        """
        Alignment for text and pixmaps in the specified row. Values are: left, rightand center.  Only valid for row format, ie. number of rows specified with -nr/numberOfRowsflag.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        The attachments and offsets for the children in the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and specifies the offset.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def rowHeight(self, val='True', **kwargs):
        """
        Height of a row. This flag is only valid in row format. The row height must be greater than 0. The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the row height.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def rowOffset(self, val='True', **kwargs):
        """
        The attachment offset for the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are top, bottomand both.  The third argument must be greater than 0 and specifies the offset.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def rowSpacing(self, val='True', **kwargs):
        """
        The space between rows, in pixels.  In row format this specifies the space above the specified row.  In column format it specifies the space between all rows, however a valid row index is still required.  The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the spacing.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a rowColumn layout. A rowColumn layout positions children
        in either a row or column format. A column layout, specified with the
        -nc/numberOfColumnsflag, allows you set text alignment, attachments and offsets
        for each column in the layout. Every member of a column will have the same
        alignment, attachment and offsets.  Likewise the row format, specified by the
        -nr/numberOfRowsflag, allows setting of these attributes for each row in the
        layout. Every member of a row will have the same attributes. The layout must be
        either a row or column format. This layout does not support both, or the
        specification of attributes on an individual child basis. Some flags only make
        sense for one of either the row format or the column format.  For example the
        -rh/rowHeightflag can only be specified in row format. In column format the row
        height is determined by the tallest child in the row, plus offsets.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Alignment for text and pixmaps in the specified column.  Values are: left,
            rightand center.  Only valid for column format, ie. number of columns specified
            with -nc/numberOfColumnsflag.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            The attachments and offsets for the children in the specified column.  The first
            argument is the 1-based column index.  The second argument is the attachment,
            valid values are left, rightand both.  The third argument must be greater than 0
            and specifies the offset.
        
        - columnOffset : co              (int, unicode, int) [create,edit]
            The attachment offset for the specified column.  The first argument is the
            1-based column index.  The second argument is the attachment, valid values are
            left, rightand both.  The third argument must be greater than 0 and specifies
            the offset.
        
        - columnSpacing : cs             (int, int)      [create,edit]
            The space between columns in pixels.  In column format this flag specifies that
            the space be to the left of the given column.  In row format it specifies the
            space between all columns, however a valid column index is still required.  The
            first argument is the 1-based column index.  The second argument must be greater
            than 0 and specifies the spacing.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Width of a column. This flag is valid only in column format.  The column width
            must be greater than 0.  The first argument is the 1-based column index.  The
            second argument must be greater than 0 and specifies the column width.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfColumns : nc           (int)           [create,query]
            Number of columns. This flag is mutually exclusive to the -nr/numRowsflag.
            Either one or the other can be specified.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfRows : nr              (int)           [create,query]
            Number of rows. This flag is mutually exclusive to the -nc/numColumnsflag.
            Either one or the other can be specified.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAlign : ral                 (int, unicode)  [create,edit]
            Alignment for text and pixmaps in the specified row. Values are: left, rightand
            center.  Only valid for row format, ie. number of rows specified with
            -nr/numberOfRowsflag.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            The attachments and offsets for the children in the specified row.  The first
            argument is the 1-based row index.  The second argument is the attachment, valid
            values are top, bottomand both.  The third argument must be greater than 0 and
            specifies the offset.
        
        - rowHeight : rh                 (int, int)      [create,edit]
            Height of a row. This flag is only valid in row format. The row height must be
            greater than 0. The first argument is the 1-based row index.  The second
            argument must be greater than 0 and specifies the row height.
        
        - rowOffset : ro                 (int, unicode, int) [create,edit]
            The attachment offset for the specified row.  The first argument is the 1-based
            row index.  The second argument is the attachment, valid values are top,
            bottomand both.  The third argument must be greater than 0 and specifies the
            offset.
        
        - rowSpacing : rs                (int, int)      [create,edit]
            The space between rows, in pixels.  In row format this specifies the space above
            the specified row.  In column format it specifies the space between all rows,
            however a valid row index is still required.  The first argument is the 1-based
            row index.  The second argument must be greater than 0 and specifies the
            spacing.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.rowColumnLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrEnumOptionMenuGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def attribute(self, val='True', **kwargs):
        """
        The name of an attribute.  The button will be attached to the attribute so the button can be kept in synch with the attribute.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Text for the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Text for the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label and option menu button
        associated with an attribute of a node. The attribute should be an integer, and
        this control allows a UI association of strings to the integers of the
        attribute. When a new menu item is choosen the corresponding integer will be
        assigned to the attribute. This control will automatically read the enumeration
        values from the attribute if none are provided.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attribute : at                 (PyNode)        [create,edit]
            The name of an attribute.  The button will be attached to the attribute so the
            button can be kept in synch with the attribute.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - enumeratedItem : ei            (int, unicode)  [create]
            Enumerated item and the corresponding string. If this flag is not supplied when
            the control is created, then the command will try to read the values from the
            attribute.
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Text for the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrEnumOptionMenuGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IntSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        The command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        The command string executed repeatedly during a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getFieldMaxValue(self, **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getFieldMinValue(self, **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getFieldStep(self, **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation the group will have static text. Returns a string on query.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Sets the maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Sets the minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getSliderStep(self, **kwargs):
        """
        On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setFieldMaxValue(self, val='True', **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setFieldMinValue(self, val='True', **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setFieldStep(self, val='True', **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation the group will have static text. Returns a string on query.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Sets the maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Sets the minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setSliderStep(self, val='True', **kwargs):
        """
        On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of controls containing a label text,
        an integer field and an integer slider. The text and field controls are
        optional.  Editing or querying the field range values has no effect if the
        -f/fieldflag was not specified when the group was created. This group also
        allows you to enter values into the field outside of the slider range which is
        limited by the -min/minValueand -max/maxValueflags.  To do this, use the
        -fmn/fieldMinValueand -fmx/fieldMaxValueflags to specify a greater range of
        values. Note that the command will not allow you to specify a
        -fmn/fieldMinValuegreater than the -min/minValuevalue nor a
        -fmx/fieldMaxValueless than the -max/maxValuevalue. If you do supply a larger
        field range with the -fmn/fieldMinValueand -fmx/fieldMaxValueflags then you will
        notice that entering a value in the field that is outside of the slider range
        will result in extending the slider range as well.  For example, if you create a
        slider group with the following command: intSliderGrp -min -10 -max 10
        -fieldMinValue -100 -fieldMaxValue 100; Then you will be able to use the slider
        to select any value from -10 to 10. At the same time you will be able to enter
        into the field any value from -100 to 100.  If you enter a value, say 20, then
        the new slider range will grow such that this value is now accessible through
        the slider as well.  In fact, the new slider limit will become double of that
        what you entered.  Note that the slider limits will never grow beyond the field
        limits, in other words if you entered the value 80 then the slider will be
        clipped to the field limit of 100 and not doubled to 160. TelfBaseGrpCmd.cpp
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            The command string executed when the value of the slider changes.  It will be
            executed only once after a drag of the slider.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            The command string executed repeatedly during a drag of the slider.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label
            appearing after the slider.  Sets the string to be the text for the extra label.
        
        - field : f                      (bool)          [create]
            If true on creation the group will have an editable int field present that
            reflects the value of the slider.
        
        - fieldMaxValue : fmx            (int)           [create,query,edit]
            Maximum value that may be entered in the field.  This value may be set to any
            value greater than the -max/maxValueflag.  By default, it is equal to the
            -max/maxValueflag.
        
        - fieldMinValue : fmn            (int)           [create,query,edit]
            Minimum value that may be entered in the field.  This value may be set to any
            value less than the -min/minValueflag.  By default, it is equal to the
            -min/minValueflag.
        
        - fieldStep : fs                 (int)           [create,query,edit]
            Increment for the field.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation the group will have static text. Returns a string on
            query.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            Sets the maximum value for both the slider and the field.
        
        - minValue : min                 (int)           [create,query,edit]
            Sets the minimum value for both the slider and the field.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - sliderStep : ss                (int)           [create,query,edit]
            On Linux the slider step value represents the amount the value will increase or
            decrease when you click either side of the slider.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (int)           [create,query,edit]
            Increment for both the slider and field.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int)           [create,query,edit]
            Value of the group.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.intSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RowLayout(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Text alignment for the specified column. Valid values are left, right, and center
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Horizontally attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are left, right, and both.  The third argument is the offset value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Width of a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the width value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getNumberOfColumns(self, **kwargs):
        """
        Number of columns in the row.  The specified number of columns must be a value greater than 0.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Vertically attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are top, bottom, and both.  The third argument is the offset value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a layout capable of positioning children into a single
        horizontal row.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.
        
        - adjustableColumn1 : ad1        (int)           [create]
            Specifies that the first column has an adjustable size that changes with the
            size of the parent layout. Ignored if there isn't exactly one column.
        
        - adjustableColumn2 : ad2        (int)           [create]
            Specifies which of the two columns has an adjustable size that changes with the
            size of the parent layout. Ignored if there isn't exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create]
            Specifies which of the three columns has an adjustable size that changes with
            the size of the parent layout. Ignored if there isn't exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create]
            Specifies which of the four columns has an adjustable size that changes with the
            size of the parent layout. Ignored if there isn't exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create]
            Specifies which of the five columns has an adjustable size that changes with the
            size of the parent layout. Ignored if there isn't exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create]
            Specifies which of the six columns has an adjustable size that changes with the
            size of the parent layout. Ignored if there isn't exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Text alignment for the specified column. Valid values are left, right, and
            center
        
        - columnAlign1 : cl1             (unicode)       [create]
            Text alignment for the first column. Valid values are left, right, and center.
            Ignored if there isn't exactly one column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create]
            Text alignment for both columns. Valid values are left, right, and center.
            Ignored if there isn't exactly two columns.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create]
            Text alignment for all three columns. Valid values are left, right, and center.
            Ignored if there isn't exactly three columns.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create]
            Text alignment for all four columns. Valid values are left, right, and center.
            Ignored if there isn't exactly four columns.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create]
            Text alignment for all five columns. Valid values are left, right, and center.
            Ignored if there isn't exactly five columns.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create]
            Text alignment for all six columns. Valid values are left, right, and center.
            Ignored if there isn't exactly six columns.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Horizontally attach a particular column.  The first argument is a 1-based index
            specifying the column.  The second argument is the attachment, valid values are
            left, right, and both.  The third argument is the offset value.
        
        - columnAttach1 : ct1            (unicode)       [create]
            Attachment type for the first column.  Ignored if there isn't exactly one
            column. Valid values are left, right, and both.
        
        - columnAttach2 : ct2            (unicode, unicode) [create]
            Attachment type for both columns.  Ignored if there isn't exactly two columns.
            Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create]
            Attachment type for all three columns.  Ignored if there isn't exactly three
            columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create]
            Attachment type for all four columns.  Ignored if there isn't exactly four
            columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create]
            Attachment type for all five columns.  Ignored if there isn't exactly five
            columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create]
            Attachment type for all six columns.  Ignored if there isn't exactly six
            columns. Valid values are left, right, and both.
        
        - columnOffset1 : co1            (int)           [create]
            Used in conjunction with the -columnAttach1 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for the first column.  The offsets
            applied are based on the attachments specified with the -columnAttach1 flag.
            Ignored if there isn't exactly one column.
        
        - columnOffset2 : co2            (int, int)      [create]
            Used in conjunction with the -columnAttach2 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for both columns.  The offsets
            applied are based on the attachments specified with the -columnAttach2 flag.
            Ignored if there isn't exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create]
            Used in conjunction with the -columnAttach3 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for all three columns.  The offsets
            applied are based on the attachments specified with the -columnAttach3 flag.
            Ignored if there isn't exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create]
            Used in conjunction with the -columnAttach4 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for all four columns.  The offsets
            applied are based on the attachments specified with the -columnAttach4 flag.
            Ignored if there isn't exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create]
            Used in conjunction with the -columnAttach5 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for all five columns.  The offsets
            applied are based on the attachments specified with the -columnAttach5 flag.
            Ignored if there isn't exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create]
            Used in conjunction with the -columnAttach6 flag.  If that flag is not used then
            this flag will be ignored.  Sets the offset for all six columns.  The offsets
            applied are based on the attachments specified with the -columnAttach6 flag.
            Ignored if there isn't exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Width of a particular column.  The first argument is a 1-based index specifying
            the column.  The second argument is the width value.
        
        - columnWidth1 : cw1             (int)           [create]
            Width for the first column.  Ignored if there isn't exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create]
            Widths for both columns.  Ignored if there isn't exactly two columns.
        
        - columnWidth3 : cw3             (int, int, int) [create]
            Widths for all three columns.  Ignored if there isn't exactly three columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create]
            Widths for all four columns.  Ignored if there isn't exactly four columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create]
            Widths for all five columns.  Ignored if there isn't exactly five columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create]
            Widths for all six columns.  Ignored if there isn't exactly six columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfColumns : nc           (int)           [create,query]
            Number of columns in the row.  The specified number of columns must be a value
            greater than 0.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Vertically attach a particular column.  The first argument is a 1-based index
            specifying the column.  The second argument is the attachment, valid values are
            top, bottom, and both.  The third argument is the offset value.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.rowLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrControlGrp(Layout):
    def getAnnotation(self, **kwargs):
        """
        Sets or queries the annotation value of the control group.                                 
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getAttribute(self, **kwargs):
        """
        Sets or queries the attribute the control represents. The name of the attribute must be fully specified, including the name of the node. Some types of attributes are not supported, but most commonly used attribute types are.                                   
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getChangeCommand(self, **kwargs):
        """
        Sets or queries the change command of the control group. The change command will be executed when the control is used to change the value of the attribute.                                
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        Sets or queries the enable state of the control group. The control is dimmed if the enable state is set to false.                                  
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getExists(self, **kwargs):
        """
        Returns whether the specified object exists or not. Other flags are ignored.                               
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getHandlesAttribute(self, **kwargs):
        """
        Returns true or false as to whether this command can create a control for the specified attribute. 
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getHideMapButton(self, **kwargs):
        """
        Force the map button to remain hidden for this control.                                    
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Sets or queries the label of the control group.                                    
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        Sets or queries the prevent adjustment state of the control group. If true, the RMB menu for the control will not allow adjustments to be made.                                    Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Sets or queries the annotation value of the control group.                                 
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setAttribute(self, val='True', **kwargs):
        """
        Sets or queries the attribute the control represents. The name of the attribute must be fully specified, including the name of the node. Some types of attributes are not supported, but most commonly used attribute types are.                                   
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setChangeCommand(self, val='True', **kwargs):
        """
        Sets or queries the change command of the control group. The change command will be executed when the control is used to change the value of the attribute.                                
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        Sets or queries the enable state of the control group. The control is dimmed if the enable state is set to false.                                  
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setExists(self, val='True', **kwargs):
        """
        Returns whether the specified object exists or not. Other flags are ignored.                               
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setHandlesAttribute(self, val='True', **kwargs):
        """
        Returns true or false as to whether this command can create a control for the specified attribute. 
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setHideMapButton(self, val='True', **kwargs):
        """
        Force the map button to remain hidden for this control.                                    
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Sets or queries the label of the control group.                                    
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        Sets or queries the prevent adjustment state of the control group. If true, the RMB menu for the control will not allow adjustments to be made.                                    Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a control of the type most appropriate for the specified
        attribute, and associates the control with the attribute. Any change to the
        control will cause a change in the attribute value, and any change to the
        attribute value will be reflected in the control. Not all attribute types are
        supported.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Sets or queries the annotation value of the control group.
        
        - attribute : a                  (PyNode)        [create,query,edit]
            Sets or queries the attribute the control represents. The name of the attribute
            must be fully specified, including the name of the node. Some types of
            attributes are not supported, but most commonly used attribute types are.
        
        - changeCommand : cc             (script)        [create,query,edit]
            Sets or queries the change command of the control group. The change command will
            be executed when the control is used to change the value of the attribute.
        
        - enable : en                    (bool)          [create,query,edit]
            Sets or queries the enable state of the control group. The control is dimmed if
            the enable state is set to false.
        
        - exists : ex                    (bool)          [create,query,edit]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - handlesAttribute : ha          (PyNode)        [query,edit]
            Returns true or false as to whether this command can create a control for the
            specified attribute.
        
        - hideMapButton : hmb            (bool)          [create,query,edit]
            Force the map button to remain hidden for this control.
        
        - label : l                      (unicode)       [create,query,edit]
            Sets or queries the label of the control group.
        
        - preventOverride : po           (bool)          [create,query,edit]
            Sets or queries the prevent adjustment state of the control group. If true, the
            RMB menu for the control will not allow adjustments to be made.
            Flag can have multiple arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrControlGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class TextFieldGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the field text changes and user presses Enter or Return.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def forceChangeCommand(self, val='True', **kwargs):
        """
        If used together with -text or -inserText flag, change command will be executed after text modification.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getFileName(self, **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getInsertionPosition(self, **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getPlaceholderText(self, **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getText(self, **kwargs):
        """
        Text in the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def insertText(self, val='True', **kwargs):
        """
        Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setFileName(self, val='True', **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setInsertionPosition(self, val='True', **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setPlaceholderText(self, val='True', **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        Text in the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    def textChangedCommand(self, val='True', **kwargs):
        """
        Command executed immediately when the field text changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text and editable text field.
        The label text is optional.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the field text changes and user presses Enter or Return.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it. If false then the field is 'read only'
            and can not be typed into. The text in the field can always be changed with the
            -tx/textflag regardless of the state of the -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fileName : fi                  (unicode)       [create,query,edit]
            Text in the field as a filename. This does conversions between internal and
            external (UI) file representation.
        
        - forceChangeCommand : fcc       (bool)          [create,edit]
            If used together with -text or -inserText flag, change command will be executed
            after text modification.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - insertText : it                (unicode)       [create,edit]
            Insert text into the field at the current insertion position (specified by the
            -ip/insertionPosition flag).
        
        - insertionPosition : ip         (int)           [create,query,edit]
            The insertion position for inserted text.  This is a 1 based value where
            position 1 specifies the beginning of the field.  Position 0 may be used to
            specify the end of the field.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the group.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - placeholderText : pht          (unicode)       [create,query,edit]
            Setting this property makes the line edit display a grayed-out placeholder text
            as long as the text field is empty and the widget doesn't have focus. By
            default, this property contains an empty string.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - text : tx                      (unicode)       [create,query,edit]
            Text in the field.
        
        - textChangedCommand : tcc       (script)        [create,edit]
            Command executed immediately when the field text changes.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.textFieldGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ColumnLayout(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Sets the children of the layout to be attached on both sides. They will stretch or shrink with the layout.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Sets the alignment of children containing text or pixmaps. Align values: left| right| center.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Sets the attachment and offsets for the children of the layout.  Side values: left| right| both.  Left or both is recommended.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def columnOffset(self, val='True', **kwargs):
        """
        Sets the offsets for children of the layout. Side values: left| right| both.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getColumnWidth(self, **kwargs):
        """
        Sets the width of the column.  Unless the children are attached to both sides of the column, the width cannot be enforced. Larger children will expand layout.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getRowSpacing(self, **kwargs):
        """
        Sets the space between children.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setColumnWidth(self, val='True', **kwargs):
        """
        Sets the width of the column.  Unless the children are attached to both sides of the column, the width cannot be enforced. Larger children will expand layout.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setRowSpacing(self, val='True', **kwargs):
        """
        Sets the space between children.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a layout that arranges its children in a single column.
        
        Flags:
        - adjustableColumn : adj         (bool)          [create,edit]
            Sets the children of the layout to be attached on both sides. They will stretch
            or shrink with the layout.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - columnAlign : cal              (unicode)       [create,edit]
            Sets the alignment of children containing text or pixmaps. Align values: left|
            right| center.
        
        - columnAttach : cat             (unicode, int)  [create,edit]
            Sets the attachment and offsets for the children of the layout.  Side values:
            left| right| both.  Left or both is recommended.
        
        - columnOffset : co              (unicode, int)  [create,edit]
            Sets the offsets for children of the layout. Side values: left| right| both.
        
        - columnWidth : cw               (int)           [create,query,edit]
            Sets the width of the column.  Unless the children are attached to both sides of
            the column, the width cannot be enforced. Larger children will expand layout.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowSpacing : rs                (int)           [create,query,edit]
            Sets the space between children.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.columnLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ShelfTabLayout(Layout):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getBorderStyle(self, **kwargs):
        """
        Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a simple frame around the body area of the tab layout
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getChildResizable(self, **kwargs):
        """
        Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidthflag.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image appearing in top right corner of tab layout.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getImageVisible(self, **kwargs):
        """
        Visibility of tab image.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getInnerMarginHeight(self, **kwargs):
        """
        Margin height for all tab children.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getInnerMarginWidth(self, **kwargs):
        """
        Margin width for all tab children.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getMinChildWidth(self, **kwargs):
        """
        Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizableflag is set to true.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getScrollable(self, **kwargs):
        """
        Puts all children of this layout within a scroll area.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getScrollableTabs(self, **kwargs):
        """
        If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getSelectCommand(self, **kwargs):
        """
        Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getSelectTab(self, **kwargs):
        """
        The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getSelectTabIndex(self, **kwargs):
        """
        Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getShowNewTab(self, **kwargs):
        """
        Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this button is clicked.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabLabel(self, **kwargs):
        """
        Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabLabelIndex(self, **kwargs):
        """
        Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabPosition(self, **kwargs):
        """
        Changes the tab position. The possible values are: north, eastand west.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabTooltip(self, **kwargs):
        """
        Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabTooltipIndex(self, **kwargs):
        """
        Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabsClosable(self, **kwargs):
        """
        Set to true if you want to have a close button icon on all created tabs.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getTabsVisible(self, **kwargs):
        """
        Visibility of the tab labels.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def horizontalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def moveTab(self, val='True', **kwargs):
        """
        Move the tab from the current index to a new index.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def newTabCommand(self, val='True', **kwargs):
        """
        Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use the -snt/showNewTabflag.  Using this command will override any internal Maya logic for adding a new tab (only this command will be executed).                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def preSelectCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setBorderStyle(self, val='True', **kwargs):
        """
        Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a simple frame around the body area of the tab layout
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image appearing in top right corner of tab layout.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setImageVisible(self, val='True', **kwargs):
        """
        Visibility of tab image.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setScrollableTabs(self, val='True', **kwargs):
        """
        If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setSelectCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setSelectTab(self, val='True', **kwargs):
        """
        The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setSelectTabIndex(self, val='True', **kwargs):
        """
        Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setShowNewTab(self, val='True', **kwargs):
        """
        Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this button is clicked.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabLabel(self, val='True', **kwargs):
        """
        Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabLabelIndex(self, val='True', **kwargs):
        """
        Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabPosition(self, val='True', **kwargs):
        """
        Changes the tab position. The possible values are: north, eastand west.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabTooltip(self, val='True', **kwargs):
        """
        Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabTooltipIndex(self, val='True', **kwargs):
        """
        Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setTabsVisible(self, val='True', **kwargs):
        """
        Visibility of the tab labels.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    def verticalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates/edits/queries a shelf tab group which is essentially a
        normal tabLayout with some drop behaviour in the tab bar.  A garbage can icon
        can appear in the top right corner to dispose of buttons dragged to it from
        shelves.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - borderStyle : bs               (unicode)       [create,query,edit]
            Specify the style of the border for tab layout. Valid values are: none, top,
            notopand full. By default, it will use fullto draw a simple frame around the
            body area of the tab layout. none- Do not draw borders around the body area of
            the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a
            simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a
            simple frame around the body area of the tab layout
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when a tab is selected interactively. This command is only
            invoked when the selected tab changes. Re-selecting the current tab will not
            invoke this command.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - childResizable : cr            (bool)          [create,query]
            Set to true if you want the child of the control layout to be as wide as the
            scroll area.  You may also indicate a minimum width for the child using the
            -mcw/minChildWidthflag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Command executed when a tab is double clicked on.  Note that the first click
            will select the tab and the second click will execute the double click command.
            Double clicking the current tab will re-invoke the double click command.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontalScrollBarThickness : hst (int)           [create,edit]
            Thickness of the horizontal scroll bar.  Specify an integer value greater than
            or equal to zero. This flag has no effect on Windows systems.
        
        - image : i                      (unicode)       [create,query,edit]
            Image appearing in top right corner of tab layout.
        
        - imageVisible : iv              (bool)          [create,query,edit]
            Visibility of tab image.
        
        - innerMarginHeight : imh        (int)           [create,query]
            Margin height for all tab children.
        
        - innerMarginWidth : imw         (int)           [create,query]
            Margin width for all tab children.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - minChildWidth : mcw            (int)           [create,query]
            Specify a positive non-zero integer value indicating the minimum width the tab
            layout's children.  This flag only has meaning when the -cr/childResizableflag
            is set to true.
        
        - moveTab : mt                   (int, int)      [create,edit]
            Move the tab from the current index to a new index.
        
        - newTabCommand : ntc            (script)        [create,edit]
            Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note:
            in order to show the new tab button use the -snt/showNewTabflag.  Using this
            command will override any internal Maya logic for adding a new tab (only this
            command will be executed).
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preSelectCommand : psc         (script)        [create,edit]
            Command executed when a tab is selected but before it's contents become visible.
            Re-selecting the current tab will not invoke this command.  Note that this
            command is not executed by using either of the -st/selectTabor
            -sti/selectTabIndexflags.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - scrollable : scr               (bool)          [create,query]
            Puts all children of this layout within a scroll area.
        
        - scrollableTabs : stb           (bool)          [create,query,edit]
            If true, the active tab in the layout can be scrolled through with the mouse
            wheel. Default is true.
        
        - selectCommand : sc             (script)        [create,query,edit]
            Command executed when a tab is selected interactively  This command will be
            invoked whenever a tab is selected, ie. re-selecting the current tab will invoke
            this command.  Note that this command is not executed by using either of the
            -st/selectTabor -sti/selectTabIndexflags.
        
        - selectTab : st                 (unicode)       [create,query,edit]
            The name, in short form, of the selected tab.  An empty string is returned on
            query if there are no child tabs.
        
        - selectTabIndex : sti           (int)           [create,query,edit]
            Identical to the -st/selectTabflag except this flag takes a 1-based index to
            identify the selected tab.  A value of 0 is returned on query if there are no
            child tabs.
        
        - showNewTab : snt               (bool)          [create,query,edit]
            Set to true if you want to have a 'New Tab' button shown at the end of the tab
            bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this
            button is clicked.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - tabLabel : tl                  (unicode, unicode) [create,query,edit]
            Set a tab label.  The first argument is the name of a control that must be a
            child of the tab layout.  The second argument is the label for the tab
            associated with that child. If this flag is queried then the tab labels for all
            the children are returned.
        
        - tabLabelIndex : tli            (int, unicode)  [create,query,edit]
            Identical to the -tl/tabLabelflag except this flag takes a 1-based index to
            identify the tab you want to set the label for. If this flag is queried the tab
            labels for all the children are returned.
        
        - tabPosition : tp               (unicode)       [create,query,edit]
            Changes the tab position. The possible values are: north, eastand west.
        
        - tabTooltip : tt                (unicode, unicode) [create,query,edit]
            Set a tab tooltip.  The first argument is the name of a control that must be a
            child of the tab layout.  The second argument is the tooltip for the tab
            associated with that child. If this flag is queried then the tab tooltips for
            all the children are returned.
        
        - tabTooltipIndex : tti          (int, unicode)  [create,query,edit]
            Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to
            identify the tab you want to set the tooltip for. If this flag is queried the
            tab tooltips for all the children are returned.
        
        - tabsClosable : tc              (bool)          [create,query]
            Set to true if you want to have a close button icon on all created tabs.
        
        - tabsVisible : tv               (bool)          [create,query,edit]
            Visibility of the tab labels.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - verticalScrollBarThickness : vst (int)           [create,edit]
            Thickness of the vertical scroll bar.  Specify an integer value greater than or
            equal to zero. This flag has no effect on Windows systems.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.shelfTabLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatSliderButtonGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def buttonCommand(self, val='True', **kwargs):
        """
        Command string to be executed when the button is pressed.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed repeatedly during a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getButtonLabel(self, **kwargs):
        """
        The button text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getFieldMaxValue(self, **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getFieldMinValue(self, **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getFieldStep(self, **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image displayed on the symbol button.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation the group will have static text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getSliderStep(self, **kwargs):
        """
        The slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getSymbolButtonDisplay(self, **kwargs):
        """
        Visibility of the symbol button.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def precision(self, val='True', **kwargs):
        """
        Number of digits to the right of the decimal.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setButtonLabel(self, val='True', **kwargs):
        """
        The button text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setFieldMaxValue(self, val='True', **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setFieldMinValue(self, val='True', **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setFieldStep(self, val='True', **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image displayed on the symbol button.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation the group will have static text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setSliderStep(self, val='True', **kwargs):
        """
        The slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setSymbolButtonDisplay(self, val='True', **kwargs):
        """
        Visibility of the symbol button.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    def symbolButtonCommand(self, val='True', **kwargs):
        """
        Command string executed when the symbol button is pressed.                  
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a float slider component with optional button and symbol
        buttons. TelfFloatSliderGrpCmd.cpp
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - buttonCommand : bc             (script)        [create,edit]
            Command string to be executed when the button is pressed.
        
        - buttonLabel : bl               (unicode)       [create,query,edit]
            The button text.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when the value of the slider changes.  It will be
            executed only once after a drag of the slider.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed repeatedly during a drag of the slider.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label
            appearing after the slider.  Sets the string to be the text for the extra label.
        
        - field : f                      (bool)          [create]
            Indicates whether the group will have an editable float field present that
            reflects the value of the slider.
        
        - fieldMaxValue : fmx            (float)         [create,query,edit]
            Maximum value that may be entered in the field.  This value may be set to any
            value greater than the -max/maxValueflag.  By default, it is equal to the
            -max/maxValueflag.
        
        - fieldMinValue : fmn            (float)         [create,query,edit]
            Minimum value that may be entered in the field.  This value may be set to any
            value less than the -min/minValueflag.  By default, it is equal to the
            -min/minValueflag.
        
        - fieldStep : fs                 (float)         [create,query,edit]
            Increment for the field.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - image : i                      (unicode)       [create,query,edit]
            Image displayed on the symbol button.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation the group will have static text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Maximum value for both the slider and the field.
        
        - minValue : min                 (float)         [create,query,edit]
            Minimum value for both the slider and the field.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,edit]
            Number of digits to the right of the decimal.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - sliderStep : ss                (float)         [create,query,edit]
            The slider step value represents the amount the value will increase or decrease
            when you click either side of the slider.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Increment for both the slider and field.
        
        - symbolButtonCommand : sbc      (script)        [create,edit]
            Command string executed when the symbol button is pressed.
        
        - symbolButtonDisplay : sbd      (bool)          [create,query,edit]
            Visibility of the symbol button.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float)         [create,query,edit]
            Value of the group.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatSliderButtonGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class MenuBarLayout(Layout):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getMenuArray(self, **kwargs):
        """
        Return a string array containing the names of the menus in the layout's menu bar.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getMenuBarVisible(self, **kwargs):
        """
        Visibility of the menu bar.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getNumberOfMenus(self, **kwargs):
        """
        Return the number of menus attached to the layout's menu bar.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def menuIndex(self, val='True', **kwargs):
        """
        Sets the index of a specified menu.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setMenuBarVisible(self, val='True', **kwargs):
        """
        Visibility of the menu bar.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        Create a layout containing a menu bar.  The menu bar will appear and behave
        similar to any menu bar created with the 'window -menuBar true' command. Menus
        may be created with a menuBarLayout as their parent.  Child controls are simply
        positioned to fill the menuBarLayout area beneath the menu bar consequently,
        some other layout should be used as the immediate child.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - menuArray : ma                 (bool)          [query]
            Return a string array containing the names of the menus in the layout's menu
            bar.
        
        - menuBarVisible : mbv           (bool)          [create,query,edit]
            Visibility of the menu bar.
        
        - menuIndex : mi                 (unicode, int)  [edit]
            Sets the index of a specified menu.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfMenus : nm             (bool)          [query]
            Return the number of menus attached to the layout's menu bar.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.menuBarLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ColorSliderButtonGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def buttonCommand(self, val='True', **kwargs):
        """
        Command string executed when the button is pressed.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when slider value changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed when slider value marker is dragged.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getButtonLabel(self, **kwargs):
        """
        The button text.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getForceDragRefresh(self, **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Color in hue, saturation, and value format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image displayed on the symbol button.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Color in red, green, and blue format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getSymbolButtonDisplay(self, **kwargs):
        """
        Visibility of the symbol button.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setButtonLabel(self, val='True', **kwargs):
        """
        The button text.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setForceDragRefresh(self, val='True', **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setHsvValue(self, val='True', **kwargs):
        """
        Color in hue, saturation, and value format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image displayed on the symbol button.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setRgbValue(self, val='True', **kwargs):
        """
        Color in red, green, and blue format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setSymbolButtonDisplay(self, val='True', **kwargs):
        """
        Visibility of the symbol button.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    def symbolButtonCommand(self, val='True', **kwargs):
        """
        Command string executed when the symbol button is pressed.                  
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command object creates a new color slider group with a button and a symbol
        button. This control is primarily used in the rendering UI. In this context, the
        button brings up a dialog that allows the user to assign a texture map to this
        parameter. Once a texture map is available, a symbol button shows up. When this
        symbol button is pressed, the user is taken to another dialog to edit the
        texture map.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - buttonCommand : bc             (script)        [create,edit]
            Command string executed when the button is pressed.
        
        - buttonLabel : bl               (unicode)       [create,query,edit]
            The button text.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when slider value changes.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed when slider value marker is dragged.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - forceDragRefresh : fdr         (bool)          [create,query,edit]
            If used then force refresh on drag
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hsvValue : hsv                 (float, float, float) [create,query,edit]
            Color in hue, saturation, and value format.
        
        - image : i                      (unicode)       [create,query,edit]
            Image displayed on the symbol button.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the group.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rgbValue : rgb                 (float, float, float) [create,query,edit]
            Color in red, green, and blue format.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - symbolButtonCommand : sbc      (script)        [create,edit]
            Command string executed when the symbol button is pressed.
        
        - symbolButtonDisplay : sbd      (bool)          [create,query,edit]
            Visibility of the symbol button.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.colorSliderButtonGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class TabLayout(Layout):
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def doubleClickCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getBorderStyle(self, **kwargs):
        """
        Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a simple frame around the body area of the tab layout
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getChildResizable(self, **kwargs):
        """
        Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidthflag.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getImage(self, **kwargs):
        """
        Image appearing in top right corner of tab layout.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getImageVisible(self, **kwargs):
        """
        Visibility of tab image.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getInnerMarginHeight(self, **kwargs):
        """
        Margin height for all tab children.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getInnerMarginWidth(self, **kwargs):
        """
        Margin width for all tab children.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getMinChildWidth(self, **kwargs):
        """
        Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizableflag is set to true.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getScrollable(self, **kwargs):
        """
        Puts all children of this layout within a scroll area.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getScrollableTabs(self, **kwargs):
        """
        If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getSelectCommand(self, **kwargs):
        """
        Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getSelectTab(self, **kwargs):
        """
        The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getSelectTabIndex(self, **kwargs):
        """
        Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getShowNewTab(self, **kwargs):
        """
        Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this button is clicked.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabLabel(self, **kwargs):
        """
        Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabLabelIndex(self, **kwargs):
        """
        Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabPosition(self, **kwargs):
        """
        Changes the tab position. The possible values are: north, eastand west.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabTooltip(self, **kwargs):
        """
        Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabTooltipIndex(self, **kwargs):
        """
        Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabsClosable(self, **kwargs):
        """
        Set to true if you want to have a close button icon on all created tabs.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getTabsVisible(self, **kwargs):
        """
        Visibility of the tab labels.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def horizontalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def moveTab(self, val='True', **kwargs):
        """
        Move the tab from the current index to a new index.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def newTabCommand(self, val='True', **kwargs):
        """
        Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use the -snt/showNewTabflag.  Using this command will override any internal Maya logic for adding a new tab (only this command will be executed).                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def preSelectCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setBorderStyle(self, val='True', **kwargs):
        """
        Specify the style of the border for tab layout. Valid values are: none, top, notopand full. By default, it will use fullto draw a simple frame around the body area of the tab layout. none- Do not draw borders around the body area of the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a simple frame around the body area of the tab layout
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setImage(self, val='True', **kwargs):
        """
        Image appearing in top right corner of tab layout.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setImageVisible(self, val='True', **kwargs):
        """
        Visibility of tab image.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setScrollableTabs(self, val='True', **kwargs):
        """
        If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setSelectCommand(self, val='True', **kwargs):
        """
        Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTabor -sti/selectTabIndexflags.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setSelectTab(self, val='True', **kwargs):
        """
        The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setSelectTabIndex(self, val='True', **kwargs):
        """
        Identical to the -st/selectTabflag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setShowNewTab(self, val='True', **kwargs):
        """
        Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this button is clicked.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabLabel(self, val='True', **kwargs):
        """
        Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabLabelIndex(self, val='True', **kwargs):
        """
        Identical to the -tl/tabLabelflag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabPosition(self, val='True', **kwargs):
        """
        Changes the tab position. The possible values are: north, eastand west.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabTooltip(self, val='True', **kwargs):
        """
        Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabTooltipIndex(self, val='True', **kwargs):
        """
        Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setTabsVisible(self, val='True', **kwargs):
        """
        Visibility of the tab labels.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    def verticalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a tab group. Tab groups are a specialized form of control
        layouts that contain only control layouts. Whenever a control layout is added to
        a tab group it will have a tab provided for it that allows selection of that
        group from amongst other tabbed control groups. Only one child of a tab layout
        is visible at a time.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - borderStyle : bs               (unicode)       [create,query,edit]
            Specify the style of the border for tab layout. Valid values are: none, top,
            notopand full. By default, it will use fullto draw a simple frame around the
            body area of the tab layout. none- Do not draw borders around the body area of
            the tab layouttop- Only draw a simple line right below the tabsnotop- Draw a
            simple frame on the left/right/bottom (no top) of the tab layoutfull- Draw a
            simple frame around the body area of the tab layout
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when a tab is selected interactively. This command is only
            invoked when the selected tab changes. Re-selecting the current tab will not
            invoke this command.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - childResizable : cr            (bool)          [create,query]
            Set to true if you want the child of the control layout to be as wide as the
            scroll area.  You may also indicate a minimum width for the child using the
            -mcw/minChildWidthflag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - doubleClickCommand : dcc       (script)        [create,edit]
            Command executed when a tab is double clicked on.  Note that the first click
            will select the tab and the second click will execute the double click command.
            Double clicking the current tab will re-invoke the double click command.
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontalScrollBarThickness : hst (int)           [create,edit]
            Thickness of the horizontal scroll bar.  Specify an integer value greater than
            or equal to zero. This flag has no effect on Windows systems.
        
        - image : i                      (unicode)       [create,query,edit]
            Image appearing in top right corner of tab layout.
        
        - imageVisible : iv              (bool)          [create,query,edit]
            Visibility of tab image.
        
        - innerMarginHeight : imh        (int)           [create,query]
            Margin height for all tab children.
        
        - innerMarginWidth : imw         (int)           [create,query]
            Margin width for all tab children.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - minChildWidth : mcw            (int)           [create,query]
            Specify a positive non-zero integer value indicating the minimum width the tab
            layout's children.  This flag only has meaning when the -cr/childResizableflag
            is set to true.
        
        - moveTab : mt                   (int, int)      [create,edit]
            Move the tab from the current index to a new index.
        
        - newTabCommand : ntc            (script)        [create,edit]
            Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note:
            in order to show the new tab button use the -snt/showNewTabflag.  Using this
            command will override any internal Maya logic for adding a new tab (only this
            command will be executed).
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preSelectCommand : psc         (script)        [create,edit]
            Command executed when a tab is selected but before it's contents become visible.
            Re-selecting the current tab will not invoke this command.  Note that this
            command is not executed by using either of the -st/selectTabor
            -sti/selectTabIndexflags.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - scrollable : scr               (bool)          [create,query]
            Puts all children of this layout within a scroll area.
        
        - scrollableTabs : stb           (bool)          [create,query,edit]
            If true, the active tab in the layout can be scrolled through with the mouse
            wheel. Default is true.
        
        - selectCommand : sc             (script)        [create,query,edit]
            Command executed when a tab is selected interactively  This command will be
            invoked whenever a tab is selected, ie. re-selecting the current tab will invoke
            this command.  Note that this command is not executed by using either of the
            -st/selectTabor -sti/selectTabIndexflags.
        
        - selectTab : st                 (unicode)       [create,query,edit]
            The name, in short form, of the selected tab.  An empty string is returned on
            query if there are no child tabs.
        
        - selectTabIndex : sti           (int)           [create,query,edit]
            Identical to the -st/selectTabflag except this flag takes a 1-based index to
            identify the selected tab.  A value of 0 is returned on query if there are no
            child tabs.
        
        - showNewTab : snt               (bool)          [create,query,edit]
            Set to true if you want to have a 'New Tab' button shown at the end of the tab
            bar.  Note: use the -ntc/newTabCommandflag to set the command executed when this
            button is clicked.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - tabLabel : tl                  (unicode, unicode) [create,query,edit]
            Set a tab label.  The first argument is the name of a control that must be a
            child of the tab layout.  The second argument is the label for the tab
            associated with that child. If this flag is queried then the tab labels for all
            the children are returned.
        
        - tabLabelIndex : tli            (int, unicode)  [create,query,edit]
            Identical to the -tl/tabLabelflag except this flag takes a 1-based index to
            identify the tab you want to set the label for. If this flag is queried the tab
            labels for all the children are returned.
        
        - tabPosition : tp               (unicode)       [create,query,edit]
            Changes the tab position. The possible values are: north, eastand west.
        
        - tabTooltip : tt                (unicode, unicode) [create,query,edit]
            Set a tab tooltip.  The first argument is the name of a control that must be a
            child of the tab layout.  The second argument is the tooltip for the tab
            associated with that child. If this flag is queried then the tab tooltips for
            all the children are returned.
        
        - tabTooltipIndex : tti          (int, unicode)  [create,query,edit]
            Identical to the -tt/tabTooltipflag except this flag takes a 1-based index to
            identify the tab you want to set the tooltip for. If this flag is queried the
            tab tooltips for all the children are returned.
        
        - tabsClosable : tc              (bool)          [create,query]
            Set to true if you want to have a close button icon on all created tabs.
        
        - tabsVisible : tv               (bool)          [create,query,edit]
            Visibility of the tab labels.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - verticalScrollBarThickness : vst (int)           [create,edit]
            Thickness of the vertical scroll bar.  Specify an integer value greater than or
            equal to zero. This flag has no effect on Windows systems.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.tabLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class IntFieldGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when the value of any of the fields changes.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed when dragging the invisible slider in any of the fields.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnable1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnable2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnable3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnable4(self, **kwargs):
        """
        Enable state for the respective field.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Values for all fields.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getValue1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getValue2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getValue3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getValue4(self, **kwargs):
        """
        Value for the respective field.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnable1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnable2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnable3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnable4(self, val='True', **kwargs):
        """
        Enable state for the respective field.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Values for all fields.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setValue1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setValue2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setValue3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setValue4(self, val='True', **kwargs):
        """
        Value for the respective field.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text and editable integer
        fields. The label text is optional and one to four fields can be created.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when the value of any of the fields changes.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed when dragging the invisible slider in any of the fields.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enable1 : en1                  (bool)          [create,query,edit]
        
        - enable2 : en2                  (bool)          [create,query,edit]
        
        - enable3 : en3                  (bool)          [create,query,edit]
        
        - enable4 : en4                  (bool)          [create,query,edit]
            Enable state for the respective field.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label in the
            group.  Sets the string to be label text to the right of fields.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation this specifies that there will be a label to the left of
            the fields.  Sets the string to be the label text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfFields : nf            (int)           [create]
            Set the number of fields on creation.  One to four fields are available.  The
            default is one field.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int, int, int, int) [create,query,edit]
            Values for all fields.
        
        - value1 : v1                    (int)           [create,query,edit]
        
        - value2 : v2                    (int)           [create,query,edit]
        
        - value3 : v3                    (int)           [create,query,edit]
        
        - value4 : v4                    (int)           [create,query,edit]
            Value for the respective field.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.intFieldGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FrameLayout(Layout):
    def collapseCommand(self, val='True', **kwargs):
        """
        Command executed after the frame is collapsed.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def expandCommand(self, val='True', **kwargs):
        """
        Command executed after the frame is expanded.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getBackgroundShade(self, **kwargs):
        """
        Controls whether the background of the frame layout draws with a shaded effect. It is turned off by default.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getBorderStyle(self, **kwargs):
        """
        This flag is obsolete. The border style is no longer supported. Using this flag will return a warning.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getBorderVisible(self, **kwargs):
        """
        Visibility of the border.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getCollapsable(self, **kwargs):
        """
        Collapsibility of the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getCollapse(self, **kwargs):
        """
        Collapse state of the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getFont(self, **kwargs):
        """
        The font for the frame label.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label string for the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getLabelAlign(self, **kwargs):
        """
        How to align the label. Default is top.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getLabelIndent(self, **kwargs):
        """
        Indentation for the frame label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getLabelVisible(self, **kwargs):
        """
        Visibility of the frame label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getLabelWidth(self, **kwargs):
        """
        Width of the label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getMarginHeight(self, **kwargs):
        """
        Vertical distance between the frame and its children.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getMarginWidth(self, **kwargs):
        """
        Horizontal distance between the frame and its children.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def preCollapseCommand(self, val='True', **kwargs):
        """
        Command executed just before the frame is collapsed.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def preExpandCommand(self, val='True', **kwargs):
        """
        Command executed just before the frame is expanded.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setBackgroundShade(self, val='True', **kwargs):
        """
        Controls whether the background of the frame layout draws with a shaded effect. It is turned off by default.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setBorderStyle(self, val='True', **kwargs):
        """
        This flag is obsolete. The border style is no longer supported. Using this flag will return a warning.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setBorderVisible(self, val='True', **kwargs):
        """
        Visibility of the border.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setCollapsable(self, val='True', **kwargs):
        """
        Collapsibility of the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setCollapse(self, val='True', **kwargs):
        """
        Collapse state of the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setFont(self, val='True', **kwargs):
        """
        The font for the frame label.  Valid values are boldLabelFont, smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont, obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label string for the frame layout.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setLabelAlign(self, val='True', **kwargs):
        """
        How to align the label. Default is top.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setLabelIndent(self, val='True', **kwargs):
        """
        Indentation for the frame label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setLabelVisible(self, val='True', **kwargs):
        """
        Visibility of the frame label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setLabelWidth(self, val='True', **kwargs):
        """
        Width of the label.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setMarginHeight(self, val='True', **kwargs):
        """
        Vertical distance between the frame and its children.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setMarginWidth(self, val='True', **kwargs):
        """
        Horizontal distance between the frame and its children.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates frame layout control. A frame layout may draw a border
        around its child controls as well as a display a title. Frame layouts may also
        be collapsable. Collapsing a frame layout will make the child of the frame
        layout invisible and shrink the frame layout size. The frame layout may then be
        expanded to make its child visible. Note that the frame layout may have only one
        child control.  If you wish to have more than one child inside a frame layout
        then you must use some other control layout as the immediate child of the frame
        layout.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - backgroundShade : bgs          (bool)          [create,query,edit]
            Controls whether the background of the frame layout draws with a shaded effect.
            It is turned off by default.
        
        - borderStyle : bs               (unicode)       [create,query,edit]
            This flag is obsolete. The border style is no longer supported. Using this flag
            will return a warning.
        
        - borderVisible : bv             (bool)          [create,query,edit]
            Visibility of the border.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - collapsable : cll              (bool)          [create,query,edit]
            Collapsibility of the frame layout.
        
        - collapse : cl                  (bool)          [create,query,edit]
            Collapse state of the frame layout.
        
        - collapseCommand : cc           (script)        [create,edit]
            Command executed after the frame is collapsed.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - expandCommand : ec             (script)        [create,edit]
            Command executed after the frame is expanded.
        
        - font : fn                      (unicode)       [create,query,edit]
            The font for the frame label.  Valid values are boldLabelFont,
            smallBoldLabelFont, tinyBoldLabelFont, plainLabelFont, smallPlainLabelFont,
            obliqueLabelFont, smallObliqueLabelFont, fixedWidthFontand smallFixedWidthFont.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label string for the frame layout.
        
        - labelAlign : la                (unicode)       [create,query,edit]
            How to align the label. Default is top.
        
        - labelIndent : li               (int)           [create,query,edit]
            Indentation for the frame label.
        
        - labelVisible : lv              (bool)          [create,query,edit]
            Visibility of the frame label.
        
        - labelWidth : lw                (int)           [create,query,edit]
            Width of the label.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - marginHeight : mh              (int)           [create,query,edit]
            Vertical distance between the frame and its children.
        
        - marginWidth : mw               (int)           [create,query,edit]
            Horizontal distance between the frame and its children.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preCollapseCommand : pcc       (script)        [create,edit]
            Command executed just before the frame is collapsed.
        
        - preExpandCommand : pec         (script)        [create,edit]
            Command executed just before the frame is expanded.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.frameLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class GridLayout(Layout):
    def cellWidthHeight(self, val='True', **kwargs):
        """
        Two positive non-zero integer values for indicating the width and height, respectively, of the cells in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getAllowEmptyCells(self, **kwargs):
        """
        Specify true if you want free positioning of the children in the layout and potentially leaving empty cells between children. Set to false if you want the children to always be packed together. The default is true.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getAutoGrow(self, **kwargs):
        """
        Specify true if you want the grid layout size to grow as children are added.  For example, if the grid layout has 2 columns and 2 rows then adding a fifth child will cause the grid to expand to 3 rows if this flag is true, otherwise the grid will remain the same size and the new child will be hidden from view until you expand the size of the grid using the appropriate flags.  The default is true.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getCellHeight(self, **kwargs):
        """
        A positive non-zero integer value indicating the height of cells in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getCellWidth(self, **kwargs):
        """
        A positive non-zero integer value indicating the width of cells in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getColumnsResizable(self, **kwargs):
        """
        Specify true if you want the number of columns to adjust according to the width of the layout.  Set to false if you want the number of columns to remain fixed when the width of the layout is changed.  The default is false.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getGridOrder(self, **kwargs):
        """
        As opposed to the childArray flag, the gridOrder flag returns the children of the grid Layout in the order they are diplayed in the window.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getNumberOfColumns(self, **kwargs):
        """
        A positive non-zero integer value indicating the number of columns in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getNumberOfRows(self, **kwargs):
        """
        A positive non-zero integer value indicating the number of rows in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def numberOfRowsColumns(self, val='True', **kwargs):
        """
        Two positive non-zero integer values for the number of rows and columns, respectively, in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def position(self, val='True', **kwargs):
        """
        Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child.  Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom.  For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setCellHeight(self, val='True', **kwargs):
        """
        A positive non-zero integer value indicating the height of cells in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setCellWidth(self, val='True', **kwargs):
        """
        A positive non-zero integer value indicating the width of cells in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setNumberOfColumns(self, val='True', **kwargs):
        """
        A positive non-zero integer value indicating the number of columns in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setNumberOfRows(self, val='True', **kwargs):
        """
        A positive non-zero integer value indicating the number of rows in the grid layout.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This layout arranges children in a grid fashion where every cell in the grid is
        the same size.  You may specify the number of rows and columns as well as the
        width and height of the grid cells.
        
        Flags:
        - allowEmptyCells : aec          (bool)          [create,query]
            Specify true if you want free positioning of the children in the layout and
            potentially leaving empty cells between children. Set to false if you want the
            children to always be packed together. The default is true.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - autoGrow : ag                  (bool)          [create,query]
            Specify true if you want the grid layout size to grow as children are added.
            For example, if the grid layout has 2 columns and 2 rows then adding a fifth
            child will cause the grid to expand to 3 rows if this flag is true, otherwise
            the grid will remain the same size and the new child will be hidden from view
            until you expand the size of the grid using the appropriate flags.  The default
            is true.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - cellHeight : ch                (int)           [create,query,edit]
            A positive non-zero integer value indicating the height of cells in the grid
            layout.
        
        - cellWidth : cw                 (int)           [create,query,edit]
            A positive non-zero integer value indicating the width of cells in the grid
            layout.
        
        - cellWidthHeight : cwh          (int, int)      [create,edit]
            Two positive non-zero integer values for indicating the width and height,
            respectively, of the cells in the grid layout.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - columnsResizable : cr          (bool)          [create,query]
            Specify true if you want the number of columns to adjust according to the width
            of the layout.  Set to false if you want the number of columns to remain fixed
            when the width of the layout is changed.  The default is false.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - gridOrder : go                 (bool)          [query]
            As opposed to the childArray flag, the gridOrder flag returns the children of
            the grid Layout in the order they are diplayed in the window.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfColumns : nc           (int)           [create,query,edit]
            A positive non-zero integer value indicating the number of columns in the grid
            layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfRows : nr              (int)           [create,query,edit]
            A positive non-zero integer value indicating the number of rows in the grid
            layout.
        
        - numberOfRowsColumns : nrc      (int, int)      [create,edit]
            Two positive non-zero integer values for the number of rows and columns,
            respectively, in the grid layout.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - position : pos                 (unicode, int)  [create,edit]
            Specify the name of a child control in the grid layout along with a 1-based
            integer value indicating the desired position of the child.  Positions increase
            from left to right within a row and then wrap around to the next row increasing
            from top to bottom.  For example, a grid layout with 3 columns and 2 rows has 6
            visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy
            the second.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.gridLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatFieldGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when the value of any of the fields changes.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed when dragging the invisible slider in any of the fields.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnable1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnable2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnable3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnable4(self, **kwargs):
        """
        Enable state for the respective field.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in LMB , delta in MMB,delta\*10.0 in RMB. Default is 10.0                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Values for all fields.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getValue1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getValue2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getValue3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getValue4(self, **kwargs):
        """
        Value for the respective field.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def precision(self, val='True', **kwargs):
        """
        Set the number of digits to the right of the decimal.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnable1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnable2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnable3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnable4(self, val='True', **kwargs):
        """
        Enable state for the respective field.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in LMB , delta in MMB,delta\*10.0 in RMB. Default is 10.0                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Values for all fields.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setValue1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setValue2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setValue3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setValue4(self, val='True', **kwargs):
        """
        Value for the respective field.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def showTrailingZeros(self, val='True', **kwargs):
        """
        Show trailing zeros or not                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text and editable float
        fields.  The label text is optional and one to four float fields can be created.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when the value of any of the fields changes.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed when dragging the invisible slider in any of the fields.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enable1 : en1                  (bool)          [create,query,edit]
        
        - enable2 : en2                  (bool)          [create,query,edit]
        
        - enable3 : en3                  (bool)          [create,query,edit]
        
        - enable4 : en4                  (bool)          [create,query,edit]
            Enable state for the respective field.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label in the
            group.  Sets the string to be label text to the right of fields.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation this specifies that there will be a label to the left of
            the fields.  Sets the string to be the label text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfFields : nf            (int)           [create]
            Set the number of fields on creation. One to four fields are available.  The
            default is one field.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,edit]
            Set the number of digits to the right of the decimal.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - showTrailingZeros : tze        (bool)          [create,edit]
            Show trailing zeros or not
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in
            LMB , delta in MMB,delta\*10.0 in RMB. Default is 10.0
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float, float, float, float) [create,query,edit]
            Values for all fields.
        
        - value1 : v1                    (float)         [create,query,edit]
        
        - value2 : v2                    (float)         [create,query,edit]
        
        - value3 : v3                    (float)         [create,query,edit]
        
        - value4 : v4                    (float)         [create,query,edit]
            Value for the respective field.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatFieldGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ShelfLayout(Layout):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getAlignment(self, **kwargs):
        """
        Sets the alignment of the buttons in the layout. When horizontalis true, valid options are leftand right. When horizontalis false, valid options are topand bottom.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getCellHeight(self, **kwargs):
        """
        Set or query the height of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getCellWidth(self, **kwargs):
        """
        Set or query the width of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getCellWidthHeight(self, **kwargs):
        """
        Set the width and height of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getHorizontal(self, **kwargs):
        """
        Orientation of the layout. This flag is true by default, which corresponds to a horizontally laid out shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getLtVersion(self, **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getSpacing(self, **kwargs):
        """
        Sets the space between children.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getStyle(self, **kwargs):
        """
        Set or query the current style of the items in the shelf.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getVersion(self, **kwargs):
        """
        Specify the version that this feature was introduced. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def position(self, val='True', **kwargs):
        """
        Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child. Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom. For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setAlignment(self, val='True', **kwargs):
        """
        Sets the alignment of the buttons in the layout. When horizontalis true, valid options are leftand right. When horizontalis false, valid options are topand bottom.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setCellHeight(self, val='True', **kwargs):
        """
        Set or query the height of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setCellWidth(self, val='True', **kwargs):
        """
        Set or query the width of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setCellWidthHeight(self, val='True', **kwargs):
        """
        Set the width and height of the items in the shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setHorizontal(self, val='True', **kwargs):
        """
        Orientation of the layout. This flag is true by default, which corresponds to a horizontally laid out shelf.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setLtVersion(self, val='True', **kwargs):
        """
        This flag is used to specify the Maya LT version that this control feature was introduced, if the version flag is not specified, or if the version flag is specified but its argument is different. This value is only used by Maya LT, and otherwise ignored. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setSpacing(self, val='True', **kwargs):
        """
        Sets the space between children.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setStyle(self, val='True', **kwargs):
        """
        Set or query the current style of the items in the shelf.  Valid styles are iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setVersion(self, val='True', **kwargs):
        """
        Specify the version that this feature was introduced. The argument should be given as a string of the version number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g. 2014.5 should be given as 2014).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a new empty shelf layout. The shelf layout can accept drops
        of commands scripts. Use the addNewShelfTabMEL command to add a shelf to the top
        level shelves.
        
        Flags:
        - alignment : aln                (unicode)       [create,query,edit]
            Sets the alignment of the buttons in the layout. When horizontalis true, valid
            options are leftand right. When horizontalis false, valid options are topand
            bottom.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - cellHeight : ch                (int)           [create,query,edit]
            Set or query the height of the items in the shelf.
        
        - cellWidth : cw                 (int)           [create,query,edit]
            Set or query the width of the items in the shelf.
        
        - cellWidthHeight : cwh          (int, int)      [create,query,edit]
            Set the width and height of the items in the shelf.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontal : hr                (bool)          [create,query,edit]
            Orientation of the layout. This flag is true by default, which corresponds to a
            horizontally laid out shelf.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - ltVersion : lt                 (unicode)       [create,query,edit]
            This flag is used to specify the Maya LT version that this control feature was
            introduced, if the version flag is not specified, or if the version flag is
            specified but its argument is different. This value is only used by Maya LT, and
            otherwise ignored. The argument should be given as a string of the version
            number (e.g. 2014, 2015). Currently only accepts major version numbers (e.g.
            2014.5 should be given as 2014).
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - position : pos                 (unicode, int)  [create,edit]
            Specify the name of a child control in the grid layout along with a 1-based
            integer value indicating the desired position of the child. Positions increase
            from left to right within a row and then wrap around to the next row increasing
            from top to bottom. For example, a grid layout with 3 columns and 2 rows has 6
            visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy
            the second.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - spacing : spa                  (int)           [create,query,edit]
            Sets the space between children.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - style : st                     (unicode)       [create,query,edit]
            Set or query the current style of the items in the shelf.  Valid styles are
            iconOnly, textOnly, iconAndTextHorizontaland iconAndTextVertical.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - version : ver                  (unicode)       [create,query,edit]
            Specify the version that this feature was introduced. The argument should be
            given as a string of the version number (e.g. 2014, 2015). Currently only
            accepts major version numbers (e.g. 2014.5 should be given as 2014).
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.shelfLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class OptionMenu(PopupMenu):
    def addItems(self, items, title='None'):
        """
        Add the specified item list to the OptionMenu, with an optional 'title' item
        """
        ...
    def addMenuItems(self, items, title='None'):
        """
        Add the specified item list to the OptionMenu, with an optional 'title' item
        """
        ...
    def beforeShowPopup(self, val='True', **kwargs):
        """
        Callback that is called just before we show the drop down menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Adds a callback that is called when a new item is selected. The MEL script will have the newly selected item's value substituted for #1. For Python, the callback should be a callable object which accepts one argument, which is the newly selected item's value.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def clear(self):
        """
        Clear all menu items from this OptionMenu
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getAlwaysCallChangeCommand(self, **kwargs):
        """
        Toggle whether to always call the change command, regardless of the change.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getItemListLong(self, **kwargs):
        """
        The long names of the menu items.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getItemListShort(self, **kwargs):
        """
        The short names of the menu items.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getLabel(self, **kwargs):
        """
        The optional label text to the left of the popup menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getMaxVisibleItems(self, **kwargs):
        """
        The maximum number of items that are visible in the popup menu. If the popup contains more items than this, a scrollbar is added automatically.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getNumberOfItems(self, **kwargs):
        """
        The number of menu items.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getSelect(self, **kwargs):
        """
        The current menu item.  The argument and return value is 1-based.  Note that the current menu item can only be set if it is enabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getValue(self, **kwargs):
        """
        The text of the current menu item.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        The optional label text to the left of the popup menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setMaxVisibleItems(self, val='True', **kwargs):
        """
        The maximum number of items that are visible in the popup menu. If the popup contains more items than this, a scrollbar is added automatically.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        The current menu item.  The argument and return value is 1-based.  Note that the current menu item can only be set if it is enabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        The text of the current menu item.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a popup menu control.  The command creates the control and
        provides its menu.  Subsequent calls to the menuItem command will place them in
        the popup.  Note that commands attached to menu items will not get called.
        Attach any commands via the -cc/changedCommand flag.
        
        Flags:
        - alwaysCallChangeCommand : acc  (bool)          [create,query]
            Toggle whether to always call the change command, regardless of the change.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - beforeShowPopup : bsp          (script)        [create,edit]
            Callback that is called just before we show the drop down menu.
        
        - changeCommand : cc             (script)        [create,edit]
            Adds a callback that is called when a new item is selected. The MEL script will
            have the newly selected item's value substituted for #1. For Python, the
            callback should be a callable object which accepts one argument, which is the
            newly selected item's value.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - deleteAllItems : dai           (bool)          []
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - itemListLong : ill             (bool)          [query]
            The long names of the menu items.
        
        - itemListShort : ils            (bool)          [query]
            The short names of the menu items.
        
        - label : l                      (unicode)       [create,query,edit]
            The optional label text to the left of the popup menu.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxVisibleItems : mvi          (int)           [create,query,edit]
            The maximum number of items that are visible in the popup menu. If the popup
            contains more items than this, a scrollbar is added automatically.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfItems : ni             (bool)          [query]
            The number of menu items.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - select : sl                    (int)           [create,query,edit]
            The current menu item.  The argument and return value is 1-based.  Note that the
            current menu item can only be set if it is enabled.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (unicode)       [create,query,edit]
            The text of the current menu item.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.optionMenu`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrFieldSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        The command string is executed when the value of the slider or floatField changes.  It will be executed only once after a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def extraButtonCommand(self, val='True', **kwargs):
        """
        The command string is executed when the extra button is clicked.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getAttribute(self, **kwargs):
        """
        The name of a unique attribute of type double or int. This newly created field will be attached to the attribute, so that modifications to one will change the other.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getExtraButtonIcon(self, **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getFieldMaxValue(self, **kwargs):
        """
        Set the maximum value for the field.  This flag allows you to specify a maximum bound for the field higher than that of the slider.   (See note above about max and min values.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getFieldMinValue(self, **kwargs):
        """
        Set the minimum value for the field.  This flag allows you to specify a minimum bound for the field lower than that of the slider.  (See note above about max and min values.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getFieldStep(self, **kwargs):
        """
        Sets the increment for the float field.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever string you want.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Sets the maximum value for both the slider and the field. (See note above about min and max values)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Sets the minimum value for both the slider and the field. (by default max and min are set according to what is in the attribute, if anything.  If no max and min are specified, or if only one of the two are specified, then no slider is created.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getSliderMaxValue(self, **kwargs):
        """
        Set the maximum value for the slider.  The slider max will be clipped to the field max.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getSliderMinValue(self, **kwargs):
        """
        Set the minimum value for the slider.  The slider min will be clipped to the field min.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getSliderStep(self, **kwargs):
        """
        On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Sets the increment for both the slider and float field.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getVertical(self, **kwargs):
        """
        Whether the orientation of the controls in this group are horizontal (default) or vertical.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def precision(self, val='True', **kwargs):
        """
        Sets the number of digits to the right of the decimal. (If attached to an int attribute, this is automatically set to 0 and cannot be overridden.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setAttribute(self, val='True', **kwargs):
        """
        The name of a unique attribute of type double or int. This newly created field will be attached to the attribute, so that modifications to one will change the other.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setExtraButtonIcon(self, val='True', **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setFieldMaxValue(self, val='True', **kwargs):
        """
        Set the maximum value for the field.  This flag allows you to specify a maximum bound for the field higher than that of the slider.   (See note above about max and min values.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setFieldMinValue(self, val='True', **kwargs):
        """
        Set the minimum value for the field.  This flag allows you to specify a minimum bound for the field lower than that of the slider.  (See note above about max and min values.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setFieldStep(self, val='True', **kwargs):
        """
        Sets the increment for the float field.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever string you want.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Sets the maximum value for both the slider and the field. (See note above about min and max values)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Sets the minimum value for both the slider and the field. (by default max and min are set according to what is in the attribute, if anything.  If no max and min are specified, or if only one of the two are specified, then no slider is created.)                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setSliderMaxValue(self, val='True', **kwargs):
        """
        Set the maximum value for the slider.  The slider max will be clipped to the field max.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setSliderMinValue(self, val='True', **kwargs):
        """
        Set the minimum value for the slider.  The slider min will be clipped to the field min.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setSliderStep(self, val='True', **kwargs):
        """
        On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Sets the increment for both the slider and float field.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text, float field and float
        slider (for values with a min or max specified) The group also supports the
        notion of a larger secondary range of possible field values. If an attribute is
        specified for this object, then it will use any min and max values defined in
        the attribute.  The user-specified values can reduce the min and max, but cannot
        expand them. The field created here is an expression field -- while normally
        operating as a float field, the user can type in any expression starting with
        the character =.  This will expand the field to occupy the space previously
        taken by the slider. The field also has an automatic menu brought up by the
        right mouse button. The contents of this menu change depending on the state of
        the attribute being watched by the field.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attribute : at                 (unicode)       [create,query,edit]
            The name of a unique attribute of type double or int. This newly created field
            will be attached to the attribute, so that modifications to one will change the
            other.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            The command string is executed when the value of the slider or floatField
            changes.  It will be executed only once after a drag of the slider.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraButton : eb               (bool)          [create]
            Add an extra icon button to the end of this control.
        
        - extraButtonCommand : ebc       (script)        [create,edit]
            The command string is executed when the extra button is clicked.
        
        - extraButtonIcon : ebi          (unicode)       [create,query,edit]
            The icon file name of the extra button.
        
        - fieldMaxValue : fmx            (float)         [create,query,edit]
            Set the maximum value for the field.  This flag allows you to specify a maximum
            bound for the field higher than that of the slider.   (See note above about max
            and min values.)
        
        - fieldMinValue : fmn            (float)         [create,query,edit]
            Set the minimum value for the field.  This flag allows you to specify a minimum
            bound for the field lower than that of the slider.  (See note above about max
            and min values.)
        
        - fieldStep : fs                 (float)         [create,query,edit]
            Sets the increment for the float field.
        
        - forceAddMapButton : fmb        (bool)          [create]
            Force adding a map button to this control. If this option is true, option
            hideMapButton is suppressed.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - hideMapButton : hmb            (bool)          [create]
            Force the map button to remain hidden for this control.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            By default, the label of this field will be the name of the attribute.  This
            flag can be used to override that name with whatever string you want.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Sets the maximum value for both the slider and the field. (See note above about
            min and max values)
        
        - minValue : min                 (float)         [create,query,edit]
            Sets the minimum value for both the slider and the field. (by default max and
            min are set according to what is in the attribute, if anything.  If no max and
            min are specified, or if only one of the two are specified, then no slider is
            created.)
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,edit]
            Sets the number of digits to the right of the decimal. (If attached to an int
            attribute, this is automatically set to 0 and cannot be overridden.)
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - sliderMaxValue : smx           (float)         [create,query,edit]
            Set the maximum value for the slider.  The slider max will be clipped to the
            field max.
        
        - sliderMinValue : smn           (float)         [create,query,edit]
            Set the minimum value for the slider.  The slider min will be clipped to the
            field min.
        
        - sliderStep : ss                (float)         [create,query,edit]
            On Linux the slider step value represents the amount the value will increase or
            decrease when you click either side of the slider.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Sets the increment for both the slider and float field.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - vertical : vr                  (bool)          [create,query]
            Whether the orientation of the controls in this group are horizontal (default)
            or vertical.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrFieldSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrNavigationControlGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def extraButtonCommand(self, val='True', **kwargs):
        """
        The command string is executed when the extra button is clicked.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getAttrNavDecision(self, **kwargs):
        """
        The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getAttribute(self, **kwargs):
        """
        The name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getConnectAttrToDropped(self, **kwargs):
        """
        The script to execute when a node is dragged and dropped onto an attribute (multilister dnd attribute editor). Your script should take in two arguments: the source node and destination attribute respectively.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getConnectNodeToDropped(self, **kwargs):
        """
        The script to execute when a node is dragged and dropped onto a node (the multilister issues this).  Your script should take in two arguments: the source node and destination node respectively.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getConnectToExisting(self, **kwargs):
        """
        The script to execute when a connection should be made to an existing node.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getCreateNew(self, **kwargs):
        """
        The script to execute when a new connectionis requested.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getDefaultTraversal(self, **kwargs):
        """
        The script to execute to find out the name of the default traversal node.  The script you attach should be able to take in one argument (the attribute) and return the name of the node that is the default traversal node.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getDelete(self, **kwargs):
        """
        The script to execute when the connection (and the node connected to) should be deleted.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getDisconnect(self, **kwargs):
        """
        The script to execute when a disconnectionis requested.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getExtraButtonIcon(self, **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getIgnore(self, **kwargs):
        """
        The script to execute when the connection should be ignored.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Text for the control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getRelatedNodes(self, **kwargs):
        """
        The script to execute to find out what the related nodes are.  The script you attach should be able to take in one argument (the attribute) and return a list of strings that are the name of the nodes that are related.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getUnignore(self, **kwargs):
        """
        The script to execute when the connection should be unignored.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def noIgnorableMenu(self, val='True', **kwargs):
        """
        Not show ignorable related popup menu when right click the label.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def noKeyableMenu(self, val='True', **kwargs):
        """
        Not show keyable related popup menu when right click the label.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setAttrNavDecision(self, val='True', **kwargs):
        """
        The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setAttribute(self, val='True', **kwargs):
        """
        The name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setConnectAttrToDropped(self, val='True', **kwargs):
        """
        The script to execute when a node is dragged and dropped onto an attribute (multilister dnd attribute editor). Your script should take in two arguments: the source node and destination attribute respectively.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setConnectNodeToDropped(self, val='True', **kwargs):
        """
        The script to execute when a node is dragged and dropped onto a node (the multilister issues this).  Your script should take in two arguments: the source node and destination node respectively.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setConnectToExisting(self, val='True', **kwargs):
        """
        The script to execute when a connection should be made to an existing node.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setCreateNew(self, val='True', **kwargs):
        """
        The script to execute when a new connectionis requested.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setDefaultTraversal(self, val='True', **kwargs):
        """
        The script to execute to find out the name of the default traversal node.  The script you attach should be able to take in one argument (the attribute) and return the name of the node that is the default traversal node.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setDelete(self, val='True', **kwargs):
        """
        The script to execute when the connection (and the node connected to) should be deleted.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setDisconnect(self, val='True', **kwargs):
        """
        The script to execute when a disconnectionis requested.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setExtraButtonIcon(self, val='True', **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setIgnore(self, val='True', **kwargs):
        """
        The script to execute when the connection should be ignored.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Text for the control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setRelatedNodes(self, val='True', **kwargs):
        """
        The script to execute to find out what the related nodes are.  The script you attach should be able to take in one argument (the attribute) and return a list of strings that are the name of the nodes that are related.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setUnignore(self, val='True', **kwargs):
        """
        The script to execute when the connection should be unignored.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged label navigation button. The group is used to
        help the user manage connections to a particular attribute. When creating the
        control you have the opportunity to attach scripts to the control that are
        executed on various UI events.  You can define what happens when the navigation
        button is pressed, and when a node is dragged and dropped onto this attribute.
        The navigation button can traverse to the connected node or can bring up UI to
        create new connections to the attribute. The button also can show you state
        information: if there already exists a connection/if the connection is ignored.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attrNavDecision : attrNavDecision (PyNode, <type 'unicode'>) [create,query,edit]
            The first argument is the name of an attribute. The button will be attached to
            the attribute so the button can be kept in synch with the attribute.  The second
            argument is the navigatorDecisionString that can guide the behaviour that the
            navigator implements.
        
        - attribute : at                 (PyNode)        [create,query,edit]
            The name of an attribute. The button will be attached to the attribute so the
            button can be kept in synch with the attribute.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - connectAttrToDropped : cad     (script)        [create,query,edit]
            The script to execute when a node is dragged and dropped onto an attribute
            (multilister dnd attribute editor). Your script should take in two arguments:
            the source node and destination attribute respectively.
        
        - connectNodeToDropped : cnd     (script)        [create,query,edit]
            The script to execute when a node is dragged and dropped onto a node (the
            multilister issues this).  Your script should take in two arguments: the source
            node and destination node respectively.
        
        - connectToExisting : ce         (script)        [create,query,edit]
            The script to execute when a connection should be made to an existing node.
        
        - createNew : cn                 (script)        [create,query,edit]
            The script to execute when a new connectionis requested.
        
        - defaultTraversal : dtv         (script)        [create,query,edit]
            The script to execute to find out the name of the default traversal node.  The
            script you attach should be able to take in one argument (the attribute) and
            return the name of the node that is the default traversal node.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - delete : delete                (unicode)       [create,query,edit]
            The script to execute when the connection (and the node connected to) should be
            deleted.
        
        - disconnect : d                 (script)        [create,query,edit]
            The script to execute when a disconnectionis requested.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraButton : eb               (bool)          [create]
            Add an extra icon button to the last of this control.
        
        - extraButtonCommand : ebc       (script)        [create,edit]
            The command string is executed when the extra button is clicked.
        
        - extraButtonIcon : ebi          (unicode)       [create,query,edit]
            The icon file name of the extra button.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - ignore : i                     (script)        [create,query,edit]
            The script to execute when the connection should be ignored.
        
        - ignoreNotSupported : ins       (bool)          []
            Obsolete flag; has no effect.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Text for the control.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - noIgnorableMenu : nim          (bool)          [create,edit]
            Not show ignorable related popup menu when right click the label.
        
        - noKeyableMenu : nkm            (bool)          [create,edit]
            Not show keyable related popup menu when right click the label.
        
        - notIgnorableMenu : nim         (bool)          []
        
        - notKeyableMenu : nkm           (bool)          []
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - relatedNodes : ren             (script)        [create,query,edit]
            The script to execute to find out what the related nodes are.  The script you
            attach should be able to take in one argument (the attribute) and return a list
            of strings that are the name of the nodes that are related.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - unignore : u                   (script)        [create,query,edit]
            The script to execute when the connection should be unignored.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrNavigationControlGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class PaneLayout(Layout):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getActiveFrameThickness(self, **kwargs):
        """
        The thickness of the frame drawn around the active frame. Specify an integer value greater than or equal to 0.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getActivePane(self, **kwargs):
        """
        The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is the full or short name of the child control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getActivePaneIndex(self, **kwargs):
        """
        The active pane index.  The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  If any other index is specified then the current active pane is deactivated.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getConfiguration(self, **kwargs):
        """
        Set the layout configuration for the panes.  Valid values are: single, horizontal2, vertical2, horizontal3, vertical3, top3, left3, bottom3, right3, horizontal4, vertical4, top4, left4, bottom4, right4, quad
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getNumberOfVisiblePanes(self, **kwargs):
        """
        Return the number of panes visible for the present configuration.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPane1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPane2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPane3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPane4(self, **kwargs):
        """
        Return the name of the control in the respective pane.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPaneSize(self, **kwargs):
        """
        The size of a pane in the current pane layout configuration.  The first argument specifies the pane index and is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  The width and height of the pane are specified by the last two arguments.  Both are integer values and they indicate the percentage of the total pane layout size rather that the number of pixels.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPaneUnderPointer(self, **kwargs):
        """
        Return the name of the child occupying the pane that the pointer is currently over.  An empty string is returned if the pointer is not over a pane.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getSeparatorThickness(self, **kwargs):
        """
        The thickness of the separators between the panes. Specify an integer value greater than 0. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def separatorMovedCommand(self, val='True', **kwargs):
        """
        This command executed when the pane separators are moved.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setActiveFrameThickness(self, val='True', **kwargs):
        """
        The thickness of the frame drawn around the active frame. Specify an integer value greater than or equal to 0.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setActivePane(self, val='True', **kwargs):
        """
        The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is the full or short name of the child control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setActivePaneIndex(self, val='True', **kwargs):
        """
        The active pane index.  The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePaneor -api/activePaneIndexwill automatically deactivate the previously active pane.  The argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  If any other index is specified then the current active pane is deactivated.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setConfiguration(self, val='True', **kwargs):
        """
        Set the layout configuration for the panes.  Valid values are: single, horizontal2, vertical2, horizontal3, vertical3, top3, left3, bottom3, right3, horizontal4, vertical4, top4, left4, bottom4, right4, quad
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setPane(self, val='True', **kwargs):
        """
        This flag allows you to put a child of this layout in a particular pane.  The first argument is the full or short name of the control.  The second argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setPaneSize(self, val='True', **kwargs):
        """
        The size of a pane in the current pane layout configuration.  The first argument specifies the pane index and is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  The width and height of the pane are specified by the last two arguments.  Both are integer values and they indicate the percentage of the total pane layout size rather that the number of pixels.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setSeparatorThickness(self, val='True', **kwargs):
        """
        The thickness of the separators between the panes. Specify an integer value greater than 0. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def staticHeightPane(self, val='True', **kwargs):
        """
        Set a pane to have a static height, i.e. its height will not change when the layout is dynamically resized. Only one pane can be set to have a static height at one time. This state will be retained even if another child is switched into the pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is changed.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def staticWidthPane(self, val='True', **kwargs):
        """
        Set a pane to have a static width, i.e. its width will not change when the layout is dynamically resized. Only one pane can be set to have a static width at one time. This state will be retained even if another child is switched into the pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is changed.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a pane layout.  A pane layout may have any number of
        children but at any one time only certain children may be visible, as determined
        by the current layout configuration.  For example a horizontally split pane
        shows only two children, one on top of the other and a visible separator between
        the two.  The separator may be moved to vary the size of each pane.  Various
        other pane configurations are available and all display a moveable separator
        that define the size of each pane in the layout.
        
        Flags:
        - activeFrameThickness : aft     (int)           [create,query,edit]
            The thickness of the frame drawn around the active frame. Specify an integer
            value greater than or equal to 0.
        
        - activePane : ap                (unicode)       [create,query,edit]
            The active pane has a colored border surrounding it.  Only one pane may be
            active at any one time.  Using either of the flags -ap/activePaneor
            -api/activePaneIndexwill automatically deactivate the previously active pane.
            The argument is the full or short name of the child control.
        
        - activePaneIndex : api          (int)           [create,query,edit]
            The active pane index.  The active pane has a colored border surrounding it.
            Only one pane may be active at any one time.  Using either of the flags
            -ap/activePaneor -api/activePaneIndexwill automatically deactivate the
            previously active pane.  The argument is an integer value ranging from 1 to 4.
            Panes for any particular configuration are numbered clockwise beginning with the
            pane in the top left corner of the layout.  If any other index is specified then
            the current active pane is deactivated.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - configuration : cn             (unicode)       [create,query,edit]
            Set the layout configuration for the panes.  Valid values are: single,
            horizontal2, vertical2, horizontal3, vertical3, top3, left3, bottom3, right3,
            horizontal4, vertical4, top4, left4, bottom4, right4, quad
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfVisiblePanes : nvp     (bool)          [query]
            Return the number of panes visible for the present configuration.
        
        - pane1 : p1                     (bool)          [query]
        
        - pane2 : p2                     (bool)          [query]
        
        - pane3 : p3                     (bool)          [query]
        
        - pane4 : p4                     (bool)          [query]
            Return the name of the control in the respective pane.
        
        - paneSize : ps                  (int, int, int) [create,query,edit]
            The size of a pane in the current pane layout configuration.  The first argument
            specifies the pane index and is an integer value ranging from 1 to 4.  Panes for
            any particular configuration are numbered clockwise beginning with the pane in
            the top left corner of the layout.  The width and height of the pane are
            specified by the last two arguments.  Both are integer values and they indicate
            the percentage of the total pane layout size rather that the number of pixels.
        
        - paneUnderPointer : pup         (bool)          [query]
            Return the name of the child occupying the pane that the pointer is currently
            over.  An empty string is returned if the pointer is not over a pane.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - separatorMovedCommand : smc    (script)        [create,edit]
            This command executed when the pane separators are moved.
        
        - separatorThickness : st        (int)           [create,query,edit]
            The thickness of the separators between the panes. Specify an integer value
            greater than 0. This flag has no effect on Windows systems.
        
        - setPane : sp                   (unicode, int)  [create,edit]
            This flag allows you to put a child of this layout in a particular pane.  The
            first argument is the full or short name of the control.  The second argument is
            an integer value ranging from 1 to 4.  Panes for any particular configuration
            are numbered clockwise beginning with the pane in the top left corner of the
            layout.
        
        - staticHeightPane : shp         (int)           [create,edit]
            Set a pane to have a static height, i.e. its height will not change when the
            layout is dynamically resized. Only one pane can be set to have a static height
            at one time. This state will be retained even if another child is switched into
            the pane. Specify 0 to set a pane back to the default state. Any state will be
            lost if the pane configuration is changed.
        
        - staticWidthPane : swp          (int)           [create,edit]
            Set a pane to have a static width, i.e. its width will not change when the
            layout is dynamically resized. Only one pane can be set to have a static width
            at one time. This state will be retained even if another child is switched into
            the pane. Specify 0 to set a pane back to the default state. Any state will be
            lost if the pane configuration is changed.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.paneLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrColorSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getAttrNavDecision(self, **kwargs):
        """
        The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getAttribute(self, **kwargs):
        """
        The name of a unique attribute of type 3double.  This newly created field will be attached to the attribute, so that modifications to one will change the other.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Specifies the color in hsv style.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Specifies the color in rgb style.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getShowButton(self, **kwargs):
        """
        Control the display of the texture link button. True by default (show it).                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setAttrNavDecision(self, val='True', **kwargs):
        """
        The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setAttribute(self, val='True', **kwargs):
        """
        The name of a unique attribute of type 3double.  This newly created field will be attached to the attribute, so that modifications to one will change the other.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setHsvValue(self, val='True', **kwargs):
        """
        Specifies the color in hsv style.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setRgbValue(self, val='True', **kwargs):
        """
        Specifies the color in rgb style.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setShowButton(self, val='True', **kwargs):
        """
        Control the display of the texture link button. True by default (show it).                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. Create
        a color slider group consisting of a label, a color canvas, a slider and a
        button.  Clicking on the canvas will bring up the color editor.  If the button
        is visible, it will allow you to map a texture to the attribute.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attrNavDecision : attrNavDecision (PyNode, <type 'unicode'>) [create,query,edit]
            The first argument is the name of an attribute. The button will be attached to
            the attribute so the button can be kept in synch with the attribute.  The second
            argument is the navigatorDecisionString that can guide the behaviour that the
            navigator implements.
        
        - attribute : at                 (unicode)       [create,query,edit]
            The name of a unique attribute of type 3double.  This newly created field will
            be attached to the attribute, so that modifications to one will change the
            other.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hsvValue : hsv                 (float, float, float) [create,query,edit]
            Specifies the color in hsv style.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            By default, the label of this field will be the name of the attribute.  This
            flag can be used to override that name with whatever the user wants.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rgbValue : rgb                 (float, float, float) [create,query,edit]
            Specifies the color in rgb style.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - showButton : sb                (bool)          [create,query,edit]
            Control the display of the texture link button. True by default (show it).
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrColorSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class TextFieldButtonGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def buttonCommand(self, val='True', **kwargs):
        """
        Command attached to the button.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the field text changes and user presses Enter or Return.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def forceChangeCommand(self, val='True', **kwargs):
        """
        If used together with -text or -inserText flag, change command will be executed after text modification.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getButtonLabel(self, **kwargs):
        """
        Label text of the button.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getEnableButton(self, **kwargs):
        """
        Enable state of the button.  By default, this flag is set to true and the button is enabled.  Specify true, and the button will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getFileName(self, **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getInsertionPosition(self, **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getPlaceholderText(self, **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getText(self, **kwargs):
        """
        Text in the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def insertText(self, val='True', **kwargs):
        """
        Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setButtonLabel(self, val='True', **kwargs):
        """
        Label text of the button.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/textflag regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setEnableButton(self, val='True', **kwargs):
        """
        Enable state of the button.  By default, this flag is set to true and the button is enabled.  Specify true, and the button will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setFileName(self, val='True', **kwargs):
        """
        Text in the field as a filename. This does conversions between internal and external (UI) file representation.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setInsertionPosition(self, val='True', **kwargs):
        """
        The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setPlaceholderText(self, val='True', **kwargs):
        """
        Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setText(self, val='True', **kwargs):
        """
        Text in the field.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    def textChangedCommand(self, val='True', **kwargs):
        """
        Command executed immediately when the field text changes.                  
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command adds a button to the textFieldGrp command.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - buttonCommand : bc             (script)        [create,edit]
            Command attached to the button.
        
        - buttonLabel : bl               (unicode)       [create,query,edit]
            Label text of the button.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the field text changes and user presses Enter or Return.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the field.  By default, this flag is set to true and the field
            value may be changed by typing into it. If false then the field is 'read only'
            and can not be typed into. The text in the field can always be changed with the
            -tx/textflag regardless of the state of the -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableButton : eb              (bool)          [create,query,edit]
            Enable state of the button.  By default, this flag is set to true and the button
            is enabled.  Specify true, and the button will appear dimmed or greyed-out
            indicating it is disabled.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fileName : fi                  (unicode)       [create,query,edit]
            Text in the field as a filename. This does conversions between internal and
            external (UI) file representation.
        
        - forceChangeCommand : fcc       (bool)          [create,edit]
            If used together with -text or -inserText flag, change command will be executed
            after text modification.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - insertText : it                (unicode)       [create,edit]
            Insert text into the field at the current insertion position (specified by the
            -ip/insertionPosition flag).
        
        - insertionPosition : ip         (int)           [create,query,edit]
            The insertion position for inserted text.  This is a 1 based value where
            position 1 specifies the beginning of the field.  Position 0 may be used to
            specify the end of the field.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the group.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - placeholderText : pht          (unicode)       [create,query,edit]
            Setting this property makes the line edit display a grayed-out placeholder text
            as long as the text field is empty and the widget doesn't have focus. By
            default, this property contains an empty string.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - text : tx                      (unicode)       [create,query,edit]
            Text in the field.
        
        - textChangedCommand : tcc       (script)        [create,edit]
            Command executed immediately when the field text changes.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.textFieldButtonGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ColorIndexSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command executed when the value changes by dragging the slider's value marker.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getForceDragRefresh(self, **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getInvisible(self, **kwargs):
        """
        Set the invisible color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Maximum color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Minimum color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setForceDragRefresh(self, val='True', **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setInvisible(self, val='True', **kwargs):
        """
        Set the invisible color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Maximum color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Minimum color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Color index.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a color slider group consisting of a label, a color canvas and a
        slider. The value of the slider defines a color index into the a color table.
        The corresponding color is displayed in the canvas.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the value changes.  This command is not invoked when the
            value changes via the -v/value flag.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command executed when the value changes by dragging the slider's value marker.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            Sets the string to be the text for the extra label.
        
        - forceDragRefresh : fdr         (bool)          [create,query,edit]
            If used then force refresh on drag
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - invisible : inv                (int)           [create,query,edit]
            Set the invisible color index.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the group.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (int)           [create,query,edit]
            Maximum color index.
        
        - minValue : min                 (int)           [create,query,edit]
            Minimum color index.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (int)           [create,query,edit]
            Color index.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.colorIndexSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FormLayout(Layout):
    def __init__(self, name='None', orientation="'vertical'", spacing='2', reversed='False', ratios='None', **kwargs):
        """
        spacing - absolute space between controls
        orientation - the orientation of the layout [ AutoLayout.HORIZONTAL | AutoLayout.VERTICAL ]
        """
        ...
    def attachControl(self, *args): ...
    def attachForm(self, *args): ...
    def attachNone(self, *args): ...
    def attachOppositeControl(self, val='True', **kwargs):
        """
        Arguments are: control, edge, offset, control Valid edge values are: top| bottom| left| right. Attach a control to the opposite side of another control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def attachOppositeForm(self, val='True', **kwargs):
        """
        Arguments are: control, edge, offset. Valid edge values are: top| bottom| left| right. Attach a control to the opposite side of the form.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def attachPosition(self, *args): ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def flip(self):
        """
        Flip the orientation of the layout
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getNumberOfDivisions(self, **kwargs):
        """
        Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def hDistribute(self, *ratios): ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def redistribute(self, *ratios):
        """
        Redistribute the child controls based on the ratios.
        If not ratios are given (or not enough), 1 will be used
        """
        ...
    def reset(self): ...
    def reverse(self):
        """
        Reverse the children order
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setNumberOfDivisions(self, val='True', **kwargs):
        """
        Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    def vDistribute(self, *ratios): ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a form layout control. A form layout allows absolute and
        relative positioning of the controls that are its immediate children. Controls
        have four edges: top, left, bottom and right. There are only two directions that
        children can be positioned in, right-left and up-down. The attach flags take the
        direction of an attachment from the argument that names the edge to attach (the
        second argument). Any or all edges of a child may be attached. There are six
        ways to attach them: Attach to Form - Attaches an edge to the relevant side of
        the form layout. Thus -attachForm button3 leftwill attach the left edge of the
        button to the left edge of the form.Attach to Opposite Side of Form - Attaches
        an edge relative to the furthest side of the form layout.Attach to Another
        Control - Attaches an edge to the closest edge of the other control named.Attach
        to Opposite Side of Another Control - Attaches an edge relative to the furthest
        side of another control.Attach to Position - Attaches an edge to a position on
        the form layout.  The position is given as a fixed fraction of the
        -nd/numDivisions value and as this value defaults to 100 it is easiest to think
        of it as a percentage of the form's size.Attach to Nothing - Attaches an edge to
        nothing. The size of the child control will determine this edge's position.Each
        edge attachment may have an offset that acts to separate controls visually.
        There is no default positioning relationship so to have children appear in the
        form they must have at least one edge attached in each direction. Note:In the
        flag definitions the arguments follow these rules: controlmust be the name of an
        immediate child of the form layout.edgemust be one of top, left, bottom, or
        right.positionmay range from 0 to the number of divisions as specified with the
        -nd/numberOfDivisions flag and gives the fraction of the width of the form as a
        measurement. This normally means 0-100 so  positionmay be thought of as a
        percentage.offsetis an integer value in pixels.These are multi-use flags so any
        number of attachments may be made in a single command. Note:Avoid making control
        attachments that form a loop in control dependencies. For example: window;
        string $form = `formLayout`; string $btn1 = `button`; string $btn2 = `button`;
        string $btn3 = `button`;formLayout -edit-attachControl $btn2 top2
        $btn1-attachControl $btn3 top2 $btn2-attachControl $btn1 right2 $btn3
        $form;showWindow; $btn2 is attached to $btn1, $btn3 is attached to $btn2, and
        $btn1 is attached to $btn3. Thus, the placement of $btn1 is dependent on the
        placement of $btn3, which is dependent on the placement of $btn2, which is
        dependent on the placement of $btn1. The last control attachment will have
        created a loop in the dependencies. To prevent runtime errors, Maya will ignore
        this attachment and instead issue a warning that a cyclical control attachment
        has been detected in the script.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attachControl : ac             (unicode, unicode, int, unicode) [create,edit]
            Arguments are: control, edge, offset, control Valid edge values are: top|
            bottom| left| right. Attach a control to another control.
        
        - attachForm : af                (unicode, unicode, int) [create,edit]
            Arguments are: control, edge, offset. Valid edge values are: top| bottom| left|
            right. Attach the specified control to the form, offset by the specified amount.
        
        - attachNone : an                (unicode, unicode) [create,edit]
            Arguments are: control, edge Valid edge values are: top| bottom| left| right.
            Attach a control to nothing.
        
        - attachOppositeControl : aoc    (unicode, unicode, int, unicode) [create,edit]
            Arguments are: control, edge, offset, control Valid edge values are: top|
            bottom| left| right. Attach a control to the opposite side of another control.
        
        - attachOppositeForm : aof       (unicode, unicode, int) [create,edit]
            Arguments are: control, edge, offset. Valid edge values are: top| bottom| left|
            right. Attach a control to the opposite side of the form.
        
        - attachPosition : ap            (unicode, unicode, int, int) [create,edit]
            Arguments are: control, edge, offset, position Valid edge values are: top|
            bottom| left| right. Attach a control to a position in the form.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfDivisions : nd         (int)           [create,query,edit]
            Specify the number of horizontal and vertical divisions across the form. Value
            must be greater than 0.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.formLayout`
        """
        ...
    @staticmethod
    def __new__(cls, name='None', **kwargs): ...
    HORIZONTAL : int
    
    Orientation : general.Enum
    
    VERTICAL : int
    
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class AttrFieldGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        The command string is executed when the value of any of the floatFields change.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def extraButtonCommand(self, val='True', **kwargs):
        """
        The command string is executed when the extra button is clicked.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getAttribute(self, **kwargs):
        """
        The name of a unique attribute of type vector.  This newly created field will be attached to the attribute, so that modifications to one will change the other.  A vectorattribute is any compound attribute whose children consist of two to four double-valued attributes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getExtraButtonIcon(self, **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        set an optional string that will be positioned to the right of all the fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Sets the maximum value for all fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Sets the minimum value for all fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Sets the increment for all fields                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def precision(self, val='True', **kwargs):
        """
        Sets the precision for all fields                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setAttribute(self, val='True', **kwargs):
        """
        The name of a unique attribute of type vector.  This newly created field will be attached to the attribute, so that modifications to one will change the other.  A vectorattribute is any compound attribute whose children consist of two to four double-valued attributes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setExtraButtonIcon(self, val='True', **kwargs):
        """
        The icon file name of the extra button.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        set an optional string that will be positioned to the right of all the fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Sets the maximum value for all fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Sets the minimum value for all fields.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Sets the increment for all fields                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text, plus two to four float
        fields.  These fields will be attached to the specified vector attribute, so
        that changes in either will be reflected in the other. The fields created here
        are expression fields -- while normally operating as a float field, the user can
        type in any expression starting with the character -. The field also has an
        automatic menu brought up by the right mouse button.  The contents of this menu
        change depending on the state of the attribute being watched by the field.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - attribute : at                 (unicode)       [create,query,edit]
            The name of a unique attribute of type vector.  This newly created field will be
            attached to the attribute, so that modifications to one will change the other.
            A vectorattribute is any compound attribute whose children consist of two to
            four double-valued attributes.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            The command string is executed when the value of any of the floatFields change.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraButton : eb               (bool)          [create]
            Add an extra icon button to the end of this control (before extra label).
        
        - extraButtonCommand : ebc       (script)        [create,edit]
            The command string is executed when the extra button is clicked.
        
        - extraButtonIcon : ebi          (unicode)       [create,query,edit]
            The icon file name of the extra button.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            set an optional string that will be positioned to the right of all the fields.
        
        - forceAddMapButton : fmb        (bool)          [create]
            Force adding a map button to this control. If this option is true, option
            hideMapButton is suppressed.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - hideMapButton : hmb            (bool)          [create]
            Force the map button to remain hidden for this control.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            By default, the label of this field will be the name of the attribute.  This
            flag can be used to override that name with whatever the user wants.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Sets the maximum value for all fields.
        
        - minValue : min                 (float)         [create,query,edit]
            Sets the minimum value for all fields.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfFields : nf            (int)           [create]
            sets the number of fields.  Only allowed values are 2 to 4.  If not specified,
            defaults to 3.  NOTE: if the -at flag is used when this widget is created, the
            number of children in the attribute will determine the number of fields.  Also
            note:  after creation, the number of fields cannot be changed with the -e flag.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,edit]
            Sets the precision for all fields
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Sets the increment for all fields
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.attrFieldGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ColorSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when slider value changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed when slider value marker is dragged.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getForceDragRefresh(self, **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getHsvValue(self, **kwargs):
        """
        Color in hue, saturation, and value format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getRgbValue(self, **kwargs):
        """
        Color in red, green, and blue format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setForceDragRefresh(self, val='True', **kwargs):
        """
        If used then force refresh on drag                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setHsvValue(self, val='True', **kwargs):
        """
        Color in hue, saturation, and value format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        Label text for the group.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setRgbValue(self, val='True', **kwargs):
        """
        Color in red, green, and blue format.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a color Slider group consisting of a label, a color canvas and a
        slider.  Clicking on the canvas will bring up the color editor dialog.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when slider value changes.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed when slider value marker is dragged.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - forceDragRefresh : fdr         (bool)          [create,query,edit]
            If used then force refresh on drag
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - hsvValue : hsv                 (float, float, float) [create,query,edit]
            Color in hue, saturation, and value format.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            Label text for the group.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rgbValue : rgb                 (float, float, float) [create,query,edit]
            Color in red, green, and blue format.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.colorSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class RadioButtonGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of a radio button from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def changeCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def changeCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def changeCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def changeCommand4(self, val='True', **kwargs):
        """
        Specify a changed state command for each respective radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getAnnotation1(self, **kwargs):
        """
        specifies the tooptip of the first radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getAnnotation2(self, **kwargs):
        """
        specifies the tooptip of the second radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getAnnotation3(self, **kwargs):
        """
        specifies the tooptip of the third radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getAnnotation4(self, **kwargs):
        """
        specifies the tooptip of the fourth radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getData1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getData2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getData3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getData4(self, **kwargs):
        """
        Internal data associated with each radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the group.  By default, this flag is set to true and the radio button values may be changed by clicking on them.  If false then the radio buttons are 'read only' and can not be clicked on. The value of the radio button can always be changed with the sl/selectflags regardless of the state of the ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnable1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnable2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnable3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnable4(self, **kwargs):
        """
        Enable state of the individual radio buttons.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        When present on creation an optional text label will be built with the group.  The string specifies the label text.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabel1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabel2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabel3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabel4(self, **kwargs):
        """
        Specify label strings for the respective radio buttons in the group.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabelAnnotation(self, **kwargs):
        """
        when present on creation an optional text label will be built with the group . The string specifies the label tooltip                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabelArray2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabelArray3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getLabelArray4(self, **kwargs):
        """
        Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Selected radio button.  The argument is a 1 based integer.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getVertical(self, **kwargs):
        """
        Whether the orientation of the radio buttons in this group are horizontal (default) or vertical.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def offCommand(self, val='True', **kwargs):
        """
        Command executed when any radio button turns off.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def offCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def offCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def offCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def offCommand4(self, val='True', **kwargs):
        """
        Off command for each respective radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def onCommand(self, val='True', **kwargs):
        """
        Command executed when any radio button turns on.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def onCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def onCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def onCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def onCommand4(self, val='True', **kwargs):
        """
        On command for each respective radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setAnnotation1(self, val='True', **kwargs):
        """
        specifies the tooptip of the first radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setAnnotation2(self, val='True', **kwargs):
        """
        specifies the tooptip of the second radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setAnnotation3(self, val='True', **kwargs):
        """
        specifies the tooptip of the third radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setAnnotation4(self, val='True', **kwargs):
        """
        specifies the tooptip of the fourth radiobutton                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setData1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setData2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setData3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setData4(self, val='True', **kwargs):
        """
        Internal data associated with each radio button.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the group.  By default, this flag is set to true and the radio button values may be changed by clicking on them.  If false then the radio buttons are 'read only' and can not be clicked on. The value of the radio button can always be changed with the sl/selectflags regardless of the state of the ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnable1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnable2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnable3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnable4(self, val='True', **kwargs):
        """
        Enable state of the individual radio buttons.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        When present on creation an optional text label will be built with the group.  The string specifies the label text.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabel1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabel2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabel3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabel4(self, val='True', **kwargs):
        """
        Specify label strings for the respective radio buttons in the group.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabelAnnotation(self, val='True', **kwargs):
        """
        when present on creation an optional text label will be built with the group . The string specifies the label tooltip                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabelArray2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabelArray3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setLabelArray4(self, val='True', **kwargs):
        """
        Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Selected radio button.  The argument is a 1 based integer.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates from one to four radio buttons in a single row. By default the
        radio buttons will share a single collection, but they can also share the
        collection of another radio button group.  The buttons can also have an optional
        text label.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - annotation1 : an1              (unicode)       [create,query,edit]
            specifies the tooptip of the first radiobutton
        
        - annotation2 : an2              (unicode)       [create,query,edit]
            specifies the tooptip of the second radiobutton
        
        - annotation3 : an3              (unicode)       [create,query,edit]
            specifies the tooptip of the third radiobutton
        
        - annotation4 : an4              (unicode)       [create,query,edit]
            specifies the tooptip of the fourth radiobutton
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the group changes state. Note that this flag should not be
            used in conjunction with onCommand and offCommand. That is, one should either
            use changeCommand and test the state of a radio button from inside the callback,
            or use onCommand and offCommand as separate callbacks.
        
        - changeCommand1 : cc1           (script)        [create,edit]
        
        - changeCommand2 : cc2           (script)        [create,edit]
        
        - changeCommand3 : cc3           (script)        [create,edit]
        
        - changeCommand4 : cc4           (script)        [create,edit]
            Specify a changed state command for each respective radio button.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - data1 : da1                    (int)           [create,query,edit]
        
        - data2 : da2                    (int)           [create,query,edit]
        
        - data3 : da3                    (int)           [create,query,edit]
        
        - data4 : da4                    (int)           [create,query,edit]
            Internal data associated with each radio button.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the group.  By default, this flag is set to true and the radio
            button values may be changed by clicking on them.  If false then the radio
            buttons are 'read only' and can not be clicked on. The value of the radio button
            can always be changed with the sl/selectflags regardless of the state of the
            ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enable1 : en1                  (bool)          [create,query,edit]
        
        - enable2 : en2                  (bool)          [create,query,edit]
        
        - enable3 : en3                  (bool)          [create,query,edit]
        
        - enable4 : en4                  (bool)          [create,query,edit]
            Enable state of the individual radio buttons.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            When present on creation an optional text label will be built with the group.
            The string specifies the label text.
        
        - label1 : l1                    (unicode)       [create,query,edit]
        
        - label2 : l2                    (unicode)       [create,query,edit]
        
        - label3 : l3                    (unicode)       [create,query,edit]
        
        - label4 : l4                    (unicode)       [create,query,edit]
            Specify label strings for the respective radio buttons in the group.
        
        - labelAnnotation : la           (unicode)       [create,query,edit]
            when present on creation an optional text label will be built with the group .
            The string specifies the label tooltip
        
        - labelArray2 : la2              (unicode, unicode) [create,query,edit]
        
        - labelArray3 : la3              (unicode, unicode, unicode) [create,query,edit]
        
        - labelArray4 : la4              (unicode, unicode, unicode, unicode) [create,query,edit]
            Specify multiple labels in a single flag.  These flags are ignored if the number
            of radio buttons doesn't match.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - numberOfRadioButtons : nrb     (int)           [create]
            Number of radio buttons in the group (1 - 4).
        
        - offCommand : ofc               (script)        [create,edit]
            Command executed when any radio button turns off.
        
        - offCommand1 : of1              (script)        [create,edit]
        
        - offCommand2 : of2              (script)        [create,edit]
        
        - offCommand3 : of3              (script)        [create,edit]
        
        - offCommand4 : of4              (script)        [create,edit]
            Off command for each respective radio button.
        
        - onCommand : onc                (script)        [create,edit]
            Command executed when any radio button turns on.
        
        - onCommand1 : on1               (script)        [create,edit]
        
        - onCommand2 : on2               (script)        [create,edit]
        
        - onCommand3 : on3               (script)        [create,edit]
        
        - onCommand4 : on4               (script)        [create,edit]
            On command for each respective radio button.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - select : sl                    (int)           [create,query,edit]
            Selected radio button.  The argument is a 1 based integer.
        
        - shareCollection : scl          (unicode)       [create]
            Specify the radioButtonGrp that this radio group is to be associated with.  By
            default the radio group will be a separate collection.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - vertical : vr                  (bool)          [create,query]
            Whether the orientation of the radio buttons in this group are horizontal
            (default) or vertical.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.radioButtonGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class CheckBoxGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of a check box from inside the callback, or use onCommand and offCommand as separate callbacks.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def changeCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def changeCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def changeCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def changeCommand4(self, val='True', **kwargs):
        """
        Specify a changed state command for each respective check box.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEditable(self, **kwargs):
        """
        The edit state of the group.  By default, this flag is set to true and the check box values may be changed by clicking on them.  If false then the check boxes are 'read only' and can not be clicked on. The value of the check boxes can always be changed with the -v/valueflags regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnable1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnable2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnable3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnable4(self, **kwargs):
        """
        Enable state of the individual check boxes.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        When present on creation an optional text label will be built with the group.  The string specifes the label text.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabel1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabel2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabel3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabel4(self, **kwargs):
        """
        Specify label strings for the respective check boxes in the group.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabelArray2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabelArray3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getLabelArray4(self, **kwargs):
        """
        Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValue1(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValue2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValue3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValue4(self, **kwargs):
        """
        Values for the respective check boxes in the group.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValueArray2(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValueArray3(self, **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getValueArray4(self, **kwargs):
        """
        Specifies multiple values in a single flag.  These flags are ignored if the number of check boxes doesn't match.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getVertical(self, **kwargs):
        """
        Whether the orientation of the checkbox controls in this group are horizontal (default) or vertical.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def offCommand(self, val='True', **kwargs):
        """
        Command executed when any check box turns off.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def offCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def offCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def offCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def offCommand4(self, val='True', **kwargs):
        """
        Off command for each respective check box.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def onCommand(self, val='True', **kwargs):
        """
        Command executed when any check box turns on.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def onCommand1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def onCommand2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def onCommand3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def onCommand4(self, val='True', **kwargs):
        """
        On command for each respective check box.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEditable(self, val='True', **kwargs):
        """
        The edit state of the group.  By default, this flag is set to true and the check box values may be changed by clicking on them.  If false then the check boxes are 'read only' and can not be clicked on. The value of the check boxes can always be changed with the -v/valueflags regardless of the state of the -ed/editableflag.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnable1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnable2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnable3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnable4(self, val='True', **kwargs):
        """
        Enable state of the individual check boxes.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        When present on creation an optional text label will be built with the group.  The string specifes the label text.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabel1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabel2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabel3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabel4(self, val='True', **kwargs):
        """
        Specify label strings for the respective check boxes in the group.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabelArray2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabelArray3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setLabelArray4(self, val='True', **kwargs):
        """
        Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValue1(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValue2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValue3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValue4(self, val='True', **kwargs):
        """
        Values for the respective check boxes in the group.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValueArray2(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValueArray3(self, val='True', **kwargs):
        """
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setValueArray4(self, val='True', **kwargs):
        """
        Specifies multiple values in a single flag.  These flags are ignored if the number of check boxes doesn't match.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates from one to four check boxes in a single row. They can have an
        optional text label. TelfBaseGrpCmd.cpp
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when the group changes state. Note that this flag should not be
            used in conjunction with onCommand and offCommand. That is, one should either
            use changeCommand and test the state of a check box from inside the callback, or
            use onCommand and offCommand as separate callbacks.
        
        - changeCommand1 : cc1           (script)        [create,edit]
        
        - changeCommand2 : cc2           (script)        [create,edit]
        
        - changeCommand3 : cc3           (script)        [create,edit]
        
        - changeCommand4 : cc4           (script)        [create,edit]
            Specify a changed state command for each respective check box.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - editable : ed                  (bool)          [create,query,edit]
            The edit state of the group.  By default, this flag is set to true and the check
            box values may be changed by clicking on them.  If false then the check boxes
            are 'read only' and can not be clicked on. The value of the check boxes can
            always be changed with the -v/valueflags regardless of the state of the
            -ed/editableflag.
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enable1 : en1                  (bool)          [create,query,edit]
        
        - enable2 : en2                  (bool)          [create,query,edit]
        
        - enable3 : en3                  (bool)          [create,query,edit]
        
        - enable4 : en4                  (bool)          [create,query,edit]
            Enable state of the individual check boxes.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            When present on creation an optional text label will be built with the group.
            The string specifes the label text.
        
        - label1 : l1                    (unicode)       [create,query,edit]
        
        - label2 : l2                    (unicode)       [create,query,edit]
        
        - label3 : l3                    (unicode)       [create,query,edit]
        
        - label4 : l4                    (unicode)       [create,query,edit]
            Specify label strings for the respective check boxes in the group.
        
        - labelArray2 : la2              (unicode, unicode) [create,query,edit]
        
        - labelArray3 : la3              (unicode, unicode, unicode) [create,query,edit]
        
        - labelArray4 : la4              (unicode, unicode, unicode, unicode) [create,query,edit]
            Specify multiple labels in a single flag.  These flags are ignored if the number
            of radio buttons doesn't match.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfCheckBoxes : ncb       (int)           [create]
            Number of check boxes in the group (1 - 4).
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - offCommand : ofc               (script)        [create,edit]
            Command executed when any check box turns off.
        
        - offCommand1 : of1              (script)        [create,edit]
        
        - offCommand2 : of2              (script)        [create,edit]
        
        - offCommand3 : of3              (script)        [create,edit]
        
        - offCommand4 : of4              (script)        [create,edit]
            Off command for each respective check box.
        
        - onCommand : onc                (script)        [create,edit]
            Command executed when any check box turns on.
        
        - onCommand1 : on1               (script)        [create,edit]
        
        - onCommand2 : on2               (script)        [create,edit]
        
        - onCommand3 : on3               (script)        [create,edit]
        
        - onCommand4 : on4               (script)        [create,edit]
            On command for each respective check box.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value1 : v1                    (bool)          [create,query,edit]
        
        - value2 : v2                    (bool)          [create,query,edit]
        
        - value3 : v3                    (bool)          [create,query,edit]
        
        - value4 : v4                    (bool)          [create,query,edit]
            Values for the respective check boxes in the group.
        
        - valueArray2 : va2              (bool, bool)    [create,query,edit]
        
        - valueArray3 : va3              (bool, bool, bool) [create,query,edit]
        
        - valueArray4 : va4              (bool, bool, bool, bool) [create,query,edit]
            Specifies multiple values in a single flag.  These flags are ignored if the
            number of check boxes doesn't match.
        
        - vertical : vr                  (bool)          [create,query]
            Whether the orientation of the checkbox controls in this group are horizontal
            (default) or vertical.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.checkBoxGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class ScrollLayout(Layout):
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getBorderVisible(self, **kwargs):
        """
        Visibility of the border.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getChildArray(self, **kwargs):
        """
        Returns a string array of the names of the layout's immediate children.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getChildResizable(self, **kwargs):
        """
        Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidthflag.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getMinChildWidth(self, **kwargs):
        """
        A positive non-zero integer value indicating the minimum width the scroll layout's child.  This flag only has meaning when the -cr/childResizableflag is set to true.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getNumberOfChildren(self, **kwargs):
        """
        Returns in an int the number of immediate children of the layout.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getPanEnabled(self, **kwargs):
        """
        Set to true if you want to pan the scroll layout using ALT + MMB. On OSX, in one button and two button mode, you could use command+alt+LMB to pan it. The pan effect is disabled by default.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getScrollAreaHeight(self, **kwargs):
        """
        Return the height of the scroll area (in pixels).                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getScrollAreaValue(self, **kwargs):
        """
        Return the vertical and horizontal values of the scroll area (in pixels).                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getScrollAreaWidth(self, **kwargs):
        """
        Return the width of the scroll area (in pixels).                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def horizontalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the horizontal scroll bar.  Specify an integer value of pixels greater than or equal to 0. Other than setting the value to 0 to hide the scrollbar, this flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def resizeCommand(self, val='True', **kwargs):
        """
        The command invoked when the scroll layout is resized.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def scrollByPixel(self, val='True', **kwargs):
        """
        Scroll the client area in the direction of the string. The int specifies the number of pixels.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def scrollPage(self, val='True', **kwargs):
        """
        Scroll the client area in the direction of the string. Valid values are up, down, leftor right.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setBorderVisible(self, val='True', **kwargs):
        """
        Visibility of the border.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setPanEnabled(self, val='True', **kwargs):
        """
        Set to true if you want to pan the scroll layout using ALT + MMB. On OSX, in one button and two button mode, you could use command+alt+LMB to pan it. The pan effect is disabled by default.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    def verticalScrollBarThickness(self, val='True', **kwargs):
        """
        Thickness of the vertical scroll bar.  Specify an integer value of pixels greater than or equal to 0. This flag has no effect on Windows systems.                  
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        This command creates a scroll layout.  A scroll layout is useful for when you
        have a number of controls which cannot all be visible at a time.  This layout
        will display a horizontal and/or vertical scroll bar when necessary to bring
        into view the hidden controls. Since the scroll layout provides no real
        positioning of children you should use another control layout as the immediate
        child.
        
        Flags:
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - borderVisible : bv             (bool)          [create,query,edit]
            Visibility of the border.
        
        - childArray : ca                (bool)          [query]
            Returns a string array of the names of the layout's immediate children.
        
        - childResizable : cr            (bool)          [create,query]
            Set to true if you want the child of the control layout to be as wide as the
            scroll area.  You may also indicate a minimum width for the child using the
            -mcw/minChildWidthflag.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - horizontalScrollBarThickness : hst (int)           [create,edit]
            Thickness of the horizontal scroll bar.  Specify an integer value of pixels
            greater than or equal to 0. Other than setting the value to 0 to hide the
            scrollbar, this flag has no effect on Windows systems.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - minChildWidth : mcw            (int)           [create,query]
            A positive non-zero integer value indicating the minimum width the scroll
            layout's child.  This flag only has meaning when the -cr/childResizableflag is
            set to true.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfChildren : nch         (bool)          [query]
            Returns in an int the number of immediate children of the layout.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - panEnabled : pe                (bool)          [query,edit]
            Set to true if you want to pan the scroll layout using ALT + MMB. On OSX, in one
            button and two button mode, you could use command+alt+LMB to pan it. The pan
            effect is disabled by default.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - resizeCommand : rc             (script)        [create,edit]
            The command invoked when the scroll layout is resized.
        
        - scrollAreaHeight : sah         (bool)          [query]
            Return the height of the scroll area (in pixels).
        
        - scrollAreaValue : sav          (bool)          [query]
            Return the vertical and horizontal values of the scroll area (in pixels).
        
        - scrollAreaWidth : saw          (bool)          [query]
            Return the width of the scroll area (in pixels).
        
        - scrollByPixel : sbp            (unicode, int)  [edit]
            Scroll the client area in the direction of the string. The int specifies the
            number of pixels.
        
        - scrollPage : sp                (unicode)       [edit]
            Scroll the client area in the direction of the string. Valid values are up,
            down, leftor right.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - verticalScrollBarAlwaysVisible : vsb (bool)          [create]
            Set to true if you want to always have the vertical scroll bar visible.
        
        - verticalScrollBarThickness : vst (int)           [create,edit]
            Thickness of the vertical scroll bar.  Specify an integer value of pixels
            greater than or equal to 0. This flag has no effect on Windows systems.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.scrollLayout`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class FloatSliderGrp(Layout):
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def dragCommand(self, val='True', **kwargs):
        """
        Command string executed repeatedly during a drag of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getFieldMaxValue(self, **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getFieldMinValue(self, **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getFieldStep(self, **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation the group will have static text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getMaxValue(self, **kwargs):
        """
        Maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getMinValue(self, **kwargs):
        """
        Minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getSliderStep(self, **kwargs):
        """
        The slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getStep(self, **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def precision(self, val='True', **kwargs):
        """
        Number of digits to the right of the decimal.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setFieldMaxValue(self, val='True', **kwargs):
        """
        Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValueflag.  By default, it is equal to the -max/maxValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setFieldMinValue(self, val='True', **kwargs):
        """
        Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValueflag.  By default, it is equal to the -min/minValueflag.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setFieldStep(self, val='True', **kwargs):
        """
        Increment for the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation the group will have static text.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setMaxValue(self, val='True', **kwargs):
        """
        Maximum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setMinValue(self, val='True', **kwargs):
        """
        Minimum value for both the slider and the field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setSliderStep(self, val='True', **kwargs):
        """
        The slider step value represents the amount the value will increase or decrease when you click either side of the slider.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setStep(self, val='True', **kwargs):
        """
        Increment for both the slider and field.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Value of the group.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of controls containing a label text,
        an float field and a float slider. The text and field controls are optional.
        Editing or querying the field range values has no effect if the -f/fieldflag was
        not specified when the group was created. This group also allows you to enter
        values into the field outside of the slider range which is limited by the
        -min/minValueand -max/maxValueflags.  To do this, use the -fmn/fieldMinValueand
        -fmx/fieldMaxValueflags to specify a greater range of values. Note that the
        command will not allow you to specify a -fmn/fieldMinValuegreater than the
        -min/minValuevalue nor a -fmx/fieldMaxValueless than the -max/maxValuevalue. If
        you do supply a larger field range with the -fmn/fieldMinValueand
        -fmx/fieldMaxValueflags then you will notice that entering a value in the field
        that is outside of the slider range will result in extending the slider range as
        well.  For example, if you create a slider group with the following command:
        floatSliderGrp -min -10 -max 10 -fieldMinValue -100 -fieldMaxValue 100; Then you
        will be able to use the slider to select any value from -10 to 10. At the same
        time you will be able to enter into the field any value from -100 to 100.  If
        you enter a value, say 20, then the new slider range will grow such that this
        value is now accessible through the slider as well.  In fact, the new slider
        limit will become double of that what you entered.  Note that the slider limits
        will never grow beyond the field limits, in other words if you entered the value
        80 then the slider will be clipped to the field limit of 100 and not doubled to
        160.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command string executed when the value of the slider changes.  It will be
            executed only once after a drag of the slider.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dragCommand : dc               (script)        [create,edit]
            Command string executed repeatedly during a drag of the slider.
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label
            appearing after the slider.  Sets the string to be the text for the extra label.
        
        - field : f                      (bool)          [create]
            Indicates whether the group will have an editable float field present that
            reflects the value of the slider.
        
        - fieldMaxValue : fmx            (float)         [create,query,edit]
            Maximum value that may be entered in the field.  This value may be set to any
            value greater than the -max/maxValueflag.  By default, it is equal to the
            -max/maxValueflag.
        
        - fieldMinValue : fmn            (float)         [create,query,edit]
            Minimum value that may be entered in the field.  This value may be set to any
            value less than the -min/minValueflag.  By default, it is equal to the
            -min/minValueflag.
        
        - fieldStep : fs                 (float)         [create,query,edit]
            Increment for the field.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation the group will have static text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - maxValue : max                 (float)         [create,query,edit]
            Maximum value for both the slider and the field.
        
        - minValue : min                 (float)         [create,query,edit]
            Minimum value for both the slider and the field.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - precision : pre                (int)           [create,edit]
            Number of digits to the right of the decimal.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - sliderStep : ss                (float)         [create,query,edit]
            The slider step value represents the amount the value will increase or decrease
            when you click either side of the slider.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - step : s                       (float)         [create,query,edit]
            Increment for both the slider and field.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (float)         [create,query,edit]
            Value of the group.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.floatSliderGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class VectorFieldGrp(FloatFieldGrp):
    def getVector(self): ...
    def setVector(self, vec): ...
    @staticmethod
    def __new__(cls, name='None', create='False', *args, **kwargs): ...


class OptionMenuGrp(RowLayout):
    def __enter__(self):
        """
        # Want to set both the menu to the child |OptionMenu item, and the normal
        # parent to this...
        """
        ...
    def __exit__(self, type, value, traceback): ...
    def adjustableColumn(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def adjustableColumn2(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def adjustableColumn3(self, val='True', **kwargs):
        """
        Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def adjustableColumn4(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def adjustableColumn5(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def adjustableColumn6(self, val='True', **kwargs):
        """
        Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def changeCommand(self, val='True', **kwargs):
        """
        Command executed when a new item is selected.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign(self, val='True', **kwargs):
        """
        Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign2(self, val='True', **kwargs):
        """
        Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign3(self, val='True', **kwargs):
        """
        Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign4(self, val='True', **kwargs):
        """
        Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign5(self, val='True', **kwargs):
        """
        Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAlign6(self, val='True', **kwargs):
        """
        Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are left, right, and center.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach(self, val='True', **kwargs):
        """
        Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach2(self, val='True', **kwargs):
        """
        Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach3(self, val='True', **kwargs):
        """
        Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach4(self, val='True', **kwargs):
        """
        Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach5(self, val='True', **kwargs):
        """
        Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnAttach6(self, val='True', **kwargs):
        """
        Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are left, right, and both.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnOffset2(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnOffset3(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnOffset4(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnOffset5(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnOffset6(self, val='True', **kwargs):
        """
        This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth(self, val='True', **kwargs):
        """
        Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth1(self, val='True', **kwargs):
        """
        Sets the width of the first column. Ignored if there is not exactly one column.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth2(self, val='True', **kwargs):
        """
        Sets the column widths of both columns. Ignored if there are not exactly two columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth3(self, val='True', **kwargs):
        """
        Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth4(self, val='True', **kwargs):
        """
        Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth5(self, val='True', **kwargs):
        """
        Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def columnWidth6(self, val='True', **kwargs):
        """
        Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def dragCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form: global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods) The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def callbackName( dragControl, x, y, modifiers ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, x, y, modifiers.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(x)d %(y)d %(modifiers)d'
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def dropCallback(self, val='True', **kwargs):
        """
        Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form: global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type) The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form: def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ): The values of these arguments are the same as those for the MEL version above. The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys dragControl, dropControl, messages, x, y, type.  The dragControlvalue is a string and the other values are integers (eg the callback string could be print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getAnnotation(self, **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getBackgroundColor(self, **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getDocTag(self, **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getEnable(self, **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getEnableBackground(self, **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getEnableKeyboardFocus(self, **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getExtraLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be an extra label to the right of the option menu.  Sets the string to be the extra label text.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getFullPathName(self, **kwargs):
        """
        Return the full path name of the widget, which includes all the parents.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getHeight(self, **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getHighlightColor(self, **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getIsObscured(self, **kwargs):
        """
        Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getItemListLong(self, **kwargs):
        """
        Returns the long names of the items.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getItemListShort(self, **kwargs):
        """
        Returns the short names of the items.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getLabel(self, **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the option menu.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getManage(self, **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getNumberOfItems(self, **kwargs):
        """
        Returns the number of items.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getNumberOfPopupMenus(self, **kwargs):
        """
        Return the number of popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getPopupMenuArray(self, **kwargs):
        """
        Return the names of all the popup menus attached to this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getPreventOverride(self, **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getSelect(self, **kwargs):
        """
        Selects an item by index.  The first item is 1.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getValue(self, **kwargs):
        """
        Select an item by value.  Also, returns the text of the currently selected item.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getVisible(self, **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getVisibleChangeCommand(self, **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def getWidth(self, **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def menu(self): ...
    def noBackground(self, val='True', **kwargs):
        """
        Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def rowAttach(self, val='True', **kwargs):
        """
        Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setAnnotation(self, val='True', **kwargs):
        """
        Annotate the control with an extra string value.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setBackgroundColor(self, val='True', **kwargs):
        """
        The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setDocTag(self, val='True', **kwargs):
        """
        Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setEnable(self, val='True', **kwargs):
        """
        The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setEnableBackground(self, val='True', **kwargs):
        """
        Enables the background color of the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setEnableKeyboardFocus(self, val='True', **kwargs):
        """
        If enabled, the user can navigate to the control with the tab key and select values with the keyboard. If not, the user can only use the mouse. This flag would typically be used to turn off keyboard focus support from controls that get it by default, like Edit and List controls                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setExtraLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be an extra label to the right of the option menu.  Sets the string to be the extra label text.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setHeight(self, val='True', **kwargs):
        """
        The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setHighlightColor(self, val='True', **kwargs):
        """
        The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setLabel(self, val='True', **kwargs):
        """
        If present on creation this specifies that there will be a label to the left of the option menu.  Sets the string to be the label text.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setManage(self, val='True', **kwargs):
        """
        Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setPreventOverride(self, val='True', **kwargs):
        """
        If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setSelect(self, val='True', **kwargs):
        """
        Selects an item by index.  The first item is 1.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setValue(self, val='True', **kwargs):
        """
        Select an item by value.  Also, returns the text of the currently selected item.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setVisible(self, val='True', **kwargs):
        """
        The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setVisibleChangeCommand(self, val='True', **kwargs):
        """
        Command that gets executed when visible state of the control changes.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def setWidth(self, val='True', **kwargs):
        """
        The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.                  Flag can have multiple arguments, passed either as a tuple or a list.             
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    def statusBarMessage(self, val='True', **kwargs):
        """
        Extra string to display in the status bar when the mouse is over the control.                  
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    @staticmethod
    def __melcmd__(*args, **kwargs):
        """
        All of the group commands position their individual controls in columns starting
        at column 1.  The layout of each control (ie. column) can be customized using
        the -cw/columnWidth, -co/columnOffset, -cat/columnAttach, -cal/columnAlign, and
        -adj/adjustableColumnflags.  By default, columns are left aligned with no offset
        and are 100 pixels wide.  Only one column in any group can be adjustable. This
        command creates a pre-packaged collection of label text, option menu and an
        extra label.  Both the label and extra label are optional. Subsequent calls to
        the menuItem command will place them in the option menu.  When adding menu items
        to the option menu after the initialization step, use the name of the options
        menu itself. See the example below for more details. Note that commands attached
        to menu items will not get called. Use the -cc/changedCommandflag to be notified
        when the user changes the value of the option menu.
        
        Flags:
        - adjustableColumn : adj         (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the sizing of
            the layout.  The column value is a 1-based index. Passing 0 as argument turns
            off the previous adjustable column.
        
        - adjustableColumn2 : ad2        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly two columns.
        
        - adjustableColumn3 : ad3        (int)           [create,edit]
            Specifies that the column has an adjustable size that changes with the size of
            the parent layout. Ignored if there are not exactly three columns.
        
        - adjustableColumn4 : ad4        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly four columns.
        
        - adjustableColumn5 : ad5        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly five columns.
        
        - adjustableColumn6 : ad6        (int)           [create,edit]
            Specifies which column has an adjustable size that changes with the size of the
            parent layout. Ignored if there are not exactly six columns.
        
        - annotation : ann               (unicode)       [create,query,edit]
            Annotate the control with an extra string value.
        
        - backgroundColor : bgc          (float, float, float) [create,query,edit]
            The background color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0. When
            setting backgroundColor, the background is automatically enabled, unless
            enableBackground is also specified with a false value.
        
        - changeCommand : cc             (script)        [create,edit]
            Command executed when a new item is selected.
        
        - columnAlign : cal              (int, unicode)  [create,edit]
            Arguments are : column number, alignment type. Possible alignments are: left |
            right | center. Specifies alignment type for the specified column.
        
        - columnAlign2 : cl2             (unicode, unicode) [create,edit]
            Sets the text alignment of both columns.  Ignored if there are not exactly two
            columns. Valid values are left, right, and center.
        
        - columnAlign3 : cl3             (unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all three columns.  Ignored if there are not exactly
            three columns. Valid values are left, right, and center.
        
        - columnAlign4 : cl4             (unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all four columns.  Ignored if there are not exactly
            four columns. Valid values are left, right, and center.
        
        - columnAlign5 : cl5             (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all five columns.  Ignored if there are not exactly
            five columns. Valid values are left, right, and center.
        
        - columnAlign6 : cl6             (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the text alignment for all six columns.  Ignored if there are not exactly
            six columns. Valid values are left, right, and center.
        
        - columnAttach : cat             (int, unicode, int) [create,edit]
            Arguments are : column number, attachment type, and offset. Possible attachments
            are: left | right | both. Specifies column attachment types and offets.
        
        - columnAttach2 : ct2            (unicode, unicode) [create,edit]
            Sets the attachment type of both columns. Ignored if there are not exactly two
            columns. Valid values are left, right, and both.
        
        - columnAttach3 : ct3            (unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all three columns. Ignored if there are not exactly
            three columns. Valid values are left, right, and both.
        
        - columnAttach4 : ct4            (unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all four columns. Ignored if there are not exactly
            four columns. Valid values are left, right, and both.
        
        - columnAttach5 : ct5            (unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all five columns. Ignored if there are not exactly
            five columns. Valid values are left, right, and both.
        
        - columnAttach6 : ct6            (unicode, unicode, unicode, unicode, unicode, unicode) [create,edit]
            Sets the attachment type for all six columns. Ignored if there are not exactly
            six columns. Valid values are left, right, and both.
        
        - columnOffset2 : co2            (int, int)      [create,edit]
            This flag is used in conjunction with the -columnAttach2 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the two
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach2 flag.  Ignored if there are not exactly two columns.
        
        - columnOffset3 : co3            (int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach3 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the three
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach3 flag.  Ignored if there are not exactly three columns.
        
        - columnOffset4 : co4            (int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach4 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the four
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach4 flag.  Ignored if there are not exactly four columns.
        
        - columnOffset5 : co5            (int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach5 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the five
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach5 flag.  Ignored if there are not exactly five columns.
        
        - columnOffset6 : co6            (int, int, int, int, int, int) [create,edit]
            This flag is used in conjunction with the -columnAttach6 flag.  If that flag is
            not used then this flag will be ignored.  It sets the offset for the six
            columns.  The offsets applied are based on the attachments specified with the
            -columnAttach6 flag.  Ignored if there are not exactly six columns.
        
        - columnWidth : cw               (int, int)      [create,edit]
            Arguments are : column number, column width. Sets the width of the specified
            column where the first parameter specifies the column (1 based index) and the
            second parameter specifies the width.
        
        - columnWidth1 : cw1             (int)           [create,edit]
            Sets the width of the first column. Ignored if there is not exactly one column.
        
        - columnWidth2 : cw2             (int, int)      [create,edit]
            Sets the column widths of both columns. Ignored if there are not exactly two
            columns.
        
        - columnWidth3 : cw3             (int, int, int) [create,edit]
            Sets the column widths for all 3 columns. Ignored if there are not exactly 3
            columns.
        
        - columnWidth4 : cw4             (int, int, int, int) [create,edit]
            Sets the column widths for all 4 columns. Ignored if there are not exactly 4
            columns.
        
        - columnWidth5 : cw5             (int, int, int, int, int) [create,edit]
            Sets the column widths for all 5 columns. Ignored if there are not exactly 5
            columns.
        
        - columnWidth6 : cw6             (int, int, int, int, int, int) [create,edit]
            Sets the column widths for all 6 columns. Ignored if there are not exactly 6
            columns.
        
        - defineTemplate : dt            (unicode)       [create]
            Puts the command in a mode where any other flags and arguments are parsed and
            added to the command template specified in the argument. They will be used as
            default arguments in any subsequent invocations of the command when templateName
            is set as the current template.
        
        - docTag : dtg                   (unicode)       [create,query,edit]
            Add a documentation flag to the control.  The documentation flag has a directory
            structure. (e.g., -dt render/multiLister/createNode/material)
        
        - dragCallback : dgc             (script)        [create,edit]
            Adds a callback that is called when the middle mouse button is pressed.  The MEL
            version of the callback is of the form: global proc string[] callbackName(string
            $dragControl, int $x, int $y, int $mods) The proc returns a string array that is
            transferred to the drop site. By convention the first string in the array
            describes the user settable message type.  Controls that are application defined
            drag sources may ignore the callback. $mods allows testing for the key modifiers
            CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3
            == CTRL + SHIFT. In Python, it is similar, but there are two ways to specify the
            callback.  The recommended way is to pass a Python function object as the
            argument.  In that case, the Python callback should have the form: def
            callbackName( dragControl, x, y, modifiers ): The values of these arguments are
            the same as those for the MEL version above. The other way to specify the
            callback in Python is to specify a string to be executed.  In that case, the
            string will have the values substituted into it via the standard Python format
            operator.  The format values are passed in a dictionary with the keys
            dragControl, x, y, modifiers.  The dragControlvalue is a string and the other
            values are integers (eg the callback string could be print '%(dragControl)s
            %(x)d %(y)d %(modifiers)d'
        
        - dropCallback : dpc             (script)        [create,edit]
            Adds a callback that is called when a drag and drop operation is released above
            the drop site.  The MEL version of the callback is of the form: global proc
            callbackName(string $dragControl, string $dropControl, string $msgs[], int $x,
            int $y, int $type) The proc receives a string array that is transferred from the
            drag source. The first string in the msgs array describes the user defined
            message type. Controls that are application defined drop sites may ignore the
            callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link. In Python,
            it is similar, but there are two ways to specify the callback.  The recommended
            way is to pass a Python function object as the argument.  In that case, the
            Python callback should have the form: def pythonDropTest( dragControl,
            dropControl, messages, x, y, dragType ): The values of these arguments are the
            same as those for the MEL version above. The other way to specify the callback
            in Python is to specify a string to be executed.  In that case, the string will
            have the values substituted into it via the standard Python format operator.
            The format values are passed in a dictionary with the keys dragControl,
            dropControl, messages, x, y, type.  The dragControlvalue is a string and the
            other values are integers (eg the callback string could be print
            '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'
        
        - enable : en                    (bool)          [create,query,edit]
            The enable state of the control.  By default, this flag is set to true and the
            control is enabled.  Specify false and the control will appear dimmed or greyed-
            out indicating it is disabled.
        
        - enableBackground : ebg         (bool)          [create,query,edit]
            Enables the background color of the control.
        
        - enableKeyboardFocus : ekf      (bool)          [create,query,edit]
            If enabled, the user can navigate to the control with the tab key and select
            values with the keyboard. If not, the user can only use the mouse. This flag
            would typically be used to turn off keyboard focus support from controls that
            get it by default, like Edit and List controls
        
        - exists : ex                    (bool)          [create]
            Returns whether the specified object exists or not. Other flags are ignored.
        
        - extraLabel : el                (unicode)       [create,query,edit]
            If present on creation this specifies that there will be an extra label to the
            right of the option menu.  Sets the string to be the extra label text.
        
        - fullPathName : fpn             (bool)          [query]
            Return the full path name of the widget, which includes all the parents.
        
        - height : h                     (int)           [create,query,edit]
            The height of the control.  The control will attempt to be this size if it is
            not overruled by parent layout conditions.
        
        - highlightColor : hlc           (float, float, float) [create,query,edit]
            The highlight color of the control. The arguments correspond to the red, green,
            and blue color components. Each component ranges in value from 0.0 to 1.0.
        
        - isObscured : io                (bool)          [query]
            Return whether the control can actually be seen by the user. The control will be
            obscured if its state is invisible, if it is blocked (entirely or partially) by
            some other control, if it or a parent layout is unmanaged, or if the control's
            window is invisible or iconified.
        
        - itemListLong : ill             (bool)          [query]
            Returns the long names of the items.
        
        - itemListShort : ils            (bool)          [query]
            Returns the short names of the items.
        
        - label : l                      (unicode)       [create,query,edit]
            If present on creation this specifies that there will be a label to the left of
            the option menu.  Sets the string to be the label text.
        
        - manage : m                     (bool)          [create,query,edit]
            Manage state of the control.  An unmanaged control is not visible, nor does it
            take up any screen real estate.  All controls are created managed by default.
        
        - noBackground : nbg             (bool)          [create,edit]
            Clear/reset the control's background. Passing true means the background should
            not be drawn at all, false means the background should be drawn.  The state of
            this flag is inherited by children of this control.
        
        - numberOfItems : ni             (bool)          [query]
            Returns the number of items.
        
        - numberOfPopupMenus : npm       (bool)          [query]
            Return the number of popup menus attached to this control.
        
        - parent : p                     (unicode)       [create,query]
            The parent layout for this control.
        
        - popupMenuArray : pma           (bool)          [query]
            Return the names of all the popup menus attached to this control.
        
        - preventOverride : po           (bool)          [create,query,edit]
            If true, this flag prevents overriding the control's attribute via the control's
            right mouse button menu.
        
        - rowAttach : rat                (int, unicode, int) [create,edit]
            Arguments are : column, attachment type, offset. Possible attachments are: top |
            bottom | both. Specifies attachment types and offsets for the entire row.
        
        - select : sl                    (int)           [create,query,edit]
            Selects an item by index.  The first item is 1.
        
        - statusBarMessage : sbm         (unicode)       [create,edit]
            Extra string to display in the status bar when the mouse is over the control.
        
        - useTemplate : ut               (unicode)       [create]
            Forces the command to use a command template other than the current one.
        
        - value : v                      (unicode)       [create,query,edit]
            Select an item by value.  Also, returns the text of the currently selected item.
        
        - visible : vis                  (bool)          [create,query,edit]
            The visible state of the control.  A control is created visible by default.
            Note that a control's actual appearance is also dependent on the visible state
            of its parent layout(s).
        
        - visibleChangeCommand : vcc     (script)        [create,query,edit]
            Command that gets executed when visible state of the control changes.
        
        - width : w                      (int)           [create,query,edit]
            The width of the control.  The control will attempt to be this size if it is not
            overruled by parent layout conditions.                  Flag can have multiple
            arguments, passed either as a tuple or a list.
        
        
        Derived from mel command `maya.cmds.optionMenuGrp`
        """
        ...
    __melcmd_isinfo__ : bool
    
    __melcmdname__ : str
    
    __melui__ : str


class PathButtonGrp(TextFieldButtonGrp):
    def getPath(self): ...
    def setPath(self, path, **kwargs): ...
    @staticmethod
    def __new__(cls, name='None', create='False', *args, **kwargs): ...
    PROMPT_FUNCTION : str


class AutoLayout(FormLayout):
    """
    AutoLayout behaves exactly like `FormLayout`, but will call redistribute automatically
    at the end of a 'with' statement block
    """
    
    
    
    def __exit__(self, type, value, traceback): ...


class FolderButtonGrp(PathButtonGrp):
    PROMPT_FUNCTION : str




def toPyQtWindow(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PyQt
    """
    ...
def toPyQtMenuItem(mayaName):
    """
    Given the name of a May UI menuItem, return the corresponding QAction.
    If the object does not exist, returns None
    
    This only works for menu items. for Menus, use toQtControl or toQtObject
    
    .. note:: Requires PyQt
    """
    ...
def toPySideObject(mayaName):
    """
    Given the name of a Maya UI element of any type, return the corresponding QWidget or QAction.
    If the object does not exist, returns None
    
    When using this function you don't need to specify whether UI type is a control, layout,
    window, or menuItem, the first match -- in that order -- will be returned. If you have the full path to a UI object
    this should always be correct, however, if you only have the short name of the UI object,
    consider using one of the more specific variants: `toQtControl`, `toQtLayout`, `toQtWindow`, or `toQtMenuItem`.
    
    .. note:: Requires PySide
    """
    ...
def MenuItem(name='None', create='False', **kwargs): ...
def _addTypeNames(): ...
def toPySideMenuItem(mayaName):
    """
    Given the name of a Maya UI menuItem, return the corresponding QAction.
    If the object does not exist, returns None
    
    This only works for menu items. for Menus, use toQtControl or toQtObject
    
    .. note:: Requires PySide
    """
    ...
def toPySideWindow(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PySide
    """
    ...
def toPyQtLayout(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PyQt
    """
    ...
def toPySideLayout(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PySide
    """
    ...
def _resolveUIFunc(name): ...
def toPySideControl(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PySide
    """
    ...
def toPyQtObject(mayaName):
    """
    Given the name of a Maya UI element of any type, return the corresponding QWidget or QAction.
    If the object does not exist, returns None
    
    When using this function you don't need to specify whether UI type is a control, layout,
    window, or menuItem, the first match -- in that order -- will be returned. If you have the full path to a UI object
    this should always be correct, however, if you only have the short name of the UI object,
    consider using one of the more specific variants: `toQtControl`, `toQtLayout`, `toQtWindow`, or `toQtMenuItem`.
    
    .. note:: Requires PyQt
    """
    ...
def toPyQtControl(mayaName):
    """
    Given the name of a May UI control, return the corresponding QWidget.
    If the object does not exist, returns None
    
    .. note:: Requires PyQt
    """
    ...
def pysideWrapInstance(ptr, base='None'):
    """
    Utility to convert a point to a Qt Class and produce the same result
    as sip.wrapinstance using shiboken.wrapInstance.
    
    Note: This is modeled after nathanhorne.com/?p=486. The base arg isn't
    currently used, and defaults to QObject. The way that base arg was used
    seems like it would give a different result than the sip version. It would
    skip the checking for attribute and just use base as base, however the sip
    version will still return QMainWindow even if QObject is passed in.
    """
    ...
def objectTypeUI(name, **kwargs):
    """
    This command returns the type of UI element such as button, sliders, etc.
    
    Flags:
    - isType : i                     (unicode)       [create]
        Returns true|false if the object is of the specified type.
    
    - listAll : la                   (bool)          [create]
        Returns a list of all known UI commands and their respective types. Each entry
        contains three strings which are the command name, ui type and class name. Note
        that the class name is internal and is subject to change.
    
    - superClasses : sc              (bool)          [create]
        Returns a list of the names of all super classes for the given object. Note that
        all class names are internal and are subject to change.                  Flag
        can have multiple arguments, passed either as a tuple or a list.
    
    
    Derived from mel command `maya.cmds.objectTypeUI`
    """
    ...


_withParentStack : list
mayaTypeNameToPymelTypeName : dict
_uiTypesToCommands : dict
_logger : logging.Logger
pymelTypeNameToMayaTypeName : dict
_withParentMenuStack : list
qtBinding : str
pySideAvailable : bool
pyQtAvailable : bool

