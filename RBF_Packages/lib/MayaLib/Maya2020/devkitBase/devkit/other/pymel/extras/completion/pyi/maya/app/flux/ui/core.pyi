from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union
import maya.api.OpenMaya as nom
from . import singleton
import maya.app.flux.utils as futils
import maya
import PySide2.QtXml as qt
import PySide2.QtCore as QtCore
import maya.mel as mel
import time
import maya.OpenMaya as om
import PySide2.QtSvg as QtSvg
import maya.cmds as cmds
import maya.OpenMayaUI as omui
import threading
import json
import PySide2.QtXml as QtXml
import shiboken2 as shiboken
import PySide2.QtWidgets as QtWidgets
import os
import math
import PySide2.QtGui as QtGui


from copy import deepcopy
from PySide2.QtCore import Slot


if False:
    from typing import Dict, List, Tuple, Union, Optional

class ListButtonItem(QtWidgets.QListWidgetItem):
    def __init__(self, text, parent, index='None'): ...
    def addButton(self, icons, name, alignLeft='True', alignRight='False', highlightable='True'): ...
    def getButton(self, name): ...


class DraggableTreeWidget(QtWidgets.QTreeWidget):
    def __init__(self, parent='None'): ...
    def dragEnterEvent(self, event): ...
    def dragMoveEvent(self, event): ...
    def paintEvent(self, e): ...
    staticMetaObject : QtCore.QMetaObject


class QPainter(QtGui.QPainter):
    """
    # Qt Painter with antialiasing
    """
    
    
    
    def __init__(self, *args): ...


class ImageButton(QtWidgets.QWidget):
    def __init__(self, imageName, text="''", textPos="'bottom'", highlighted='False', parent='None'): ...
    def createBackground(self): ...
    def createButton(self): ...
    def createImage(self, imageName): ...
    def createRoundRectPixmap(self, color): ...
    def createTextLabel(self, text): ...
    def enterEvent(self, e): ...
    def fadeBackground(self): ...
    def isHighlighted(self): ...
    def leaveEvent(self, e): ...
    def leftMousePress(self): ...
    def mousePressEvent(self, e): ...
    def mouseReleaseEvent(self, e): ...
    def redrawPixmap(self): ...
    def setBackgroundColor(self, color): ...
    def setConstantBackground(self, hasConst): ...
    def setHighlighted(self, highlighted): ...
    def setImage(self, image): ...
    def setImageFromPixmap(self, pixmap): ...
    def setText(self, text): ...
    clicked : QtCore.Signal
    
    rightClicked : QtCore.Signal
    
    staticMetaObject : QtCore.QMetaObject


class DraggableListWidget(QtWidgets.QListWidget):
    def __init__(self, parent='None'): ...
    def dragEnterEvent(self, event): ...
    def dragMoveEvent(self, event): ...
    def paintEvent(self, e): ...
    def resizeEvent(self, e): ...
    staticMetaObject : QtCore.QMetaObject


class SingleNodeInputWidget(QtWidgets.QWidget):
    def __init__(self, acceptableNode="''", createCallback='None', acceptableFunc='None'): ...
    def acceptNode(self, name): ...
    def createTrianglePixmap(self): ...
    def currentNode(self): ...
    def dragEnterEvent(self, e): ...
    def dragLeaveEvent(self, e): ...
    def dragMoveEvent(self, e): ...
    def dropEvent(self, e): ...
    def getNodeType(self, node): ...
    def paintEvent(self, e): ...
    def selectorFinished(self, result): ...
    def setIcon(self, name): ...
    def setNode(self, node='None'): ...
    def showSelector(self): ...
    accepted : QtCore.Signal
    
    staticMetaObject : QtCore.QMetaObject


class HWidget(QtWidgets.QWidget):
    def __init__(self, *args, **kwargs): ...
    staticMetaObject : QtCore.QMetaObject


class VWidget(QtWidgets.QWidget):
    def __init__(self, *args, **kwargs): ...
    staticMetaObject : QtCore.QMetaObject


class FrameBar(QtWidgets.QWidget):
    def __init__(self, parent='None'): ...
    def paintEvent(self, e): ...
    staticMetaObject : QtCore.QMetaObject


class TextFieldWrapper(QtCore.QObject):
    def __init__(self, lineEdit): ...
    def setText(self, text): ...
    def text(self): ...
    staticMetaObject : QtCore.QMetaObject
    
    textEdited : QtCore.Signal


class ListButtonWidget(QtWidgets.QListWidget):
    """
    Data delegate must implement these methods:
        def dropEvent(self, event):
            pass
        def setupTreeMenu(self, treeMenu, position):
            pass
        def selectionChanged(self):
            pass
        def buttonPressed(self, index, buttonName):
            pass
        def doubleClick(self, index, buttonName):
            pass
        def itemTextChangedAtIndex(self, index, oldValue, newValue):
            return newName
    
    Default buttons:
        'dragIndicator', 'textField', 'toggleButton'
    """
    
    
    
    def __init__(self, parent='None'): ...
    def createNewLayer(self): ...
    def dragEnterEvent(self, event): ...
    def dragMoveEvent(self, event): ...
    def dropEvent(self, event): ...
    def getButtonPressed(self, item, x): ...
    def handleNormalSelection(self, index): ...
    def handleRightClickSelection(self, index): ...
    def itemTextChangedAtIndex(self, index, oldValue, newValue): ...
    def mouseDoubleClickEvent(self, event): ...
    def mouseMoveEvent(self, event): ...
    def mousePressEvent(self, event): ...
    def mouseReleaseEvent(self, event): ...
    def openTreeMenu(self, position): ...
    def paintEvent(self, e): ...
    def selectionChanged(self, item1, item2): ...
    def setLabelColor(self, color): ...
    staticMetaObject : QtCore.QMetaObject


class NodeSelector(QtWidgets.QDialog):
    def __init__(self, parent='None', acceptableNode="''", createCallback='None', acceptableFunc='None'): ...
    def focusOutEvent(self, event): ...
    def getIcon(self, name): ...
    def getNodeType(self, node): ...
    def rowClicked(self, row): ...
    clicked : QtCore.Signal
    
    staticMetaObject : QtCore.QMetaObject


class DropWindow(QtWidgets.QDialog):
    def __init__(self, label="''", title="''", accepts='None', ui='None', minWidth='450', **kw): ...
    def closeEvent(self, e): ...
    def eventFilter(self, widget, event): ...
    def flashRedIndicator(self): ...
    def updateCustomUI(self): ...
    @staticmethod
    def getDrop(label="''", callback='None', title="''", accepts='None', ui='None', minWidth='450'): ...
    dropped : QtCore.Signal
    
    instance : NoneType
    
    staticMetaObject : QtCore.QMetaObject


class FrameWidget(QtWidgets.QWidget):
    def __init__(self, text, expanded='False', parent='None'): ...
    def addWidget(self, widget): ...
    def createCollapsedIcon(self): ...
    def createExpandedIcon(self): ...
    def mousePressEvent(self, e): ...
    def switchMode(self): ...
    def updateArrow(self): ...
    def updateVisibility(self): ...
    staticMetaObject : QtCore.QMetaObject
    
    switched : QtCore.Signal


class ListButtonDelegate(QtWidgets.QItemDelegate):
    def __init__(self, parent='None'): ...
    def applyCellMargins(self, index): ...
    def createEditor(self, parent, option, index):
        """
        Creates the double-click editor for renaming render setup entries. The override entry is left aligned.
        """
        ...
    def paint(self, painter, option, index):
        """
        Main entry point of drawing the cell
        """
        ...
    def setEditorData(self, editor, index): ...
    def setModelData(self, editor, model, index):
        """
        Sets the model data which will trigger the node renaming script to run in Maya
        """
        ...
    def sizeHint(self, option, index): ...
    def updateEditorGeometry(self, editor, option, index):
        """
        Defines the rectangle of the QLineEdit used to edit the name of the node.
        """
        ...
    staticMetaObject : QtCore.QMetaObject


class NodeListWidget(QtWidgets.QListWidget):
    def __init__(self, parent='None'): ...
    def mouseMoveEvent(self, e): ...
    def mousePressEvent(self, e): ...
    clicked : QtCore.Signal
    
    staticMetaObject : QtCore.QMetaObject


class ListButtonBtn:
    def __init__(self, icons, name, highlightable='True'): ...


class DropWindowListWidget(DraggableListWidget):
    def __init__(self, *args, **wargs): ...
    def event(self, e): ...
    def onBackgroundPropertyChange(self): ...
    staticMetaObject : QtCore.QMetaObject




def applyMargins(margins, rect):
    """
    margins: list[4]
    rect: qt.QRect
    """
    ...
def wrapInstance(*args, **kwargs): ...
def getIconFromName(name): ...
def unwrapInstance(*args, **kwargs): ...
def setWidgetWindowColor(widget, color): ...
def getWidgetOfClassFromLayout(layout, widgetClassName): ...
def setHLayout(widget, spacing='0', *margins): ...
def getIconSuffix(): ...
def widgetWithLayout(typ="'V'", spacing='0', *margins): ...
def setVLayout(widget, spacing='0', *margins): ...
def createPixmap(imageName): ...
def setWidgetBackgroundColor(widget, color): ...
def dpiScale(value): ...
def pix(value='1'): ...
def getPixmap(name): ...
def highlightPixmap(pixmap): ...
def registerQtObject(obj): ...
def configureRightClickMenu(widget, callback): ...
def centerOnScreen(dialog): ...
def setWidgetBaseColor(widget, color): ...
def dpi(value='1'): ...
def scalePixmap(pixmap, width, height): ...
def loadFluxIcons(): ...
def configureDragDrop(widget): ...


maya_scale : float
fluxIcons : dict
qt_dpi : int
pixmap_cache : dict

