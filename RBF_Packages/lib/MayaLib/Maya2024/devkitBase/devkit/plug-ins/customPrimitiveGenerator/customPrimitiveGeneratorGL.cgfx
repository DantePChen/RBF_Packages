//**************************************************************************/
// Copyright (c) 2012 Autodesk, Inc.
// All rights reserved.
// 
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information written by Autodesk, Inc., and are
// protected by Federal copyright law. They may not be disclosed to third
// parties or copied or duplicated in any form, in whole or in part, without
// the prior written consent of Autodesk, Inc.
//**************************************************************************/

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection < string UIWidget = "None"; >;

// Vertex shader input structure.
struct VS_INPUT
{
    float3 Pos : ATTR7;		//customPositionStream
    float3 Norm : ATTR8;	//customNormalStream
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;
    float4 Color : COLOR0;
};

// Vertex shader.
VS_TO_PS VS_cgExample(VS_INPUT In)
{
    VS_TO_PS Out;
	
    // Transform the position from object space to clip space for output.
    Out.HPos = mul(gWVPXf, float4(In.Pos, 1.0f));

    Out.Color = float4(In.Norm, 1.0f);
	
    return Out;
}

float4 PS_cgExample(VS_TO_PS In) : COLOR0
{
    return In.Color;
}

// The main technique.
technique Main
{
    pass P0
    {
        VertexProgram = compile vp40 VS_cgExample();
        FillMode = WireFrame;
        FragmentProgram = compile fp40 PS_cgExample();
    }
}
